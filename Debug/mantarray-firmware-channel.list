
mantarray-firmware-channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000568c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800574c  0800574c  0001574c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057fc  080057fc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080057fc  080057fc  000157fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005804  08005804  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005804  08005804  00015804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005808  08005808  00015808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800580c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000070  0800587c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  0800587c  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000181b6  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a1d  00000000  00000000  0003824e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003bc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001208  00000000  00000000  0003d020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174ba  00000000  00000000  0003e228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001988d  00000000  00000000  000556e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085ec6  00000000  00000000  0006ef6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f4e35  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  000f4e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005734 	.word	0x08005734

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08005734 	.word	0x08005734

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a2:	003b      	movs	r3, r7
 80004a4:	0018      	movs	r0, r3
 80004a6:	2308      	movs	r3, #8
 80004a8:	001a      	movs	r2, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	f005 f8b8 	bl	8005620 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80004b0:	4b30      	ldr	r3, [pc, #192]	; (8000574 <MX_ADC_Init+0xd8>)
 80004b2:	4a31      	ldr	r2, [pc, #196]	; (8000578 <MX_ADC_Init+0xdc>)
 80004b4:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80004b6:	4b2f      	ldr	r3, [pc, #188]	; (8000574 <MX_ADC_Init+0xd8>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004bc:	4b2d      	ldr	r3, [pc, #180]	; (8000574 <MX_ADC_Init+0xd8>)
 80004be:	2280      	movs	r2, #128	; 0x80
 80004c0:	05d2      	lsls	r2, r2, #23
 80004c2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004c4:	4b2b      	ldr	r3, [pc, #172]	; (8000574 <MX_ADC_Init+0xd8>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004ca:	4b2a      	ldr	r3, [pc, #168]	; (8000574 <MX_ADC_Init+0xd8>)
 80004cc:	2200      	movs	r2, #0
 80004ce:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004d0:	4b28      	ldr	r3, [pc, #160]	; (8000574 <MX_ADC_Init+0xd8>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004d6:	4b27      	ldr	r3, [pc, #156]	; (8000574 <MX_ADC_Init+0xd8>)
 80004d8:	2200      	movs	r2, #0
 80004da:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80004dc:	4b25      	ldr	r3, [pc, #148]	; (8000574 <MX_ADC_Init+0xd8>)
 80004de:	2220      	movs	r2, #32
 80004e0:	2100      	movs	r1, #0
 80004e2:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80004e4:	4b23      	ldr	r3, [pc, #140]	; (8000574 <MX_ADC_Init+0xd8>)
 80004e6:	2221      	movs	r2, #33	; 0x21
 80004e8:	2100      	movs	r1, #0
 80004ea:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_ADC_Init+0xd8>)
 80004ee:	2200      	movs	r2, #0
 80004f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004f2:	4b20      	ldr	r3, [pc, #128]	; (8000574 <MX_ADC_Init+0xd8>)
 80004f4:	22c2      	movs	r2, #194	; 0xc2
 80004f6:	32ff      	adds	r2, #255	; 0xff
 80004f8:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004fa:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_ADC_Init+0xd8>)
 80004fc:	222c      	movs	r2, #44	; 0x2c
 80004fe:	2100      	movs	r1, #0
 8000500:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000502:	4b1c      	ldr	r3, [pc, #112]	; (8000574 <MX_ADC_Init+0xd8>)
 8000504:	2204      	movs	r2, #4
 8000506:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000508:	4b1a      	ldr	r3, [pc, #104]	; (8000574 <MX_ADC_Init+0xd8>)
 800050a:	2200      	movs	r2, #0
 800050c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800050e:	4b19      	ldr	r3, [pc, #100]	; (8000574 <MX_ADC_Init+0xd8>)
 8000510:	2200      	movs	r2, #0
 8000512:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <MX_ADC_Init+0xd8>)
 8000516:	2200      	movs	r2, #0
 8000518:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <MX_ADC_Init+0xd8>)
 800051c:	2200      	movs	r2, #0
 800051e:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <MX_ADC_Init+0xd8>)
 8000522:	0018      	movs	r0, r3
 8000524:	f000 fe34 	bl	8001190 <HAL_ADC_Init>
 8000528:	1e03      	subs	r3, r0, #0
 800052a:	d001      	beq.n	8000530 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 800052c:	f000 fac0 	bl	8000ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000530:	003b      	movs	r3, r7
 8000532:	4a12      	ldr	r2, [pc, #72]	; (800057c <MX_ADC_Init+0xe0>)
 8000534:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000536:	003b      	movs	r3, r7
 8000538:	2280      	movs	r2, #128	; 0x80
 800053a:	0152      	lsls	r2, r2, #5
 800053c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800053e:	003a      	movs	r2, r7
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <MX_ADC_Init+0xd8>)
 8000542:	0011      	movs	r1, r2
 8000544:	0018      	movs	r0, r3
 8000546:	f000 ff97 	bl	8001478 <HAL_ADC_ConfigChannel>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800054e:	f000 faaf 	bl	8000ab0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000552:	003b      	movs	r3, r7
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <MX_ADC_Init+0xe4>)
 8000556:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000558:	003a      	movs	r2, r7
 800055a:	4b06      	ldr	r3, [pc, #24]	; (8000574 <MX_ADC_Init+0xd8>)
 800055c:	0011      	movs	r1, r2
 800055e:	0018      	movs	r0, r3
 8000560:	f000 ff8a 	bl	8001478 <HAL_ADC_ConfigChannel>
 8000564:	1e03      	subs	r3, r0, #0
 8000566:	d001      	beq.n	800056c <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000568:	f000 faa2 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800056c:	46c0      	nop			; (mov r8, r8)
 800056e:	46bd      	mov	sp, r7
 8000570:	b002      	add	sp, #8
 8000572:	bd80      	pop	{r7, pc}
 8000574:	20000098 	.word	0x20000098
 8000578:	40012400 	.word	0x40012400
 800057c:	48040000 	.word	0x48040000
 8000580:	44020000 	.word	0x44020000

08000584 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC1)
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	4a06      	ldr	r2, [pc, #24]	; (80005ac <HAL_ADC_MspInit+0x28>)
 8000592:	4293      	cmp	r3, r2
 8000594:	d106      	bne.n	80005a4 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000596:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_ADC_MspInit+0x2c>)
 8000598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800059a:	4b05      	ldr	r3, [pc, #20]	; (80005b0 <HAL_ADC_MspInit+0x2c>)
 800059c:	2180      	movs	r1, #128	; 0x80
 800059e:	0089      	lsls	r1, r1, #2
 80005a0:	430a      	orrs	r2, r1
 80005a2:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80005a4:	46c0      	nop			; (mov r8, r8)
 80005a6:	46bd      	mov	sp, r7
 80005a8:	b002      	add	sp, #8
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	40012400 	.word	0x40012400
 80005b0:	40021000 	.word	0x40021000

080005b4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80005b4:	b590      	push	{r4, r7, lr}
 80005b6:	b089      	sub	sp, #36	; 0x24
 80005b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ba:	240c      	movs	r4, #12
 80005bc:	193b      	adds	r3, r7, r4
 80005be:	0018      	movs	r0, r3
 80005c0:	2314      	movs	r3, #20
 80005c2:	001a      	movs	r2, r3
 80005c4:	2100      	movs	r1, #0
 80005c6:	f005 f82b 	bl	8005620 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ca:	4b43      	ldr	r3, [pc, #268]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005ce:	4b42      	ldr	r3, [pc, #264]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005d0:	2101      	movs	r1, #1
 80005d2:	430a      	orrs	r2, r1
 80005d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80005d6:	4b40      	ldr	r3, [pc, #256]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005da:	2201      	movs	r2, #1
 80005dc:	4013      	ands	r3, r2
 80005de:	60bb      	str	r3, [r7, #8]
 80005e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005e2:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005e6:	4b3c      	ldr	r3, [pc, #240]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005e8:	2102      	movs	r1, #2
 80005ea:	430a      	orrs	r2, r1
 80005ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80005ee:	4b3a      	ldr	r3, [pc, #232]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80005f2:	2202      	movs	r2, #2
 80005f4:	4013      	ands	r3, r2
 80005f6:	607b      	str	r3, [r7, #4]
 80005f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005fa:	4b37      	ldr	r3, [pc, #220]	; (80006d8 <MX_GPIO_Init+0x124>)
 80005fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80005fe:	4b36      	ldr	r3, [pc, #216]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000600:	2104      	movs	r1, #4
 8000602:	430a      	orrs	r2, r1
 8000604:	62da      	str	r2, [r3, #44]	; 0x2c
 8000606:	4b34      	ldr	r3, [pc, #208]	; (80006d8 <MX_GPIO_Init+0x124>)
 8000608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800060a:	2204      	movs	r2, #4
 800060c:	4013      	ands	r3, r2
 800060e:	603b      	str	r3, [r7, #0]
 8000610:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_SET);
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	01db      	lsls	r3, r3, #7
 8000616:	4831      	ldr	r0, [pc, #196]	; (80006dc <MX_GPIO_Init+0x128>)
 8000618:	2201      	movs	r2, #1
 800061a:	0019      	movs	r1, r3
 800061c:	f001 fc1c 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 8000620:	2380      	movs	r3, #128	; 0x80
 8000622:	021b      	lsls	r3, r3, #8
 8000624:	482d      	ldr	r0, [pc, #180]	; (80006dc <MX_GPIO_Init+0x128>)
 8000626:	2200      	movs	r2, #0
 8000628:	0019      	movs	r1, r3
 800062a:	f001 fc15 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 800062e:	23e0      	movs	r3, #224	; 0xe0
 8000630:	0059      	lsls	r1, r3, #1
 8000632:	23a0      	movs	r3, #160	; 0xa0
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2200      	movs	r2, #0
 8000638:	0018      	movs	r0, r3
 800063a:	f001 fc0d 	bl	8001e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 800063e:	193b      	adds	r3, r7, r4
 8000640:	4a27      	ldr	r2, [pc, #156]	; (80006e0 <MX_GPIO_Init+0x12c>)
 8000642:	601a      	str	r2, [r3, #0]
                          |programmer_RX_line_Pin|BUS_CLK_Pin|mag_int_c_Pin|mag_int_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000644:	193b      	adds	r3, r7, r4
 8000646:	2200      	movs	r2, #0
 8000648:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	193b      	adds	r3, r7, r4
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	193a      	adds	r2, r7, r4
 8000652:	23a0      	movs	r3, #160	; 0xa0
 8000654:	05db      	lsls	r3, r3, #23
 8000656:	0011      	movs	r1, r2
 8000658:	0018      	movs	r0, r3
 800065a:	f001 fa87 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 800065e:	193b      	adds	r3, r7, r4
 8000660:	4a20      	ldr	r2, [pc, #128]	; (80006e4 <MX_GPIO_Init+0x130>)
 8000662:	601a      	str	r2, [r3, #0]
                          |mag_int_a_Pin|BUS1_Pin|BUS5_Pin|BUS0_Pin
                          |BUS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066a:	193b      	adds	r3, r7, r4
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000670:	193b      	adds	r3, r7, r4
 8000672:	4a1d      	ldr	r2, [pc, #116]	; (80006e8 <MX_GPIO_Init+0x134>)
 8000674:	0019      	movs	r1, r3
 8000676:	0010      	movs	r0, r2
 8000678:	f001 fa78 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 800067c:	0021      	movs	r1, r4
 800067e:	187b      	adds	r3, r7, r1
 8000680:	22c0      	movs	r2, #192	; 0xc0
 8000682:	0212      	lsls	r2, r2, #8
 8000684:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000686:	000c      	movs	r4, r1
 8000688:	193b      	adds	r3, r7, r4
 800068a:	2201      	movs	r2, #1
 800068c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068e:	193b      	adds	r3, r7, r4
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000694:	193b      	adds	r3, r7, r4
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800069a:	193b      	adds	r3, r7, r4
 800069c:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <MX_GPIO_Init+0x128>)
 800069e:	0019      	movs	r1, r3
 80006a0:	0010      	movs	r0, r2
 80006a2:	f001 fa63 	bl	8001b6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 80006a6:	0021      	movs	r1, r4
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	22e0      	movs	r2, #224	; 0xe0
 80006ac:	0052      	lsls	r2, r2, #1
 80006ae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b0:	187b      	adds	r3, r7, r1
 80006b2:	2201      	movs	r2, #1
 80006b4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b6:	187b      	adds	r3, r7, r1
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006bc:	187b      	adds	r3, r7, r1
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c2:	187a      	adds	r2, r7, r1
 80006c4:	23a0      	movs	r3, #160	; 0xa0
 80006c6:	05db      	lsls	r3, r3, #23
 80006c8:	0011      	movs	r1, r2
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fa4e 	bl	8001b6c <HAL_GPIO_Init>

}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b009      	add	sp, #36	; 0x24
 80006d6:	bd90      	pop	{r4, r7, pc}
 80006d8:	40021000 	.word	0x40021000
 80006dc:	50000800 	.word	0x50000800
 80006e0:	0000e619 	.word	0x0000e619
 80006e4:	000001ff 	.word	0x000001ff
 80006e8:	50000400 	.word	0x50000400

080006ec <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006f0:	4b1f      	ldr	r3, [pc, #124]	; (8000770 <MX_I2C2_Init+0x84>)
 80006f2:	4a20      	ldr	r2, [pc, #128]	; (8000774 <MX_I2C2_Init+0x88>)
 80006f4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100413;
 80006f6:	4b1e      	ldr	r3, [pc, #120]	; (8000770 <MX_I2C2_Init+0x84>)
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <MX_I2C2_Init+0x8c>)
 80006fa:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 200;
 80006fc:	4b1c      	ldr	r3, [pc, #112]	; (8000770 <MX_I2C2_Init+0x84>)
 80006fe:	22c8      	movs	r2, #200	; 0xc8
 8000700:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000702:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C2_Init+0x84>)
 8000704:	2201      	movs	r2, #1
 8000706:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000708:	4b19      	ldr	r3, [pc, #100]	; (8000770 <MX_I2C2_Init+0x84>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800070e:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_I2C2_Init+0x84>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000714:	4b16      	ldr	r3, [pc, #88]	; (8000770 <MX_I2C2_Init+0x84>)
 8000716:	2200      	movs	r2, #0
 8000718:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 800071a:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_I2C2_Init+0x84>)
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0312      	lsls	r2, r2, #12
 8000720:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000722:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2C2_Init+0x84>)
 8000724:	2280      	movs	r2, #128	; 0x80
 8000726:	0292      	lsls	r2, r2, #10
 8000728:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800072a:	4b11      	ldr	r3, [pc, #68]	; (8000770 <MX_I2C2_Init+0x84>)
 800072c:	0018      	movs	r0, r3
 800072e:	f001 fbb1 	bl	8001e94 <HAL_I2C_Init>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000736:	f000 f9bb 	bl	8000ab0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800073a:	4b0d      	ldr	r3, [pc, #52]	; (8000770 <MX_I2C2_Init+0x84>)
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f002 fdec 	bl	800331c <HAL_I2CEx_ConfigAnalogFilter>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 8000748:	f000 f9b2 	bl	8000ab0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800074c:	4b08      	ldr	r3, [pc, #32]	; (8000770 <MX_I2C2_Init+0x84>)
 800074e:	2100      	movs	r1, #0
 8000750:	0018      	movs	r0, r3
 8000752:	f002 fe2f 	bl	80033b4 <HAL_I2CEx_ConfigDigitalFilter>
 8000756:	1e03      	subs	r3, r0, #0
 8000758:	d001      	beq.n	800075e <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 800075a:	f000 f9a9 	bl	8000ab0 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800075e:	2380      	movs	r3, #128	; 0x80
 8000760:	019b      	lsls	r3, r3, #6
 8000762:	0018      	movs	r0, r3
 8000764:	f002 fe72 	bl	800344c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}
 800076e:	46c0      	nop			; (mov r8, r8)
 8000770:	200000f4 	.word	0x200000f4
 8000774:	40005800 	.word	0x40005800
 8000778:	00100413 	.word	0x00100413

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b590      	push	{r4, r7, lr}
 800077e:	b089      	sub	sp, #36	; 0x24
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	240c      	movs	r4, #12
 8000786:	193b      	adds	r3, r7, r4
 8000788:	0018      	movs	r0, r3
 800078a:	2314      	movs	r3, #20
 800078c:	001a      	movs	r2, r3
 800078e:	2100      	movs	r1, #0
 8000790:	f004 ff46 	bl	8005620 <memset>
  if(i2cHandle->Instance==I2C2)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a1c      	ldr	r2, [pc, #112]	; (800080c <HAL_I2C_MspInit+0x90>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d131      	bne.n	8000802 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <HAL_I2C_MspInit+0x94>)
 80007a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <HAL_I2C_MspInit+0x94>)
 80007a4:	2102      	movs	r1, #2
 80007a6:	430a      	orrs	r2, r1
 80007a8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007aa:	4b19      	ldr	r3, [pc, #100]	; (8000810 <HAL_I2C_MspInit+0x94>)
 80007ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ae:	2202      	movs	r2, #2
 80007b0:	4013      	ands	r3, r2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80007b6:	193b      	adds	r3, r7, r4
 80007b8:	22c0      	movs	r2, #192	; 0xc0
 80007ba:	0112      	lsls	r2, r2, #4
 80007bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007be:	0021      	movs	r1, r4
 80007c0:	187b      	adds	r3, r7, r1
 80007c2:	2212      	movs	r2, #18
 80007c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007c6:	187b      	adds	r3, r7, r1
 80007c8:	2201      	movs	r2, #1
 80007ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007cc:	187b      	adds	r3, r7, r1
 80007ce:	2203      	movs	r2, #3
 80007d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80007d2:	187b      	adds	r3, r7, r1
 80007d4:	2206      	movs	r2, #6
 80007d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	187b      	adds	r3, r7, r1
 80007da:	4a0e      	ldr	r2, [pc, #56]	; (8000814 <HAL_I2C_MspInit+0x98>)
 80007dc:	0019      	movs	r1, r3
 80007de:	0010      	movs	r0, r2
 80007e0:	f001 f9c4 	bl	8001b6c <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80007e4:	4b0a      	ldr	r3, [pc, #40]	; (8000810 <HAL_I2C_MspInit+0x94>)
 80007e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007e8:	4b09      	ldr	r3, [pc, #36]	; (8000810 <HAL_I2C_MspInit+0x94>)
 80007ea:	2180      	movs	r1, #128	; 0x80
 80007ec:	03c9      	lsls	r1, r1, #15
 80007ee:	430a      	orrs	r2, r1
 80007f0:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2100      	movs	r1, #0
 80007f6:	2018      	movs	r0, #24
 80007f8:	f000 ff90 	bl	800171c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80007fc:	2018      	movs	r0, #24
 80007fe:	f000 ffa2 	bl	8001746 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	46bd      	mov	sp, r7
 8000806:	b009      	add	sp, #36	; 0x24
 8000808:	bd90      	pop	{r4, r7, pc}
 800080a:	46c0      	nop			; (mov r8, r8)
 800080c:	40005800 	.word	0x40005800
 8000810:	40021000 	.word	0x40021000
 8000814:	50000400 	.word	0x50000400

08000818 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b084      	sub	sp, #16
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800081e:	f000 fc23 	bl	8001068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000822:	f000 f8cf 	bl	80009c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000826:	f7ff fec5 	bl	80005b4 <MX_GPIO_Init>
  MX_I2C2_Init();
 800082a:	f7ff ff5f 	bl	80006ec <MX_I2C2_Init>
  MX_SPI1_Init();
 800082e:	f000 f945 	bl	8000abc <MX_SPI1_Init>
  MX_ADC_Init();
 8000832:	f7ff fe33 	bl	800049c <MX_ADC_Init>
  MX_USART2_UART_Init();
 8000836:	f000 fb75 	bl	8000f24 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 800083a:	f000 fa23 	bl	8000c84 <MX_TIM6_Init>
  MX_TIM21_Init();
 800083e:	f000 fa5d 	bl	8000cfc <MX_TIM21_Init>
  MX_TIM22_Init();
 8000842:	f000 fab9 	bl	8000db8 <MX_TIM22_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000846:	23a0      	movs	r3, #160	; 0xa0
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	2201      	movs	r2, #1
 800084c:	2140      	movs	r1, #64	; 0x40
 800084e:	0018      	movs	r0, r3
 8000850:	f001 fb02 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000854:	23a0      	movs	r3, #160	; 0xa0
 8000856:	05db      	lsls	r3, r3, #23
 8000858:	2201      	movs	r2, #1
 800085a:	2180      	movs	r1, #128	; 0x80
 800085c:	0018      	movs	r0, r3
 800085e:	f001 fafb 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000862:	2380      	movs	r3, #128	; 0x80
 8000864:	0059      	lsls	r1, r3, #1
 8000866:	23a0      	movs	r3, #160	; 0xa0
 8000868:	05db      	lsls	r3, r3, #23
 800086a:	2201      	movs	r2, #1
 800086c:	0018      	movs	r0, r3
 800086e:	f001 faf3 	bl	8001e58 <HAL_GPIO_WritePin>


  for(int j=0;j<1;j++)
 8000872:	2300      	movs	r3, #0
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	e044      	b.n	8000902 <main+0xea>
  {
	  for(int i=0;i<3;i++)
 8000878:	2300      	movs	r3, #0
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	e016      	b.n	80008ac <main+0x94>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800087e:	23a0      	movs	r3, #160	; 0xa0
 8000880:	05db      	lsls	r3, r3, #23
 8000882:	2200      	movs	r2, #0
 8000884:	2180      	movs	r1, #128	; 0x80
 8000886:	0018      	movs	r0, r3
 8000888:	f001 fae6 	bl	8001e58 <HAL_GPIO_WritePin>
		  HAL_Delay(3);
 800088c:	2003      	movs	r0, #3
 800088e:	f000 fc5b 	bl	8001148 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000892:	23a0      	movs	r3, #160	; 0xa0
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2201      	movs	r2, #1
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0018      	movs	r0, r3
 800089c:	f001 fadc 	bl	8001e58 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80008a0:	2005      	movs	r0, #5
 80008a2:	f000 fc51 	bl	8001148 <HAL_Delay>
	  for(int i=0;i<3;i++)
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	3301      	adds	r3, #1
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	dde5      	ble.n	800087e <main+0x66>
	  }
	  HAL_Delay(10);
 80008b2:	200a      	movs	r0, #10
 80008b4:	f000 fc48 	bl	8001148 <HAL_Delay>

	  for(int i=0;i<3;i++)
 80008b8:	2300      	movs	r3, #0
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	e018      	b.n	80008f0 <main+0xd8>
	  {
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008be:	2380      	movs	r3, #128	; 0x80
 80008c0:	0059      	lsls	r1, r3, #1
 80008c2:	23a0      	movs	r3, #160	; 0xa0
 80008c4:	05db      	lsls	r3, r3, #23
 80008c6:	2200      	movs	r2, #0
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fac5 	bl	8001e58 <HAL_GPIO_WritePin>
		  HAL_Delay(3);
 80008ce:	2003      	movs	r0, #3
 80008d0:	f000 fc3a 	bl	8001148 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008d4:	2380      	movs	r3, #128	; 0x80
 80008d6:	0059      	lsls	r1, r3, #1
 80008d8:	23a0      	movs	r3, #160	; 0xa0
 80008da:	05db      	lsls	r3, r3, #23
 80008dc:	2201      	movs	r2, #1
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 faba 	bl	8001e58 <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 80008e4:	2005      	movs	r0, #5
 80008e6:	f000 fc2f 	bl	8001148 <HAL_Delay>
	  for(int i=0;i<3;i++)
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3301      	adds	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	dde3      	ble.n	80008be <main+0xa6>
	  }
	  HAL_Delay(10);
 80008f6:	200a      	movs	r0, #10
 80008f8:	f000 fc26 	bl	8001148 <HAL_Delay>
  for(int j=0;j<1;j++)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	3301      	adds	r3, #1
 8000900:	60fb      	str	r3, [r7, #12]
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	2b00      	cmp	r3, #0
 8000906:	ddb7      	ble.n	8000878 <main+0x60>
  }

  for(int i=0;i<3;i++)
 8000908:	2300      	movs	r3, #0
 800090a:	603b      	str	r3, [r7, #0]
 800090c:	e016      	b.n	800093c <main+0x124>
  {
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800090e:	23a0      	movs	r3, #160	; 0xa0
 8000910:	05db      	lsls	r3, r3, #23
 8000912:	2200      	movs	r2, #0
 8000914:	2140      	movs	r1, #64	; 0x40
 8000916:	0018      	movs	r0, r3
 8000918:	f001 fa9e 	bl	8001e58 <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 800091c:	2003      	movs	r0, #3
 800091e:	f000 fc13 	bl	8001148 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000922:	23a0      	movs	r3, #160	; 0xa0
 8000924:	05db      	lsls	r3, r3, #23
 8000926:	2201      	movs	r2, #1
 8000928:	2140      	movs	r1, #64	; 0x40
 800092a:	0018      	movs	r0, r3
 800092c:	f001 fa94 	bl	8001e58 <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 8000930:	2005      	movs	r0, #5
 8000932:	f000 fc09 	bl	8001148 <HAL_Delay>
  for(int i=0;i<3;i++)
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	3301      	adds	r3, #1
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	2b02      	cmp	r3, #2
 8000940:	dde5      	ble.n	800090e <main+0xf6>
  }
  HAL_Delay(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f000 fc00 	bl	8001148 <HAL_Delay>

  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000948:	23a0      	movs	r3, #160	; 0xa0
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2200      	movs	r2, #0
 800094e:	2140      	movs	r1, #64	; 0x40
 8000950:	0018      	movs	r0, r3
 8000952:	f001 fa81 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	2200      	movs	r2, #0
 800095c:	2180      	movs	r1, #128	; 0x80
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fa7a 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000964:	2380      	movs	r3, #128	; 0x80
 8000966:	0059      	lsls	r1, r3, #1
 8000968:	23a0      	movs	r3, #160	; 0xa0
 800096a:	05db      	lsls	r3, r3, #23
 800096c:	2200      	movs	r2, #0
 800096e:	0018      	movs	r0, r3
 8000970:	f001 fa72 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_Delay(20);
 8000974:	2014      	movs	r0, #20
 8000976:	f000 fbe7 	bl	8001148 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800097a:	23a0      	movs	r3, #160	; 0xa0
 800097c:	05db      	lsls	r3, r3, #23
 800097e:	2201      	movs	r2, #1
 8000980:	2140      	movs	r1, #64	; 0x40
 8000982:	0018      	movs	r0, r3
 8000984:	f001 fa68 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000988:	23a0      	movs	r3, #160	; 0xa0
 800098a:	05db      	lsls	r3, r3, #23
 800098c:	2201      	movs	r2, #1
 800098e:	2180      	movs	r1, #128	; 0x80
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fa61 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000996:	2380      	movs	r3, #128	; 0x80
 8000998:	0059      	lsls	r1, r3, #1
 800099a:	23a0      	movs	r3, #160	; 0xa0
 800099c:	05db      	lsls	r3, r3, #23
 800099e:	2201      	movs	r2, #1
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 fa59 	bl	8001e58 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80009a6:	200a      	movs	r0, #10
 80009a8:	f000 fbce 	bl	8001148 <HAL_Delay>

  module_system_init(&my_sys);
 80009ac:	4b04      	ldr	r3, [pc, #16]	; (80009c0 <main+0x1a8>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f004 fcfe 	bl	80053b0 <module_system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine(&my_sys);
 80009b4:	4b02      	ldr	r3, [pc, #8]	; (80009c0 <main+0x1a8>)
 80009b6:	0018      	movs	r0, r3
 80009b8:	f004 fd4e 	bl	8005458 <state_machine>
 80009bc:	e7fa      	b.n	80009b4 <main+0x19c>
 80009be:	46c0      	nop			; (mov r8, r8)
 80009c0:	20000140 	.word	0x20000140

080009c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009c4:	b590      	push	{r4, r7, lr}
 80009c6:	b09d      	sub	sp, #116	; 0x74
 80009c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ca:	2438      	movs	r4, #56	; 0x38
 80009cc:	193b      	adds	r3, r7, r4
 80009ce:	0018      	movs	r0, r3
 80009d0:	2338      	movs	r3, #56	; 0x38
 80009d2:	001a      	movs	r2, r3
 80009d4:	2100      	movs	r1, #0
 80009d6:	f004 fe23 	bl	8005620 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009da:	2324      	movs	r3, #36	; 0x24
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	0018      	movs	r0, r3
 80009e0:	2314      	movs	r3, #20
 80009e2:	001a      	movs	r2, r3
 80009e4:	2100      	movs	r1, #0
 80009e6:	f004 fe1b 	bl	8005620 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ea:	1d3b      	adds	r3, r7, #4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2320      	movs	r3, #32
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f004 fe14 	bl	8005620 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009f8:	4b2b      	ldr	r3, [pc, #172]	; (8000aa8 <SystemClock_Config+0xe4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a2b      	ldr	r2, [pc, #172]	; (8000aac <SystemClock_Config+0xe8>)
 80009fe:	401a      	ands	r2, r3
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemClock_Config+0xe4>)
 8000a02:	2180      	movs	r1, #128	; 0x80
 8000a04:	0109      	lsls	r1, r1, #4
 8000a06:	430a      	orrs	r2, r1
 8000a08:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000a0a:	0021      	movs	r1, r4
 8000a0c:	187b      	adds	r3, r7, r1
 8000a0e:	2222      	movs	r2, #34	; 0x22
 8000a10:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2201      	movs	r2, #1
 8000a16:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2210      	movs	r2, #16
 8000a1c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2201      	movs	r2, #1
 8000a22:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	2202      	movs	r2, #2
 8000a28:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a2a:	187b      	adds	r3, r7, r1
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000a30:	187b      	adds	r3, r7, r1
 8000a32:	2280      	movs	r2, #128	; 0x80
 8000a34:	02d2      	lsls	r2, r2, #11
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	2280      	movs	r2, #128	; 0x80
 8000a3c:	03d2      	lsls	r2, r2, #15
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	0018      	movs	r0, r3
 8000a44:	f002 fd1a 	bl	800347c <HAL_RCC_OscConfig>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000a4c:	f000 f830 	bl	8000ab0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a50:	2124      	movs	r1, #36	; 0x24
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	220f      	movs	r2, #15
 8000a56:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2203      	movs	r2, #3
 8000a5c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a6a:	187b      	adds	r3, r7, r1
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a70:	187b      	adds	r3, r7, r1
 8000a72:	2101      	movs	r1, #1
 8000a74:	0018      	movs	r0, r3
 8000a76:	f003 f8c5 	bl	8003c04 <HAL_RCC_ClockConfig>
 8000a7a:	1e03      	subs	r3, r0, #0
 8000a7c:	d001      	beq.n	8000a82 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000a7e:	f000 f817 	bl	8000ab0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	2202      	movs	r2, #2
 8000a86:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000a88:	1d3b      	adds	r3, r7, #4
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	0018      	movs	r0, r3
 8000a92:	f003 fadb 	bl	800404c <HAL_RCCEx_PeriphCLKConfig>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0xda>
  {
    Error_Handler();
 8000a9a:	f000 f809 	bl	8000ab0 <Error_Handler>
  }
}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	b01d      	add	sp, #116	; 0x74
 8000aa4:	bd90      	pop	{r4, r7, pc}
 8000aa6:	46c0      	nop			; (mov r8, r8)
 8000aa8:	40007000 	.word	0x40007000
 8000aac:	ffffe7ff 	.word	0xffffe7ff

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000ac0:	4b18      	ldr	r3, [pc, #96]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac2:	4a19      	ldr	r2, [pc, #100]	; (8000b28 <MX_SPI1_Init+0x6c>)
 8000ac4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ac6:	4b17      	ldr	r3, [pc, #92]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ac8:	2282      	movs	r2, #130	; 0x82
 8000aca:	0052      	lsls	r2, r2, #1
 8000acc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ad4:	4b13      	ldr	r3, [pc, #76]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000adc:	2202      	movs	r2, #2
 8000ade:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000ae0:	4b10      	ldr	r3, [pc, #64]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ae2:	2201      	movs	r2, #1
 8000ae4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ae6:	4b0f      	ldr	r3, [pc, #60]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000ae8:	2280      	movs	r2, #128	; 0x80
 8000aea:	0092      	lsls	r2, r2, #2
 8000aec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000aee:	4b0d      	ldr	r3, [pc, #52]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000af0:	2210      	movs	r2, #16
 8000af2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000af4:	4b0b      	ldr	r3, [pc, #44]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000afa:	4b0a      	ldr	r3, [pc, #40]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000b06:	4b07      	ldr	r3, [pc, #28]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <MX_SPI1_Init+0x68>)
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f003 fbe2 	bl	80042d8 <HAL_SPI_Init>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d001      	beq.n	8000b1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b18:	f7ff ffca 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b1c:	46c0      	nop			; (mov r8, r8)
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	46c0      	nop			; (mov r8, r8)
 8000b24:	200001c4 	.word	0x200001c4
 8000b28:	40013000 	.word	0x40013000

08000b2c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	240c      	movs	r4, #12
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	0018      	movs	r0, r3
 8000b3a:	2314      	movs	r3, #20
 8000b3c:	001a      	movs	r2, r3
 8000b3e:	2100      	movs	r1, #0
 8000b40:	f004 fd6e 	bl	8005620 <memset>
  if(spiHandle->Instance==SPI1)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a18      	ldr	r2, [pc, #96]	; (8000bac <HAL_SPI_MspInit+0x80>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d12a      	bne.n	8000ba4 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b4e:	4b18      	ldr	r3, [pc, #96]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b54:	2180      	movs	r1, #128	; 0x80
 8000b56:	0149      	lsls	r1, r1, #5
 8000b58:	430a      	orrs	r2, r1
 8000b5a:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b5c:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b13      	ldr	r3, [pc, #76]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b62:	2101      	movs	r1, #1
 8000b64:	430a      	orrs	r2, r1
 8000b66:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <HAL_SPI_MspInit+0x84>)
 8000b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60bb      	str	r3, [r7, #8]
 8000b72:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 8000b74:	193b      	adds	r3, r7, r4
 8000b76:	22c1      	movs	r2, #193	; 0xc1
 8000b78:	0152      	lsls	r2, r2, #5
 8000b7a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	0021      	movs	r1, r4
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2202      	movs	r2, #2
 8000b82:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	187b      	adds	r3, r7, r1
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	187b      	adds	r3, r7, r1
 8000b8c:	2203      	movs	r2, #3
 8000b8e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000b90:	187b      	adds	r3, r7, r1
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b96:	187a      	adds	r2, r7, r1
 8000b98:	23a0      	movs	r3, #160	; 0xa0
 8000b9a:	05db      	lsls	r3, r3, #23
 8000b9c:	0011      	movs	r1, r2
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f000 ffe4 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000ba4:	46c0      	nop			; (mov r8, r8)
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b009      	add	sp, #36	; 0x24
 8000baa:	bd90      	pop	{r4, r7, pc}
 8000bac:	40013000 	.word	0x40013000
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	4b07      	ldr	r3, [pc, #28]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc4:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bc6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_MspInit+0x24>)
 8000bca:	2180      	movs	r1, #128	; 0x80
 8000bcc:	0549      	lsls	r1, r1, #21
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	46c0      	nop			; (mov r8, r8)
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000be0:	e7fe      	b.n	8000be0 <NMI_Handler+0x4>

08000be2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <HardFault_Handler+0x4>

08000be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000bec:	46c0      	nop			; (mov r8, r8)
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c00:	f000 fa86 	bl	8001110 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c14:	4a14      	ldr	r2, [pc, #80]	; (8000c68 <_sbrk+0x5c>)
 8000c16:	4b15      	ldr	r3, [pc, #84]	; (8000c6c <_sbrk+0x60>)
 8000c18:	1ad3      	subs	r3, r2, r3
 8000c1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c20:	4b13      	ldr	r3, [pc, #76]	; (8000c70 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d102      	bne.n	8000c2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <_sbrk+0x64>)
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <_sbrk+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c2e:	4b10      	ldr	r3, [pc, #64]	; (8000c70 <_sbrk+0x64>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	18d3      	adds	r3, r2, r3
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	429a      	cmp	r2, r3
 8000c3a:	d207      	bcs.n	8000c4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c3c:	f004 fcbc 	bl	80055b8 <__errno>
 8000c40:	0003      	movs	r3, r0
 8000c42:	220c      	movs	r2, #12
 8000c44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c46:	2301      	movs	r3, #1
 8000c48:	425b      	negs	r3, r3
 8000c4a:	e009      	b.n	8000c60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <_sbrk+0x64>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c52:	4b07      	ldr	r3, [pc, #28]	; (8000c70 <_sbrk+0x64>)
 8000c54:	681a      	ldr	r2, [r3, #0]
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	18d2      	adds	r2, r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <_sbrk+0x64>)
 8000c5c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000c5e:	68fb      	ldr	r3, [r7, #12]
}
 8000c60:	0018      	movs	r0, r3
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b006      	add	sp, #24
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	20002000 	.word	0x20002000
 8000c6c:	00000400 	.word	0x00000400
 8000c70:	2000008c 	.word	0x2000008c
 8000c74:	20000390 	.word	0x20000390

08000c78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
	...

08000c84 <MX_TIM6_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c8a:	003b      	movs	r3, r7
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	2308      	movs	r3, #8
 8000c90:	001a      	movs	r2, r3
 8000c92:	2100      	movs	r1, #0
 8000c94:	f004 fcc4 	bl	8005620 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000c98:	4b15      	ldr	r3, [pc, #84]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000c9a:	4a16      	ldr	r2, [pc, #88]	; (8000cf4 <MX_TIM6_Init+0x70>)
 8000c9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 8000c9e:	4b14      	ldr	r3, [pc, #80]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000ca0:	221f      	movs	r2, #31
 8000ca2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ca4:	4b12      	ldr	r3, [pc, #72]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8000caa:	4b11      	ldr	r3, [pc, #68]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000cac:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <MX_TIM6_Init+0x74>)
 8000cae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000cb2:	2280      	movs	r2, #128	; 0x80
 8000cb4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000cb6:	4b0e      	ldr	r3, [pc, #56]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000cb8:	0018      	movs	r0, r3
 8000cba:	f003 fba1 	bl	8004400 <HAL_TIM_Base_Init>
 8000cbe:	1e03      	subs	r3, r0, #0
 8000cc0:	d001      	beq.n	8000cc6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000cc2:	f7ff fef5 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc6:	003b      	movs	r3, r7
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ccc:	003b      	movs	r3, r7
 8000cce:	2200      	movs	r2, #0
 8000cd0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000cd2:	003a      	movs	r2, r7
 8000cd4:	4b06      	ldr	r3, [pc, #24]	; (8000cf0 <MX_TIM6_Init+0x6c>)
 8000cd6:	0011      	movs	r1, r2
 8000cd8:	0018      	movs	r0, r3
 8000cda:	f003 fd89 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000cde:	1e03      	subs	r3, r0, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000ce2:	f7ff fee5 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	b002      	add	sp, #8
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	46c0      	nop			; (mov r8, r8)
 8000cf0:	2000025c 	.word	0x2000025c
 8000cf4:	40001000 	.word	0x40001000
 8000cf8:	0000ffff 	.word	0x0000ffff

08000cfc <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d02:	2308      	movs	r3, #8
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	0018      	movs	r0, r3
 8000d08:	2310      	movs	r3, #16
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	f004 fc87 	bl	8005620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d12:	003b      	movs	r3, r7
 8000d14:	0018      	movs	r0, r3
 8000d16:	2308      	movs	r3, #8
 8000d18:	001a      	movs	r2, r3
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	f004 fc80 	bl	8005620 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000d20:	4b22      	ldr	r3, [pc, #136]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d22:	4a23      	ldr	r2, [pc, #140]	; (8000db0 <MX_TIM21_Init+0xb4>)
 8000d24:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000d26:	4b21      	ldr	r3, [pc, #132]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000d32:	4b1e      	ldr	r3, [pc, #120]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d34:	4a1f      	ldr	r2, [pc, #124]	; (8000db4 <MX_TIM21_Init+0xb8>)
 8000d36:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3e:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d40:	2280      	movs	r2, #128	; 0x80
 8000d42:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000d44:	4b19      	ldr	r3, [pc, #100]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d46:	0018      	movs	r0, r3
 8000d48:	f003 fb5a 	bl	8004400 <HAL_TIM_Base_Init>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000d50:	f7ff feae 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000d54:	2108      	movs	r1, #8
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2280      	movs	r2, #128	; 0x80
 8000d5a:	0192      	lsls	r2, r2, #6
 8000d5c:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000d5e:	187b      	adds	r3, r7, r1
 8000d60:	2200      	movs	r2, #0
 8000d62:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000d64:	187b      	adds	r3, r7, r1
 8000d66:	2200      	movs	r2, #0
 8000d68:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000d70:	187a      	adds	r2, r7, r1
 8000d72:	4b0e      	ldr	r3, [pc, #56]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d74:	0011      	movs	r1, r2
 8000d76:	0018      	movs	r0, r3
 8000d78:	f003 fb82 	bl	8004480 <HAL_TIM_ConfigClockSource>
 8000d7c:	1e03      	subs	r3, r0, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8000d80:	f7ff fe96 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d84:	003b      	movs	r3, r7
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d8a:	003b      	movs	r3, r7
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000d90:	003a      	movs	r2, r7
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <MX_TIM21_Init+0xb0>)
 8000d94:	0011      	movs	r1, r2
 8000d96:	0018      	movs	r0, r3
 8000d98:	f003 fd2a 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000d9c:	1e03      	subs	r3, r0, #0
 8000d9e:	d001      	beq.n	8000da4 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8000da0:	f7ff fe86 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000da4:	46c0      	nop			; (mov r8, r8)
 8000da6:	46bd      	mov	sp, r7
 8000da8:	b006      	add	sp, #24
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000029c 	.word	0x2000029c
 8000db0:	40010800 	.word	0x40010800
 8000db4:	0000ffff 	.word	0x0000ffff

08000db8 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	18fb      	adds	r3, r7, r3
 8000dc2:	0018      	movs	r0, r3
 8000dc4:	2310      	movs	r3, #16
 8000dc6:	001a      	movs	r2, r3
 8000dc8:	2100      	movs	r1, #0
 8000dca:	f004 fc29 	bl	8005620 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dce:	003b      	movs	r3, r7
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	2308      	movs	r3, #8
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f004 fc22 	bl	8005620 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000dde:	4a1f      	ldr	r2, [pc, #124]	; (8000e5c <MX_TIM22_Init+0xa4>)
 8000de0:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 31999;
 8000de2:	4b1d      	ldr	r3, [pc, #116]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000de4:	4a1e      	ldr	r2, [pc, #120]	; (8000e60 <MX_TIM22_Init+0xa8>)
 8000de6:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000de8:	4b1b      	ldr	r3, [pc, #108]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 9999;
 8000dee:	4b1a      	ldr	r3, [pc, #104]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000df0:	4a1c      	ldr	r2, [pc, #112]	; (8000e64 <MX_TIM22_Init+0xac>)
 8000df2:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df4:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000df6:	2200      	movs	r2, #0
 8000df8:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dfa:	4b17      	ldr	r3, [pc, #92]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000e00:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000e02:	0018      	movs	r0, r3
 8000e04:	f003 fafc 	bl	8004400 <HAL_TIM_Base_Init>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000e0c:	f7ff fe50 	bl	8000ab0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e10:	2108      	movs	r1, #8
 8000e12:	187b      	adds	r3, r7, r1
 8000e14:	2280      	movs	r2, #128	; 0x80
 8000e16:	0152      	lsls	r2, r2, #5
 8000e18:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000e1e:	0011      	movs	r1, r2
 8000e20:	0018      	movs	r0, r3
 8000e22:	f003 fb2d 	bl	8004480 <HAL_TIM_ConfigClockSource>
 8000e26:	1e03      	subs	r3, r0, #0
 8000e28:	d001      	beq.n	8000e2e <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 8000e2a:	f7ff fe41 	bl	8000ab0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e2e:	003b      	movs	r3, r7
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e34:	003b      	movs	r3, r7
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000e3a:	003a      	movs	r2, r7
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_TIM22_Init+0xa0>)
 8000e3e:	0011      	movs	r1, r2
 8000e40:	0018      	movs	r0, r3
 8000e42:	f003 fcd5 	bl	80047f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e46:	1e03      	subs	r3, r0, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000e4a:	f7ff fe31 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b006      	add	sp, #24
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	2000021c 	.word	0x2000021c
 8000e5c:	40011400 	.word	0x40011400
 8000e60:	00007cff 	.word	0x00007cff
 8000e64:	0000270f 	.word	0x0000270f

08000e68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b088      	sub	sp, #32
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	230c      	movs	r3, #12
 8000e72:	18fb      	adds	r3, r7, r3
 8000e74:	0018      	movs	r0, r3
 8000e76:	2314      	movs	r3, #20
 8000e78:	001a      	movs	r2, r3
 8000e7a:	2100      	movs	r1, #0
 8000e7c:	f004 fbd0 	bl	8005620 <memset>
  if(tim_baseHandle->Instance==TIM6)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a23      	ldr	r2, [pc, #140]	; (8000f14 <HAL_TIM_Base_MspInit+0xac>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d106      	bne.n	8000e98 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000e8a:	4b23      	ldr	r3, [pc, #140]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000e8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e8e:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000e90:	2110      	movs	r1, #16
 8000e92:	430a      	orrs	r2, r1
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 8000e96:	e039      	b.n	8000f0c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM21)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1f      	ldr	r2, [pc, #124]	; (8000f1c <HAL_TIM_Base_MspInit+0xb4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d129      	bne.n	8000ef6 <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000eb2:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	430a      	orrs	r2, r1
 8000eb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	60bb      	str	r3, [r7, #8]
 8000ec4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ec6:	210c      	movs	r1, #12
 8000ec8:	187b      	adds	r3, r7, r1
 8000eca:	2202      	movs	r2, #2
 8000ecc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ece:	187b      	adds	r3, r7, r1
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	187b      	adds	r3, r7, r1
 8000edc:	2200      	movs	r2, #0
 8000ede:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000ee0:	187b      	adds	r3, r7, r1
 8000ee2:	2205      	movs	r2, #5
 8000ee4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	187a      	adds	r2, r7, r1
 8000ee8:	23a0      	movs	r3, #160	; 0xa0
 8000eea:	05db      	lsls	r3, r3, #23
 8000eec:	0011      	movs	r1, r2
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f000 fe3c 	bl	8001b6c <HAL_GPIO_Init>
}
 8000ef4:	e00a      	b.n	8000f0c <HAL_TIM_Base_MspInit+0xa4>
  else if(tim_baseHandle->Instance==TIM22)
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	4a09      	ldr	r2, [pc, #36]	; (8000f20 <HAL_TIM_Base_MspInit+0xb8>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d105      	bne.n	8000f0c <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000f00:	4b05      	ldr	r3, [pc, #20]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f04:	4b04      	ldr	r3, [pc, #16]	; (8000f18 <HAL_TIM_Base_MspInit+0xb0>)
 8000f06:	2120      	movs	r1, #32
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000f0c:	46c0      	nop			; (mov r8, r8)
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	b008      	add	sp, #32
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	40001000 	.word	0x40001000
 8000f18:	40021000 	.word	0x40021000
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40011400 	.word	0x40011400

08000f24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f28:	4b16      	ldr	r3, [pc, #88]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f2a:	4a17      	ldr	r2, [pc, #92]	; (8000f88 <MX_USART2_UART_Init+0x64>)
 8000f2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f30:	22e1      	movs	r2, #225	; 0xe1
 8000f32:	0252      	lsls	r2, r2, #9
 8000f34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f36:	4b13      	ldr	r3, [pc, #76]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f3c:	4b11      	ldr	r3, [pc, #68]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f42:	4b10      	ldr	r3, [pc, #64]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 8000f48:	4b0e      	ldr	r3, [pc, #56]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f4a:	2208      	movs	r2, #8
 8000f4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f4e:	4b0d      	ldr	r3, [pc, #52]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	4b0b      	ldr	r3, [pc, #44]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000f60:	4b08      	ldr	r3, [pc, #32]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f62:	2220      	movs	r2, #32
 8000f64:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000f66:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f68:	2280      	movs	r2, #128	; 0x80
 8000f6a:	0192      	lsls	r2, r2, #6
 8000f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000f6e:	4b05      	ldr	r3, [pc, #20]	; (8000f84 <MX_USART2_UART_Init+0x60>)
 8000f70:	0018      	movs	r0, r3
 8000f72:	f003 fc95 	bl	80048a0 <HAL_HalfDuplex_Init>
 8000f76:	1e03      	subs	r3, r0, #0
 8000f78:	d001      	beq.n	8000f7e <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 8000f7a:	f7ff fd99 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	200002dc 	.word	0x200002dc
 8000f88:	40004400 	.word	0x40004400

08000f8c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b089      	sub	sp, #36	; 0x24
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	240c      	movs	r4, #12
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	0018      	movs	r0, r3
 8000f9a:	2314      	movs	r3, #20
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	f004 fb3e 	bl	8005620 <memset>
  if(uartHandle->Instance==USART2)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a18      	ldr	r2, [pc, #96]	; (800100c <HAL_UART_MspInit+0x80>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d129      	bne.n	8001002 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fae:	4b18      	ldr	r3, [pc, #96]	; (8001010 <HAL_UART_MspInit+0x84>)
 8000fb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fb2:	4b17      	ldr	r3, [pc, #92]	; (8001010 <HAL_UART_MspInit+0x84>)
 8000fb4:	2180      	movs	r1, #128	; 0x80
 8000fb6:	0289      	lsls	r1, r1, #10
 8000fb8:	430a      	orrs	r2, r1
 8000fba:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b14      	ldr	r3, [pc, #80]	; (8001010 <HAL_UART_MspInit+0x84>)
 8000fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fc0:	4b13      	ldr	r3, [pc, #76]	; (8001010 <HAL_UART_MspInit+0x84>)
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_UART_MspInit+0x84>)
 8000fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4013      	ands	r3, r2
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = tx2_tp_Pin;
 8000fd4:	0021      	movs	r1, r4
 8000fd6:	187b      	adds	r3, r7, r1
 8000fd8:	2204      	movs	r2, #4
 8000fda:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fdc:	187b      	adds	r3, r7, r1
 8000fde:	2212      	movs	r2, #18
 8000fe0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fe2:	187b      	adds	r3, r7, r1
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fe8:	187b      	adds	r3, r7, r1
 8000fea:	2203      	movs	r2, #3
 8000fec:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000fee:	187b      	adds	r3, r7, r1
 8000ff0:	2204      	movs	r2, #4
 8000ff2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(tx2_tp_GPIO_Port, &GPIO_InitStruct);
 8000ff4:	187a      	adds	r2, r7, r1
 8000ff6:	23a0      	movs	r3, #160	; 0xa0
 8000ff8:	05db      	lsls	r3, r3, #23
 8000ffa:	0011      	movs	r1, r2
 8000ffc:	0018      	movs	r0, r3
 8000ffe:	f000 fdb5 	bl	8001b6c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	46bd      	mov	sp, r7
 8001006:	b009      	add	sp, #36	; 0x24
 8001008:	bd90      	pop	{r4, r7, pc}
 800100a:	46c0      	nop			; (mov r8, r8)
 800100c:	40004400 	.word	0x40004400
 8001010:	40021000 	.word	0x40021000

08001014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8001014:	480d      	ldr	r0, [pc, #52]	; (800104c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8001016:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001018:	480d      	ldr	r0, [pc, #52]	; (8001050 <LoopForever+0x6>)
  ldr r1, =_edata
 800101a:	490e      	ldr	r1, [pc, #56]	; (8001054 <LoopForever+0xa>)
  ldr r2, =_sidata
 800101c:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <LoopForever+0xe>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001020:	e002      	b.n	8001028 <LoopCopyDataInit>

08001022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001026:	3304      	adds	r3, #4

08001028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800102a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800102c:	d3f9      	bcc.n	8001022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800102e:	4a0b      	ldr	r2, [pc, #44]	; (800105c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001030:	4c0b      	ldr	r4, [pc, #44]	; (8001060 <LoopForever+0x16>)
  movs r3, #0
 8001032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001034:	e001      	b.n	800103a <LoopFillZerobss>

08001036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001038:	3204      	adds	r2, #4

0800103a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800103a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800103c:	d3fb      	bcc.n	8001036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800103e:	f7ff fe1b 	bl	8000c78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001042:	f004 fabf 	bl	80055c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001046:	f7ff fbe7 	bl	8000818 <main>

0800104a <LoopForever>:

LoopForever:
    b LoopForever
 800104a:	e7fe      	b.n	800104a <LoopForever>
   ldr   r0, =_estack
 800104c:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8001050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001054:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001058:	0800580c 	.word	0x0800580c
  ldr r2, =_sbss
 800105c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001060:	2000038c 	.word	0x2000038c

08001064 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001064:	e7fe      	b.n	8001064 <ADC1_COMP_IRQHandler>
	...

08001068 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_Init+0x3c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <HAL_Init+0x3c>)
 800107a:	2140      	movs	r1, #64	; 0x40
 800107c:	430a      	orrs	r2, r1
 800107e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001080:	2000      	movs	r0, #0
 8001082:	f000 f811 	bl	80010a8 <HAL_InitTick>
 8001086:	1e03      	subs	r3, r0, #0
 8001088:	d003      	beq.n	8001092 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	2201      	movs	r2, #1
 800108e:	701a      	strb	r2, [r3, #0]
 8001090:	e001      	b.n	8001096 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001092:	f7ff fd8f 	bl	8000bb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001096:	1dfb      	adds	r3, r7, #7
 8001098:	781b      	ldrb	r3, [r3, #0]
}
 800109a:	0018      	movs	r0, r3
 800109c:	46bd      	mov	sp, r7
 800109e:	b002      	add	sp, #8
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	46c0      	nop			; (mov r8, r8)
 80010a4:	40022000 	.word	0x40022000

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b590      	push	{r4, r7, lr}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010b0:	4b14      	ldr	r3, [pc, #80]	; (8001104 <HAL_InitTick+0x5c>)
 80010b2:	681c      	ldr	r4, [r3, #0]
 80010b4:	4b14      	ldr	r3, [pc, #80]	; (8001108 <HAL_InitTick+0x60>)
 80010b6:	781b      	ldrb	r3, [r3, #0]
 80010b8:	0019      	movs	r1, r3
 80010ba:	23fa      	movs	r3, #250	; 0xfa
 80010bc:	0098      	lsls	r0, r3, #2
 80010be:	f7ff f823 	bl	8000108 <__udivsi3>
 80010c2:	0003      	movs	r3, r0
 80010c4:	0019      	movs	r1, r3
 80010c6:	0020      	movs	r0, r4
 80010c8:	f7ff f81e 	bl	8000108 <__udivsi3>
 80010cc:	0003      	movs	r3, r0
 80010ce:	0018      	movs	r0, r3
 80010d0:	f000 fb49 	bl	8001766 <HAL_SYSTICK_Config>
 80010d4:	1e03      	subs	r3, r0, #0
 80010d6:	d001      	beq.n	80010dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e00f      	b.n	80010fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b03      	cmp	r3, #3
 80010e0:	d80b      	bhi.n	80010fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e2:	6879      	ldr	r1, [r7, #4]
 80010e4:	2301      	movs	r3, #1
 80010e6:	425b      	negs	r3, r3
 80010e8:	2200      	movs	r2, #0
 80010ea:	0018      	movs	r0, r3
 80010ec:	f000 fb16 	bl	800171c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <HAL_InitTick+0x64>)
 80010f2:	687a      	ldr	r2, [r7, #4]
 80010f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010f6:	2300      	movs	r3, #0
 80010f8:	e000      	b.n	80010fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
}
 80010fc:	0018      	movs	r0, r3
 80010fe:	46bd      	mov	sp, r7
 8001100:	b003      	add	sp, #12
 8001102:	bd90      	pop	{r4, r7, pc}
 8001104:	20000000 	.word	0x20000000
 8001108:	20000008 	.word	0x20000008
 800110c:	20000004 	.word	0x20000004

08001110 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x1c>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	001a      	movs	r2, r3
 800111a:	4b05      	ldr	r3, [pc, #20]	; (8001130 <HAL_IncTick+0x20>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	18d2      	adds	r2, r2, r3
 8001120:	4b03      	ldr	r3, [pc, #12]	; (8001130 <HAL_IncTick+0x20>)
 8001122:	601a      	str	r2, [r3, #0]
}
 8001124:	46c0      	nop			; (mov r8, r8)
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	46c0      	nop			; (mov r8, r8)
 800112c:	20000008 	.word	0x20000008
 8001130:	20000360 	.word	0x20000360

08001134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  return uwTick;
 8001138:	4b02      	ldr	r3, [pc, #8]	; (8001144 <HAL_GetTick+0x10>)
 800113a:	681b      	ldr	r3, [r3, #0]
}
 800113c:	0018      	movs	r0, r3
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	46c0      	nop			; (mov r8, r8)
 8001144:	20000360 	.word	0x20000360

08001148 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001150:	f7ff fff0 	bl	8001134 <HAL_GetTick>
 8001154:	0003      	movs	r3, r0
 8001156:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	3301      	adds	r3, #1
 8001160:	d005      	beq.n	800116e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001162:	4b0a      	ldr	r3, [pc, #40]	; (800118c <HAL_Delay+0x44>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	001a      	movs	r2, r3
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	189b      	adds	r3, r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800116e:	46c0      	nop			; (mov r8, r8)
 8001170:	f7ff ffe0 	bl	8001134 <HAL_GetTick>
 8001174:	0002      	movs	r2, r0
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	429a      	cmp	r2, r3
 800117e:	d8f7      	bhi.n	8001170 <HAL_Delay+0x28>
  {
  }
}
 8001180:	46c0      	nop			; (mov r8, r8)
 8001182:	46c0      	nop			; (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b004      	add	sp, #16
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	20000008 	.word	0x20000008

08001190 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d101      	bne.n	80011a2 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800119e:	2301      	movs	r3, #1
 80011a0:	e159      	b.n	8001456 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10a      	bne.n	80011c0 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	2250      	movs	r2, #80	; 0x50
 80011b4:	2100      	movs	r1, #0
 80011b6:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff f9e2 	bl	8000584 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011c4:	2210      	movs	r2, #16
 80011c6:	4013      	ands	r3, r2
 80011c8:	2b10      	cmp	r3, #16
 80011ca:	d005      	beq.n	80011d8 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	2204      	movs	r2, #4
 80011d4:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80011d6:	d00b      	beq.n	80011f0 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011dc:	2210      	movs	r2, #16
 80011de:	431a      	orrs	r2, r3
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2250      	movs	r2, #80	; 0x50
 80011e8:	2100      	movs	r1, #0
 80011ea:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	e132      	b.n	8001456 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	4a9a      	ldr	r2, [pc, #616]	; (8001460 <HAL_ADC_Init+0x2d0>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	2202      	movs	r2, #2
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	2203      	movs	r2, #3
 8001208:	4013      	ands	r3, r2
 800120a:	2b01      	cmp	r3, #1
 800120c:	d108      	bne.n	8001220 <HAL_ADC_Init+0x90>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2201      	movs	r2, #1
 8001216:	4013      	ands	r3, r2
 8001218:	2b01      	cmp	r3, #1
 800121a:	d101      	bne.n	8001220 <HAL_ADC_Init+0x90>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_ADC_Init+0x92>
 8001220:	2300      	movs	r3, #0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d149      	bne.n	80012ba <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	23c0      	movs	r3, #192	; 0xc0
 800122c:	061b      	lsls	r3, r3, #24
 800122e:	429a      	cmp	r2, r3
 8001230:	d00b      	beq.n	800124a <HAL_ADC_Init+0xba>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	2380      	movs	r3, #128	; 0x80
 8001238:	05db      	lsls	r3, r3, #23
 800123a:	429a      	cmp	r2, r3
 800123c:	d005      	beq.n	800124a <HAL_ADC_Init+0xba>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685a      	ldr	r2, [r3, #4]
 8001242:	2380      	movs	r3, #128	; 0x80
 8001244:	061b      	lsls	r3, r3, #24
 8001246:	429a      	cmp	r2, r3
 8001248:	d111      	bne.n	800126e <HAL_ADC_Init+0xde>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	691a      	ldr	r2, [r3, #16]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	0892      	lsrs	r2, r2, #2
 8001258:	611a      	str	r2, [r3, #16]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	6919      	ldr	r1, [r3, #16]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	685a      	ldr	r2, [r3, #4]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	430a      	orrs	r2, r1
 800126a:	611a      	str	r2, [r3, #16]
 800126c:	e014      	b.n	8001298 <HAL_ADC_Init+0x108>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	691a      	ldr	r2, [r3, #16]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	0092      	lsls	r2, r2, #2
 800127a:	0892      	lsrs	r2, r2, #2
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	4b79      	ldr	r3, [pc, #484]	; (8001464 <HAL_ADC_Init+0x2d4>)
 8001280:	681a      	ldr	r2, [r3, #0]
 8001282:	4b78      	ldr	r3, [pc, #480]	; (8001464 <HAL_ADC_Init+0x2d4>)
 8001284:	4978      	ldr	r1, [pc, #480]	; (8001468 <HAL_ADC_Init+0x2d8>)
 8001286:	400a      	ands	r2, r1
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <HAL_ADC_Init+0x2d4>)
 800128c:	6819      	ldr	r1, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685a      	ldr	r2, [r3, #4]
 8001292:	4b74      	ldr	r3, [pc, #464]	; (8001464 <HAL_ADC_Init+0x2d4>)
 8001294:	430a      	orrs	r2, r1
 8001296:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2118      	movs	r1, #24
 80012a4:	438a      	bics	r2, r1
 80012a6:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68d9      	ldr	r1, [r3, #12]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	689a      	ldr	r2, [r3, #8]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80012ba:	4b6a      	ldr	r3, [pc, #424]	; (8001464 <HAL_ADC_Init+0x2d4>)
 80012bc:	681a      	ldr	r2, [r3, #0]
 80012be:	4b69      	ldr	r3, [pc, #420]	; (8001464 <HAL_ADC_Init+0x2d4>)
 80012c0:	496a      	ldr	r1, [pc, #424]	; (800146c <HAL_ADC_Init+0x2dc>)
 80012c2:	400a      	ands	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 80012c6:	4b67      	ldr	r3, [pc, #412]	; (8001464 <HAL_ADC_Init+0x2d4>)
 80012c8:	6819      	ldr	r1, [r3, #0]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ce:	065a      	lsls	r2, r3, #25
 80012d0:	4b64      	ldr	r3, [pc, #400]	; (8001464 <HAL_ADC_Init+0x2d4>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	2380      	movs	r3, #128	; 0x80
 80012de:	055b      	lsls	r3, r3, #21
 80012e0:	4013      	ands	r3, r2
 80012e2:	d108      	bne.n	80012f6 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	689a      	ldr	r2, [r3, #8]
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	2180      	movs	r1, #128	; 0x80
 80012f0:	0549      	lsls	r1, r1, #21
 80012f2:	430a      	orrs	r2, r1
 80012f4:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	68da      	ldr	r2, [r3, #12]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	495b      	ldr	r1, [pc, #364]	; (8001470 <HAL_ADC_Init+0x2e0>)
 8001302:	400a      	ands	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68d9      	ldr	r1, [r3, #12]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	691b      	ldr	r3, [r3, #16]
 8001314:	2b02      	cmp	r3, #2
 8001316:	d101      	bne.n	800131c <HAL_ADC_Init+0x18c>
 8001318:	2304      	movs	r3, #4
 800131a:	e000      	b.n	800131e <HAL_ADC_Init+0x18e>
 800131c:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800131e:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2020      	movs	r0, #32
 8001324:	5c1b      	ldrb	r3, [r3, r0]
 8001326:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8001328:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	202c      	movs	r0, #44	; 0x2c
 800132e:	5c1b      	ldrb	r3, [r3, r0]
 8001330:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001332:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001338:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	699b      	ldr	r3, [r3, #24]
 800133e:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8001340:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69db      	ldr	r3, [r3, #28]
 8001346:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8001348:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001356:	23c2      	movs	r3, #194	; 0xc2
 8001358:	33ff      	adds	r3, #255	; 0xff
 800135a:	429a      	cmp	r2, r3
 800135c:	d00b      	beq.n	8001376 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	68d9      	ldr	r1, [r3, #12]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800136c:	431a      	orrs	r2, r3
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	430a      	orrs	r2, r1
 8001374:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2221      	movs	r2, #33	; 0x21
 800137a:	5c9b      	ldrb	r3, [r3, r2]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d11a      	bne.n	80013b6 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2220      	movs	r2, #32
 8001384:	5c9b      	ldrb	r3, [r3, r2]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d109      	bne.n	800139e <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	68da      	ldr	r2, [r3, #12]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2180      	movs	r1, #128	; 0x80
 8001396:	0249      	lsls	r1, r1, #9
 8001398:	430a      	orrs	r2, r1
 800139a:	60da      	str	r2, [r3, #12]
 800139c:	e00b      	b.n	80013b6 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013a2:	2220      	movs	r2, #32
 80013a4:	431a      	orrs	r2, r3
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	2201      	movs	r2, #1
 80013b0:	431a      	orrs	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d11f      	bne.n	80013fe <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	691a      	ldr	r2, [r3, #16]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	492a      	ldr	r1, [pc, #168]	; (8001474 <HAL_ADC_Init+0x2e4>)
 80013ca:	400a      	ands	r2, r1
 80013cc:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6919      	ldr	r1, [r3, #16]
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013dc:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 80013e2:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	691a      	ldr	r2, [r3, #16]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	2101      	movs	r1, #1
 80013f8:	430a      	orrs	r2, r1
 80013fa:	611a      	str	r2, [r3, #16]
 80013fc:	e00e      	b.n	800141c <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	691b      	ldr	r3, [r3, #16]
 8001404:	2201      	movs	r2, #1
 8001406:	4013      	ands	r3, r2
 8001408:	2b01      	cmp	r3, #1
 800140a:	d107      	bne.n	800141c <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	691a      	ldr	r2, [r3, #16]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2101      	movs	r1, #1
 8001418:	438a      	bics	r2, r1
 800141a:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	695a      	ldr	r2, [r3, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	2107      	movs	r1, #7
 8001428:	438a      	bics	r2, r1
 800142a:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	6959      	ldr	r1, [r3, #20]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	430a      	orrs	r2, r1
 800143c:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2200      	movs	r2, #0
 8001442:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001448:	2203      	movs	r2, #3
 800144a:	4393      	bics	r3, r2
 800144c:	2201      	movs	r2, #1
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	0018      	movs	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	b002      	add	sp, #8
 800145c:	bd80      	pop	{r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	fffffefd 	.word	0xfffffefd
 8001464:	40012708 	.word	0x40012708
 8001468:	ffc3ffff 	.word	0xffc3ffff
 800146c:	fdffffff 	.word	0xfdffffff
 8001470:	fffe0219 	.word	0xfffe0219
 8001474:	fffffc03 	.word	0xfffffc03

08001478 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
 8001480:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2250      	movs	r2, #80	; 0x50
 8001486:	5c9b      	ldrb	r3, [r3, r2]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d101      	bne.n	8001490 <HAL_ADC_ConfigChannel+0x18>
 800148c:	2302      	movs	r3, #2
 800148e:	e06c      	b.n	800156a <HAL_ADC_ConfigChannel+0xf2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2250      	movs	r2, #80	; 0x50
 8001494:	2101      	movs	r1, #1
 8001496:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	689b      	ldr	r3, [r3, #8]
 800149e:	2204      	movs	r2, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	d00b      	beq.n	80014bc <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014a8:	2220      	movs	r2, #32
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	2100      	movs	r1, #0
 80014b6:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e056      	b.n	800156a <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <HAL_ADC_ConfigChannel+0xfc>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d028      	beq.n	8001518 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	035b      	lsls	r3, r3, #13
 80014d2:	0b5a      	lsrs	r2, r3, #13
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	2380      	movs	r3, #128	; 0x80
 80014e2:	02db      	lsls	r3, r3, #11
 80014e4:	4013      	ands	r3, r2
 80014e6:	d009      	beq.n	80014fc <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 80014e8:	4b23      	ldr	r3, [pc, #140]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 80014ea:	681a      	ldr	r2, [r3, #0]
 80014ec:	4b22      	ldr	r3, [pc, #136]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 80014ee:	2180      	movs	r1, #128	; 0x80
 80014f0:	0409      	lsls	r1, r1, #16
 80014f2:	430a      	orrs	r2, r1
 80014f4:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80014f6:	200a      	movs	r0, #10
 80014f8:	f000 f844 	bl	8001584 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	029b      	lsls	r3, r3, #10
 8001504:	4013      	ands	r3, r2
 8001506:	d02b      	beq.n	8001560 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001508:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	4b1a      	ldr	r3, [pc, #104]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 800150e:	2180      	movs	r1, #128	; 0x80
 8001510:	03c9      	lsls	r1, r1, #15
 8001512:	430a      	orrs	r2, r1
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	e023      	b.n	8001560 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	035b      	lsls	r3, r3, #13
 8001524:	0b5b      	lsrs	r3, r3, #13
 8001526:	43d9      	mvns	r1, r3
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	400a      	ands	r2, r1
 800152e:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681a      	ldr	r2, [r3, #0]
 8001534:	2380      	movs	r3, #128	; 0x80
 8001536:	02db      	lsls	r3, r3, #11
 8001538:	4013      	ands	r3, r2
 800153a:	d005      	beq.n	8001548 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 800153c:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	4b0d      	ldr	r3, [pc, #52]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 8001542:	490e      	ldr	r1, [pc, #56]	; (800157c <HAL_ADC_ConfigChannel+0x104>)
 8001544:	400a      	ands	r2, r1
 8001546:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	029b      	lsls	r3, r3, #10
 8001550:	4013      	ands	r3, r2
 8001552:	d005      	beq.n	8001560 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4b07      	ldr	r3, [pc, #28]	; (8001578 <HAL_ADC_ConfigChannel+0x100>)
 800155a:	4909      	ldr	r1, [pc, #36]	; (8001580 <HAL_ADC_ConfigChannel+0x108>)
 800155c:	400a      	ands	r2, r1
 800155e:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2250      	movs	r2, #80	; 0x50
 8001564:	2100      	movs	r1, #0
 8001566:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	0018      	movs	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	b002      	add	sp, #8
 8001570:	bd80      	pop	{r7, pc}
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	00001001 	.word	0x00001001
 8001578:	40012708 	.word	0x40012708
 800157c:	ff7fffff 	.word	0xff7fffff
 8001580:	ffbfffff 	.word	0xffbfffff

08001584 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800158c:	4b0b      	ldr	r3, [pc, #44]	; (80015bc <ADC_DelayMicroSecond+0x38>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	490b      	ldr	r1, [pc, #44]	; (80015c0 <ADC_DelayMicroSecond+0x3c>)
 8001592:	0018      	movs	r0, r3
 8001594:	f7fe fdb8 	bl	8000108 <__udivsi3>
 8001598:	0003      	movs	r3, r0
 800159a:	001a      	movs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4353      	muls	r3, r2
 80015a0:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 80015a2:	e002      	b.n	80015aa <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	3b01      	subs	r3, #1
 80015a8:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1f9      	bne.n	80015a4 <ADC_DelayMicroSecond+0x20>
  } 
}
 80015b0:	46c0      	nop			; (mov r8, r8)
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	46c0      	nop			; (mov r8, r8)
 80015bc:	20000000 	.word	0x20000000
 80015c0:	000f4240 	.word	0x000f4240

080015c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	0002      	movs	r2, r0
 80015cc:	1dfb      	adds	r3, r7, #7
 80015ce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	1dfb      	adds	r3, r7, #7
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b7f      	cmp	r3, #127	; 0x7f
 80015d6:	d809      	bhi.n	80015ec <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015d8:	1dfb      	adds	r3, r7, #7
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	001a      	movs	r2, r3
 80015de:	231f      	movs	r3, #31
 80015e0:	401a      	ands	r2, r3
 80015e2:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <__NVIC_EnableIRQ+0x30>)
 80015e4:	2101      	movs	r1, #1
 80015e6:	4091      	lsls	r1, r2
 80015e8:	000a      	movs	r2, r1
 80015ea:	601a      	str	r2, [r3, #0]
  }
}
 80015ec:	46c0      	nop			; (mov r8, r8)
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	e000e100 	.word	0xe000e100

080015f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015f8:	b590      	push	{r4, r7, lr}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	0002      	movs	r2, r0
 8001600:	6039      	str	r1, [r7, #0]
 8001602:	1dfb      	adds	r3, r7, #7
 8001604:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001606:	1dfb      	adds	r3, r7, #7
 8001608:	781b      	ldrb	r3, [r3, #0]
 800160a:	2b7f      	cmp	r3, #127	; 0x7f
 800160c:	d828      	bhi.n	8001660 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800160e:	4a2f      	ldr	r2, [pc, #188]	; (80016cc <__NVIC_SetPriority+0xd4>)
 8001610:	1dfb      	adds	r3, r7, #7
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	b25b      	sxtb	r3, r3
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	33c0      	adds	r3, #192	; 0xc0
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	589b      	ldr	r3, [r3, r2]
 800161e:	1dfa      	adds	r2, r7, #7
 8001620:	7812      	ldrb	r2, [r2, #0]
 8001622:	0011      	movs	r1, r2
 8001624:	2203      	movs	r2, #3
 8001626:	400a      	ands	r2, r1
 8001628:	00d2      	lsls	r2, r2, #3
 800162a:	21ff      	movs	r1, #255	; 0xff
 800162c:	4091      	lsls	r1, r2
 800162e:	000a      	movs	r2, r1
 8001630:	43d2      	mvns	r2, r2
 8001632:	401a      	ands	r2, r3
 8001634:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	019b      	lsls	r3, r3, #6
 800163a:	22ff      	movs	r2, #255	; 0xff
 800163c:	401a      	ands	r2, r3
 800163e:	1dfb      	adds	r3, r7, #7
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	0018      	movs	r0, r3
 8001644:	2303      	movs	r3, #3
 8001646:	4003      	ands	r3, r0
 8001648:	00db      	lsls	r3, r3, #3
 800164a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <__NVIC_SetPriority+0xd4>)
 800164e:	1dfb      	adds	r3, r7, #7
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	b25b      	sxtb	r3, r3
 8001654:	089b      	lsrs	r3, r3, #2
 8001656:	430a      	orrs	r2, r1
 8001658:	33c0      	adds	r3, #192	; 0xc0
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800165e:	e031      	b.n	80016c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001660:	4a1b      	ldr	r2, [pc, #108]	; (80016d0 <__NVIC_SetPriority+0xd8>)
 8001662:	1dfb      	adds	r3, r7, #7
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	0019      	movs	r1, r3
 8001668:	230f      	movs	r3, #15
 800166a:	400b      	ands	r3, r1
 800166c:	3b08      	subs	r3, #8
 800166e:	089b      	lsrs	r3, r3, #2
 8001670:	3306      	adds	r3, #6
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	18d3      	adds	r3, r2, r3
 8001676:	3304      	adds	r3, #4
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	1dfa      	adds	r2, r7, #7
 800167c:	7812      	ldrb	r2, [r2, #0]
 800167e:	0011      	movs	r1, r2
 8001680:	2203      	movs	r2, #3
 8001682:	400a      	ands	r2, r1
 8001684:	00d2      	lsls	r2, r2, #3
 8001686:	21ff      	movs	r1, #255	; 0xff
 8001688:	4091      	lsls	r1, r2
 800168a:	000a      	movs	r2, r1
 800168c:	43d2      	mvns	r2, r2
 800168e:	401a      	ands	r2, r3
 8001690:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	019b      	lsls	r3, r3, #6
 8001696:	22ff      	movs	r2, #255	; 0xff
 8001698:	401a      	ands	r2, r3
 800169a:	1dfb      	adds	r3, r7, #7
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	0018      	movs	r0, r3
 80016a0:	2303      	movs	r3, #3
 80016a2:	4003      	ands	r3, r0
 80016a4:	00db      	lsls	r3, r3, #3
 80016a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80016a8:	4809      	ldr	r0, [pc, #36]	; (80016d0 <__NVIC_SetPriority+0xd8>)
 80016aa:	1dfb      	adds	r3, r7, #7
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	001c      	movs	r4, r3
 80016b0:	230f      	movs	r3, #15
 80016b2:	4023      	ands	r3, r4
 80016b4:	3b08      	subs	r3, #8
 80016b6:	089b      	lsrs	r3, r3, #2
 80016b8:	430a      	orrs	r2, r1
 80016ba:	3306      	adds	r3, #6
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	18c3      	adds	r3, r0, r3
 80016c0:	3304      	adds	r3, #4
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	b003      	add	sp, #12
 80016ca:	bd90      	pop	{r4, r7, pc}
 80016cc:	e000e100 	.word	0xe000e100
 80016d0:	e000ed00 	.word	0xe000ed00

080016d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	1e5a      	subs	r2, r3, #1
 80016e0:	2380      	movs	r3, #128	; 0x80
 80016e2:	045b      	lsls	r3, r3, #17
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d301      	bcc.n	80016ec <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016e8:	2301      	movs	r3, #1
 80016ea:	e010      	b.n	800170e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ec:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <SysTick_Config+0x44>)
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	3a01      	subs	r2, #1
 80016f2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f4:	2301      	movs	r3, #1
 80016f6:	425b      	negs	r3, r3
 80016f8:	2103      	movs	r1, #3
 80016fa:	0018      	movs	r0, r3
 80016fc:	f7ff ff7c 	bl	80015f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x44>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x44>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	0018      	movs	r0, r3
 8001710:	46bd      	mov	sp, r7
 8001712:	b002      	add	sp, #8
 8001714:	bd80      	pop	{r7, pc}
 8001716:	46c0      	nop			; (mov r8, r8)
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	210f      	movs	r1, #15
 8001728:	187b      	adds	r3, r7, r1
 800172a:	1c02      	adds	r2, r0, #0
 800172c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800172e:	68ba      	ldr	r2, [r7, #8]
 8001730:	187b      	adds	r3, r7, r1
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	b25b      	sxtb	r3, r3
 8001736:	0011      	movs	r1, r2
 8001738:	0018      	movs	r0, r3
 800173a:	f7ff ff5d 	bl	80015f8 <__NVIC_SetPriority>
}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	46bd      	mov	sp, r7
 8001742:	b004      	add	sp, #16
 8001744:	bd80      	pop	{r7, pc}

08001746 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001746:	b580      	push	{r7, lr}
 8001748:	b082      	sub	sp, #8
 800174a:	af00      	add	r7, sp, #0
 800174c:	0002      	movs	r2, r0
 800174e:	1dfb      	adds	r3, r7, #7
 8001750:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001752:	1dfb      	adds	r3, r7, #7
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	b25b      	sxtb	r3, r3
 8001758:	0018      	movs	r0, r3
 800175a:	f7ff ff33 	bl	80015c4 <__NVIC_EnableIRQ>
}
 800175e:	46c0      	nop			; (mov r8, r8)
 8001760:	46bd      	mov	sp, r7
 8001762:	b002      	add	sp, #8
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	0018      	movs	r0, r3
 8001772:	f7ff ffaf 	bl	80016d4 <SysTick_Config>
 8001776:	0003      	movs	r3, r0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b002      	add	sp, #8
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001788:	210f      	movs	r1, #15
 800178a:	187b      	adds	r3, r7, r1
 800178c:	2200      	movs	r2, #0
 800178e:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2225      	movs	r2, #37	; 0x25
 8001794:	5c9b      	ldrb	r3, [r3, r2]
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d006      	beq.n	80017aa <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2204      	movs	r2, #4
 80017a0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017a2:	187b      	adds	r3, r7, r1
 80017a4:	2201      	movs	r2, #1
 80017a6:	701a      	strb	r2, [r3, #0]
 80017a8:	e02a      	b.n	8001800 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	210e      	movs	r1, #14
 80017b6:	438a      	bics	r2, r1
 80017b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2101      	movs	r1, #1
 80017c6:	438a      	bics	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	221c      	movs	r2, #28
 80017d0:	401a      	ands	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	2101      	movs	r1, #1
 80017d8:	4091      	lsls	r1, r2
 80017da:	000a      	movs	r2, r1
 80017dc:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	2225      	movs	r2, #37	; 0x25
 80017e2:	2101      	movs	r1, #1
 80017e4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	2224      	movs	r2, #36	; 0x24
 80017ea:	2100      	movs	r1, #0
 80017ec:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d004      	beq.n	8001800 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	0010      	movs	r0, r2
 80017fe:	4798      	blx	r3
    }
  }
  return status;
 8001800:	230f      	movs	r3, #15
 8001802:	18fb      	adds	r3, r7, r3
 8001804:	781b      	ldrb	r3, [r3, #0]
}
 8001806:	0018      	movs	r0, r3
 8001808:	46bd      	mov	sp, r7
 800180a:	b004      	add	sp, #16
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2225      	movs	r2, #37	; 0x25
 800181a:	5c9b      	ldrb	r3, [r3, r2]
 800181c:	b2db      	uxtb	r3, r3
}
 800181e:	0018      	movs	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff fc80 	bl	8001134 <HAL_GetTick>
 8001834:	0003      	movs	r3, r0
 8001836:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001838:	e00f      	b.n	800185a <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	3301      	adds	r3, #1
 800183e:	d00c      	beq.n	800185a <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d007      	beq.n	8001856 <FLASH_WaitForLastOperation+0x2e>
 8001846:	f7ff fc75 	bl	8001134 <HAL_GetTick>
 800184a:	0002      	movs	r2, r0
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d201      	bcs.n	800185a <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e052      	b.n	8001900 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800185a:	4b2b      	ldr	r3, [pc, #172]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 800185c:	699b      	ldr	r3, [r3, #24]
 800185e:	2201      	movs	r2, #1
 8001860:	4013      	ands	r3, r2
 8001862:	2b01      	cmp	r3, #1
 8001864:	d0e9      	beq.n	800183a <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001866:	4b28      	ldr	r3, [pc, #160]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 8001868:	699b      	ldr	r3, [r3, #24]
 800186a:	2202      	movs	r2, #2
 800186c:	4013      	ands	r3, r2
 800186e:	2b02      	cmp	r3, #2
 8001870:	d102      	bne.n	8001878 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001872:	4b25      	ldr	r3, [pc, #148]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 8001874:	2202      	movs	r2, #2
 8001876:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001878:	4b23      	ldr	r3, [pc, #140]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 800187a:	699a      	ldr	r2, [r3, #24]
 800187c:	2380      	movs	r3, #128	; 0x80
 800187e:	005b      	lsls	r3, r3, #1
 8001880:	401a      	ands	r2, r3
 8001882:	2380      	movs	r3, #128	; 0x80
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	429a      	cmp	r2, r3
 8001888:	d035      	beq.n	80018f6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800188a:	4b1f      	ldr	r3, [pc, #124]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 800188c:	699a      	ldr	r2, [r3, #24]
 800188e:	2380      	movs	r3, #128	; 0x80
 8001890:	009b      	lsls	r3, r3, #2
 8001892:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001894:	2380      	movs	r3, #128	; 0x80
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	429a      	cmp	r2, r3
 800189a:	d02c      	beq.n	80018f6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800189c:	4b1a      	ldr	r3, [pc, #104]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 800189e:	699a      	ldr	r2, [r3, #24]
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	00db      	lsls	r3, r3, #3
 80018a4:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 80018a6:	2380      	movs	r3, #128	; 0x80
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d023      	beq.n	80018f6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80018ae:	4b16      	ldr	r3, [pc, #88]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 80018b0:	699a      	ldr	r2, [r3, #24]
 80018b2:	2380      	movs	r3, #128	; 0x80
 80018b4:	011b      	lsls	r3, r3, #4
 80018b6:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	011b      	lsls	r3, r3, #4
 80018bc:	429a      	cmp	r2, r3
 80018be:	d01a      	beq.n	80018f6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80018c0:	4b11      	ldr	r3, [pc, #68]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 80018c2:	699a      	ldr	r2, [r3, #24]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	019b      	lsls	r3, r3, #6
 80018c8:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	019b      	lsls	r3, r3, #6
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d011      	beq.n	80018f6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80018d2:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 80018d4:	699a      	ldr	r2, [r3, #24]
 80018d6:	2380      	movs	r3, #128	; 0x80
 80018d8:	029b      	lsls	r3, r3, #10
 80018da:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80018dc:	2380      	movs	r3, #128	; 0x80
 80018de:	029b      	lsls	r3, r3, #10
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d008      	beq.n	80018f6 <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80018e4:	4b08      	ldr	r3, [pc, #32]	; (8001908 <FLASH_WaitForLastOperation+0xe0>)
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	2380      	movs	r3, #128	; 0x80
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80018ee:	2380      	movs	r3, #128	; 0x80
 80018f0:	025b      	lsls	r3, r3, #9
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d103      	bne.n	80018fe <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 80018f6:	f000 f809 	bl	800190c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e000      	b.n	8001900 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40022000 	.word	0x40022000

0800190c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 8001912:	2300      	movs	r3, #0
 8001914:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001916:	4b49      	ldr	r3, [pc, #292]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 8001918:	699a      	ldr	r2, [r3, #24]
 800191a:	2380      	movs	r3, #128	; 0x80
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	401a      	ands	r2, r3
 8001920:	2380      	movs	r3, #128	; 0x80
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	429a      	cmp	r2, r3
 8001926:	d10a      	bne.n	800193e <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001928:	4b45      	ldr	r3, [pc, #276]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 800192a:	695b      	ldr	r3, [r3, #20]
 800192c:	2202      	movs	r2, #2
 800192e:	431a      	orrs	r2, r3
 8001930:	4b43      	ldr	r3, [pc, #268]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 8001932:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2280      	movs	r2, #128	; 0x80
 8001938:	0052      	lsls	r2, r2, #1
 800193a:	4313      	orrs	r3, r2
 800193c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800193e:	4b3f      	ldr	r3, [pc, #252]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 8001940:	699a      	ldr	r2, [r3, #24]
 8001942:	2380      	movs	r3, #128	; 0x80
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	401a      	ands	r2, r3
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	009b      	lsls	r3, r3, #2
 800194c:	429a      	cmp	r2, r3
 800194e:	d10a      	bne.n	8001966 <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001950:	4b3b      	ldr	r3, [pc, #236]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	2201      	movs	r2, #1
 8001956:	431a      	orrs	r2, r3
 8001958:	4b39      	ldr	r3, [pc, #228]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 800195a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2280      	movs	r2, #128	; 0x80
 8001960:	0092      	lsls	r2, r2, #2
 8001962:	4313      	orrs	r3, r2
 8001964:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001966:	4b35      	ldr	r3, [pc, #212]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 8001968:	699a      	ldr	r2, [r3, #24]
 800196a:	2380      	movs	r3, #128	; 0x80
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	401a      	ands	r2, r3
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	429a      	cmp	r2, r3
 8001976:	d10a      	bne.n	800198e <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 800197a:	695b      	ldr	r3, [r3, #20]
 800197c:	2208      	movs	r2, #8
 800197e:	431a      	orrs	r2, r3
 8001980:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 8001982:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2280      	movs	r2, #128	; 0x80
 8001988:	00d2      	lsls	r2, r2, #3
 800198a:	4313      	orrs	r3, r2
 800198c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800198e:	4b2b      	ldr	r3, [pc, #172]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 8001990:	699a      	ldr	r2, [r3, #24]
 8001992:	2380      	movs	r3, #128	; 0x80
 8001994:	011b      	lsls	r3, r3, #4
 8001996:	401a      	ands	r2, r3
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	011b      	lsls	r3, r3, #4
 800199c:	429a      	cmp	r2, r3
 800199e:	d10a      	bne.n	80019b6 <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 80019a2:	695b      	ldr	r3, [r3, #20]
 80019a4:	2204      	movs	r2, #4
 80019a6:	431a      	orrs	r2, r3
 80019a8:	4b25      	ldr	r3, [pc, #148]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 80019aa:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2280      	movs	r2, #128	; 0x80
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	4313      	orrs	r3, r2
 80019b4:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80019b6:	4b21      	ldr	r3, [pc, #132]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	2380      	movs	r3, #128	; 0x80
 80019bc:	019b      	lsls	r3, r3, #6
 80019be:	401a      	ands	r2, r3
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	019b      	lsls	r3, r3, #6
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d10a      	bne.n	80019de <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2210      	movs	r2, #16
 80019ce:	431a      	orrs	r2, r3
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 80019d2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2280      	movs	r2, #128	; 0x80
 80019d8:	0192      	lsls	r2, r2, #6
 80019da:	4313      	orrs	r3, r2
 80019dc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80019de:	4b17      	ldr	r3, [pc, #92]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 80019e0:	699a      	ldr	r2, [r3, #24]
 80019e2:	2380      	movs	r3, #128	; 0x80
 80019e4:	029b      	lsls	r3, r3, #10
 80019e6:	401a      	ands	r2, r3
 80019e8:	2380      	movs	r3, #128	; 0x80
 80019ea:	029b      	lsls	r3, r3, #10
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d109      	bne.n	8001a04 <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80019f0:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 80019f2:	695b      	ldr	r3, [r3, #20]
 80019f4:	2220      	movs	r2, #32
 80019f6:	431a      	orrs	r2, r3
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 80019fa:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2220      	movs	r2, #32
 8001a00:	4313      	orrs	r3, r2
 8001a02:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 8001a06:	699a      	ldr	r2, [r3, #24]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	025b      	lsls	r3, r3, #9
 8001a0c:	401a      	ands	r2, r3
 8001a0e:	2380      	movs	r3, #128	; 0x80
 8001a10:	025b      	lsls	r3, r3, #9
 8001a12:	429a      	cmp	r2, r3
 8001a14:	d10a      	bne.n	8001a2c <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8001a16:	4b0a      	ldr	r3, [pc, #40]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	2240      	movs	r2, #64	; 0x40
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <FLASH_SetErrorCode+0x134>)
 8001a20:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2280      	movs	r2, #128	; 0x80
 8001a26:	0252      	lsls	r2, r2, #9
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001a2c:	4b03      	ldr	r3, [pc, #12]	; (8001a3c <FLASH_SetErrorCode+0x130>)
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	619a      	str	r2, [r3, #24]
}  
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b002      	add	sp, #8
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	46c0      	nop			; (mov r8, r8)
 8001a3c:	40022000 	.word	0x40022000
 8001a40:	20000364 	.word	0x20000364

08001a44 <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	4013      	ands	r3, r2
 8001a52:	d019      	beq.n	8001a88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8001a54:	f3ef 8310 	mrs	r3, PRIMASK
 8001a58:	607b      	str	r3, [r7, #4]
  return(result);
 8001a5a:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 8001a5c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8001a5e:	b672      	cpsid	i
}
 8001a60:	46c0      	nop			; (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001a62:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 8001a66:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001a68:	4b0a      	ldr	r3, [pc, #40]	; (8001a94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8001a6a:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	60bb      	str	r3, [r7, #8]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8001a72:	68bb      	ldr	r3, [r7, #8]
 8001a74:	f383 8810 	msr	PRIMASK, r3
}
 8001a78:	46c0      	nop			; (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001a7a:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	2201      	movs	r2, #1
 8001a80:	4013      	ands	r3, r2
 8001a82:	d001      	beq.n	8001a88 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b004      	add	sp, #16
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	40022000 	.word	0x40022000
 8001a98:	89abcdef 	.word	0x89abcdef
 8001a9c:	02030405 	.word	0x02030405

08001aa0 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	4b03      	ldr	r3, [pc, #12]	; (8001ab8 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	430a      	orrs	r2, r1
 8001aae:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 8001ab0:	2300      	movs	r3, #0
}
 8001ab2:	0018      	movs	r0, r3
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	40022000 	.word	0x40022000

08001abc <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001abc:	b5b0      	push	{r4, r5, r7, lr}
 8001abe:	b086      	sub	sp, #24
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	60f8      	str	r0, [r7, #12]
 8001ac4:	60b9      	str	r1, [r7, #8]
 8001ac6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001ac8:	2317      	movs	r3, #23
 8001aca:	18fb      	adds	r3, r7, r3
 8001acc:	2201      	movs	r2, #1
 8001ace:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001ad2:	7c1b      	ldrb	r3, [r3, #16]
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d101      	bne.n	8001adc <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 8001ad8:	2302      	movs	r3, #2
 8001ada:	e03e      	b.n	8001b5a <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 8001adc:	4b21      	ldr	r3, [pc, #132]	; (8001b64 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001ade:	2201      	movs	r2, #1
 8001ae0:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ae2:	2517      	movs	r5, #23
 8001ae4:	197c      	adds	r4, r7, r5
 8001ae6:	4b20      	ldr	r3, [pc, #128]	; (8001b68 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f7ff fe9d 	bl	8001828 <FLASH_WaitForLastOperation>
 8001aee:	0003      	movs	r3, r0
 8001af0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 8001af2:	197b      	adds	r3, r7, r5
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d129      	bne.n	8001b4e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	; (8001b64 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d103      	bne.n	8001b0e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 8001b06:	68bb      	ldr	r3, [r7, #8]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	601a      	str	r2, [r3, #0]
 8001b0c:	e013      	b.n	8001b36 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d104      	bne.n	8001b1e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	b292      	uxth	r2, r2
 8001b1a:	801a      	strh	r2, [r3, #0]
 8001b1c:	e00b      	b.n	8001b36 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d104      	bne.n	8001b2e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	b2d2      	uxtb	r2, r2
 8001b2a:	701a      	strb	r2, [r3, #0]
 8001b2c:	e003      	b.n	8001b36 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 8001b2e:	2317      	movs	r3, #23
 8001b30:	18fb      	adds	r3, r7, r3
 8001b32:	2201      	movs	r2, #1
 8001b34:	701a      	strb	r2, [r3, #0]
    }

    if (status != HAL_OK)
 8001b36:	2217      	movs	r2, #23
 8001b38:	18bb      	adds	r3, r7, r2
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d006      	beq.n	8001b4e <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001b40:	18bc      	adds	r4, r7, r2
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 8001b44:	0018      	movs	r0, r3
 8001b46:	f7ff fe6f 	bl	8001828 <FLASH_WaitForLastOperation>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	741a      	strb	r2, [r3, #16]

  return status;
 8001b54:	2317      	movs	r3, #23
 8001b56:	18fb      	adds	r3, r7, r3
 8001b58:	781b      	ldrb	r3, [r3, #0]
}
 8001b5a:	0018      	movs	r0, r3
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	b006      	add	sp, #24
 8001b60:	bdb0      	pop	{r4, r5, r7, pc}
 8001b62:	46c0      	nop			; (mov r8, r8)
 8001b64:	20000364 	.word	0x20000364
 8001b68:	0000c350 	.word	0x0000c350

08001b6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
 8001b74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001b7e:	2300      	movs	r3, #0
 8001b80:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8001b82:	e14f      	b.n	8001e24 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	2101      	movs	r1, #1
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4091      	lsls	r1, r2
 8001b8e:	000a      	movs	r2, r1
 8001b90:	4013      	ands	r3, r2
 8001b92:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_GPIO_Init+0x30>
 8001b9a:	e140      	b.n	8001e1e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d00b      	beq.n	8001bbc <HAL_GPIO_Init+0x50>
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d007      	beq.n	8001bbc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bb0:	2b11      	cmp	r3, #17
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b12      	cmp	r3, #18
 8001bba:	d130      	bne.n	8001c1e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	2203      	movs	r2, #3
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	0013      	movs	r3, r2
 8001bcc:	43da      	mvns	r2, r3
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68da      	ldr	r2, [r3, #12]
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	409a      	lsls	r2, r3
 8001bde:	0013      	movs	r3, r2
 8001be0:	693a      	ldr	r2, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	693a      	ldr	r2, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	409a      	lsls	r2, r3
 8001bf8:	0013      	movs	r3, r2
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	091b      	lsrs	r3, r3, #4
 8001c08:	2201      	movs	r2, #1
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	0013      	movs	r3, r2
 8001c12:	693a      	ldr	r2, [r7, #16]
 8001c14:	4313      	orrs	r3, r2
 8001c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0xf2>
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b12      	cmp	r3, #18
 8001c5c:	d123      	bne.n	8001ca6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	08da      	lsrs	r2, r3, #3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	3208      	adds	r2, #8
 8001c66:	0092      	lsls	r2, r2, #2
 8001c68:	58d3      	ldr	r3, [r2, r3]
 8001c6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2207      	movs	r2, #7
 8001c70:	4013      	ands	r3, r2
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	220f      	movs	r2, #15
 8001c76:	409a      	lsls	r2, r3
 8001c78:	0013      	movs	r3, r2
 8001c7a:	43da      	mvns	r2, r3
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	4013      	ands	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	691a      	ldr	r2, [r3, #16]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	2107      	movs	r1, #7
 8001c8a:	400b      	ands	r3, r1
 8001c8c:	009b      	lsls	r3, r3, #2
 8001c8e:	409a      	lsls	r2, r3
 8001c90:	0013      	movs	r3, r2
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	08da      	lsrs	r2, r3, #3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	3208      	adds	r2, #8
 8001ca0:	0092      	lsls	r2, r2, #2
 8001ca2:	6939      	ldr	r1, [r7, #16]
 8001ca4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	005b      	lsls	r3, r3, #1
 8001cb0:	2203      	movs	r2, #3
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	0013      	movs	r3, r2
 8001cb6:	43da      	mvns	r2, r3
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	4013      	ands	r3, r2
 8001cbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2203      	movs	r2, #3
 8001cc4:	401a      	ands	r2, r3
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x17c>
 8001ce6:	e09a      	b.n	8001e1e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce8:	4b54      	ldr	r3, [pc, #336]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cec:	4b53      	ldr	r3, [pc, #332]	; (8001e3c <HAL_GPIO_Init+0x2d0>)
 8001cee:	2101      	movs	r1, #1
 8001cf0:	430a      	orrs	r2, r1
 8001cf2:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	089b      	lsrs	r3, r3, #2
 8001cfa:	3302      	adds	r3, #2
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	589b      	ldr	r3, [r3, r2]
 8001d00:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001d02:	697b      	ldr	r3, [r7, #20]
 8001d04:	2203      	movs	r2, #3
 8001d06:	4013      	ands	r3, r2
 8001d08:	009b      	lsls	r3, r3, #2
 8001d0a:	220f      	movs	r2, #15
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	0013      	movs	r3, r2
 8001d10:	43da      	mvns	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4013      	ands	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	23a0      	movs	r3, #160	; 0xa0
 8001d1c:	05db      	lsls	r3, r3, #23
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x1ea>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_GPIO_Init+0x2d8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x1e6>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a46      	ldr	r2, [pc, #280]	; (8001e48 <HAL_GPIO_Init+0x2dc>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x1e2>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a45      	ldr	r2, [pc, #276]	; (8001e4c <HAL_GPIO_Init+0x2e0>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x1de>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a44      	ldr	r2, [pc, #272]	; (8001e50 <HAL_GPIO_Init+0x2e4>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x1da>
 8001d42:	2305      	movs	r3, #5
 8001d44:	e008      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e006      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e004      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d4e:	2302      	movs	r3, #2
 8001d50:	e002      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d52:	2301      	movs	r3, #1
 8001d54:	e000      	b.n	8001d58 <HAL_GPIO_Init+0x1ec>
 8001d56:	2300      	movs	r3, #0
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	2103      	movs	r1, #3
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	0092      	lsls	r2, r2, #2
 8001d60:	4093      	lsls	r3, r2
 8001d62:	693a      	ldr	r2, [r7, #16]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d68:	4935      	ldr	r1, [pc, #212]	; (8001e40 <HAL_GPIO_Init+0x2d4>)
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	089b      	lsrs	r3, r3, #2
 8001d6e:	3302      	adds	r3, #2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	693a      	ldr	r2, [r7, #16]
 8001d74:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d76:	4b37      	ldr	r3, [pc, #220]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43da      	mvns	r2, r3
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685a      	ldr	r2, [r3, #4]
 8001d8a:	2380      	movs	r3, #128	; 0x80
 8001d8c:	025b      	lsls	r3, r3, #9
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d003      	beq.n	8001d9a <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d9a:	4b2e      	ldr	r3, [pc, #184]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001d9c:	693a      	ldr	r2, [r7, #16]
 8001d9e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001da0:	4b2c      	ldr	r3, [pc, #176]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	43da      	mvns	r2, r3
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	4013      	ands	r3, r2
 8001dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	2380      	movs	r3, #128	; 0x80
 8001db6:	029b      	lsls	r3, r3, #10
 8001db8:	4013      	ands	r3, r2
 8001dba:	d003      	beq.n	8001dc4 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001dbc:	693a      	ldr	r2, [r7, #16]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc4:	4b23      	ldr	r3, [pc, #140]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001dc6:	693a      	ldr	r2, [r7, #16]
 8001dc8:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dca:	4b22      	ldr	r3, [pc, #136]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001dcc:	689b      	ldr	r3, [r3, #8]
 8001dce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	43da      	mvns	r2, r3
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	685a      	ldr	r2, [r3, #4]
 8001dde:	2380      	movs	r3, #128	; 0x80
 8001de0:	035b      	lsls	r3, r3, #13
 8001de2:	4013      	ands	r3, r2
 8001de4:	d003      	beq.n	8001dee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dee:	4b19      	ldr	r3, [pc, #100]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001df4:	4b17      	ldr	r3, [pc, #92]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	43da      	mvns	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	4013      	ands	r3, r2
 8001e02:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	2380      	movs	r3, #128	; 0x80
 8001e0a:	039b      	lsls	r3, r3, #14
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	d003      	beq.n	8001e18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e18:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <HAL_GPIO_Init+0x2e8>)
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	40da      	lsrs	r2, r3
 8001e2c:	1e13      	subs	r3, r2, #0
 8001e2e:	d000      	beq.n	8001e32 <HAL_GPIO_Init+0x2c6>
 8001e30:	e6a8      	b.n	8001b84 <HAL_GPIO_Init+0x18>
  }
}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	46c0      	nop			; (mov r8, r8)
 8001e36:	46bd      	mov	sp, r7
 8001e38:	b006      	add	sp, #24
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40010000 	.word	0x40010000
 8001e44:	50000400 	.word	0x50000400
 8001e48:	50000800 	.word	0x50000800
 8001e4c:	50000c00 	.word	0x50000c00
 8001e50:	50001c00 	.word	0x50001c00
 8001e54:	40010400 	.word	0x40010400

08001e58 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	0008      	movs	r0, r1
 8001e62:	0011      	movs	r1, r2
 8001e64:	1cbb      	adds	r3, r7, #2
 8001e66:	1c02      	adds	r2, r0, #0
 8001e68:	801a      	strh	r2, [r3, #0]
 8001e6a:	1c7b      	adds	r3, r7, #1
 8001e6c:	1c0a      	adds	r2, r1, #0
 8001e6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e70:	1c7b      	adds	r3, r7, #1
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d004      	beq.n	8001e82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e78:	1cbb      	adds	r3, r7, #2
 8001e7a:	881a      	ldrh	r2, [r3, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001e80:	e003      	b.n	8001e8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8001e82:	1cbb      	adds	r3, r7, #2
 8001e84:	881a      	ldrh	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e8a:	46c0      	nop			; (mov r8, r8)
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	b002      	add	sp, #8
 8001e90:	bd80      	pop	{r7, pc}
	...

08001e94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e082      	b.n	8001fac <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2241      	movs	r2, #65	; 0x41
 8001eaa:	5c9b      	ldrb	r3, [r3, r2]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d107      	bne.n	8001ec2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2240      	movs	r2, #64	; 0x40
 8001eb6:	2100      	movs	r1, #0
 8001eb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	0018      	movs	r0, r3
 8001ebe:	f7fe fc5d 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2241      	movs	r2, #65	; 0x41
 8001ec6:	2124      	movs	r1, #36	; 0x24
 8001ec8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681a      	ldr	r2, [r3, #0]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	2101      	movs	r1, #1
 8001ed6:	438a      	bics	r2, r1
 8001ed8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4934      	ldr	r1, [pc, #208]	; (8001fb4 <HAL_I2C_Init+0x120>)
 8001ee4:	400a      	ands	r2, r1
 8001ee6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	689a      	ldr	r2, [r3, #8]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4931      	ldr	r1, [pc, #196]	; (8001fb8 <HAL_I2C_Init+0x124>)
 8001ef4:	400a      	ands	r2, r1
 8001ef6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	68db      	ldr	r3, [r3, #12]
 8001efc:	2b01      	cmp	r3, #1
 8001efe:	d108      	bne.n	8001f12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689a      	ldr	r2, [r3, #8]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	2180      	movs	r1, #128	; 0x80
 8001f0a:	0209      	lsls	r1, r1, #8
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	609a      	str	r2, [r3, #8]
 8001f10:	e007      	b.n	8001f22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689a      	ldr	r2, [r3, #8]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2184      	movs	r1, #132	; 0x84
 8001f1c:	0209      	lsls	r1, r1, #8
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d104      	bne.n	8001f34 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	0112      	lsls	r2, r2, #4
 8001f32:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	685a      	ldr	r2, [r3, #4]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	491f      	ldr	r1, [pc, #124]	; (8001fbc <HAL_I2C_Init+0x128>)
 8001f40:	430a      	orrs	r2, r1
 8001f42:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	68da      	ldr	r2, [r3, #12]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	491a      	ldr	r1, [pc, #104]	; (8001fb8 <HAL_I2C_Init+0x124>)
 8001f50:	400a      	ands	r2, r1
 8001f52:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	691a      	ldr	r2, [r3, #16]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	695b      	ldr	r3, [r3, #20]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	0011      	movs	r1, r2
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	021a      	lsls	r2, r3, #8
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	69d9      	ldr	r1, [r3, #28]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a1a      	ldr	r2, [r3, #32]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	430a      	orrs	r2, r1
 8001f7c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2101      	movs	r1, #1
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2200      	movs	r2, #0
 8001f92:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2241      	movs	r2, #65	; 0x41
 8001f98:	2120      	movs	r1, #32
 8001f9a:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2242      	movs	r2, #66	; 0x42
 8001fa6:	2100      	movs	r1, #0
 8001fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b002      	add	sp, #8
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	f0ffffff 	.word	0xf0ffffff
 8001fb8:	ffff7fff 	.word	0xffff7fff
 8001fbc:	02008000 	.word	0x02008000

08001fc0 <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	1dbb      	adds	r3, r7, #6
 8001fcc:	801a      	strh	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2241      	movs	r2, #65	; 0x41
 8001fd2:	5c9b      	ldrb	r3, [r3, r2]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	2b20      	cmp	r3, #32
 8001fd8:	d13b      	bne.n	8002052 <HAL_I2C_Slave_Receive_IT+0x92>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2240      	movs	r2, #64	; 0x40
 8001fde:	5c9b      	ldrb	r3, [r3, r2]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d101      	bne.n	8001fe8 <HAL_I2C_Slave_Receive_IT+0x28>
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	e035      	b.n	8002054 <HAL_I2C_Slave_Receive_IT+0x94>
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2240      	movs	r2, #64	; 0x40
 8001fec:	2101      	movs	r1, #1
 8001fee:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2241      	movs	r2, #65	; 0x41
 8001ff4:	2122      	movs	r1, #34	; 0x22
 8001ff6:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	2242      	movs	r2, #66	; 0x42
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2200      	movs	r2, #0
 8002004:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4912      	ldr	r1, [pc, #72]	; (800205c <HAL_I2C_Slave_Receive_IT+0x9c>)
 8002012:	400a      	ands	r2, r1
 8002014:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	68ba      	ldr	r2, [r7, #8]
 800201a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1dba      	adds	r2, r7, #6
 8002020:	8812      	ldrh	r2, [r2, #0]
 8002022:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002028:	b29a      	uxth	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	4a0b      	ldr	r2, [pc, #44]	; (8002060 <HAL_I2C_Slave_Receive_IT+0xa0>)
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	4a0b      	ldr	r2, [pc, #44]	; (8002064 <HAL_I2C_Slave_Receive_IT+0xa4>)
 8002038:	635a      	str	r2, [r3, #52]	; 0x34

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2240      	movs	r2, #64	; 0x40
 800203e:	2100      	movs	r1, #0
 8002040:	5499      	strb	r1, [r3, r2]
              process unlock */

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI| I2C_IT_STOPI| I2C_IT_NACKI | I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_LISTEN_IT);
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_I2C_Slave_Receive_IT+0xa8>)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	0011      	movs	r1, r2
 8002048:	0018      	movs	r0, r3
 800204a:	f001 f89b 	bl	8003184 <I2C_Enable_IRQ>

    return HAL_OK;
 800204e:	2300      	movs	r3, #0
 8002050:	e000      	b.n	8002054 <HAL_I2C_Slave_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002052:	2302      	movs	r3, #2
  }
}
 8002054:	0018      	movs	r0, r3
 8002056:	46bd      	mov	sp, r7
 8002058:	b004      	add	sp, #16
 800205a:	bd80      	pop	{r7, pc}
 800205c:	ffff7fff 	.word	0xffff7fff
 8002060:	ffff0000 	.word	0xffff0000
 8002064:	0800211d 	.word	0x0800211d
 8002068:	00008002 	.word	0x00008002

0800206c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8002074:	46c0      	nop			; (mov r8, r8)
 8002076:	46bd      	mov	sp, r7
 8002078:	b002      	add	sp, #8
 800207a:	bd80      	pop	{r7, pc}

0800207c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b082      	sub	sp, #8
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b002      	add	sp, #8
 800208a:	bd80      	pop	{r7, pc}

0800208c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002094:	46c0      	nop			; (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	0008      	movs	r0, r1
 80020b6:	0011      	movs	r1, r2
 80020b8:	1cfb      	adds	r3, r7, #3
 80020ba:	1c02      	adds	r2, r0, #0
 80020bc:	701a      	strb	r2, [r3, #0]
 80020be:	003b      	movs	r3, r7
 80020c0:	1c0a      	adds	r2, r1, #0
 80020c2:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80020c4:	46c0      	nop			; (mov r8, r8)
 80020c6:	46bd      	mov	sp, r7
 80020c8:	b002      	add	sp, #8
 80020ca:	bd80      	pop	{r7, pc}

080020cc <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80020d4:	46c0      	nop			; (mov r8, r8)
 80020d6:	46bd      	mov	sp, r7
 80020d8:	b002      	add	sp, #8
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b082      	sub	sp, #8
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80020e4:	46c0      	nop			; (mov r8, r8)
 80020e6:	46bd      	mov	sp, r7
 80020e8:	b002      	add	sp, #8
 80020ea:	bd80      	pop	{r7, pc}

080020ec <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80020f4:	46c0      	nop			; (mov r8, r8)
 80020f6:	46bd      	mov	sp, r7
 80020f8:	b002      	add	sp, #8
 80020fa:	bd80      	pop	{r7, pc}

080020fc <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b082      	sub	sp, #8
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	b002      	add	sp, #8
 800210a:	bd80      	pop	{r7, pc}

0800210c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002114:	46c0      	nop			; (mov r8, r8)
 8002116:	46bd      	mov	sp, r7
 8002118:	b002      	add	sp, #8
 800211a:	bd80      	pop	{r7, pc}

0800211c <I2C_Slave_ISR_IT>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2240      	movs	r2, #64	; 0x40
 8002136:	5c9b      	ldrb	r3, [r3, r2]
 8002138:	2b01      	cmp	r3, #1
 800213a:	d101      	bne.n	8002140 <I2C_Slave_ISR_IT+0x24>
 800213c:	2302      	movs	r3, #2
 800213e:	e0fa      	b.n	8002336 <I2C_Slave_ISR_IT+0x21a>
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2240      	movs	r2, #64	; 0x40
 8002144:	2101      	movs	r1, #1
 8002146:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	095b      	lsrs	r3, r3, #5
 800214c:	001a      	movs	r2, r3
 800214e:	2301      	movs	r3, #1
 8002150:	4013      	ands	r3, r2
 8002152:	d00b      	beq.n	800216c <I2C_Slave_ISR_IT+0x50>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	095b      	lsrs	r3, r3, #5
 8002158:	001a      	movs	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	4013      	ands	r3, r2
 800215e:	d005      	beq.n	800216c <I2C_Slave_ISR_IT+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	0011      	movs	r1, r2
 8002166:	0018      	movs	r0, r3
 8002168:	f000 fd0c 	bl	8002b84 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	091b      	lsrs	r3, r3, #4
 8002170:	001a      	movs	r2, r3
 8002172:	2301      	movs	r3, #1
 8002174:	4013      	ands	r3, r2
 8002176:	d054      	beq.n	8002222 <I2C_Slave_ISR_IT+0x106>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	091b      	lsrs	r3, r3, #4
 800217c:	001a      	movs	r2, r3
 800217e:	2301      	movs	r3, #1
 8002180:	4013      	ands	r3, r2
 8002182:	d04e      	beq.n	8002222 <I2C_Slave_ISR_IT+0x106>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002188:	b29b      	uxth	r3, r3
 800218a:	2b00      	cmp	r3, #0
 800218c:	d12d      	bne.n	80021ea <I2C_Slave_ISR_IT+0xce>
    {
      /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2241      	movs	r2, #65	; 0x41
 8002192:	5c9b      	ldrb	r3, [r3, r2]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b28      	cmp	r3, #40	; 0x28
 8002198:	d10b      	bne.n	80021b2 <I2C_Slave_ISR_IT+0x96>
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	2380      	movs	r3, #128	; 0x80
 800219e:	049b      	lsls	r3, r3, #18
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d106      	bne.n	80021b2 <I2C_Slave_ISR_IT+0x96>
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	0011      	movs	r1, r2
 80021aa:	0018      	movs	r0, r3
 80021ac:	f000 fe0e 	bl	8002dcc <I2C_ITListenCplt>
 80021b0:	e036      	b.n	8002220 <I2C_Slave_ISR_IT+0x104>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	2241      	movs	r2, #65	; 0x41
 80021b6:	5c9b      	ldrb	r3, [r3, r2]
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	2b29      	cmp	r3, #41	; 0x29
 80021bc:	d110      	bne.n	80021e0 <I2C_Slave_ISR_IT+0xc4>
 80021be:	697b      	ldr	r3, [r7, #20]
 80021c0:	4a5f      	ldr	r2, [pc, #380]	; (8002340 <I2C_Slave_ISR_IT+0x224>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d00c      	beq.n	80021e0 <I2C_Slave_ISR_IT+0xc4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2210      	movs	r2, #16
 80021cc:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	0018      	movs	r0, r3
 80021d2:	f000 ff60 	bl	8003096 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	0018      	movs	r0, r3
 80021da:	f000 fb9b 	bl	8002914 <I2C_ITSlaveSeqCplt>
 80021de:	e01f      	b.n	8002220 <I2C_Slave_ISR_IT+0x104>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2210      	movs	r2, #16
 80021e6:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80021e8:	e09d      	b.n	8002326 <I2C_Slave_ISR_IT+0x20a>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2210      	movs	r2, #16
 80021f0:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f6:	2204      	movs	r2, #4
 80021f8:	431a      	orrs	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d005      	beq.n	8002210 <I2C_Slave_ISR_IT+0xf4>
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	2380      	movs	r3, #128	; 0x80
 8002208:	045b      	lsls	r3, r3, #17
 800220a:	429a      	cmp	r2, r3
 800220c:	d000      	beq.n	8002210 <I2C_Slave_ISR_IT+0xf4>
 800220e:	e08a      	b.n	8002326 <I2C_Slave_ISR_IT+0x20a>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	0011      	movs	r1, r2
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fe31 	bl	8002e80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800221e:	e082      	b.n	8002326 <I2C_Slave_ISR_IT+0x20a>
 8002220:	e081      	b.n	8002326 <I2C_Slave_ISR_IT+0x20a>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	089b      	lsrs	r3, r3, #2
 8002226:	001a      	movs	r2, r3
 8002228:	2301      	movs	r3, #1
 800222a:	4013      	ands	r3, r2
 800222c:	d031      	beq.n	8002292 <I2C_Slave_ISR_IT+0x176>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	001a      	movs	r2, r3
 8002234:	2301      	movs	r3, #1
 8002236:	4013      	ands	r3, r2
 8002238:	d02b      	beq.n	8002292 <I2C_Slave_ISR_IT+0x176>
  {
    if (hi2c->XferCount > 0U)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223e:	b29b      	uxth	r3, r3
 8002240:	2b00      	cmp	r3, #0
 8002242:	d018      	beq.n	8002276 <I2C_Slave_ISR_IT+0x15a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224e:	b2d2      	uxtb	r2, r2
 8002250:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	1c5a      	adds	r2, r3, #1
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002260:	3b01      	subs	r3, #1
 8002262:	b29a      	uxth	r2, r3
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800227a:	b29b      	uxth	r3, r3
 800227c:	2b00      	cmp	r3, #0
 800227e:	d154      	bne.n	800232a <I2C_Slave_ISR_IT+0x20e>
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <I2C_Slave_ISR_IT+0x224>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d050      	beq.n	800232a <I2C_Slave_ISR_IT+0x20e>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	0018      	movs	r0, r3
 800228c:	f000 fb42 	bl	8002914 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002290:	e04b      	b.n	800232a <I2C_Slave_ISR_IT+0x20e>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	08db      	lsrs	r3, r3, #3
 8002296:	001a      	movs	r2, r3
 8002298:	2301      	movs	r3, #1
 800229a:	4013      	ands	r3, r2
 800229c:	d00c      	beq.n	80022b8 <I2C_Slave_ISR_IT+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	08db      	lsrs	r3, r3, #3
 80022a2:	001a      	movs	r2, r3
 80022a4:	2301      	movs	r3, #1
 80022a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80022a8:	d006      	beq.n	80022b8 <I2C_Slave_ISR_IT+0x19c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	0011      	movs	r1, r2
 80022b0:	0018      	movs	r0, r3
 80022b2:	f000 fa49 	bl	8002748 <I2C_ITAddrCplt>
 80022b6:	e039      	b.n	800232c <I2C_Slave_ISR_IT+0x210>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	085b      	lsrs	r3, r3, #1
 80022bc:	001a      	movs	r2, r3
 80022be:	2301      	movs	r3, #1
 80022c0:	4013      	ands	r3, r2
 80022c2:	d033      	beq.n	800232c <I2C_Slave_ISR_IT+0x210>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	085b      	lsrs	r3, r3, #1
 80022c8:	001a      	movs	r2, r3
 80022ca:	2301      	movs	r3, #1
 80022cc:	4013      	ands	r3, r2
 80022ce:	d02d      	beq.n	800232c <I2C_Slave_ISR_IT+0x210>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d4:	b29b      	uxth	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d018      	beq.n	800230c <I2C_Slave_ISR_IT+0x1f0>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28
 800230a:	e00f      	b.n	800232c <I2C_Slave_ISR_IT+0x210>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	2380      	movs	r3, #128	; 0x80
 8002310:	045b      	lsls	r3, r3, #17
 8002312:	429a      	cmp	r2, r3
 8002314:	d002      	beq.n	800231c <I2C_Slave_ISR_IT+0x200>
 8002316:	697b      	ldr	r3, [r7, #20]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <I2C_Slave_ISR_IT+0x210>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 faf8 	bl	8002914 <I2C_ITSlaveSeqCplt>
 8002324:	e002      	b.n	800232c <I2C_Slave_ISR_IT+0x210>
    if (hi2c->XferCount == 0U)
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	e000      	b.n	800232c <I2C_Slave_ISR_IT+0x210>
    if ((hi2c->XferCount == 0U) && \
 800232a:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2240      	movs	r2, #64	; 0x40
 8002330:	2100      	movs	r1, #0
 8002332:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002334:	2300      	movs	r3, #0
}
 8002336:	0018      	movs	r0, r3
 8002338:	46bd      	mov	sp, r7
 800233a:	b006      	add	sp, #24
 800233c:	bd80      	pop	{r7, pc}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	ffff0000 	.word	0xffff0000

08002344 <I2C_Master_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 8002344:	b590      	push	{r4, r7, lr}
 8002346:	b089      	sub	sp, #36	; 0x24
 8002348:	af02      	add	r7, sp, #8
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2240      	movs	r2, #64	; 0x40
 8002354:	5c9b      	ldrb	r3, [r3, r2]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d101      	bne.n	800235e <I2C_Master_ISR_DMA+0x1a>
 800235a:	2302      	movs	r3, #2
 800235c:	e0f7      	b.n	800254e <I2C_Master_ISR_DMA+0x20a>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2240      	movs	r2, #64	; 0x40
 8002362:	2101      	movs	r1, #1
 8002364:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	091b      	lsrs	r3, r3, #4
 800236a:	001a      	movs	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	4013      	ands	r3, r2
 8002370:	d019      	beq.n	80023a6 <I2C_Master_ISR_DMA+0x62>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	091b      	lsrs	r3, r3, #4
 8002376:	001a      	movs	r2, r3
 8002378:	2301      	movs	r3, #1
 800237a:	4013      	ands	r3, r2
 800237c:	d013      	beq.n	80023a6 <I2C_Master_ISR_DMA+0x62>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2210      	movs	r2, #16
 8002384:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238a:	2204      	movs	r2, #4
 800238c:	431a      	orrs	r2, r3
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2120      	movs	r1, #32
 8002396:	0018      	movs	r0, r3
 8002398:	f000 fef4 	bl	8003184 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0018      	movs	r0, r3
 80023a0:	f000 fe79 	bl	8003096 <I2C_Flush_TXDR>
 80023a4:	e0ce      	b.n	8002544 <I2C_Master_ISR_DMA+0x200>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	09db      	lsrs	r3, r3, #7
 80023aa:	001a      	movs	r2, r3
 80023ac:	2301      	movs	r3, #1
 80023ae:	4013      	ands	r3, r2
 80023b0:	d100      	bne.n	80023b4 <I2C_Master_ISR_DMA+0x70>
 80023b2:	e07e      	b.n	80024b2 <I2C_Master_ISR_DMA+0x16e>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	099b      	lsrs	r3, r3, #6
 80023b8:	001a      	movs	r2, r3
 80023ba:	2301      	movs	r3, #1
 80023bc:	4013      	ands	r3, r2
 80023be:	d100      	bne.n	80023c2 <I2C_Master_ISR_DMA+0x7e>
 80023c0:	e077      	b.n	80024b2 <I2C_Master_ISR_DMA+0x16e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2140      	movs	r1, #64	; 0x40
 80023ce:	438a      	bics	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d055      	beq.n	8002488 <I2C_Master_ISR_DMA+0x144>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	2312      	movs	r3, #18
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	0592      	lsls	r2, r2, #22
 80023ea:	0d92      	lsrs	r2, r2, #22
 80023ec:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	2bff      	cmp	r3, #255	; 0xff
 80023f6:	d906      	bls.n	8002406 <I2C_Master_ISR_DMA+0xc2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	22ff      	movs	r2, #255	; 0xff
 80023fc:	851a      	strh	r2, [r3, #40]	; 0x28
        xfermode = I2C_RELOAD_MODE;
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	045b      	lsls	r3, r3, #17
 8002402:	617b      	str	r3, [r7, #20]
 8002404:	e010      	b.n	8002428 <I2C_Master_ISR_DMA+0xe4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002414:	4a50      	ldr	r2, [pc, #320]	; (8002558 <I2C_Master_ISR_DMA+0x214>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d003      	beq.n	8002422 <I2C_Master_ISR_DMA+0xde>
        {
          xfermode = hi2c->XferOptions;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241e:	617b      	str	r3, [r7, #20]
 8002420:	e002      	b.n	8002428 <I2C_Master_ISR_DMA+0xe4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8002422:	2380      	movs	r3, #128	; 0x80
 8002424:	049b      	lsls	r3, r3, #18
 8002426:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800242c:	b2da      	uxtb	r2, r3
 800242e:	697c      	ldr	r4, [r7, #20]
 8002430:	2312      	movs	r3, #18
 8002432:	18fb      	adds	r3, r7, r3
 8002434:	8819      	ldrh	r1, [r3, #0]
 8002436:	68f8      	ldr	r0, [r7, #12]
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	0023      	movs	r3, r4
 800243e:	f000 fe6b 	bl	8003118 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002446:	b29a      	uxth	r2, r3
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	b29a      	uxth	r2, r3
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2241      	movs	r2, #65	; 0x41
 8002458:	5c9b      	ldrb	r3, [r3, r2]
 800245a:	b2db      	uxtb	r3, r3
 800245c:	2b22      	cmp	r3, #34	; 0x22
 800245e:	d109      	bne.n	8002474 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2180      	movs	r1, #128	; 0x80
 800246c:	0209      	lsls	r1, r1, #8
 800246e:	430a      	orrs	r2, r1
 8002470:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002472:	e067      	b.n	8002544 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	681a      	ldr	r2, [r3, #0]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	01c9      	lsls	r1, r1, #7
 8002482:	430a      	orrs	r2, r1
 8002484:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8002486:	e05d      	b.n	8002544 <I2C_Master_ISR_DMA+0x200>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	685a      	ldr	r2, [r3, #4]
 800248e:	2380      	movs	r3, #128	; 0x80
 8002490:	049b      	lsls	r3, r3, #18
 8002492:	401a      	ands	r2, r3
 8002494:	2380      	movs	r3, #128	; 0x80
 8002496:	049b      	lsls	r3, r3, #18
 8002498:	429a      	cmp	r2, r3
 800249a:	d004      	beq.n	80024a6 <I2C_Master_ISR_DMA+0x162>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	0018      	movs	r0, r3
 80024a0:	f000 f9f6 	bl	8002890 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 80024a4:	e04e      	b.n	8002544 <I2C_Master_ISR_DMA+0x200>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2140      	movs	r1, #64	; 0x40
 80024aa:	0018      	movs	r0, r3
 80024ac:	f000 fce8 	bl	8002e80 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 80024b0:	e048      	b.n	8002544 <I2C_Master_ISR_DMA+0x200>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	099b      	lsrs	r3, r3, #6
 80024b6:	001a      	movs	r2, r3
 80024b8:	2301      	movs	r3, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	d02e      	beq.n	800251c <I2C_Master_ISR_DMA+0x1d8>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	099b      	lsrs	r3, r3, #6
 80024c2:	001a      	movs	r2, r3
 80024c4:	2301      	movs	r3, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	d028      	beq.n	800251c <I2C_Master_ISR_DMA+0x1d8>
  {
    if (hi2c->XferCount == 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d11d      	bne.n	8002510 <I2C_Master_ISR_DMA+0x1cc>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	685a      	ldr	r2, [r3, #4]
 80024da:	2380      	movs	r3, #128	; 0x80
 80024dc:	049b      	lsls	r3, r3, #18
 80024de:	401a      	ands	r2, r3
 80024e0:	2380      	movs	r3, #128	; 0x80
 80024e2:	049b      	lsls	r3, r3, #18
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d02c      	beq.n	8002542 <I2C_Master_ISR_DMA+0x1fe>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	4a1a      	ldr	r2, [pc, #104]	; (8002558 <I2C_Master_ISR_DMA+0x214>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d109      	bne.n	8002506 <I2C_Master_ISR_DMA+0x1c2>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2180      	movs	r1, #128	; 0x80
 80024fe:	01c9      	lsls	r1, r1, #7
 8002500:	430a      	orrs	r2, r1
 8002502:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8002504:	e01d      	b.n	8002542 <I2C_Master_ISR_DMA+0x1fe>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f9c1 	bl	8002890 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800250e:	e018      	b.n	8002542 <I2C_Master_ISR_DMA+0x1fe>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2140      	movs	r1, #64	; 0x40
 8002514:	0018      	movs	r0, r3
 8002516:	f000 fcb3 	bl	8002e80 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800251a:	e012      	b.n	8002542 <I2C_Master_ISR_DMA+0x1fe>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	095b      	lsrs	r3, r3, #5
 8002520:	001a      	movs	r2, r3
 8002522:	2301      	movs	r3, #1
 8002524:	4013      	ands	r3, r2
 8002526:	d00d      	beq.n	8002544 <I2C_Master_ISR_DMA+0x200>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	095b      	lsrs	r3, r3, #5
 800252c:	001a      	movs	r2, r3
 800252e:	2301      	movs	r3, #1
 8002530:	4013      	ands	r3, r2
 8002532:	d007      	beq.n	8002544 <I2C_Master_ISR_DMA+0x200>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0011      	movs	r1, r2
 800253a:	0018      	movs	r0, r3
 800253c:	f000 fa50 	bl	80029e0 <I2C_ITMasterCplt>
 8002540:	e000      	b.n	8002544 <I2C_Master_ISR_DMA+0x200>
    if (hi2c->XferCount == 0U)
 8002542:	46c0      	nop			; (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2240      	movs	r2, #64	; 0x40
 8002548:	2100      	movs	r1, #0
 800254a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800254c:	2300      	movs	r3, #0
}
 800254e:	0018      	movs	r0, r3
 8002550:	46bd      	mov	sp, r7
 8002552:	b007      	add	sp, #28
 8002554:	bd90      	pop	{r4, r7, pc}
 8002556:	46c0      	nop			; (mov r8, r8)
 8002558:	ffff0000 	.word	0xffff0000

0800255c <I2C_Slave_ISR_DMA>:
  * @param  ITFlags Interrupt flags to handle.
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags, uint32_t ITSources)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b088      	sub	sp, #32
 8002560:	af00      	add	r7, sp, #0
 8002562:	60f8      	str	r0, [r7, #12]
 8002564:	60b9      	str	r1, [r7, #8]
 8002566:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800256c:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800256e:	2300      	movs	r3, #0
 8002570:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	2240      	movs	r2, #64	; 0x40
 8002576:	5c9b      	ldrb	r3, [r3, r2]
 8002578:	2b01      	cmp	r3, #1
 800257a:	d101      	bne.n	8002580 <I2C_Slave_ISR_DMA+0x24>
 800257c:	2302      	movs	r3, #2
 800257e:	e0dd      	b.n	800273c <I2C_Slave_ISR_DMA+0x1e0>
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2240      	movs	r2, #64	; 0x40
 8002584:	2101      	movs	r1, #1
 8002586:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	001a      	movs	r2, r3
 800258e:	2301      	movs	r3, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d00b      	beq.n	80025ac <I2C_Slave_ISR_DMA+0x50>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	001a      	movs	r2, r3
 800259a:	2301      	movs	r3, #1
 800259c:	4013      	ands	r3, r2
 800259e:	d005      	beq.n	80025ac <I2C_Slave_ISR_DMA+0x50>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	0011      	movs	r1, r2
 80025a6:	0018      	movs	r0, r3
 80025a8:	f000 faec 	bl	8002b84 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	091b      	lsrs	r3, r3, #4
 80025b0:	001a      	movs	r2, r3
 80025b2:	2301      	movs	r3, #1
 80025b4:	4013      	ands	r3, r2
 80025b6:	d100      	bne.n	80025ba <I2C_Slave_ISR_DMA+0x5e>
 80025b8:	e0a9      	b.n	800270e <I2C_Slave_ISR_DMA+0x1b2>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	091b      	lsrs	r3, r3, #4
 80025be:	001a      	movs	r2, r3
 80025c0:	2301      	movs	r3, #1
 80025c2:	4013      	ands	r3, r2
 80025c4:	d100      	bne.n	80025c8 <I2C_Slave_ISR_DMA+0x6c>
 80025c6:	e0a2      	b.n	800270e <I2C_Slave_ISR_DMA+0x1b2>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	0b9b      	lsrs	r3, r3, #14
 80025cc:	001a      	movs	r2, r3
 80025ce:	2301      	movs	r3, #1
 80025d0:	4013      	ands	r3, r2
 80025d2:	d106      	bne.n	80025e2 <I2C_Slave_ISR_DMA+0x86>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	0bdb      	lsrs	r3, r3, #15
 80025d8:	001a      	movs	r2, r3
 80025da:	2301      	movs	r3, #1
 80025dc:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80025de:	d100      	bne.n	80025e2 <I2C_Slave_ISR_DMA+0x86>
 80025e0:	e08e      	b.n	8002700 <I2C_Slave_ISR_DMA+0x1a4>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00d      	beq.n	8002606 <I2C_Slave_ISR_DMA+0xaa>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	0bdb      	lsrs	r3, r3, #15
 80025ee:	001a      	movs	r2, r3
 80025f0:	2301      	movs	r3, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d007      	beq.n	8002606 <I2C_Slave_ISR_DMA+0xaa>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmarx) == 0U)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d101      	bne.n	8002606 <I2C_Slave_ISR_DMA+0xaa>
          {
            treatdmanack = 1U;
 8002602:	2301      	movs	r3, #1
 8002604:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00d      	beq.n	800262a <I2C_Slave_ISR_DMA+0xce>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	0b9b      	lsrs	r3, r3, #14
 8002612:	001a      	movs	r2, r3
 8002614:	2301      	movs	r3, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d007      	beq.n	800262a <I2C_Slave_ISR_DMA+0xce>
        {
          if (__HAL_DMA_GET_COUNTER(hi2c->hdmatx) == 0U)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d101      	bne.n	800262a <I2C_Slave_ISR_DMA+0xce>
          {
            treatdmanack = 1U;
 8002626:	2301      	movs	r3, #1
 8002628:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d12d      	bne.n	800268c <I2C_Slave_ISR_DMA+0x130>
      {
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for Warning[Pa134]: left and right operands are identical */
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2241      	movs	r2, #65	; 0x41
 8002634:	5c9b      	ldrb	r3, [r3, r2]
 8002636:	b2db      	uxtb	r3, r3
 8002638:	2b28      	cmp	r3, #40	; 0x28
 800263a:	d10b      	bne.n	8002654 <I2C_Slave_ISR_DMA+0xf8>
 800263c:	69ba      	ldr	r2, [r7, #24]
 800263e:	2380      	movs	r3, #128	; 0x80
 8002640:	049b      	lsls	r3, r3, #18
 8002642:	429a      	cmp	r2, r3
 8002644:	d106      	bne.n	8002654 <I2C_Slave_ISR_DMA+0xf8>
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	0011      	movs	r1, r2
 800264c:	0018      	movs	r0, r3
 800264e:	f000 fbbd 	bl	8002dcc <I2C_ITListenCplt>
 8002652:	e054      	b.n	80026fe <I2C_Slave_ISR_DMA+0x1a2>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2241      	movs	r2, #65	; 0x41
 8002658:	5c9b      	ldrb	r3, [r3, r2]
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b29      	cmp	r3, #41	; 0x29
 800265e:	d110      	bne.n	8002682 <I2C_Slave_ISR_DMA+0x126>
 8002660:	69bb      	ldr	r3, [r7, #24]
 8002662:	4a38      	ldr	r2, [pc, #224]	; (8002744 <I2C_Slave_ISR_DMA+0x1e8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00c      	beq.n	8002682 <I2C_Slave_ISR_DMA+0x126>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2210      	movs	r2, #16
 800266e:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	0018      	movs	r0, r3
 8002674:	f000 fd0f 	bl	8003096 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	0018      	movs	r0, r3
 800267c:	f000 f94a 	bl	8002914 <I2C_ITSlaveSeqCplt>
 8002680:	e03d      	b.n	80026fe <I2C_Slave_ISR_DMA+0x1a2>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2210      	movs	r2, #16
 8002688:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800268a:	e03e      	b.n	800270a <I2C_Slave_ISR_DMA+0x1ae>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	2210      	movs	r2, #16
 8002692:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002698:	2204      	movs	r2, #4
 800269a:	431a      	orrs	r2, r3
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80026a0:	2317      	movs	r3, #23
 80026a2:	18fb      	adds	r3, r7, r3
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	2141      	movs	r1, #65	; 0x41
 80026a8:	5c52      	ldrb	r2, [r2, r1]
 80026aa:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d004      	beq.n	80026bc <I2C_Slave_ISR_DMA+0x160>
 80026b2:	69ba      	ldr	r2, [r7, #24]
 80026b4:	2380      	movs	r3, #128	; 0x80
 80026b6:	045b      	lsls	r3, r3, #17
 80026b8:	429a      	cmp	r2, r3
 80026ba:	d126      	bne.n	800270a <I2C_Slave_ISR_DMA+0x1ae>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80026bc:	2217      	movs	r2, #23
 80026be:	18bb      	adds	r3, r7, r2
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b21      	cmp	r3, #33	; 0x21
 80026c4:	d003      	beq.n	80026ce <I2C_Slave_ISR_DMA+0x172>
 80026c6:	18bb      	adds	r3, r7, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b29      	cmp	r3, #41	; 0x29
 80026cc:	d103      	bne.n	80026d6 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2221      	movs	r2, #33	; 0x21
 80026d2:	631a      	str	r2, [r3, #48]	; 0x30
 80026d4:	e00b      	b.n	80026ee <I2C_Slave_ISR_DMA+0x192>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80026d6:	2217      	movs	r2, #23
 80026d8:	18bb      	adds	r3, r7, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	2b22      	cmp	r3, #34	; 0x22
 80026de:	d003      	beq.n	80026e8 <I2C_Slave_ISR_DMA+0x18c>
 80026e0:	18bb      	adds	r3, r7, r2
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b2a      	cmp	r3, #42	; 0x2a
 80026e6:	d102      	bne.n	80026ee <I2C_Slave_ISR_DMA+0x192>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2222      	movs	r2, #34	; 0x22
 80026ec:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	0011      	movs	r1, r2
 80026f6:	0018      	movs	r0, r3
 80026f8:	f000 fbc2 	bl	8002e80 <I2C_ITError>
      if (treatdmanack == 1U)
 80026fc:	e005      	b.n	800270a <I2C_Slave_ISR_DMA+0x1ae>
 80026fe:	e004      	b.n	800270a <I2C_Slave_ISR_DMA+0x1ae>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2210      	movs	r2, #16
 8002706:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8002708:	e013      	b.n	8002732 <I2C_Slave_ISR_DMA+0x1d6>
      if (treatdmanack == 1U)
 800270a:	46c0      	nop			; (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800270c:	e011      	b.n	8002732 <I2C_Slave_ISR_DMA+0x1d6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	08db      	lsrs	r3, r3, #3
 8002712:	001a      	movs	r2, r3
 8002714:	2301      	movs	r3, #1
 8002716:	4013      	ands	r3, r2
 8002718:	d00b      	beq.n	8002732 <I2C_Slave_ISR_DMA+0x1d6>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	08db      	lsrs	r3, r3, #3
 800271e:	001a      	movs	r2, r3
 8002720:	2301      	movs	r3, #1
 8002722:	4013      	ands	r3, r2
 8002724:	d005      	beq.n	8002732 <I2C_Slave_ISR_DMA+0x1d6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	0011      	movs	r1, r2
 800272c:	0018      	movs	r0, r3
 800272e:	f000 f80b 	bl	8002748 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2240      	movs	r2, #64	; 0x40
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b008      	add	sp, #32
 8002742:	bd80      	pop	{r7, pc}
 8002744:	ffff0000 	.word	0xffff0000

08002748 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002748:	b5b0      	push	{r4, r5, r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2241      	movs	r2, #65	; 0x41
 8002756:	5c9b      	ldrb	r3, [r3, r2]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	001a      	movs	r2, r3
 800275c:	2328      	movs	r3, #40	; 0x28
 800275e:	4013      	ands	r3, r2
 8002760:	2b28      	cmp	r3, #40	; 0x28
 8002762:	d000      	beq.n	8002766 <I2C_ITAddrCplt+0x1e>
 8002764:	e088      	b.n	8002878 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	0c1b      	lsrs	r3, r3, #16
 800276e:	b2da      	uxtb	r2, r3
 8002770:	250f      	movs	r5, #15
 8002772:	197b      	adds	r3, r7, r5
 8002774:	2101      	movs	r1, #1
 8002776:	400a      	ands	r2, r1
 8002778:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	0c1b      	lsrs	r3, r3, #16
 8002782:	b29a      	uxth	r2, r3
 8002784:	200c      	movs	r0, #12
 8002786:	183b      	adds	r3, r7, r0
 8002788:	21fe      	movs	r1, #254	; 0xfe
 800278a:	400a      	ands	r2, r1
 800278c:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	b29a      	uxth	r2, r3
 8002796:	240a      	movs	r4, #10
 8002798:	193b      	adds	r3, r7, r4
 800279a:	0592      	lsls	r2, r2, #22
 800279c:	0d92      	lsrs	r2, r2, #22
 800279e:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	2308      	movs	r3, #8
 80027aa:	18fb      	adds	r3, r7, r3
 80027ac:	21fe      	movs	r1, #254	; 0xfe
 80027ae:	400a      	ands	r2, r1
 80027b0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d148      	bne.n	800284c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 80027ba:	0021      	movs	r1, r4
 80027bc:	187b      	adds	r3, r7, r1
 80027be:	881b      	ldrh	r3, [r3, #0]
 80027c0:	09db      	lsrs	r3, r3, #7
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	183b      	adds	r3, r7, r0
 80027c6:	881b      	ldrh	r3, [r3, #0]
 80027c8:	4053      	eors	r3, r2
 80027ca:	b29b      	uxth	r3, r3
 80027cc:	001a      	movs	r2, r3
 80027ce:	2306      	movs	r3, #6
 80027d0:	4013      	ands	r3, r2
 80027d2:	d120      	bne.n	8002816 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 80027d4:	183b      	adds	r3, r7, r0
 80027d6:	187a      	adds	r2, r7, r1
 80027d8:	8812      	ldrh	r2, [r2, #0]
 80027da:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e0:	1c5a      	adds	r2, r3, #1
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d14c      	bne.n	8002888 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2200      	movs	r2, #0
 80027f2:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2208      	movs	r2, #8
 80027fa:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2240      	movs	r2, #64	; 0x40
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002804:	183b      	adds	r3, r7, r0
 8002806:	881a      	ldrh	r2, [r3, #0]
 8002808:	197b      	adds	r3, r7, r5
 800280a:	7819      	ldrb	r1, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f7ff fc4c 	bl	80020ac <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002814:	e038      	b.n	8002888 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8002816:	240c      	movs	r4, #12
 8002818:	193b      	adds	r3, r7, r4
 800281a:	2208      	movs	r2, #8
 800281c:	18ba      	adds	r2, r7, r2
 800281e:	8812      	ldrh	r2, [r2, #0]
 8002820:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002822:	2380      	movs	r3, #128	; 0x80
 8002824:	021a      	lsls	r2, r3, #8
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	0011      	movs	r1, r2
 800282a:	0018      	movs	r0, r3
 800282c:	f000 fd12 	bl	8003254 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	2100      	movs	r1, #0
 8002836:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002838:	193b      	adds	r3, r7, r4
 800283a:	881a      	ldrh	r2, [r3, #0]
 800283c:	230f      	movs	r3, #15
 800283e:	18fb      	adds	r3, r7, r3
 8002840:	7819      	ldrb	r1, [r3, #0]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f7ff fc31 	bl	80020ac <HAL_I2C_AddrCallback>
}
 800284a:	e01d      	b.n	8002888 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800284c:	2380      	movs	r3, #128	; 0x80
 800284e:	021a      	lsls	r2, r3, #8
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	0011      	movs	r1, r2
 8002854:	0018      	movs	r0, r3
 8002856:	f000 fcfd 	bl	8003254 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2240      	movs	r2, #64	; 0x40
 800285e:	2100      	movs	r1, #0
 8002860:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002862:	230c      	movs	r3, #12
 8002864:	18fb      	adds	r3, r7, r3
 8002866:	881a      	ldrh	r2, [r3, #0]
 8002868:	230f      	movs	r3, #15
 800286a:	18fb      	adds	r3, r7, r3
 800286c:	7819      	ldrb	r1, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	0018      	movs	r0, r3
 8002872:	f7ff fc1b 	bl	80020ac <HAL_I2C_AddrCallback>
}
 8002876:	e007      	b.n	8002888 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	2208      	movs	r2, #8
 800287e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2240      	movs	r2, #64	; 0x40
 8002884:	2100      	movs	r1, #0
 8002886:	5499      	strb	r1, [r3, r2]
}
 8002888:	46c0      	nop			; (mov r8, r8)
 800288a:	46bd      	mov	sp, r7
 800288c:	b004      	add	sp, #16
 800288e:	bdb0      	pop	{r4, r5, r7, pc}

08002890 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2242      	movs	r2, #66	; 0x42
 800289c:	2100      	movs	r1, #0
 800289e:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2241      	movs	r2, #65	; 0x41
 80028a4:	5c9b      	ldrb	r3, [r3, r2]
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b21      	cmp	r3, #33	; 0x21
 80028aa:	d117      	bne.n	80028dc <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2241      	movs	r2, #65	; 0x41
 80028b0:	2120      	movs	r1, #32
 80028b2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2211      	movs	r2, #17
 80028b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2200      	movs	r2, #0
 80028be:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2101      	movs	r1, #1
 80028c4:	0018      	movs	r0, r3
 80028c6:	f000 fcc5 	bl	8003254 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2240      	movs	r2, #64	; 0x40
 80028ce:	2100      	movs	r1, #0
 80028d0:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fbc9 	bl	800206c <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80028da:	e016      	b.n	800290a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2241      	movs	r2, #65	; 0x41
 80028e0:	2120      	movs	r1, #32
 80028e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2212      	movs	r2, #18
 80028e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2102      	movs	r1, #2
 80028f4:	0018      	movs	r0, r3
 80028f6:	f000 fcad 	bl	8003254 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2240      	movs	r2, #64	; 0x40
 80028fe:	2100      	movs	r1, #0
 8002900:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0018      	movs	r0, r3
 8002906:	f7ff fbb9 	bl	800207c <HAL_I2C_MasterRxCpltCallback>
}
 800290a:	46c0      	nop			; (mov r8, r8)
 800290c:	46bd      	mov	sp, r7
 800290e:	b002      	add	sp, #8
 8002910:	bd80      	pop	{r7, pc}
	...

08002914 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2242      	movs	r2, #66	; 0x42
 8002928:	2100      	movs	r1, #0
 800292a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	0b9b      	lsrs	r3, r3, #14
 8002930:	001a      	movs	r2, r3
 8002932:	2301      	movs	r3, #1
 8002934:	4013      	ands	r3, r2
 8002936:	d008      	beq.n	800294a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681a      	ldr	r2, [r3, #0]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4925      	ldr	r1, [pc, #148]	; (80029d8 <I2C_ITSlaveSeqCplt+0xc4>)
 8002944:	400a      	ands	r2, r1
 8002946:	601a      	str	r2, [r3, #0]
 8002948:	e00d      	b.n	8002966 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	0bdb      	lsrs	r3, r3, #15
 800294e:	001a      	movs	r2, r3
 8002950:	2301      	movs	r3, #1
 8002952:	4013      	ands	r3, r2
 8002954:	d007      	beq.n	8002966 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	491e      	ldr	r1, [pc, #120]	; (80029dc <I2C_ITSlaveSeqCplt+0xc8>)
 8002962:	400a      	ands	r2, r1
 8002964:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2241      	movs	r2, #65	; 0x41
 800296a:	5c9b      	ldrb	r3, [r3, r2]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b29      	cmp	r3, #41	; 0x29
 8002970:	d114      	bne.n	800299c <I2C_ITSlaveSeqCplt+0x88>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2241      	movs	r2, #65	; 0x41
 8002976:	2128      	movs	r1, #40	; 0x28
 8002978:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2221      	movs	r2, #33	; 0x21
 800297e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2101      	movs	r1, #1
 8002984:	0018      	movs	r0, r3
 8002986:	f000 fc65 	bl	8003254 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2240      	movs	r2, #64	; 0x40
 800298e:	2100      	movs	r1, #0
 8002990:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	0018      	movs	r0, r3
 8002996:	f7ff fb79 	bl	800208c <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800299a:	e019      	b.n	80029d0 <I2C_ITSlaveSeqCplt+0xbc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2241      	movs	r2, #65	; 0x41
 80029a0:	5c9b      	ldrb	r3, [r3, r2]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b2a      	cmp	r3, #42	; 0x2a
 80029a6:	d113      	bne.n	80029d0 <I2C_ITSlaveSeqCplt+0xbc>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2241      	movs	r2, #65	; 0x41
 80029ac:	2128      	movs	r1, #40	; 0x28
 80029ae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2222      	movs	r2, #34	; 0x22
 80029b4:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2102      	movs	r1, #2
 80029ba:	0018      	movs	r0, r3
 80029bc:	f000 fc4a 	bl	8003254 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2240      	movs	r2, #64	; 0x40
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f7ff fb66 	bl	800209c <HAL_I2C_SlaveRxCpltCallback>
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b004      	add	sp, #16
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	ffffbfff 	.word	0xffffbfff
 80029dc:	ffff7fff 	.word	0xffff7fff

080029e0 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
 80029e8:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2220      	movs	r2, #32
 80029f4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2241      	movs	r2, #65	; 0x41
 80029fa:	5c9b      	ldrb	r3, [r3, r2]
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b21      	cmp	r3, #33	; 0x21
 8002a00:	d108      	bne.n	8002a14 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2101      	movs	r1, #1
 8002a06:	0018      	movs	r0, r3
 8002a08:	f000 fc24 	bl	8003254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2211      	movs	r2, #17
 8002a10:	631a      	str	r2, [r3, #48]	; 0x30
 8002a12:	e00d      	b.n	8002a30 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2241      	movs	r2, #65	; 0x41
 8002a18:	5c9b      	ldrb	r3, [r3, r2]
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	2b22      	cmp	r3, #34	; 0x22
 8002a1e:	d107      	bne.n	8002a30 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2102      	movs	r1, #2
 8002a24:	0018      	movs	r0, r3
 8002a26:	f000 fc15 	bl	8003254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2212      	movs	r2, #18
 8002a2e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4950      	ldr	r1, [pc, #320]	; (8002b7c <I2C_ITMasterCplt+0x19c>)
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a4d      	ldr	r2, [pc, #308]	; (8002b80 <I2C_ITMasterCplt+0x1a0>)
 8002a4a:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	091b      	lsrs	r3, r3, #4
 8002a50:	001a      	movs	r2, r3
 8002a52:	2301      	movs	r3, #1
 8002a54:	4013      	ands	r3, r2
 8002a56:	d009      	beq.n	8002a6c <I2C_ITMasterCplt+0x8c>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a64:	2204      	movs	r2, #4
 8002a66:	431a      	orrs	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2241      	movs	r2, #65	; 0x41
 8002a70:	5c9b      	ldrb	r3, [r3, r2]
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	2b60      	cmp	r3, #96	; 0x60
 8002a76:	d10b      	bne.n	8002a90 <I2C_ITMasterCplt+0xb0>
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	089b      	lsrs	r3, r3, #2
 8002a7c:	001a      	movs	r2, r3
 8002a7e:	2301      	movs	r3, #1
 8002a80:	4013      	ands	r3, r2
 8002a82:	d005      	beq.n	8002a90 <I2C_ITMasterCplt+0xb0>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	0018      	movs	r0, r3
 8002a94:	f000 faff 	bl	8003096 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2241      	movs	r2, #65	; 0x41
 8002aa2:	5c9b      	ldrb	r3, [r3, r2]
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	2b60      	cmp	r3, #96	; 0x60
 8002aa8:	d002      	beq.n	8002ab0 <I2C_ITMasterCplt+0xd0>
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d007      	beq.n	8002ac0 <I2C_ITMasterCplt+0xe0>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	0018      	movs	r0, r3
 8002aba:	f000 f9e1 	bl	8002e80 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002abe:	e058      	b.n	8002b72 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2241      	movs	r2, #65	; 0x41
 8002ac4:	5c9b      	ldrb	r3, [r3, r2]
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b21      	cmp	r3, #33	; 0x21
 8002aca:	d126      	bne.n	8002b1a <I2C_ITMasterCplt+0x13a>
    hi2c->State = HAL_I2C_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2241      	movs	r2, #65	; 0x41
 8002ad0:	2120      	movs	r1, #32
 8002ad2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2242      	movs	r2, #66	; 0x42
 8002ade:	5c9b      	ldrb	r3, [r3, r2]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b40      	cmp	r3, #64	; 0x40
 8002ae4:	d10c      	bne.n	8002b00 <I2C_ITMasterCplt+0x120>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2242      	movs	r2, #66	; 0x42
 8002aea:	2100      	movs	r1, #0
 8002aec:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2240      	movs	r2, #64	; 0x40
 8002af2:	2100      	movs	r1, #0
 8002af4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	0018      	movs	r0, r3
 8002afa:	f7ff faef 	bl	80020dc <HAL_I2C_MemTxCpltCallback>
}
 8002afe:	e038      	b.n	8002b72 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2242      	movs	r2, #66	; 0x42
 8002b04:	2100      	movs	r1, #0
 8002b06:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2240      	movs	r2, #64	; 0x40
 8002b0c:	2100      	movs	r1, #0
 8002b0e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	0018      	movs	r0, r3
 8002b14:	f7ff faaa 	bl	800206c <HAL_I2C_MasterTxCpltCallback>
}
 8002b18:	e02b      	b.n	8002b72 <I2C_ITMasterCplt+0x192>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2241      	movs	r2, #65	; 0x41
 8002b1e:	5c9b      	ldrb	r3, [r3, r2]
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b22      	cmp	r3, #34	; 0x22
 8002b24:	d125      	bne.n	8002b72 <I2C_ITMasterCplt+0x192>
    hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2241      	movs	r2, #65	; 0x41
 8002b2a:	2120      	movs	r1, #32
 8002b2c:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2242      	movs	r2, #66	; 0x42
 8002b38:	5c9b      	ldrb	r3, [r3, r2]
 8002b3a:	b2db      	uxtb	r3, r3
 8002b3c:	2b40      	cmp	r3, #64	; 0x40
 8002b3e:	d10c      	bne.n	8002b5a <I2C_ITMasterCplt+0x17a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2242      	movs	r2, #66	; 0x42
 8002b44:	2100      	movs	r1, #0
 8002b46:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2240      	movs	r2, #64	; 0x40
 8002b4c:	2100      	movs	r1, #0
 8002b4e:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	0018      	movs	r0, r3
 8002b54:	f7ff faca 	bl	80020ec <HAL_I2C_MemRxCpltCallback>
}
 8002b58:	e00b      	b.n	8002b72 <I2C_ITMasterCplt+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2242      	movs	r2, #66	; 0x42
 8002b5e:	2100      	movs	r1, #0
 8002b60:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2240      	movs	r2, #64	; 0x40
 8002b66:	2100      	movs	r1, #0
 8002b68:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	0018      	movs	r0, r3
 8002b6e:	f7ff fa85 	bl	800207c <HAL_I2C_MasterRxCpltCallback>
}
 8002b72:	46c0      	nop			; (mov r8, r8)
 8002b74:	46bd      	mov	sp, r7
 8002b76:	b006      	add	sp, #24
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	46c0      	nop			; (mov r8, r8)
 8002b7c:	fe00e800 	.word	0xfe00e800
 8002b80:	ffff0000 	.word	0xffff0000

08002b84 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002b9a:	200f      	movs	r0, #15
 8002b9c:	183b      	adds	r3, r7, r0
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	2141      	movs	r1, #65	; 0x41
 8002ba2:	5c52      	ldrb	r2, [r2, r1]
 8002ba4:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	2220      	movs	r2, #32
 8002bac:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002bae:	183b      	adds	r3, r7, r0
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	2b21      	cmp	r3, #33	; 0x21
 8002bb4:	d003      	beq.n	8002bbe <I2C_ITSlaveCplt+0x3a>
 8002bb6:	183b      	adds	r3, r7, r0
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b29      	cmp	r3, #41	; 0x29
 8002bbc:	d109      	bne.n	8002bd2 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002bbe:	4a7d      	ldr	r2, [pc, #500]	; (8002db4 <I2C_ITSlaveCplt+0x230>)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	0011      	movs	r1, r2
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f000 fb45 	bl	8003254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2221      	movs	r2, #33	; 0x21
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
 8002bd0:	e011      	b.n	8002bf6 <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002bd2:	220f      	movs	r2, #15
 8002bd4:	18bb      	adds	r3, r7, r2
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b22      	cmp	r3, #34	; 0x22
 8002bda:	d003      	beq.n	8002be4 <I2C_ITSlaveCplt+0x60>
 8002bdc:	18bb      	adds	r3, r7, r2
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b2a      	cmp	r3, #42	; 0x2a
 8002be2:	d108      	bne.n	8002bf6 <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002be4:	4a74      	ldr	r2, [pc, #464]	; (8002db8 <I2C_ITSlaveCplt+0x234>)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	0011      	movs	r1, r2
 8002bea:	0018      	movs	r0, r3
 8002bec:	f000 fb32 	bl	8003254 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2222      	movs	r2, #34	; 0x22
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	685a      	ldr	r2, [r3, #4]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2180      	movs	r1, #128	; 0x80
 8002c02:	0209      	lsls	r1, r1, #8
 8002c04:	430a      	orrs	r2, r1
 8002c06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	496a      	ldr	r1, [pc, #424]	; (8002dbc <I2C_ITSlaveCplt+0x238>)
 8002c14:	400a      	ands	r2, r1
 8002c16:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fa3b 	bl	8003096 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	0b9b      	lsrs	r3, r3, #14
 8002c24:	001a      	movs	r2, r3
 8002c26:	2301      	movs	r3, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d013      	beq.n	8002c54 <I2C_ITSlaveCplt+0xd0>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4962      	ldr	r1, [pc, #392]	; (8002dc0 <I2C_ITSlaveCplt+0x23c>)
 8002c38:	400a      	ands	r2, r1
 8002c3a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmatx);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	b29a      	uxth	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002c52:	e018      	b.n	8002c86 <I2C_ITSlaveCplt+0x102>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	0bdb      	lsrs	r3, r3, #15
 8002c58:	001a      	movs	r2, r3
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	d012      	beq.n	8002c86 <I2C_ITSlaveCplt+0x102>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681a      	ldr	r2, [r3, #0]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4956      	ldr	r1, [pc, #344]	; (8002dc4 <I2C_ITSlaveCplt+0x240>)
 8002c6c:	400a      	ands	r2, r1
 8002c6e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d006      	beq.n	8002c86 <I2C_ITSlaveCplt+0x102>
    {
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	001a      	movs	r2, r3
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d020      	beq.n	8002cd4 <I2C_ITSlaveCplt+0x150>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2204      	movs	r2, #4
 8002c96:	4393      	bics	r3, r2
 8002c98:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d00c      	beq.n	8002cd4 <I2C_ITSlaveCplt+0x150>
    {
      hi2c->XferSize--;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cbe:	3b01      	subs	r3, #1
 8002cc0:	b29a      	uxth	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d005      	beq.n	8002cea <I2C_ITSlaveCplt+0x166>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2242      	movs	r2, #66	; 0x42
 8002cee:	2100      	movs	r1, #0
 8002cf0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <I2C_ITSlaveCplt+0x1a4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	0011      	movs	r1, r2
 8002d08:	0018      	movs	r0, r3
 8002d0a:	f000 f8b9 	bl	8002e80 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2241      	movs	r2, #65	; 0x41
 8002d12:	5c9b      	ldrb	r3, [r3, r2]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	2b28      	cmp	r3, #40	; 0x28
 8002d18:	d147      	bne.n	8002daa <I2C_ITSlaveCplt+0x226>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002d1a:	697a      	ldr	r2, [r7, #20]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	0011      	movs	r1, r2
 8002d20:	0018      	movs	r0, r3
 8002d22:	f000 f853 	bl	8002dcc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002d26:	e040      	b.n	8002daa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	4a26      	ldr	r2, [pc, #152]	; (8002dc8 <I2C_ITSlaveCplt+0x244>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d016      	beq.n	8002d60 <I2C_ITSlaveCplt+0x1dc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	0018      	movs	r0, r3
 8002d36:	f7ff fded 	bl	8002914 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4a22      	ldr	r2, [pc, #136]	; (8002dc8 <I2C_ITSlaveCplt+0x244>)
 8002d3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2241      	movs	r2, #65	; 0x41
 8002d44:	2120      	movs	r1, #32
 8002d46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2240      	movs	r2, #64	; 0x40
 8002d52:	2100      	movs	r1, #0
 8002d54:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	0018      	movs	r0, r3
 8002d5a:	f7ff f9b7 	bl	80020cc <HAL_I2C_ListenCpltCallback>
}
 8002d5e:	e024      	b.n	8002daa <I2C_ITSlaveCplt+0x226>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2241      	movs	r2, #65	; 0x41
 8002d64:	5c9b      	ldrb	r3, [r3, r2]
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b22      	cmp	r3, #34	; 0x22
 8002d6a:	d10f      	bne.n	8002d8c <I2C_ITSlaveCplt+0x208>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2241      	movs	r2, #65	; 0x41
 8002d70:	2120      	movs	r1, #32
 8002d72:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2240      	movs	r2, #64	; 0x40
 8002d7e:	2100      	movs	r1, #0
 8002d80:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f7ff f989 	bl	800209c <HAL_I2C_SlaveRxCpltCallback>
}
 8002d8a:	e00e      	b.n	8002daa <I2C_ITSlaveCplt+0x226>
    hi2c->State = HAL_I2C_STATE_READY;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2241      	movs	r2, #65	; 0x41
 8002d90:	2120      	movs	r1, #32
 8002d92:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2240      	movs	r2, #64	; 0x40
 8002d9e:	2100      	movs	r1, #0
 8002da0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	0018      	movs	r0, r3
 8002da6:	f7ff f971 	bl	800208c <HAL_I2C_SlaveTxCpltCallback>
}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	46bd      	mov	sp, r7
 8002dae:	b006      	add	sp, #24
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	46c0      	nop			; (mov r8, r8)
 8002db4:	00008001 	.word	0x00008001
 8002db8:	00008002 	.word	0x00008002
 8002dbc:	fe00e800 	.word	0xfe00e800
 8002dc0:	ffffbfff 	.word	0xffffbfff
 8002dc4:	ffff7fff 	.word	0xffff7fff
 8002dc8:	ffff0000 	.word	0xffff0000

08002dcc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a27      	ldr	r2, [pc, #156]	; (8002e78 <I2C_ITListenCplt+0xac>)
 8002dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2241      	movs	r2, #65	; 0x41
 8002de6:	2120      	movs	r1, #32
 8002de8:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2242      	movs	r2, #66	; 0x42
 8002dee:	2100      	movs	r1, #0
 8002df0:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	089b      	lsrs	r3, r3, #2
 8002dfc:	001a      	movs	r2, r3
 8002dfe:	2301      	movs	r3, #1
 8002e00:	4013      	ands	r3, r2
 8002e02:	d022      	beq.n	8002e4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d012      	beq.n	8002e4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3b01      	subs	r3, #1
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e42:	2204      	movs	r2, #4
 8002e44:	431a      	orrs	r2, r3
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002e4a:	4a0c      	ldr	r2, [pc, #48]	; (8002e7c <I2C_ITListenCplt+0xb0>)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	0011      	movs	r1, r2
 8002e50:	0018      	movs	r0, r3
 8002e52:	f000 f9ff 	bl	8003254 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2210      	movs	r2, #16
 8002e5c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2240      	movs	r2, #64	; 0x40
 8002e62:	2100      	movs	r1, #0
 8002e64:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	0018      	movs	r0, r3
 8002e6a:	f7ff f92f 	bl	80020cc <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8002e6e:	46c0      	nop			; (mov r8, r8)
 8002e70:	46bd      	mov	sp, r7
 8002e72:	b002      	add	sp, #8
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	46c0      	nop			; (mov r8, r8)
 8002e78:	ffff0000 	.word	0xffff0000
 8002e7c:	00008003 	.word	0x00008003

08002e80 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b084      	sub	sp, #16
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002e8a:	200f      	movs	r0, #15
 8002e8c:	183b      	adds	r3, r7, r0
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	2141      	movs	r1, #65	; 0x41
 8002e92:	5c52      	ldrb	r2, [r2, r1]
 8002e94:	701a      	strb	r2, [r3, #0]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2242      	movs	r2, #66	; 0x42
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a62      	ldr	r2, [pc, #392]	; (800302c <I2C_ITError+0x1ac>)
 8002ea2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8002eb6:	183b      	adds	r3, r7, r0
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b28      	cmp	r3, #40	; 0x28
 8002ebc:	d007      	beq.n	8002ece <I2C_ITError+0x4e>
 8002ebe:	183b      	adds	r3, r7, r0
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	2b29      	cmp	r3, #41	; 0x29
 8002ec4:	d003      	beq.n	8002ece <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8002ec6:	183b      	adds	r3, r7, r0
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	2b2a      	cmp	r3, #42	; 0x2a
 8002ecc:	d10c      	bne.n	8002ee8 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2103      	movs	r1, #3
 8002ed2:	0018      	movs	r0, r3
 8002ed4:	f000 f9be 	bl	8003254 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2241      	movs	r2, #65	; 0x41
 8002edc:	2128      	movs	r1, #40	; 0x28
 8002ede:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a53      	ldr	r2, [pc, #332]	; (8003030 <I2C_ITError+0x1b0>)
 8002ee4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ee6:	e012      	b.n	8002f0e <I2C_ITError+0x8e>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8002ee8:	4a52      	ldr	r2, [pc, #328]	; (8003034 <I2C_ITError+0x1b4>)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0011      	movs	r1, r2
 8002eee:	0018      	movs	r0, r3
 8002ef0:	f000 f9b0 	bl	8003254 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2241      	movs	r2, #65	; 0x41
 8002ef8:	5c9b      	ldrb	r3, [r3, r2]
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b60      	cmp	r3, #96	; 0x60
 8002efe:	d003      	beq.n	8002f08 <I2C_ITError+0x88>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2241      	movs	r2, #65	; 0x41
 8002f04:	2120      	movs	r1, #32
 8002f06:	5499      	strb	r1, [r3, r2]
    }
    hi2c->XferISR       = NULL;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d03b      	beq.n	8002f94 <I2C_ITError+0x114>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	2b11      	cmp	r3, #17
 8002f20:	d002      	beq.n	8002f28 <I2C_ITError+0xa8>
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	2b21      	cmp	r3, #33	; 0x21
 8002f26:	d135      	bne.n	8002f94 <I2C_ITError+0x114>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	2380      	movs	r3, #128	; 0x80
 8002f30:	01db      	lsls	r3, r3, #7
 8002f32:	401a      	ands	r2, r3
 8002f34:	2380      	movs	r3, #128	; 0x80
 8002f36:	01db      	lsls	r3, r3, #7
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d107      	bne.n	8002f4c <I2C_ITError+0xcc>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	493c      	ldr	r1, [pc, #240]	; (8003038 <I2C_ITError+0x1b8>)
 8002f48:	400a      	ands	r2, r1
 8002f4a:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f50:	0018      	movs	r0, r3
 8002f52:	f7fe fc5c 	bl	800180e <HAL_DMA_GetState>
 8002f56:	0003      	movs	r3, r0
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d016      	beq.n	8002f8a <I2C_ITError+0x10a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f60:	4a36      	ldr	r2, [pc, #216]	; (800303c <I2C_ITError+0x1bc>)
 8002f62:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2240      	movs	r2, #64	; 0x40
 8002f68:	2100      	movs	r1, #0
 8002f6a:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f70:	0018      	movs	r0, r3
 8002f72:	f7fe fc05 	bl	8001780 <HAL_DMA_Abort_IT>
 8002f76:	1e03      	subs	r3, r0, #0
 8002f78:	d051      	beq.n	800301e <I2C_ITError+0x19e>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	0018      	movs	r0, r3
 8002f86:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f88:	e049      	b.n	800301e <I2C_ITError+0x19e>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 f859 	bl	8003044 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002f92:	e044      	b.n	800301e <I2C_ITError+0x19e>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d03b      	beq.n	8003014 <I2C_ITError+0x194>
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	2b12      	cmp	r3, #18
 8002fa0:	d002      	beq.n	8002fa8 <I2C_ITError+0x128>
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	2b22      	cmp	r3, #34	; 0x22
 8002fa6:	d135      	bne.n	8003014 <I2C_ITError+0x194>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	2380      	movs	r3, #128	; 0x80
 8002fb0:	021b      	lsls	r3, r3, #8
 8002fb2:	401a      	ands	r2, r3
 8002fb4:	2380      	movs	r3, #128	; 0x80
 8002fb6:	021b      	lsls	r3, r3, #8
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d107      	bne.n	8002fcc <I2C_ITError+0x14c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	491e      	ldr	r1, [pc, #120]	; (8003040 <I2C_ITError+0x1c0>)
 8002fc8:	400a      	ands	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd0:	0018      	movs	r0, r3
 8002fd2:	f7fe fc1c 	bl	800180e <HAL_DMA_GetState>
 8002fd6:	0003      	movs	r3, r0
 8002fd8:	2b01      	cmp	r3, #1
 8002fda:	d016      	beq.n	800300a <I2C_ITError+0x18a>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fe0:	4a16      	ldr	r2, [pc, #88]	; (800303c <I2C_ITError+0x1bc>)
 8002fe2:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2240      	movs	r2, #64	; 0x40
 8002fe8:	2100      	movs	r1, #0
 8002fea:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	f7fe fbc5 	bl	8001780 <HAL_DMA_Abort_IT>
 8002ff6:	1e03      	subs	r3, r0, #0
 8002ff8:	d013      	beq.n	8003022 <I2C_ITError+0x1a2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003004:	0018      	movs	r0, r3
 8003006:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003008:	e00b      	b.n	8003022 <I2C_ITError+0x1a2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	0018      	movs	r0, r3
 800300e:	f000 f819 	bl	8003044 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003012:	e006      	b.n	8003022 <I2C_ITError+0x1a2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	0018      	movs	r0, r3
 8003018:	f000 f814 	bl	8003044 <I2C_TreatErrorCallback>
  }
}
 800301c:	e002      	b.n	8003024 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	e000      	b.n	8003024 <I2C_ITError+0x1a4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003022:	46c0      	nop			; (mov r8, r8)
}
 8003024:	46c0      	nop			; (mov r8, r8)
 8003026:	46bd      	mov	sp, r7
 8003028:	b004      	add	sp, #16
 800302a:	bd80      	pop	{r7, pc}
 800302c:	ffff0000 	.word	0xffff0000
 8003030:	0800211d 	.word	0x0800211d
 8003034:	00008003 	.word	0x00008003
 8003038:	ffffbfff 	.word	0xffffbfff
 800303c:	080030db 	.word	0x080030db
 8003040:	ffff7fff 	.word	0xffff7fff

08003044 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b082      	sub	sp, #8
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2241      	movs	r2, #65	; 0x41
 8003050:	5c9b      	ldrb	r3, [r3, r2]
 8003052:	b2db      	uxtb	r3, r3
 8003054:	2b60      	cmp	r3, #96	; 0x60
 8003056:	d10f      	bne.n	8003078 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2241      	movs	r2, #65	; 0x41
 800305c:	2120      	movs	r1, #32
 800305e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2200      	movs	r2, #0
 8003064:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2240      	movs	r2, #64	; 0x40
 800306a:	2100      	movs	r1, #0
 800306c:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	0018      	movs	r0, r3
 8003072:	f7ff f84b 	bl	800210c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003076:	e00a      	b.n	800308e <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2240      	movs	r2, #64	; 0x40
 8003082:	2100      	movs	r1, #0
 8003084:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	0018      	movs	r0, r3
 800308a:	f7ff f837 	bl	80020fc <HAL_I2C_ErrorCallback>
}
 800308e:	46c0      	nop			; (mov r8, r8)
 8003090:	46bd      	mov	sp, r7
 8003092:	b002      	add	sp, #8
 8003094:	bd80      	pop	{r7, pc}

08003096 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003096:	b580      	push	{r7, lr}
 8003098:	b082      	sub	sp, #8
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	699b      	ldr	r3, [r3, #24]
 80030a4:	2202      	movs	r2, #2
 80030a6:	4013      	ands	r3, r2
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d103      	bne.n	80030b4 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2200      	movs	r2, #0
 80030b2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d007      	beq.n	80030d2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	699a      	ldr	r2, [r3, #24]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2101      	movs	r1, #1
 80030ce:	430a      	orrs	r2, r1
 80030d0:	619a      	str	r2, [r3, #24]
  }
}
 80030d2:	46c0      	nop			; (mov r8, r8)
 80030d4:	46bd      	mov	sp, r7
 80030d6:	b002      	add	sp, #8
 80030d8:	bd80      	pop	{r7, pc}

080030da <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80030da:	b580      	push	{r7, lr}
 80030dc:	b084      	sub	sp, #16
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e6:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f4:	2200      	movs	r2, #0
 80030f6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003104:	2200      	movs	r2, #0
 8003106:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	0018      	movs	r0, r3
 800310c:	f7ff ff9a 	bl	8003044 <I2C_TreatErrorCallback>
}
 8003110:	46c0      	nop			; (mov r8, r8)
 8003112:	46bd      	mov	sp, r7
 8003114:	b004      	add	sp, #16
 8003116:	bd80      	pop	{r7, pc}

08003118 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003118:	b590      	push	{r4, r7, lr}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	60f8      	str	r0, [r7, #12]
 8003120:	0008      	movs	r0, r1
 8003122:	0011      	movs	r1, r2
 8003124:	607b      	str	r3, [r7, #4]
 8003126:	240a      	movs	r4, #10
 8003128:	193b      	adds	r3, r7, r4
 800312a:	1c02      	adds	r2, r0, #0
 800312c:	801a      	strh	r2, [r3, #0]
 800312e:	2009      	movs	r0, #9
 8003130:	183b      	adds	r3, r7, r0
 8003132:	1c0a      	adds	r2, r1, #0
 8003134:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	0d51      	lsrs	r1, r2, #21
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	00d2      	lsls	r2, r2, #3
 8003144:	400a      	ands	r2, r1
 8003146:	490e      	ldr	r1, [pc, #56]	; (8003180 <I2C_TransferConfig+0x68>)
 8003148:	430a      	orrs	r2, r1
 800314a:	43d2      	mvns	r2, r2
 800314c:	401a      	ands	r2, r3
 800314e:	0011      	movs	r1, r2
 8003150:	193b      	adds	r3, r7, r4
 8003152:	881b      	ldrh	r3, [r3, #0]
 8003154:	059b      	lsls	r3, r3, #22
 8003156:	0d9a      	lsrs	r2, r3, #22
 8003158:	183b      	adds	r3, r7, r0
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	0418      	lsls	r0, r3, #16
 800315e:	23ff      	movs	r3, #255	; 0xff
 8003160:	041b      	lsls	r3, r3, #16
 8003162:	4003      	ands	r3, r0
 8003164:	431a      	orrs	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	431a      	orrs	r2, r3
 800316a:	6a3b      	ldr	r3, [r7, #32]
 800316c:	431a      	orrs	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	430a      	orrs	r2, r1
 8003174:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003176:	46c0      	nop			; (mov r8, r8)
 8003178:	46bd      	mov	sp, r7
 800317a:	b005      	add	sp, #20
 800317c:	bd90      	pop	{r4, r7, pc}
 800317e:	46c0      	nop			; (mov r8, r8)
 8003180:	03ff63ff 	.word	0x03ff63ff

08003184 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b084      	sub	sp, #16
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
 800318c:	000a      	movs	r2, r1
 800318e:	1cbb      	adds	r3, r7, #2
 8003190:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003192:	2300      	movs	r3, #0
 8003194:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800319a:	4b2c      	ldr	r3, [pc, #176]	; (800324c <I2C_Enable_IRQ+0xc8>)
 800319c:	429a      	cmp	r2, r3
 800319e:	d004      	beq.n	80031aa <I2C_Enable_IRQ+0x26>
      (hi2c->XferISR == I2C_Slave_ISR_DMA))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  if ((hi2c->XferISR == I2C_Master_ISR_DMA) || \
 80031a4:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <I2C_Enable_IRQ+0xcc>)
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d121      	bne.n	80031ee <I2C_Enable_IRQ+0x6a>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80031aa:	1cbb      	adds	r3, r7, #2
 80031ac:	2200      	movs	r2, #0
 80031ae:	5e9b      	ldrsh	r3, [r3, r2]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	da03      	bge.n	80031bc <I2C_Enable_IRQ+0x38>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	22b8      	movs	r2, #184	; 0xb8
 80031b8:	4313      	orrs	r3, r2
 80031ba:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80031bc:	1cbb      	adds	r3, r7, #2
 80031be:	881b      	ldrh	r3, [r3, #0]
 80031c0:	2b10      	cmp	r3, #16
 80031c2:	d103      	bne.n	80031cc <I2C_Enable_IRQ+0x48>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	2290      	movs	r2, #144	; 0x90
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80031cc:	1cbb      	adds	r3, r7, #2
 80031ce:	881b      	ldrh	r3, [r3, #0]
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d103      	bne.n	80031dc <I2C_Enable_IRQ+0x58>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2260      	movs	r2, #96	; 0x60
 80031d8:	4313      	orrs	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80031dc:	1cbb      	adds	r3, r7, #2
 80031de:	881b      	ldrh	r3, [r3, #0]
 80031e0:	2b40      	cmp	r3, #64	; 0x40
 80031e2:	d127      	bne.n	8003234 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2240      	movs	r2, #64	; 0x40
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80031ec:	e022      	b.n	8003234 <I2C_Enable_IRQ+0xb0>
    }
  }
  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80031ee:	1cbb      	adds	r3, r7, #2
 80031f0:	2200      	movs	r2, #0
 80031f2:	5e9b      	ldrsh	r3, [r3, r2]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	da03      	bge.n	8003200 <I2C_Enable_IRQ+0x7c>
    {
      /* Enable ERR, STOP, NACK, and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	22b8      	movs	r2, #184	; 0xb8
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003200:	1cbb      	adds	r3, r7, #2
 8003202:	881b      	ldrh	r3, [r3, #0]
 8003204:	2201      	movs	r2, #1
 8003206:	4013      	ands	r3, r2
 8003208:	d003      	beq.n	8003212 <I2C_Enable_IRQ+0x8e>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	22f2      	movs	r2, #242	; 0xf2
 800320e:	4313      	orrs	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003212:	1cbb      	adds	r3, r7, #2
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	2202      	movs	r2, #2
 8003218:	4013      	ands	r3, r2
 800321a:	d003      	beq.n	8003224 <I2C_Enable_IRQ+0xa0>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	22f4      	movs	r2, #244	; 0xf4
 8003220:	4313      	orrs	r3, r2
 8003222:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003224:	1cbb      	adds	r3, r7, #2
 8003226:	881b      	ldrh	r3, [r3, #0]
 8003228:	2b20      	cmp	r3, #32
 800322a:	d103      	bne.n	8003234 <I2C_Enable_IRQ+0xb0>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2220      	movs	r2, #32
 8003230:	4313      	orrs	r3, r2
 8003232:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6819      	ldr	r1, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	68fa      	ldr	r2, [r7, #12]
 8003240:	430a      	orrs	r2, r1
 8003242:	601a      	str	r2, [r3, #0]
}
 8003244:	46c0      	nop			; (mov r8, r8)
 8003246:	46bd      	mov	sp, r7
 8003248:	b004      	add	sp, #16
 800324a:	bd80      	pop	{r7, pc}
 800324c:	08002345 	.word	0x08002345
 8003250:	0800255d 	.word	0x0800255d

08003254 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	000a      	movs	r2, r1
 800325e:	1cbb      	adds	r3, r7, #2
 8003260:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003266:	1cbb      	adds	r3, r7, #2
 8003268:	881b      	ldrh	r3, [r3, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	4013      	ands	r3, r2
 800326e:	d010      	beq.n	8003292 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2242      	movs	r2, #66	; 0x42
 8003274:	4313      	orrs	r3, r2
 8003276:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2241      	movs	r2, #65	; 0x41
 800327c:	5c9b      	ldrb	r3, [r3, r2]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	001a      	movs	r2, r3
 8003282:	2328      	movs	r3, #40	; 0x28
 8003284:	4013      	ands	r3, r2
 8003286:	2b28      	cmp	r3, #40	; 0x28
 8003288:	d003      	beq.n	8003292 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	22b0      	movs	r2, #176	; 0xb0
 800328e:	4313      	orrs	r3, r2
 8003290:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003292:	1cbb      	adds	r3, r7, #2
 8003294:	881b      	ldrh	r3, [r3, #0]
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d010      	beq.n	80032be <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	2244      	movs	r2, #68	; 0x44
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2241      	movs	r2, #65	; 0x41
 80032a8:	5c9b      	ldrb	r3, [r3, r2]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	001a      	movs	r2, r3
 80032ae:	2328      	movs	r3, #40	; 0x28
 80032b0:	4013      	ands	r3, r2
 80032b2:	2b28      	cmp	r3, #40	; 0x28
 80032b4:	d003      	beq.n	80032be <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	22b0      	movs	r2, #176	; 0xb0
 80032ba:	4313      	orrs	r3, r2
 80032bc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80032be:	1cbb      	adds	r3, r7, #2
 80032c0:	2200      	movs	r2, #0
 80032c2:	5e9b      	ldrsh	r3, [r3, r2]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	da03      	bge.n	80032d0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	22b8      	movs	r2, #184	; 0xb8
 80032cc:	4313      	orrs	r3, r2
 80032ce:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80032d0:	1cbb      	adds	r3, r7, #2
 80032d2:	881b      	ldrh	r3, [r3, #0]
 80032d4:	2b10      	cmp	r3, #16
 80032d6:	d103      	bne.n	80032e0 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2290      	movs	r2, #144	; 0x90
 80032dc:	4313      	orrs	r3, r2
 80032de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80032e0:	1cbb      	adds	r3, r7, #2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	2b20      	cmp	r3, #32
 80032e6:	d103      	bne.n	80032f0 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2220      	movs	r2, #32
 80032ec:	4313      	orrs	r3, r2
 80032ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80032f0:	1cbb      	adds	r3, r7, #2
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d103      	bne.n	8003300 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	2240      	movs	r2, #64	; 0x40
 80032fc:	4313      	orrs	r3, r2
 80032fe:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	43d9      	mvns	r1, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	400a      	ands	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
}
 8003312:	46c0      	nop			; (mov r8, r8)
 8003314:	46bd      	mov	sp, r7
 8003316:	b004      	add	sp, #16
 8003318:	bd80      	pop	{r7, pc}
	...

0800331c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2241      	movs	r2, #65	; 0x41
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	2b20      	cmp	r3, #32
 8003330:	d138      	bne.n	80033a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2240      	movs	r2, #64	; 0x40
 8003336:	5c9b      	ldrb	r3, [r3, r2]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d101      	bne.n	8003340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800333c:	2302      	movs	r3, #2
 800333e:	e032      	b.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2240      	movs	r2, #64	; 0x40
 8003344:	2101      	movs	r1, #1
 8003346:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2241      	movs	r2, #65	; 0x41
 800334c:	2124      	movs	r1, #36	; 0x24
 800334e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	681a      	ldr	r2, [r3, #0]
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	2101      	movs	r1, #1
 800335c:	438a      	bics	r2, r1
 800335e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4911      	ldr	r1, [pc, #68]	; (80033b0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800336c:	400a      	ands	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6819      	ldr	r1, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	683a      	ldr	r2, [r7, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2101      	movs	r1, #1
 800338c:	430a      	orrs	r2, r1
 800338e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2241      	movs	r2, #65	; 0x41
 8003394:	2120      	movs	r1, #32
 8003396:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2240      	movs	r2, #64	; 0x40
 800339c:	2100      	movs	r1, #0
 800339e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80033a0:	2300      	movs	r3, #0
 80033a2:	e000      	b.n	80033a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80033a4:	2302      	movs	r3, #2
  }
}
 80033a6:	0018      	movs	r0, r3
 80033a8:	46bd      	mov	sp, r7
 80033aa:	b002      	add	sp, #8
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	46c0      	nop			; (mov r8, r8)
 80033b0:	ffffefff 	.word	0xffffefff

080033b4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
 80033bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2241      	movs	r2, #65	; 0x41
 80033c2:	5c9b      	ldrb	r3, [r3, r2]
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b20      	cmp	r3, #32
 80033c8:	d139      	bne.n	800343e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2240      	movs	r2, #64	; 0x40
 80033ce:	5c9b      	ldrb	r3, [r3, r2]
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e033      	b.n	8003440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2240      	movs	r2, #64	; 0x40
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2241      	movs	r2, #65	; 0x41
 80033e4:	2124      	movs	r1, #36	; 0x24
 80033e6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2101      	movs	r1, #1
 80033f4:	438a      	bics	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a11      	ldr	r2, [pc, #68]	; (8003448 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	68fa      	ldr	r2, [r7, #12]
 800340e:	4313      	orrs	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68fa      	ldr	r2, [r7, #12]
 8003418:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2101      	movs	r1, #1
 8003426:	430a      	orrs	r2, r1
 8003428:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2241      	movs	r2, #65	; 0x41
 800342e:	2120      	movs	r1, #32
 8003430:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2240      	movs	r2, #64	; 0x40
 8003436:	2100      	movs	r1, #0
 8003438:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	e000      	b.n	8003440 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800343e:	2302      	movs	r3, #2
  }
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b004      	add	sp, #16
 8003446:	bd80      	pop	{r7, pc}
 8003448:	fffff0ff 	.word	0xfffff0ff

0800344c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003454:	4b07      	ldr	r3, [pc, #28]	; (8003474 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8003456:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003458:	4b06      	ldr	r3, [pc, #24]	; (8003474 <HAL_I2CEx_EnableFastModePlus+0x28>)
 800345a:	2101      	movs	r1, #1
 800345c:	430a      	orrs	r2, r1
 800345e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8003460:	4b05      	ldr	r3, [pc, #20]	; (8003478 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8003462:	6859      	ldr	r1, [r3, #4]
 8003464:	4b04      	ldr	r3, [pc, #16]	; (8003478 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	430a      	orrs	r2, r1
 800346a:	605a      	str	r2, [r3, #4]
}
 800346c:	46c0      	nop			; (mov r8, r8)
 800346e:	46bd      	mov	sp, r7
 8003470:	b002      	add	sp, #8
 8003472:	bd80      	pop	{r7, pc}
 8003474:	40021000 	.word	0x40021000
 8003478:	40010000 	.word	0x40010000

0800347c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800347c:	b5b0      	push	{r4, r5, r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d102      	bne.n	8003490 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	f000 fbaf 	bl	8003bee <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003490:	4bcf      	ldr	r3, [pc, #828]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003492:	68db      	ldr	r3, [r3, #12]
 8003494:	220c      	movs	r2, #12
 8003496:	4013      	ands	r3, r2
 8003498:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800349a:	4bcd      	ldr	r3, [pc, #820]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800349c:	68da      	ldr	r2, [r3, #12]
 800349e:	2380      	movs	r3, #128	; 0x80
 80034a0:	025b      	lsls	r3, r3, #9
 80034a2:	4013      	ands	r3, r2
 80034a4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	2201      	movs	r2, #1
 80034ac:	4013      	ands	r3, r2
 80034ae:	d100      	bne.n	80034b2 <HAL_RCC_OscConfig+0x36>
 80034b0:	e07e      	b.n	80035b0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80034b2:	6a3b      	ldr	r3, [r7, #32]
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d007      	beq.n	80034c8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80034b8:	6a3b      	ldr	r3, [r7, #32]
 80034ba:	2b0c      	cmp	r3, #12
 80034bc:	d112      	bne.n	80034e4 <HAL_RCC_OscConfig+0x68>
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	2380      	movs	r3, #128	; 0x80
 80034c2:	025b      	lsls	r3, r3, #9
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d10d      	bne.n	80034e4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c8:	4bc1      	ldr	r3, [pc, #772]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	2380      	movs	r3, #128	; 0x80
 80034ce:	029b      	lsls	r3, r3, #10
 80034d0:	4013      	ands	r3, r2
 80034d2:	d100      	bne.n	80034d6 <HAL_RCC_OscConfig+0x5a>
 80034d4:	e06b      	b.n	80035ae <HAL_RCC_OscConfig+0x132>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d167      	bne.n	80035ae <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f000 fb85 	bl	8003bee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	2380      	movs	r3, #128	; 0x80
 80034ea:	025b      	lsls	r3, r3, #9
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d107      	bne.n	8003500 <HAL_RCC_OscConfig+0x84>
 80034f0:	4bb7      	ldr	r3, [pc, #732]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	4bb6      	ldr	r3, [pc, #728]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80034f6:	2180      	movs	r1, #128	; 0x80
 80034f8:	0249      	lsls	r1, r1, #9
 80034fa:	430a      	orrs	r2, r1
 80034fc:	601a      	str	r2, [r3, #0]
 80034fe:	e027      	b.n	8003550 <HAL_RCC_OscConfig+0xd4>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685a      	ldr	r2, [r3, #4]
 8003504:	23a0      	movs	r3, #160	; 0xa0
 8003506:	02db      	lsls	r3, r3, #11
 8003508:	429a      	cmp	r2, r3
 800350a:	d10e      	bne.n	800352a <HAL_RCC_OscConfig+0xae>
 800350c:	4bb0      	ldr	r3, [pc, #704]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4baf      	ldr	r3, [pc, #700]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003512:	2180      	movs	r1, #128	; 0x80
 8003514:	02c9      	lsls	r1, r1, #11
 8003516:	430a      	orrs	r2, r1
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	4bad      	ldr	r3, [pc, #692]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4bac      	ldr	r3, [pc, #688]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003520:	2180      	movs	r1, #128	; 0x80
 8003522:	0249      	lsls	r1, r1, #9
 8003524:	430a      	orrs	r2, r1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e012      	b.n	8003550 <HAL_RCC_OscConfig+0xd4>
 800352a:	4ba9      	ldr	r3, [pc, #676]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	4ba8      	ldr	r3, [pc, #672]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003530:	49a8      	ldr	r1, [pc, #672]	; (80037d4 <HAL_RCC_OscConfig+0x358>)
 8003532:	400a      	ands	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
 8003536:	4ba6      	ldr	r3, [pc, #664]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003538:	681a      	ldr	r2, [r3, #0]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	025b      	lsls	r3, r3, #9
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4ba2      	ldr	r3, [pc, #648]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	4ba1      	ldr	r3, [pc, #644]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800354a:	49a3      	ldr	r1, [pc, #652]	; (80037d8 <HAL_RCC_OscConfig+0x35c>)
 800354c:	400a      	ands	r2, r1
 800354e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d015      	beq.n	8003584 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003558:	f7fd fdec 	bl	8001134 <HAL_GetTick>
 800355c:	0003      	movs	r3, r0
 800355e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003560:	e009      	b.n	8003576 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003562:	f7fd fde7 	bl	8001134 <HAL_GetTick>
 8003566:	0002      	movs	r2, r0
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	1ad3      	subs	r3, r2, r3
 800356c:	2b64      	cmp	r3, #100	; 0x64
 800356e:	d902      	bls.n	8003576 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003570:	2303      	movs	r3, #3
 8003572:	f000 fb3c 	bl	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003576:	4b96      	ldr	r3, [pc, #600]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	2380      	movs	r3, #128	; 0x80
 800357c:	029b      	lsls	r3, r3, #10
 800357e:	4013      	ands	r3, r2
 8003580:	d0ef      	beq.n	8003562 <HAL_RCC_OscConfig+0xe6>
 8003582:	e015      	b.n	80035b0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003584:	f7fd fdd6 	bl	8001134 <HAL_GetTick>
 8003588:	0003      	movs	r3, r0
 800358a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800358c:	e008      	b.n	80035a0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800358e:	f7fd fdd1 	bl	8001134 <HAL_GetTick>
 8003592:	0002      	movs	r2, r0
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	2b64      	cmp	r3, #100	; 0x64
 800359a:	d901      	bls.n	80035a0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800359c:	2303      	movs	r3, #3
 800359e:	e326      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80035a0:	4b8b      	ldr	r3, [pc, #556]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	2380      	movs	r3, #128	; 0x80
 80035a6:	029b      	lsls	r3, r3, #10
 80035a8:	4013      	ands	r3, r2
 80035aa:	d1f0      	bne.n	800358e <HAL_RCC_OscConfig+0x112>
 80035ac:	e000      	b.n	80035b0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035ae:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2202      	movs	r2, #2
 80035b6:	4013      	ands	r3, r2
 80035b8:	d100      	bne.n	80035bc <HAL_RCC_OscConfig+0x140>
 80035ba:	e08b      	b.n	80036d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	68db      	ldr	r3, [r3, #12]
 80035c0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035c2:	6a3b      	ldr	r3, [r7, #32]
 80035c4:	2b04      	cmp	r3, #4
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80035c8:	6a3b      	ldr	r3, [r7, #32]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d13e      	bne.n	800364c <HAL_RCC_OscConfig+0x1d0>
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d13b      	bne.n	800364c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80035d4:	4b7e      	ldr	r3, [pc, #504]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2204      	movs	r2, #4
 80035da:	4013      	ands	r3, r2
 80035dc:	d004      	beq.n	80035e8 <HAL_RCC_OscConfig+0x16c>
 80035de:	697b      	ldr	r3, [r7, #20]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d101      	bne.n	80035e8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e302      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e8:	4b79      	ldr	r3, [pc, #484]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	4a7b      	ldr	r2, [pc, #492]	; (80037dc <HAL_RCC_OscConfig+0x360>)
 80035ee:	4013      	ands	r3, r2
 80035f0:	0019      	movs	r1, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	021a      	lsls	r2, r3, #8
 80035f8:	4b75      	ldr	r3, [pc, #468]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80035fe:	4b74      	ldr	r3, [pc, #464]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2209      	movs	r2, #9
 8003604:	4393      	bics	r3, r2
 8003606:	0019      	movs	r1, r3
 8003608:	4b71      	ldr	r3, [pc, #452]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800360a:	697a      	ldr	r2, [r7, #20]
 800360c:	430a      	orrs	r2, r1
 800360e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003610:	f000 fc40 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8003614:	0001      	movs	r1, r0
 8003616:	4b6e      	ldr	r3, [pc, #440]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	091b      	lsrs	r3, r3, #4
 800361c:	220f      	movs	r2, #15
 800361e:	4013      	ands	r3, r2
 8003620:	4a6f      	ldr	r2, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x364>)
 8003622:	5cd3      	ldrb	r3, [r2, r3]
 8003624:	000a      	movs	r2, r1
 8003626:	40da      	lsrs	r2, r3
 8003628:	4b6e      	ldr	r3, [pc, #440]	; (80037e4 <HAL_RCC_OscConfig+0x368>)
 800362a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800362c:	4b6e      	ldr	r3, [pc, #440]	; (80037e8 <HAL_RCC_OscConfig+0x36c>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	2513      	movs	r5, #19
 8003632:	197c      	adds	r4, r7, r5
 8003634:	0018      	movs	r0, r3
 8003636:	f7fd fd37 	bl	80010a8 <HAL_InitTick>
 800363a:	0003      	movs	r3, r0
 800363c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800363e:	197b      	adds	r3, r7, r5
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d046      	beq.n	80036d4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8003646:	197b      	adds	r3, r7, r5
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	e2d0      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d027      	beq.n	80036a2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8003652:	4b5f      	ldr	r3, [pc, #380]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2209      	movs	r2, #9
 8003658:	4393      	bics	r3, r2
 800365a:	0019      	movs	r1, r3
 800365c:	4b5c      	ldr	r3, [pc, #368]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800365e:	697a      	ldr	r2, [r7, #20]
 8003660:	430a      	orrs	r2, r1
 8003662:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003664:	f7fd fd66 	bl	8001134 <HAL_GetTick>
 8003668:	0003      	movs	r3, r0
 800366a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd fd61 	bl	8001134 <HAL_GetTick>
 8003672:	0002      	movs	r2, r0
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e2b6      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003680:	4b53      	ldr	r3, [pc, #332]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2204      	movs	r2, #4
 8003686:	4013      	ands	r3, r2
 8003688:	d0f1      	beq.n	800366e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368a:	4b51      	ldr	r3, [pc, #324]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	4a53      	ldr	r2, [pc, #332]	; (80037dc <HAL_RCC_OscConfig+0x360>)
 8003690:	4013      	ands	r3, r2
 8003692:	0019      	movs	r1, r3
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	021a      	lsls	r2, r3, #8
 800369a:	4b4d      	ldr	r3, [pc, #308]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800369c:	430a      	orrs	r2, r1
 800369e:	605a      	str	r2, [r3, #4]
 80036a0:	e018      	b.n	80036d4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b4b      	ldr	r3, [pc, #300]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	4b4a      	ldr	r3, [pc, #296]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80036a8:	2101      	movs	r1, #1
 80036aa:	438a      	bics	r2, r1
 80036ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ae:	f7fd fd41 	bl	8001134 <HAL_GetTick>
 80036b2:	0003      	movs	r3, r0
 80036b4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b8:	f7fd fd3c 	bl	8001134 <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e291      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80036ca:	4b41      	ldr	r3, [pc, #260]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2204      	movs	r2, #4
 80036d0:	4013      	ands	r3, r2
 80036d2:	d1f1      	bne.n	80036b8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	2210      	movs	r2, #16
 80036da:	4013      	ands	r3, r2
 80036dc:	d100      	bne.n	80036e0 <HAL_RCC_OscConfig+0x264>
 80036de:	e0a1      	b.n	8003824 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d140      	bne.n	8003768 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036e6:	4b3a      	ldr	r3, [pc, #232]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	2380      	movs	r3, #128	; 0x80
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4013      	ands	r3, r2
 80036f0:	d005      	beq.n	80036fe <HAL_RCC_OscConfig+0x282>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69db      	ldr	r3, [r3, #28]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e277      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036fe:	4b34      	ldr	r3, [pc, #208]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4a3a      	ldr	r2, [pc, #232]	; (80037ec <HAL_RCC_OscConfig+0x370>)
 8003704:	4013      	ands	r3, r2
 8003706:	0019      	movs	r1, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800370c:	4b30      	ldr	r3, [pc, #192]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800370e:	430a      	orrs	r2, r1
 8003710:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	021b      	lsls	r3, r3, #8
 8003718:	0a19      	lsrs	r1, r3, #8
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6a1b      	ldr	r3, [r3, #32]
 800371e:	061a      	lsls	r2, r3, #24
 8003720:	4b2b      	ldr	r3, [pc, #172]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003722:	430a      	orrs	r2, r1
 8003724:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	0b5b      	lsrs	r3, r3, #13
 800372c:	3301      	adds	r3, #1
 800372e:	2280      	movs	r2, #128	; 0x80
 8003730:	0212      	lsls	r2, r2, #8
 8003732:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8003734:	4b26      	ldr	r3, [pc, #152]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	091b      	lsrs	r3, r3, #4
 800373a:	210f      	movs	r1, #15
 800373c:	400b      	ands	r3, r1
 800373e:	4928      	ldr	r1, [pc, #160]	; (80037e0 <HAL_RCC_OscConfig+0x364>)
 8003740:	5ccb      	ldrb	r3, [r1, r3]
 8003742:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8003744:	4b27      	ldr	r3, [pc, #156]	; (80037e4 <HAL_RCC_OscConfig+0x368>)
 8003746:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_OscConfig+0x36c>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	2513      	movs	r5, #19
 800374e:	197c      	adds	r4, r7, r5
 8003750:	0018      	movs	r0, r3
 8003752:	f7fd fca9 	bl	80010a8 <HAL_InitTick>
 8003756:	0003      	movs	r3, r0
 8003758:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800375a:	197b      	adds	r3, r7, r5
 800375c:	781b      	ldrb	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d060      	beq.n	8003824 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8003762:	197b      	adds	r3, r7, r5
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	e242      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	69db      	ldr	r3, [r3, #28]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d03f      	beq.n	80037f0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003770:	4b17      	ldr	r3, [pc, #92]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b16      	ldr	r3, [pc, #88]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 8003776:	2180      	movs	r1, #128	; 0x80
 8003778:	0049      	lsls	r1, r1, #1
 800377a:	430a      	orrs	r2, r1
 800377c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377e:	f7fd fcd9 	bl	8001134 <HAL_GetTick>
 8003782:	0003      	movs	r3, r0
 8003784:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003788:	f7fd fcd4 	bl	8001134 <HAL_GetTick>
 800378c:	0002      	movs	r2, r0
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e229      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800379a:	4b0d      	ldr	r3, [pc, #52]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	2380      	movs	r3, #128	; 0x80
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4013      	ands	r3, r2
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80037a6:	4b0a      	ldr	r3, [pc, #40]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	4a10      	ldr	r2, [pc, #64]	; (80037ec <HAL_RCC_OscConfig+0x370>)
 80037ac:	4013      	ands	r3, r2
 80037ae:	0019      	movs	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037b4:	4b06      	ldr	r3, [pc, #24]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80037ba:	4b05      	ldr	r3, [pc, #20]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	021b      	lsls	r3, r3, #8
 80037c0:	0a19      	lsrs	r1, r3, #8
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	061a      	lsls	r2, r3, #24
 80037c8:	4b01      	ldr	r3, [pc, #4]	; (80037d0 <HAL_RCC_OscConfig+0x354>)
 80037ca:	430a      	orrs	r2, r1
 80037cc:	605a      	str	r2, [r3, #4]
 80037ce:	e029      	b.n	8003824 <HAL_RCC_OscConfig+0x3a8>
 80037d0:	40021000 	.word	0x40021000
 80037d4:	fffeffff 	.word	0xfffeffff
 80037d8:	fffbffff 	.word	0xfffbffff
 80037dc:	ffffe0ff 	.word	0xffffe0ff
 80037e0:	08005764 	.word	0x08005764
 80037e4:	20000000 	.word	0x20000000
 80037e8:	20000004 	.word	0x20000004
 80037ec:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80037f0:	4bbd      	ldr	r3, [pc, #756]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80037f2:	681a      	ldr	r2, [r3, #0]
 80037f4:	4bbc      	ldr	r3, [pc, #752]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80037f6:	49bd      	ldr	r1, [pc, #756]	; (8003aec <HAL_RCC_OscConfig+0x670>)
 80037f8:	400a      	ands	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037fc:	f7fd fc9a 	bl	8001134 <HAL_GetTick>
 8003800:	0003      	movs	r3, r0
 8003802:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003804:	e008      	b.n	8003818 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003806:	f7fd fc95 	bl	8001134 <HAL_GetTick>
 800380a:	0002      	movs	r2, r0
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	1ad3      	subs	r3, r2, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d901      	bls.n	8003818 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8003814:	2303      	movs	r3, #3
 8003816:	e1ea      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003818:	4bb3      	ldr	r3, [pc, #716]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	2380      	movs	r3, #128	; 0x80
 800381e:	009b      	lsls	r3, r3, #2
 8003820:	4013      	ands	r3, r2
 8003822:	d1f0      	bne.n	8003806 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2208      	movs	r2, #8
 800382a:	4013      	ands	r3, r2
 800382c:	d036      	beq.n	800389c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	695b      	ldr	r3, [r3, #20]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d019      	beq.n	800386a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003836:	4bac      	ldr	r3, [pc, #688]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003838:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800383a:	4bab      	ldr	r3, [pc, #684]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800383c:	2101      	movs	r1, #1
 800383e:	430a      	orrs	r2, r1
 8003840:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003842:	f7fd fc77 	bl	8001134 <HAL_GetTick>
 8003846:	0003      	movs	r3, r0
 8003848:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800384a:	e008      	b.n	800385e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800384c:	f7fd fc72 	bl	8001134 <HAL_GetTick>
 8003850:	0002      	movs	r2, r0
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	2b02      	cmp	r3, #2
 8003858:	d901      	bls.n	800385e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800385a:	2303      	movs	r3, #3
 800385c:	e1c7      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800385e:	4ba2      	ldr	r3, [pc, #648]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003860:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003862:	2202      	movs	r2, #2
 8003864:	4013      	ands	r3, r2
 8003866:	d0f1      	beq.n	800384c <HAL_RCC_OscConfig+0x3d0>
 8003868:	e018      	b.n	800389c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800386a:	4b9f      	ldr	r3, [pc, #636]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800386c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800386e:	4b9e      	ldr	r3, [pc, #632]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003870:	2101      	movs	r1, #1
 8003872:	438a      	bics	r2, r1
 8003874:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003876:	f7fd fc5d 	bl	8001134 <HAL_GetTick>
 800387a:	0003      	movs	r3, r0
 800387c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003880:	f7fd fc58 	bl	8001134 <HAL_GetTick>
 8003884:	0002      	movs	r2, r0
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e1ad      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003892:	4b95      	ldr	r3, [pc, #596]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003896:	2202      	movs	r2, #2
 8003898:	4013      	ands	r3, r2
 800389a:	d1f1      	bne.n	8003880 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2204      	movs	r2, #4
 80038a2:	4013      	ands	r3, r2
 80038a4:	d100      	bne.n	80038a8 <HAL_RCC_OscConfig+0x42c>
 80038a6:	e0ae      	b.n	8003a06 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038a8:	2027      	movs	r0, #39	; 0x27
 80038aa:	183b      	adds	r3, r7, r0
 80038ac:	2200      	movs	r2, #0
 80038ae:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038b0:	4b8d      	ldr	r3, [pc, #564]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80038b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038b4:	2380      	movs	r3, #128	; 0x80
 80038b6:	055b      	lsls	r3, r3, #21
 80038b8:	4013      	ands	r3, r2
 80038ba:	d109      	bne.n	80038d0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80038bc:	4b8a      	ldr	r3, [pc, #552]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80038be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038c0:	4b89      	ldr	r3, [pc, #548]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80038c2:	2180      	movs	r1, #128	; 0x80
 80038c4:	0549      	lsls	r1, r1, #21
 80038c6:	430a      	orrs	r2, r1
 80038c8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80038ca:	183b      	adds	r3, r7, r0
 80038cc:	2201      	movs	r2, #1
 80038ce:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038d0:	4b87      	ldr	r3, [pc, #540]	; (8003af0 <HAL_RCC_OscConfig+0x674>)
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	2380      	movs	r3, #128	; 0x80
 80038d6:	005b      	lsls	r3, r3, #1
 80038d8:	4013      	ands	r3, r2
 80038da:	d11a      	bne.n	8003912 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038dc:	4b84      	ldr	r3, [pc, #528]	; (8003af0 <HAL_RCC_OscConfig+0x674>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4b83      	ldr	r3, [pc, #524]	; (8003af0 <HAL_RCC_OscConfig+0x674>)
 80038e2:	2180      	movs	r1, #128	; 0x80
 80038e4:	0049      	lsls	r1, r1, #1
 80038e6:	430a      	orrs	r2, r1
 80038e8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80038ea:	f7fd fc23 	bl	8001134 <HAL_GetTick>
 80038ee:	0003      	movs	r3, r0
 80038f0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038f4:	f7fd fc1e 	bl	8001134 <HAL_GetTick>
 80038f8:	0002      	movs	r2, r0
 80038fa:	69bb      	ldr	r3, [r7, #24]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b64      	cmp	r3, #100	; 0x64
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e173      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003906:	4b7a      	ldr	r3, [pc, #488]	; (8003af0 <HAL_RCC_OscConfig+0x674>)
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	2380      	movs	r3, #128	; 0x80
 800390c:	005b      	lsls	r3, r3, #1
 800390e:	4013      	ands	r3, r2
 8003910:	d0f0      	beq.n	80038f4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689a      	ldr	r2, [r3, #8]
 8003916:	2380      	movs	r3, #128	; 0x80
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	429a      	cmp	r2, r3
 800391c:	d107      	bne.n	800392e <HAL_RCC_OscConfig+0x4b2>
 800391e:	4b72      	ldr	r3, [pc, #456]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003920:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003922:	4b71      	ldr	r3, [pc, #452]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003924:	2180      	movs	r1, #128	; 0x80
 8003926:	0049      	lsls	r1, r1, #1
 8003928:	430a      	orrs	r2, r1
 800392a:	651a      	str	r2, [r3, #80]	; 0x50
 800392c:	e031      	b.n	8003992 <HAL_RCC_OscConfig+0x516>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d10c      	bne.n	8003950 <HAL_RCC_OscConfig+0x4d4>
 8003936:	4b6c      	ldr	r3, [pc, #432]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800393a:	4b6b      	ldr	r3, [pc, #428]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800393c:	496b      	ldr	r1, [pc, #428]	; (8003aec <HAL_RCC_OscConfig+0x670>)
 800393e:	400a      	ands	r2, r1
 8003940:	651a      	str	r2, [r3, #80]	; 0x50
 8003942:	4b69      	ldr	r3, [pc, #420]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003946:	4b68      	ldr	r3, [pc, #416]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003948:	496a      	ldr	r1, [pc, #424]	; (8003af4 <HAL_RCC_OscConfig+0x678>)
 800394a:	400a      	ands	r2, r1
 800394c:	651a      	str	r2, [r3, #80]	; 0x50
 800394e:	e020      	b.n	8003992 <HAL_RCC_OscConfig+0x516>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	23a0      	movs	r3, #160	; 0xa0
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	429a      	cmp	r2, r3
 800395a:	d10e      	bne.n	800397a <HAL_RCC_OscConfig+0x4fe>
 800395c:	4b62      	ldr	r3, [pc, #392]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800395e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003960:	4b61      	ldr	r3, [pc, #388]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003962:	2180      	movs	r1, #128	; 0x80
 8003964:	00c9      	lsls	r1, r1, #3
 8003966:	430a      	orrs	r2, r1
 8003968:	651a      	str	r2, [r3, #80]	; 0x50
 800396a:	4b5f      	ldr	r3, [pc, #380]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800396c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800396e:	4b5e      	ldr	r3, [pc, #376]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003970:	2180      	movs	r1, #128	; 0x80
 8003972:	0049      	lsls	r1, r1, #1
 8003974:	430a      	orrs	r2, r1
 8003976:	651a      	str	r2, [r3, #80]	; 0x50
 8003978:	e00b      	b.n	8003992 <HAL_RCC_OscConfig+0x516>
 800397a:	4b5b      	ldr	r3, [pc, #364]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800397c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800397e:	4b5a      	ldr	r3, [pc, #360]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003980:	495a      	ldr	r1, [pc, #360]	; (8003aec <HAL_RCC_OscConfig+0x670>)
 8003982:	400a      	ands	r2, r1
 8003984:	651a      	str	r2, [r3, #80]	; 0x50
 8003986:	4b58      	ldr	r3, [pc, #352]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003988:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800398a:	4b57      	ldr	r3, [pc, #348]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 800398c:	4959      	ldr	r1, [pc, #356]	; (8003af4 <HAL_RCC_OscConfig+0x678>)
 800398e:	400a      	ands	r2, r1
 8003990:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	689b      	ldr	r3, [r3, #8]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d015      	beq.n	80039c6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800399a:	f7fd fbcb 	bl	8001134 <HAL_GetTick>
 800399e:	0003      	movs	r3, r0
 80039a0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039a2:	e009      	b.n	80039b8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039a4:	f7fd fbc6 	bl	8001134 <HAL_GetTick>
 80039a8:	0002      	movs	r2, r0
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	1ad3      	subs	r3, r2, r3
 80039ae:	4a52      	ldr	r2, [pc, #328]	; (8003af8 <HAL_RCC_OscConfig+0x67c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d901      	bls.n	80039b8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80039b4:	2303      	movs	r3, #3
 80039b6:	e11a      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80039b8:	4b4b      	ldr	r3, [pc, #300]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80039ba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039bc:	2380      	movs	r3, #128	; 0x80
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4013      	ands	r3, r2
 80039c2:	d0ef      	beq.n	80039a4 <HAL_RCC_OscConfig+0x528>
 80039c4:	e014      	b.n	80039f0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c6:	f7fd fbb5 	bl	8001134 <HAL_GetTick>
 80039ca:	0003      	movs	r3, r0
 80039cc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039ce:	e009      	b.n	80039e4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039d0:	f7fd fbb0 	bl	8001134 <HAL_GetTick>
 80039d4:	0002      	movs	r2, r0
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	1ad3      	subs	r3, r2, r3
 80039da:	4a47      	ldr	r2, [pc, #284]	; (8003af8 <HAL_RCC_OscConfig+0x67c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e104      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80039e4:	4b40      	ldr	r3, [pc, #256]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80039e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80039e8:	2380      	movs	r3, #128	; 0x80
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4013      	ands	r3, r2
 80039ee:	d1ef      	bne.n	80039d0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039f0:	2327      	movs	r3, #39	; 0x27
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d105      	bne.n	8003a06 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039fa:	4b3b      	ldr	r3, [pc, #236]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 80039fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fe:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a00:	493e      	ldr	r1, [pc, #248]	; (8003afc <HAL_RCC_OscConfig+0x680>)
 8003a02:	400a      	ands	r2, r1
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2220      	movs	r2, #32
 8003a0c:	4013      	ands	r3, r2
 8003a0e:	d049      	beq.n	8003aa4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d026      	beq.n	8003a66 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8003a18:	4b33      	ldr	r3, [pc, #204]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	4b32      	ldr	r3, [pc, #200]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
 8003a24:	4b30      	ldr	r3, [pc, #192]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a28:	4b2f      	ldr	r3, [pc, #188]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	635a      	str	r2, [r3, #52]	; 0x34
 8003a30:	4b33      	ldr	r3, [pc, #204]	; (8003b00 <HAL_RCC_OscConfig+0x684>)
 8003a32:	6a1a      	ldr	r2, [r3, #32]
 8003a34:	4b32      	ldr	r3, [pc, #200]	; (8003b00 <HAL_RCC_OscConfig+0x684>)
 8003a36:	2180      	movs	r1, #128	; 0x80
 8003a38:	0189      	lsls	r1, r1, #6
 8003a3a:	430a      	orrs	r2, r1
 8003a3c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a3e:	f7fd fb79 	bl	8001134 <HAL_GetTick>
 8003a42:	0003      	movs	r3, r0
 8003a44:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a46:	e008      	b.n	8003a5a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a48:	f7fd fb74 	bl	8001134 <HAL_GetTick>
 8003a4c:	0002      	movs	r2, r0
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b02      	cmp	r3, #2
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e0c9      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003a5a:	4b23      	ldr	r3, [pc, #140]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	4013      	ands	r3, r2
 8003a62:	d0f1      	beq.n	8003a48 <HAL_RCC_OscConfig+0x5cc>
 8003a64:	e01e      	b.n	8003aa4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8003a66:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a68:	689a      	ldr	r2, [r3, #8]
 8003a6a:	4b1f      	ldr	r3, [pc, #124]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a6c:	2101      	movs	r1, #1
 8003a6e:	438a      	bics	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
 8003a72:	4b23      	ldr	r3, [pc, #140]	; (8003b00 <HAL_RCC_OscConfig+0x684>)
 8003a74:	6a1a      	ldr	r2, [r3, #32]
 8003a76:	4b22      	ldr	r3, [pc, #136]	; (8003b00 <HAL_RCC_OscConfig+0x684>)
 8003a78:	4922      	ldr	r1, [pc, #136]	; (8003b04 <HAL_RCC_OscConfig+0x688>)
 8003a7a:	400a      	ands	r2, r1
 8003a7c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a7e:	f7fd fb59 	bl	8001134 <HAL_GetTick>
 8003a82:	0003      	movs	r3, r0
 8003a84:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a86:	e008      	b.n	8003a9a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a88:	f7fd fb54 	bl	8001134 <HAL_GetTick>
 8003a8c:	0002      	movs	r2, r0
 8003a8e:	69bb      	ldr	r3, [r7, #24]
 8003a90:	1ad3      	subs	r3, r2, r3
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d901      	bls.n	8003a9a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8003a96:	2303      	movs	r3, #3
 8003a98:	e0a9      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	2202      	movs	r2, #2
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d1f1      	bne.n	8003a88 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d100      	bne.n	8003aae <HAL_RCC_OscConfig+0x632>
 8003aac:	e09e      	b.n	8003bec <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d100      	bne.n	8003ab6 <HAL_RCC_OscConfig+0x63a>
 8003ab4:	e077      	b.n	8003ba6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aba:	2b02      	cmp	r3, #2
 8003abc:	d158      	bne.n	8003b70 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	4b09      	ldr	r3, [pc, #36]	; (8003ae8 <HAL_RCC_OscConfig+0x66c>)
 8003ac4:	4910      	ldr	r1, [pc, #64]	; (8003b08 <HAL_RCC_OscConfig+0x68c>)
 8003ac6:	400a      	ands	r2, r1
 8003ac8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aca:	f7fd fb33 	bl	8001134 <HAL_GetTick>
 8003ace:	0003      	movs	r3, r0
 8003ad0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003ad2:	e01b      	b.n	8003b0c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ad4:	f7fd fb2e 	bl	8001134 <HAL_GetTick>
 8003ad8:	0002      	movs	r2, r0
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	2b02      	cmp	r3, #2
 8003ae0:	d914      	bls.n	8003b0c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e083      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	40021000 	.word	0x40021000
 8003aec:	fffffeff 	.word	0xfffffeff
 8003af0:	40007000 	.word	0x40007000
 8003af4:	fffffbff 	.word	0xfffffbff
 8003af8:	00001388 	.word	0x00001388
 8003afc:	efffffff 	.word	0xefffffff
 8003b00:	40010000 	.word	0x40010000
 8003b04:	ffffdfff 	.word	0xffffdfff
 8003b08:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b0c:	4b3a      	ldr	r3, [pc, #232]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2380      	movs	r3, #128	; 0x80
 8003b12:	049b      	lsls	r3, r3, #18
 8003b14:	4013      	ands	r3, r2
 8003b16:	d1dd      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b18:	4b37      	ldr	r3, [pc, #220]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a37      	ldr	r2, [pc, #220]	; (8003bfc <HAL_RCC_OscConfig+0x780>)
 8003b1e:	4013      	ands	r3, r2
 8003b20:	0019      	movs	r1, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b30:	431a      	orrs	r2, r3
 8003b32:	4b31      	ldr	r3, [pc, #196]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b34:	430a      	orrs	r2, r1
 8003b36:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b38:	4b2f      	ldr	r3, [pc, #188]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	4b2e      	ldr	r3, [pc, #184]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b3e:	2180      	movs	r1, #128	; 0x80
 8003b40:	0449      	lsls	r1, r1, #17
 8003b42:	430a      	orrs	r2, r1
 8003b44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b46:	f7fd faf5 	bl	8001134 <HAL_GetTick>
 8003b4a:	0003      	movs	r3, r0
 8003b4c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b4e:	e008      	b.n	8003b62 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b50:	f7fd faf0 	bl	8001134 <HAL_GetTick>
 8003b54:	0002      	movs	r2, r0
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	1ad3      	subs	r3, r2, r3
 8003b5a:	2b02      	cmp	r3, #2
 8003b5c:	d901      	bls.n	8003b62 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8003b5e:	2303      	movs	r3, #3
 8003b60:	e045      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8003b62:	4b25      	ldr	r3, [pc, #148]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	049b      	lsls	r3, r3, #18
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d0f0      	beq.n	8003b50 <HAL_RCC_OscConfig+0x6d4>
 8003b6e:	e03d      	b.n	8003bec <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b70:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b76:	4922      	ldr	r1, [pc, #136]	; (8003c00 <HAL_RCC_OscConfig+0x784>)
 8003b78:	400a      	ands	r2, r1
 8003b7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b7c:	f7fd fada 	bl	8001134 <HAL_GetTick>
 8003b80:	0003      	movs	r3, r0
 8003b82:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b84:	e008      	b.n	8003b98 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003b86:	f7fd fad5 	bl	8001134 <HAL_GetTick>
 8003b8a:	0002      	movs	r2, r0
 8003b8c:	69bb      	ldr	r3, [r7, #24]
 8003b8e:	1ad3      	subs	r3, r2, r3
 8003b90:	2b02      	cmp	r3, #2
 8003b92:	d901      	bls.n	8003b98 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8003b94:	2303      	movs	r3, #3
 8003b96:	e02a      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8003b98:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	2380      	movs	r3, #128	; 0x80
 8003b9e:	049b      	lsls	r3, r3, #18
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d1f0      	bne.n	8003b86 <HAL_RCC_OscConfig+0x70a>
 8003ba4:	e022      	b.n	8003bec <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003baa:	2b01      	cmp	r3, #1
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e01d      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003bb2:	4b11      	ldr	r3, [pc, #68]	; (8003bf8 <HAL_RCC_OscConfig+0x77c>)
 8003bb4:	68db      	ldr	r3, [r3, #12]
 8003bb6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bb8:	69fa      	ldr	r2, [r7, #28]
 8003bba:	2380      	movs	r3, #128	; 0x80
 8003bbc:	025b      	lsls	r3, r3, #9
 8003bbe:	401a      	ands	r2, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d10f      	bne.n	8003be8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	23f0      	movs	r3, #240	; 0xf0
 8003bcc:	039b      	lsls	r3, r3, #14
 8003bce:	401a      	ands	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d107      	bne.n	8003be8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	23c0      	movs	r3, #192	; 0xc0
 8003bdc:	041b      	lsls	r3, r3, #16
 8003bde:	401a      	ands	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003be4:	429a      	cmp	r2, r3
 8003be6:	d001      	beq.n	8003bec <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e000      	b.n	8003bee <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	0018      	movs	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	b00a      	add	sp, #40	; 0x28
 8003bf4:	bdb0      	pop	{r4, r5, r7, pc}
 8003bf6:	46c0      	nop			; (mov r8, r8)
 8003bf8:	40021000 	.word	0x40021000
 8003bfc:	ff02ffff 	.word	0xff02ffff
 8003c00:	feffffff 	.word	0xfeffffff

08003c04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c04:	b5b0      	push	{r4, r5, r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d101      	bne.n	8003c18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e128      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003c18:	4b96      	ldr	r3, [pc, #600]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	4013      	ands	r3, r2
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d91e      	bls.n	8003c64 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c26:	4b93      	ldr	r3, [pc, #588]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	4393      	bics	r3, r2
 8003c2e:	0019      	movs	r1, r3
 8003c30:	4b90      	ldr	r3, [pc, #576]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	430a      	orrs	r2, r1
 8003c36:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003c38:	f7fd fa7c 	bl	8001134 <HAL_GetTick>
 8003c3c:	0003      	movs	r3, r0
 8003c3e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c40:	e009      	b.n	8003c56 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c42:	f7fd fa77 	bl	8001134 <HAL_GetTick>
 8003c46:	0002      	movs	r2, r0
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1ad3      	subs	r3, r2, r3
 8003c4c:	4a8a      	ldr	r2, [pc, #552]	; (8003e78 <HAL_RCC_ClockConfig+0x274>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d901      	bls.n	8003c56 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003c52:	2303      	movs	r3, #3
 8003c54:	e109      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c56:	4b87      	ldr	r3, [pc, #540]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d1ee      	bne.n	8003c42 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	2202      	movs	r2, #2
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	d009      	beq.n	8003c82 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c6e:	4b83      	ldr	r3, [pc, #524]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	22f0      	movs	r2, #240	; 0xf0
 8003c74:	4393      	bics	r3, r2
 8003c76:	0019      	movs	r1, r3
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689a      	ldr	r2, [r3, #8]
 8003c7c:	4b7f      	ldr	r3, [pc, #508]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2201      	movs	r2, #1
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <HAL_RCC_ClockConfig+0x8a>
 8003c8c:	e089      	b.n	8003da2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d107      	bne.n	8003ca6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003c96:	4b79      	ldr	r3, [pc, #484]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	029b      	lsls	r3, r3, #10
 8003c9e:	4013      	ands	r3, r2
 8003ca0:	d120      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e0e1      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2b03      	cmp	r3, #3
 8003cac:	d107      	bne.n	8003cbe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003cae:	4b73      	ldr	r3, [pc, #460]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	049b      	lsls	r3, r3, #18
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d114      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0d5      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d106      	bne.n	8003cd4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003cc6:	4b6d      	ldr	r3, [pc, #436]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	2204      	movs	r2, #4
 8003ccc:	4013      	ands	r3, r2
 8003cce:	d109      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e0ca      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003cd4:	4b69      	ldr	r3, [pc, #420]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	2380      	movs	r3, #128	; 0x80
 8003cda:	009b      	lsls	r3, r3, #2
 8003cdc:	4013      	ands	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e0c2      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003ce4:	4b65      	ldr	r3, [pc, #404]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	2203      	movs	r2, #3
 8003cea:	4393      	bics	r3, r2
 8003cec:	0019      	movs	r1, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003cf4:	430a      	orrs	r2, r1
 8003cf6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003cf8:	f7fd fa1c 	bl	8001134 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d111      	bne.n	8003d2c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d08:	e009      	b.n	8003d1e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d0a:	f7fd fa13 	bl	8001134 <HAL_GetTick>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	4a58      	ldr	r2, [pc, #352]	; (8003e78 <HAL_RCC_ClockConfig+0x274>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0a5      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003d1e:	4b57      	ldr	r3, [pc, #348]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	220c      	movs	r2, #12
 8003d24:	4013      	ands	r3, r2
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d1ef      	bne.n	8003d0a <HAL_RCC_ClockConfig+0x106>
 8003d2a:	e03a      	b.n	8003da2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b03      	cmp	r3, #3
 8003d32:	d111      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d34:	e009      	b.n	8003d4a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d36:	f7fd f9fd 	bl	8001134 <HAL_GetTick>
 8003d3a:	0002      	movs	r2, r0
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	4a4d      	ldr	r2, [pc, #308]	; (8003e78 <HAL_RCC_ClockConfig+0x274>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e08f      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d4a:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	220c      	movs	r2, #12
 8003d50:	4013      	ands	r3, r2
 8003d52:	2b0c      	cmp	r3, #12
 8003d54:	d1ef      	bne.n	8003d36 <HAL_RCC_ClockConfig+0x132>
 8003d56:	e024      	b.n	8003da2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d11b      	bne.n	8003d98 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d60:	e009      	b.n	8003d76 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d62:	f7fd f9e7 	bl	8001134 <HAL_GetTick>
 8003d66:	0002      	movs	r2, r0
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1ad3      	subs	r3, r2, r3
 8003d6c:	4a42      	ldr	r2, [pc, #264]	; (8003e78 <HAL_RCC_ClockConfig+0x274>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d901      	bls.n	8003d76 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8003d72:	2303      	movs	r3, #3
 8003d74:	e079      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d76:	4b41      	ldr	r3, [pc, #260]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003d78:	68db      	ldr	r3, [r3, #12]
 8003d7a:	220c      	movs	r2, #12
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d1ef      	bne.n	8003d62 <HAL_RCC_ClockConfig+0x15e>
 8003d82:	e00e      	b.n	8003da2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d84:	f7fd f9d6 	bl	8001134 <HAL_GetTick>
 8003d88:	0002      	movs	r2, r0
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <HAL_RCC_ClockConfig+0x274>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e068      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003d98:	4b38      	ldr	r3, [pc, #224]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	220c      	movs	r2, #12
 8003d9e:	4013      	ands	r3, r2
 8003da0:	d1f0      	bne.n	8003d84 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003da2:	4b34      	ldr	r3, [pc, #208]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2201      	movs	r2, #1
 8003da8:	4013      	ands	r3, r2
 8003daa:	683a      	ldr	r2, [r7, #0]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d21e      	bcs.n	8003dee <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003db0:	4b30      	ldr	r3, [pc, #192]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	2201      	movs	r2, #1
 8003db6:	4393      	bics	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	4b2e      	ldr	r3, [pc, #184]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003dbc:	683a      	ldr	r2, [r7, #0]
 8003dbe:	430a      	orrs	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd f9b7 	bl	8001134 <HAL_GetTick>
 8003dc6:	0003      	movs	r3, r0
 8003dc8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003dca:	e009      	b.n	8003de0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dcc:	f7fd f9b2 	bl	8001134 <HAL_GetTick>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	4a28      	ldr	r2, [pc, #160]	; (8003e78 <HAL_RCC_ClockConfig+0x274>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e044      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003de0:	4b24      	ldr	r3, [pc, #144]	; (8003e74 <HAL_RCC_ClockConfig+0x270>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	2201      	movs	r2, #1
 8003de6:	4013      	ands	r3, r2
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d1ee      	bne.n	8003dcc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2204      	movs	r2, #4
 8003df4:	4013      	ands	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003df8:	4b20      	ldr	r3, [pc, #128]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	4a20      	ldr	r2, [pc, #128]	; (8003e80 <HAL_RCC_ClockConfig+0x27c>)
 8003dfe:	4013      	ands	r3, r2
 8003e00:	0019      	movs	r1, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	68da      	ldr	r2, [r3, #12]
 8003e06:	4b1d      	ldr	r3, [pc, #116]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003e08:	430a      	orrs	r2, r1
 8003e0a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2208      	movs	r2, #8
 8003e12:	4013      	ands	r3, r2
 8003e14:	d00a      	beq.n	8003e2c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003e16:	4b19      	ldr	r3, [pc, #100]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_RCC_ClockConfig+0x280>)
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	0019      	movs	r1, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	00da      	lsls	r2, r3, #3
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e2c:	f000 f832 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8003e30:	0001      	movs	r1, r0
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_RCC_ClockConfig+0x278>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	091b      	lsrs	r3, r3, #4
 8003e38:	220f      	movs	r2, #15
 8003e3a:	4013      	ands	r3, r2
 8003e3c:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <HAL_RCC_ClockConfig+0x284>)
 8003e3e:	5cd3      	ldrb	r3, [r2, r3]
 8003e40:	000a      	movs	r2, r1
 8003e42:	40da      	lsrs	r2, r3
 8003e44:	4b11      	ldr	r3, [pc, #68]	; (8003e8c <HAL_RCC_ClockConfig+0x288>)
 8003e46:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003e48:	4b11      	ldr	r3, [pc, #68]	; (8003e90 <HAL_RCC_ClockConfig+0x28c>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	250b      	movs	r5, #11
 8003e4e:	197c      	adds	r4, r7, r5
 8003e50:	0018      	movs	r0, r3
 8003e52:	f7fd f929 	bl	80010a8 <HAL_InitTick>
 8003e56:	0003      	movs	r3, r0
 8003e58:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8003e5a:	197b      	adds	r3, r7, r5
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8003e62:	197b      	adds	r3, r7, r5
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	e000      	b.n	8003e6a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	0018      	movs	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	b004      	add	sp, #16
 8003e70:	bdb0      	pop	{r4, r5, r7, pc}
 8003e72:	46c0      	nop			; (mov r8, r8)
 8003e74:	40022000 	.word	0x40022000
 8003e78:	00001388 	.word	0x00001388
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	fffff8ff 	.word	0xfffff8ff
 8003e84:	ffffc7ff 	.word	0xffffc7ff
 8003e88:	08005764 	.word	0x08005764
 8003e8c:	20000000 	.word	0x20000000
 8003e90:	20000004 	.word	0x20000004

08003e94 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e94:	b5b0      	push	{r4, r5, r7, lr}
 8003e96:	b08e      	sub	sp, #56	; 0x38
 8003e98:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8003e9a:	4b4c      	ldr	r3, [pc, #304]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ea0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ea2:	230c      	movs	r3, #12
 8003ea4:	4013      	ands	r3, r2
 8003ea6:	2b0c      	cmp	r3, #12
 8003ea8:	d014      	beq.n	8003ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8003eaa:	d900      	bls.n	8003eae <HAL_RCC_GetSysClockFreq+0x1a>
 8003eac:	e07b      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x112>
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d002      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x24>
 8003eb2:	2b08      	cmp	r3, #8
 8003eb4:	d00b      	beq.n	8003ece <HAL_RCC_GetSysClockFreq+0x3a>
 8003eb6:	e076      	b.n	8003fa6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003eb8:	4b44      	ldr	r3, [pc, #272]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2210      	movs	r2, #16
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	d002      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8003ec2:	4b43      	ldr	r3, [pc, #268]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003ec4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8003ec6:	e07c      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8003ec8:	4b42      	ldr	r3, [pc, #264]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003eca:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ecc:	e079      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003ece:	4b42      	ldr	r3, [pc, #264]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003ed0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003ed2:	e076      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed6:	0c9a      	lsrs	r2, r3, #18
 8003ed8:	230f      	movs	r3, #15
 8003eda:	401a      	ands	r2, r3
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <HAL_RCC_GetSysClockFreq+0x148>)
 8003ede:	5c9b      	ldrb	r3, [r3, r2]
 8003ee0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee4:	0d9a      	lsrs	r2, r3, #22
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	4013      	ands	r3, r2
 8003eea:	3301      	adds	r3, #1
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003eee:	4b37      	ldr	r3, [pc, #220]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	2380      	movs	r3, #128	; 0x80
 8003ef4:	025b      	lsls	r3, r3, #9
 8003ef6:	4013      	ands	r3, r2
 8003ef8:	d01a      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efc:	61bb      	str	r3, [r7, #24]
 8003efe:	2300      	movs	r3, #0
 8003f00:	61fb      	str	r3, [r7, #28]
 8003f02:	4a35      	ldr	r2, [pc, #212]	; (8003fd8 <HAL_RCC_GetSysClockFreq+0x144>)
 8003f04:	2300      	movs	r3, #0
 8003f06:	69b8      	ldr	r0, [r7, #24]
 8003f08:	69f9      	ldr	r1, [r7, #28]
 8003f0a:	f7fc f9a9 	bl	8000260 <__aeabi_lmul>
 8003f0e:	0002      	movs	r2, r0
 8003f10:	000b      	movs	r3, r1
 8003f12:	0010      	movs	r0, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f7fc f97d 	bl	8000220 <__aeabi_uldivmod>
 8003f26:	0002      	movs	r2, r0
 8003f28:	000b      	movs	r3, r1
 8003f2a:	0013      	movs	r3, r2
 8003f2c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f2e:	e037      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8003f30:	4b26      	ldr	r3, [pc, #152]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	2210      	movs	r2, #16
 8003f36:	4013      	ands	r3, r2
 8003f38:	d01a      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60fb      	str	r3, [r7, #12]
 8003f42:	4a23      	ldr	r2, [pc, #140]	; (8003fd0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8003f44:	2300      	movs	r3, #0
 8003f46:	68b8      	ldr	r0, [r7, #8]
 8003f48:	68f9      	ldr	r1, [r7, #12]
 8003f4a:	f7fc f989 	bl	8000260 <__aeabi_lmul>
 8003f4e:	0002      	movs	r2, r0
 8003f50:	000b      	movs	r3, r1
 8003f52:	0010      	movs	r0, r2
 8003f54:	0019      	movs	r1, r3
 8003f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f58:	603b      	str	r3, [r7, #0]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	607b      	str	r3, [r7, #4]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f7fc f95d 	bl	8000220 <__aeabi_uldivmod>
 8003f66:	0002      	movs	r2, r0
 8003f68:	000b      	movs	r3, r1
 8003f6a:	0013      	movs	r3, r2
 8003f6c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f6e:	e017      	b.n	8003fa0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f72:	0018      	movs	r0, r3
 8003f74:	2300      	movs	r3, #0
 8003f76:	0019      	movs	r1, r3
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <HAL_RCC_GetSysClockFreq+0x140>)
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f7fc f970 	bl	8000260 <__aeabi_lmul>
 8003f80:	0002      	movs	r2, r0
 8003f82:	000b      	movs	r3, r1
 8003f84:	0010      	movs	r0, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8a:	001c      	movs	r4, r3
 8003f8c:	2300      	movs	r3, #0
 8003f8e:	001d      	movs	r5, r3
 8003f90:	0022      	movs	r2, r4
 8003f92:	002b      	movs	r3, r5
 8003f94:	f7fc f944 	bl	8000220 <__aeabi_uldivmod>
 8003f98:	0002      	movs	r2, r0
 8003f9a:	000b      	movs	r3, r1
 8003f9c:	0013      	movs	r3, r2
 8003f9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8003fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fa4:	e00d      	b.n	8003fc2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_RCC_GetSysClockFreq+0x138>)
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	0b5b      	lsrs	r3, r3, #13
 8003fac:	2207      	movs	r2, #7
 8003fae:	4013      	ands	r3, r2
 8003fb0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003fb2:	6a3b      	ldr	r3, [r7, #32]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	2280      	movs	r2, #128	; 0x80
 8003fb8:	0212      	lsls	r2, r2, #8
 8003fba:	409a      	lsls	r2, r3
 8003fbc:	0013      	movs	r3, r2
 8003fbe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003fc0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b00e      	add	sp, #56	; 0x38
 8003fca:	bdb0      	pop	{r4, r5, r7, pc}
 8003fcc:	40021000 	.word	0x40021000
 8003fd0:	003d0900 	.word	0x003d0900
 8003fd4:	00f42400 	.word	0x00f42400
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	0800577c 	.word	0x0800577c

08003fe0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fe4:	4b02      	ldr	r3, [pc, #8]	; (8003ff0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
}
 8003fe8:	0018      	movs	r0, r3
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	20000000 	.word	0x20000000

08003ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ff8:	f7ff fff2 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8003ffc:	0001      	movs	r1, r0
 8003ffe:	4b06      	ldr	r3, [pc, #24]	; (8004018 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004000:	68db      	ldr	r3, [r3, #12]
 8004002:	0a1b      	lsrs	r3, r3, #8
 8004004:	2207      	movs	r2, #7
 8004006:	4013      	ands	r3, r2
 8004008:	4a04      	ldr	r2, [pc, #16]	; (800401c <HAL_RCC_GetPCLK1Freq+0x28>)
 800400a:	5cd3      	ldrb	r3, [r2, r3]
 800400c:	40d9      	lsrs	r1, r3
 800400e:	000b      	movs	r3, r1
}
 8004010:	0018      	movs	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	40021000 	.word	0x40021000
 800401c:	08005774 	.word	0x08005774

08004020 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004024:	f7ff ffdc 	bl	8003fe0 <HAL_RCC_GetHCLKFreq>
 8004028:	0001      	movs	r1, r0
 800402a:	4b06      	ldr	r3, [pc, #24]	; (8004044 <HAL_RCC_GetPCLK2Freq+0x24>)
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	0adb      	lsrs	r3, r3, #11
 8004030:	2207      	movs	r2, #7
 8004032:	4013      	ands	r3, r2
 8004034:	4a04      	ldr	r2, [pc, #16]	; (8004048 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004036:	5cd3      	ldrb	r3, [r2, r3]
 8004038:	40d9      	lsrs	r1, r3
 800403a:	000b      	movs	r3, r1
}
 800403c:	0018      	movs	r0, r3
 800403e:	46bd      	mov	sp, r7
 8004040:	bd80      	pop	{r7, pc}
 8004042:	46c0      	nop			; (mov r8, r8)
 8004044:	40021000 	.word	0x40021000
 8004048:	08005774 	.word	0x08005774

0800404c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8004054:	2017      	movs	r0, #23
 8004056:	183b      	adds	r3, r7, r0
 8004058:	2200      	movs	r2, #0
 800405a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2220      	movs	r2, #32
 8004062:	4013      	ands	r3, r2
 8004064:	d100      	bne.n	8004068 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8004066:	e0c2      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004068:	4b90      	ldr	r3, [pc, #576]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800406a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	055b      	lsls	r3, r3, #21
 8004070:	4013      	ands	r3, r2
 8004072:	d109      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004074:	4b8d      	ldr	r3, [pc, #564]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004078:	4b8c      	ldr	r3, [pc, #560]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800407a:	2180      	movs	r1, #128	; 0x80
 800407c:	0549      	lsls	r1, r1, #21
 800407e:	430a      	orrs	r2, r1
 8004080:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8004082:	183b      	adds	r3, r7, r0
 8004084:	2201      	movs	r2, #1
 8004086:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b89      	ldr	r3, [pc, #548]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	005b      	lsls	r3, r3, #1
 8004090:	4013      	ands	r3, r2
 8004092:	d11a      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004094:	4b86      	ldr	r3, [pc, #536]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	4b85      	ldr	r3, [pc, #532]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800409a:	2180      	movs	r1, #128	; 0x80
 800409c:	0049      	lsls	r1, r1, #1
 800409e:	430a      	orrs	r2, r1
 80040a0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a2:	f7fd f847 	bl	8001134 <HAL_GetTick>
 80040a6:	0003      	movs	r3, r0
 80040a8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040aa:	e008      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ac:	f7fd f842 	bl	8001134 <HAL_GetTick>
 80040b0:	0002      	movs	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b64      	cmp	r3, #100	; 0x64
 80040b8:	d901      	bls.n	80040be <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e0f2      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040be:	4b7c      	ldr	r3, [pc, #496]	; (80042b0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	4013      	ands	r3, r2
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80040ca:	4b78      	ldr	r3, [pc, #480]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	23c0      	movs	r3, #192	; 0xc0
 80040d0:	039b      	lsls	r3, r3, #14
 80040d2:	4013      	ands	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685a      	ldr	r2, [r3, #4]
 80040da:	23c0      	movs	r3, #192	; 0xc0
 80040dc:	039b      	lsls	r3, r3, #14
 80040de:	4013      	ands	r3, r2
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	d013      	beq.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	685a      	ldr	r2, [r3, #4]
 80040ea:	23c0      	movs	r3, #192	; 0xc0
 80040ec:	029b      	lsls	r3, r3, #10
 80040ee:	401a      	ands	r2, r3
 80040f0:	23c0      	movs	r3, #192	; 0xc0
 80040f2:	029b      	lsls	r3, r3, #10
 80040f4:	429a      	cmp	r2, r3
 80040f6:	d10a      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80040f8:	4b6c      	ldr	r3, [pc, #432]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	2380      	movs	r3, #128	; 0x80
 80040fe:	029b      	lsls	r3, r3, #10
 8004100:	401a      	ands	r2, r3
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	029b      	lsls	r3, r3, #10
 8004106:	429a      	cmp	r2, r3
 8004108:	d101      	bne.n	800410e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e0ca      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800410e:	4b67      	ldr	r3, [pc, #412]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004112:	23c0      	movs	r3, #192	; 0xc0
 8004114:	029b      	lsls	r3, r3, #10
 8004116:	4013      	ands	r3, r2
 8004118:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d03b      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	23c0      	movs	r3, #192	; 0xc0
 8004126:	029b      	lsls	r3, r3, #10
 8004128:	4013      	ands	r3, r2
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	429a      	cmp	r2, r3
 800412e:	d033      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2220      	movs	r2, #32
 8004136:	4013      	ands	r3, r2
 8004138:	d02e      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800413a:	4b5c      	ldr	r3, [pc, #368]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800413c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800413e:	4a5d      	ldr	r2, [pc, #372]	; (80042b4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004140:	4013      	ands	r3, r2
 8004142:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004144:	4b59      	ldr	r3, [pc, #356]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004146:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004148:	4b58      	ldr	r3, [pc, #352]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800414a:	2180      	movs	r1, #128	; 0x80
 800414c:	0309      	lsls	r1, r1, #12
 800414e:	430a      	orrs	r2, r1
 8004150:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004152:	4b56      	ldr	r3, [pc, #344]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004156:	4b55      	ldr	r3, [pc, #340]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004158:	4957      	ldr	r1, [pc, #348]	; (80042b8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800415a:	400a      	ands	r2, r1
 800415c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800415e:	4b53      	ldr	r3, [pc, #332]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8004164:	68fa      	ldr	r2, [r7, #12]
 8004166:	2380      	movs	r3, #128	; 0x80
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	4013      	ands	r3, r2
 800416c:	d014      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800416e:	f7fc ffe1 	bl	8001134 <HAL_GetTick>
 8004172:	0003      	movs	r3, r0
 8004174:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004176:	e009      	b.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004178:	f7fc ffdc 	bl	8001134 <HAL_GetTick>
 800417c:	0002      	movs	r2, r0
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	4a4e      	ldr	r2, [pc, #312]	; (80042bc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e08b      	b.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800418c:	4b47      	ldr	r3, [pc, #284]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800418e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004190:	2380      	movs	r3, #128	; 0x80
 8004192:	009b      	lsls	r3, r3, #2
 8004194:	4013      	ands	r3, r2
 8004196:	d0ef      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	23c0      	movs	r3, #192	; 0xc0
 800419e:	029b      	lsls	r3, r3, #10
 80041a0:	401a      	ands	r2, r3
 80041a2:	23c0      	movs	r3, #192	; 0xc0
 80041a4:	029b      	lsls	r3, r3, #10
 80041a6:	429a      	cmp	r2, r3
 80041a8:	d10c      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80041aa:	4b40      	ldr	r3, [pc, #256]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a44      	ldr	r2, [pc, #272]	; (80042c0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80041b0:	4013      	ands	r3, r2
 80041b2:	0019      	movs	r1, r3
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	685a      	ldr	r2, [r3, #4]
 80041b8:	23c0      	movs	r3, #192	; 0xc0
 80041ba:	039b      	lsls	r3, r3, #14
 80041bc:	401a      	ands	r2, r3
 80041be:	4b3b      	ldr	r3, [pc, #236]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c0:	430a      	orrs	r2, r1
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	4b39      	ldr	r3, [pc, #228]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041c6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	23c0      	movs	r3, #192	; 0xc0
 80041ce:	029b      	lsls	r3, r3, #10
 80041d0:	401a      	ands	r2, r3
 80041d2:	4b36      	ldr	r3, [pc, #216]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041d4:	430a      	orrs	r2, r1
 80041d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80041d8:	2317      	movs	r3, #23
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d105      	bne.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e2:	4b32      	ldr	r3, [pc, #200]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041e6:	4b31      	ldr	r3, [pc, #196]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041e8:	4936      	ldr	r1, [pc, #216]	; (80042c4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80041ea:	400a      	ands	r2, r1
 80041ec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	4013      	ands	r3, r2
 80041f6:	d009      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f8:	4b2c      	ldr	r3, [pc, #176]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80041fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fc:	2203      	movs	r2, #3
 80041fe:	4393      	bics	r3, r2
 8004200:	0019      	movs	r1, r3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	689a      	ldr	r2, [r3, #8]
 8004206:	4b29      	ldr	r3, [pc, #164]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004208:	430a      	orrs	r2, r1
 800420a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2202      	movs	r2, #2
 8004212:	4013      	ands	r3, r2
 8004214:	d009      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	220c      	movs	r2, #12
 800421c:	4393      	bics	r3, r2
 800421e:	0019      	movs	r1, r3
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004226:	430a      	orrs	r2, r1
 8004228:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2204      	movs	r2, #4
 8004230:	4013      	ands	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004234:	4b1d      	ldr	r3, [pc, #116]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004236:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004238:	4a23      	ldr	r2, [pc, #140]	; (80042c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800423a:	4013      	ands	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	691a      	ldr	r2, [r3, #16]
 8004242:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004244:	430a      	orrs	r2, r1
 8004246:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2208      	movs	r2, #8
 800424e:	4013      	ands	r3, r2
 8004250:	d009      	beq.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004252:	4b16      	ldr	r3, [pc, #88]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004256:	4a1d      	ldr	r2, [pc, #116]	; (80042cc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8004258:	4013      	ands	r3, r2
 800425a:	0019      	movs	r1, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	4b12      	ldr	r3, [pc, #72]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004262:	430a      	orrs	r2, r1
 8004264:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2240      	movs	r2, #64	; 0x40
 800426c:	4013      	ands	r3, r2
 800426e:	d009      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004270:	4b0e      	ldr	r3, [pc, #56]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8004276:	4013      	ands	r3, r2
 8004278:	0019      	movs	r1, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	69da      	ldr	r2, [r3, #28]
 800427e:	4b0b      	ldr	r3, [pc, #44]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004280:	430a      	orrs	r2, r1
 8004282:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2280      	movs	r2, #128	; 0x80
 800428a:	4013      	ands	r3, r2
 800428c:	d009      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800428e:	4b07      	ldr	r3, [pc, #28]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004292:	4a10      	ldr	r2, [pc, #64]	; (80042d4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8004294:	4013      	ands	r3, r2
 8004296:	0019      	movs	r1, r3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	699a      	ldr	r2, [r3, #24]
 800429c:	4b03      	ldr	r3, [pc, #12]	; (80042ac <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800429e:	430a      	orrs	r2, r1
 80042a0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80042a2:	2300      	movs	r3, #0
}
 80042a4:	0018      	movs	r0, r3
 80042a6:	46bd      	mov	sp, r7
 80042a8:	b006      	add	sp, #24
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40021000 	.word	0x40021000
 80042b0:	40007000 	.word	0x40007000
 80042b4:	fffcffff 	.word	0xfffcffff
 80042b8:	fff7ffff 	.word	0xfff7ffff
 80042bc:	00001388 	.word	0x00001388
 80042c0:	ffcfffff 	.word	0xffcfffff
 80042c4:	efffffff 	.word	0xefffffff
 80042c8:	fffff3ff 	.word	0xfffff3ff
 80042cc:	ffffcfff 	.word	0xffffcfff
 80042d0:	fbffffff 	.word	0xfbffffff
 80042d4:	fff3ffff 	.word	0xfff3ffff

080042d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b082      	sub	sp, #8
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e083      	b.n	80043f2 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d109      	bne.n	8004306 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	2382      	movs	r3, #130	; 0x82
 80042f8:	005b      	lsls	r3, r3, #1
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d009      	beq.n	8004312 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	61da      	str	r2, [r3, #28]
 8004304:	e005      	b.n	8004312 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2200      	movs	r2, #0
 8004310:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2251      	movs	r2, #81	; 0x51
 800431c:	5c9b      	ldrb	r3, [r3, r2]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2250      	movs	r2, #80	; 0x50
 8004328:	2100      	movs	r1, #0
 800432a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	0018      	movs	r0, r3
 8004330:	f7fc fbfc 	bl	8000b2c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2251      	movs	r2, #81	; 0x51
 8004338:	2102      	movs	r1, #2
 800433a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681a      	ldr	r2, [r3, #0]
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	2140      	movs	r1, #64	; 0x40
 8004348:	438a      	bics	r2, r1
 800434a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	2382      	movs	r3, #130	; 0x82
 8004352:	005b      	lsls	r3, r3, #1
 8004354:	401a      	ands	r2, r3
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6899      	ldr	r1, [r3, #8]
 800435a:	2384      	movs	r3, #132	; 0x84
 800435c:	021b      	lsls	r3, r3, #8
 800435e:	400b      	ands	r3, r1
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	68d9      	ldr	r1, [r3, #12]
 8004366:	2380      	movs	r3, #128	; 0x80
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	400b      	ands	r3, r1
 800436c:	431a      	orrs	r2, r3
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	2102      	movs	r1, #2
 8004374:	400b      	ands	r3, r1
 8004376:	431a      	orrs	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
 800437c:	2101      	movs	r1, #1
 800437e:	400b      	ands	r3, r1
 8004380:	431a      	orrs	r2, r3
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6999      	ldr	r1, [r3, #24]
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	400b      	ands	r3, r1
 800438c:	431a      	orrs	r2, r3
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	2138      	movs	r1, #56	; 0x38
 8004394:	400b      	ands	r3, r1
 8004396:	431a      	orrs	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6a1b      	ldr	r3, [r3, #32]
 800439c:	2180      	movs	r1, #128	; 0x80
 800439e:	400b      	ands	r3, r1
 80043a0:	431a      	orrs	r2, r3
 80043a2:	0011      	movs	r1, r2
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043a8:	2380      	movs	r3, #128	; 0x80
 80043aa:	019b      	lsls	r3, r3, #6
 80043ac:	401a      	ands	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	430a      	orrs	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	0c1b      	lsrs	r3, r3, #16
 80043bc:	2204      	movs	r2, #4
 80043be:	4013      	ands	r3, r2
 80043c0:	0019      	movs	r1, r3
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	2210      	movs	r2, #16
 80043c8:	401a      	ands	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4907      	ldr	r1, [pc, #28]	; (80043fc <HAL_SPI_Init+0x124>)
 80043de:	400a      	ands	r2, r1
 80043e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2200      	movs	r2, #0
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2251      	movs	r2, #81	; 0x51
 80043ec:	2101      	movs	r1, #1
 80043ee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80043f0:	2300      	movs	r3, #0
}
 80043f2:	0018      	movs	r0, r3
 80043f4:	46bd      	mov	sp, r7
 80043f6:	b002      	add	sp, #8
 80043f8:	bd80      	pop	{r7, pc}
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	fffff7ff 	.word	0xfffff7ff

08004400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b082      	sub	sp, #8
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d101      	bne.n	8004412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	e032      	b.n	8004478 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2239      	movs	r2, #57	; 0x39
 8004416:	5c9b      	ldrb	r3, [r3, r2]
 8004418:	b2db      	uxtb	r3, r3
 800441a:	2b00      	cmp	r3, #0
 800441c:	d107      	bne.n	800442e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2238      	movs	r2, #56	; 0x38
 8004422:	2100      	movs	r1, #0
 8004424:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f7fc fd1d 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2239      	movs	r2, #57	; 0x39
 8004432:	2102      	movs	r1, #2
 8004434:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	0019      	movs	r1, r3
 8004440:	0010      	movs	r0, r2
 8004442:	f000 f8e7 	bl	8004614 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	223e      	movs	r2, #62	; 0x3e
 800444a:	2101      	movs	r1, #1
 800444c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	223a      	movs	r2, #58	; 0x3a
 8004452:	2101      	movs	r1, #1
 8004454:	5499      	strb	r1, [r3, r2]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	223b      	movs	r2, #59	; 0x3b
 800445a:	2101      	movs	r1, #1
 800445c:	5499      	strb	r1, [r3, r2]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	223c      	movs	r2, #60	; 0x3c
 8004462:	2101      	movs	r1, #1
 8004464:	5499      	strb	r1, [r3, r2]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	223d      	movs	r2, #61	; 0x3d
 800446a:	2101      	movs	r1, #1
 800446c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2239      	movs	r2, #57	; 0x39
 8004472:	2101      	movs	r1, #1
 8004474:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004476:	2300      	movs	r3, #0
}
 8004478:	0018      	movs	r0, r3
 800447a:	46bd      	mov	sp, r7
 800447c:	b002      	add	sp, #8
 800447e:	bd80      	pop	{r7, pc}

08004480 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2238      	movs	r2, #56	; 0x38
 800448e:	5c9b      	ldrb	r3, [r3, r2]
 8004490:	2b01      	cmp	r3, #1
 8004492:	d101      	bne.n	8004498 <HAL_TIM_ConfigClockSource+0x18>
 8004494:	2302      	movs	r3, #2
 8004496:	e0b7      	b.n	8004608 <HAL_TIM_ConfigClockSource+0x188>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2238      	movs	r2, #56	; 0x38
 800449c:	2101      	movs	r1, #1
 800449e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2239      	movs	r2, #57	; 0x39
 80044a4:	2102      	movs	r1, #2
 80044a6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	2277      	movs	r2, #119	; 0x77
 80044b4:	4393      	bics	r3, r2
 80044b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a55      	ldr	r2, [pc, #340]	; (8004610 <HAL_TIM_ConfigClockSource+0x190>)
 80044bc:	4013      	ands	r3, r2
 80044be:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	2280      	movs	r2, #128	; 0x80
 80044ce:	0192      	lsls	r2, r2, #6
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d040      	beq.n	8004556 <HAL_TIM_ConfigClockSource+0xd6>
 80044d4:	2280      	movs	r2, #128	; 0x80
 80044d6:	0192      	lsls	r2, r2, #6
 80044d8:	4293      	cmp	r3, r2
 80044da:	d900      	bls.n	80044de <HAL_TIM_ConfigClockSource+0x5e>
 80044dc:	e088      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 80044de:	2280      	movs	r2, #128	; 0x80
 80044e0:	0152      	lsls	r2, r2, #5
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d100      	bne.n	80044e8 <HAL_TIM_ConfigClockSource+0x68>
 80044e6:	e085      	b.n	80045f4 <HAL_TIM_ConfigClockSource+0x174>
 80044e8:	2280      	movs	r2, #128	; 0x80
 80044ea:	0152      	lsls	r2, r2, #5
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d900      	bls.n	80044f2 <HAL_TIM_ConfigClockSource+0x72>
 80044f0:	e07e      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 80044f2:	2b70      	cmp	r3, #112	; 0x70
 80044f4:	d018      	beq.n	8004528 <HAL_TIM_ConfigClockSource+0xa8>
 80044f6:	d900      	bls.n	80044fa <HAL_TIM_ConfigClockSource+0x7a>
 80044f8:	e07a      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 80044fa:	2b60      	cmp	r3, #96	; 0x60
 80044fc:	d04f      	beq.n	800459e <HAL_TIM_ConfigClockSource+0x11e>
 80044fe:	d900      	bls.n	8004502 <HAL_TIM_ConfigClockSource+0x82>
 8004500:	e076      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 8004502:	2b50      	cmp	r3, #80	; 0x50
 8004504:	d03b      	beq.n	800457e <HAL_TIM_ConfigClockSource+0xfe>
 8004506:	d900      	bls.n	800450a <HAL_TIM_ConfigClockSource+0x8a>
 8004508:	e072      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 800450a:	2b40      	cmp	r3, #64	; 0x40
 800450c:	d057      	beq.n	80045be <HAL_TIM_ConfigClockSource+0x13e>
 800450e:	d900      	bls.n	8004512 <HAL_TIM_ConfigClockSource+0x92>
 8004510:	e06e      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 8004512:	2b30      	cmp	r3, #48	; 0x30
 8004514:	d063      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x15e>
 8004516:	d86b      	bhi.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 8004518:	2b20      	cmp	r3, #32
 800451a:	d060      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x15e>
 800451c:	d868      	bhi.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
 800451e:	2b00      	cmp	r3, #0
 8004520:	d05d      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x15e>
 8004522:	2b10      	cmp	r3, #16
 8004524:	d05b      	beq.n	80045de <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004526:	e063      	b.n	80045f0 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6818      	ldr	r0, [r3, #0]
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	6899      	ldr	r1, [r3, #8]
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f000 f93a 	bl	80047b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	2277      	movs	r2, #119	; 0x77
 8004548:	4313      	orrs	r3, r2
 800454a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68fa      	ldr	r2, [r7, #12]
 8004552:	609a      	str	r2, [r3, #8]
      break;
 8004554:	e04f      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6818      	ldr	r0, [r3, #0]
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	6899      	ldr	r1, [r3, #8]
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685a      	ldr	r2, [r3, #4]
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	f000 f923 	bl	80047b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	689a      	ldr	r2, [r3, #8]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2180      	movs	r1, #128	; 0x80
 8004576:	01c9      	lsls	r1, r1, #7
 8004578:	430a      	orrs	r2, r1
 800457a:	609a      	str	r2, [r3, #8]
      break;
 800457c:	e03b      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6818      	ldr	r0, [r3, #0]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	6859      	ldr	r1, [r3, #4]
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	001a      	movs	r2, r3
 800458c:	f000 f896 	bl	80046bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2150      	movs	r1, #80	; 0x50
 8004596:	0018      	movs	r0, r3
 8004598:	f000 f8f0 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 800459c:	e02b      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6818      	ldr	r0, [r3, #0]
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	6859      	ldr	r1, [r3, #4]
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	001a      	movs	r2, r3
 80045ac:	f000 f8b4 	bl	8004718 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	2160      	movs	r1, #96	; 0x60
 80045b6:	0018      	movs	r0, r3
 80045b8:	f000 f8e0 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 80045bc:	e01b      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6818      	ldr	r0, [r3, #0]
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	6859      	ldr	r1, [r3, #4]
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	001a      	movs	r2, r3
 80045cc:	f000 f876 	bl	80046bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2140      	movs	r1, #64	; 0x40
 80045d6:	0018      	movs	r0, r3
 80045d8:	f000 f8d0 	bl	800477c <TIM_ITRx_SetConfig>
      break;
 80045dc:	e00b      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	0019      	movs	r1, r3
 80045e8:	0010      	movs	r0, r2
 80045ea:	f000 f8c7 	bl	800477c <TIM_ITRx_SetConfig>
        break;
 80045ee:	e002      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80045f0:	46c0      	nop			; (mov r8, r8)
 80045f2:	e000      	b.n	80045f6 <HAL_TIM_ConfigClockSource+0x176>
      break;
 80045f4:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2239      	movs	r2, #57	; 0x39
 80045fa:	2101      	movs	r1, #1
 80045fc:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2238      	movs	r2, #56	; 0x38
 8004602:	2100      	movs	r1, #0
 8004604:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	0018      	movs	r0, r3
 800460a:	46bd      	mov	sp, r7
 800460c:	b004      	add	sp, #16
 800460e:	bd80      	pop	{r7, pc}
 8004610:	ffff00ff 	.word	0xffff00ff

08004614 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004624:	687a      	ldr	r2, [r7, #4]
 8004626:	2380      	movs	r3, #128	; 0x80
 8004628:	05db      	lsls	r3, r3, #23
 800462a:	429a      	cmp	r2, r3
 800462c:	d007      	beq.n	800463e <TIM_Base_SetConfig+0x2a>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a1f      	ldr	r2, [pc, #124]	; (80046b0 <TIM_Base_SetConfig+0x9c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d003      	beq.n	800463e <TIM_Base_SetConfig+0x2a>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a1e      	ldr	r2, [pc, #120]	; (80046b4 <TIM_Base_SetConfig+0xa0>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d108      	bne.n	8004650 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2270      	movs	r2, #112	; 0x70
 8004642:	4393      	bics	r3, r2
 8004644:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	68fa      	ldr	r2, [r7, #12]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	05db      	lsls	r3, r3, #23
 8004656:	429a      	cmp	r2, r3
 8004658:	d007      	beq.n	800466a <TIM_Base_SetConfig+0x56>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a14      	ldr	r2, [pc, #80]	; (80046b0 <TIM_Base_SetConfig+0x9c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d003      	beq.n	800466a <TIM_Base_SetConfig+0x56>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a13      	ldr	r2, [pc, #76]	; (80046b4 <TIM_Base_SetConfig+0xa0>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d108      	bne.n	800467c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	4a12      	ldr	r2, [pc, #72]	; (80046b8 <TIM_Base_SetConfig+0xa4>)
 800466e:	4013      	ands	r3, r2
 8004670:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	68db      	ldr	r3, [r3, #12]
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2280      	movs	r2, #128	; 0x80
 8004680:	4393      	bics	r3, r2
 8004682:	001a      	movs	r2, r3
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	4313      	orrs	r3, r2
 800468a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	689a      	ldr	r2, [r3, #8]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	615a      	str	r2, [r3, #20]
}
 80046a8:	46c0      	nop			; (mov r8, r8)
 80046aa:	46bd      	mov	sp, r7
 80046ac:	b004      	add	sp, #16
 80046ae:	bd80      	pop	{r7, pc}
 80046b0:	40010800 	.word	0x40010800
 80046b4:	40011400 	.word	0x40011400
 80046b8:	fffffcff 	.word	0xfffffcff

080046bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046bc:	b580      	push	{r7, lr}
 80046be:	b086      	sub	sp, #24
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	60f8      	str	r0, [r7, #12]
 80046c4:	60b9      	str	r1, [r7, #8]
 80046c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
 80046cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	2201      	movs	r2, #1
 80046d4:	4393      	bics	r3, r2
 80046d6:	001a      	movs	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	699b      	ldr	r3, [r3, #24]
 80046e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	22f0      	movs	r2, #240	; 0xf0
 80046e6:	4393      	bics	r3, r2
 80046e8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	011b      	lsls	r3, r3, #4
 80046ee:	693a      	ldr	r2, [r7, #16]
 80046f0:	4313      	orrs	r3, r2
 80046f2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80046f4:	697b      	ldr	r3, [r7, #20]
 80046f6:	220a      	movs	r2, #10
 80046f8:	4393      	bics	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	68bb      	ldr	r3, [r7, #8]
 8004700:	4313      	orrs	r3, r2
 8004702:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	621a      	str	r2, [r3, #32]
}
 8004710:	46c0      	nop			; (mov r8, r8)
 8004712:	46bd      	mov	sp, r7
 8004714:	b006      	add	sp, #24
 8004716:	bd80      	pop	{r7, pc}

08004718 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	6a1b      	ldr	r3, [r3, #32]
 8004728:	2210      	movs	r2, #16
 800472a:	4393      	bics	r3, r2
 800472c:	001a      	movs	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	4a0d      	ldr	r2, [pc, #52]	; (8004778 <TIM_TI2_ConfigInputStage+0x60>)
 8004742:	4013      	ands	r3, r2
 8004744:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	031b      	lsls	r3, r3, #12
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	4313      	orrs	r3, r2
 800474e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	22a0      	movs	r2, #160	; 0xa0
 8004754:	4393      	bics	r3, r2
 8004756:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	693a      	ldr	r2, [r7, #16]
 800475e:	4313      	orrs	r3, r2
 8004760:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	621a      	str	r2, [r3, #32]
}
 800476e:	46c0      	nop			; (mov r8, r8)
 8004770:	46bd      	mov	sp, r7
 8004772:	b006      	add	sp, #24
 8004774:	bd80      	pop	{r7, pc}
 8004776:	46c0      	nop			; (mov r8, r8)
 8004778:	ffff0fff 	.word	0xffff0fff

0800477c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2270      	movs	r2, #112	; 0x70
 8004790:	4393      	bics	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	4313      	orrs	r3, r2
 800479a:	2207      	movs	r2, #7
 800479c:	4313      	orrs	r3, r2
 800479e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	609a      	str	r2, [r3, #8]
}
 80047a6:	46c0      	nop			; (mov r8, r8)
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b004      	add	sp, #16
 80047ac:	bd80      	pop	{r7, pc}
	...

080047b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b086      	sub	sp, #24
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	607a      	str	r2, [r7, #4]
 80047bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	4a09      	ldr	r2, [pc, #36]	; (80047ec <TIM_ETR_SetConfig+0x3c>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	021a      	lsls	r2, r3, #8
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	431a      	orrs	r2, r3
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	697a      	ldr	r2, [r7, #20]
 80047da:	4313      	orrs	r3, r2
 80047dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	609a      	str	r2, [r3, #8]
}
 80047e4:	46c0      	nop			; (mov r8, r8)
 80047e6:	46bd      	mov	sp, r7
 80047e8:	b006      	add	sp, #24
 80047ea:	bd80      	pop	{r7, pc}
 80047ec:	ffff00ff 	.word	0xffff00ff

080047f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	b084      	sub	sp, #16
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	6078      	str	r0, [r7, #4]
 80047f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2238      	movs	r2, #56	; 0x38
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004804:	2302      	movs	r3, #2
 8004806:	e042      	b.n	800488e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2238      	movs	r2, #56	; 0x38
 800480c:	2101      	movs	r1, #1
 800480e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2239      	movs	r2, #57	; 0x39
 8004814:	2102      	movs	r1, #2
 8004816:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2270      	movs	r2, #112	; 0x70
 800482c:	4393      	bics	r3, r2
 800482e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4313      	orrs	r3, r2
 8004838:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	2380      	movs	r3, #128	; 0x80
 8004848:	05db      	lsls	r3, r3, #23
 800484a:	429a      	cmp	r2, r3
 800484c:	d009      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a11      	ldr	r2, [pc, #68]	; (8004898 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d004      	beq.n	8004862 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a0f      	ldr	r2, [pc, #60]	; (800489c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d10c      	bne.n	800487c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	2280      	movs	r2, #128	; 0x80
 8004866:	4393      	bics	r3, r2
 8004868:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	68ba      	ldr	r2, [r7, #8]
 8004870:	4313      	orrs	r3, r2
 8004872:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68ba      	ldr	r2, [r7, #8]
 800487a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2239      	movs	r2, #57	; 0x39
 8004880:	2101      	movs	r1, #1
 8004882:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2238      	movs	r2, #56	; 0x38
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800488c:	2300      	movs	r3, #0
}
 800488e:	0018      	movs	r0, r3
 8004890:	46bd      	mov	sp, r7
 8004892:	b004      	add	sp, #16
 8004894:	bd80      	pop	{r7, pc}
 8004896:	46c0      	nop			; (mov r8, r8)
 8004898:	40010800 	.word	0x40010800
 800489c:	40011400 	.word	0x40011400

080048a0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b082      	sub	sp, #8
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d101      	bne.n	80048b2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e04c      	b.n	800494c <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d107      	bne.n	80048ca <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2274      	movs	r2, #116	; 0x74
 80048be:	2100      	movs	r1, #0
 80048c0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	0018      	movs	r0, r3
 80048c6:	f7fc fb61 	bl	8000f8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2224      	movs	r2, #36	; 0x24
 80048ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2101      	movs	r1, #1
 80048dc:	438a      	bics	r2, r1
 80048de:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	0018      	movs	r0, r3
 80048e4:	f000 f838 	bl	8004958 <UART_SetConfig>
 80048e8:	0003      	movs	r3, r0
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d101      	bne.n	80048f2 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e02c      	b.n	800494c <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d003      	beq.n	8004902 <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f000 facb 	bl	8004e98 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4911      	ldr	r1, [pc, #68]	; (8004954 <HAL_HalfDuplex_Init+0xb4>)
 800490e:	400a      	ands	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689a      	ldr	r2, [r3, #8]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2122      	movs	r1, #34	; 0x22
 800491e:	438a      	bics	r2, r1
 8004920:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	2108      	movs	r1, #8
 800492e:	430a      	orrs	r2, r1
 8004930:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	681a      	ldr	r2, [r3, #0]
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	0018      	movs	r0, r3
 8004946:	f000 fb5b 	bl	8005000 <UART_CheckIdleState>
 800494a:	0003      	movs	r3, r0
}
 800494c:	0018      	movs	r0, r3
 800494e:	46bd      	mov	sp, r7
 8004950:	b002      	add	sp, #8
 8004952:	bd80      	pop	{r7, pc}
 8004954:	ffffb7ff 	.word	0xffffb7ff

08004958 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004958:	b5b0      	push	{r4, r5, r7, lr}
 800495a:	b08e      	sub	sp, #56	; 0x38
 800495c:	af00      	add	r7, sp, #0
 800495e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004960:	231a      	movs	r3, #26
 8004962:	2218      	movs	r2, #24
 8004964:	4694      	mov	ip, r2
 8004966:	44bc      	add	ip, r7
 8004968:	4463      	add	r3, ip
 800496a:	2200      	movs	r2, #0
 800496c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800496e:	69fb      	ldr	r3, [r7, #28]
 8004970:	689a      	ldr	r2, [r3, #8]
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	431a      	orrs	r2, r3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	695b      	ldr	r3, [r3, #20]
 800497c:	431a      	orrs	r2, r3
 800497e:	69fb      	ldr	r3, [r7, #28]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	4313      	orrs	r3, r2
 8004984:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4ac1      	ldr	r2, [pc, #772]	; (8004c94 <UART_SetConfig+0x33c>)
 800498e:	4013      	ands	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004998:	430a      	orrs	r2, r1
 800499a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	4abd      	ldr	r2, [pc, #756]	; (8004c98 <UART_SetConfig+0x340>)
 80049a4:	4013      	ands	r3, r2
 80049a6:	0019      	movs	r1, r3
 80049a8:	69fb      	ldr	r3, [r7, #28]
 80049aa:	68da      	ldr	r2, [r3, #12]
 80049ac:	69fb      	ldr	r3, [r7, #28]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4ab7      	ldr	r2, [pc, #732]	; (8004c9c <UART_SetConfig+0x344>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d004      	beq.n	80049ce <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	6a1b      	ldr	r3, [r3, #32]
 80049c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049ca:	4313      	orrs	r3, r2
 80049cc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	4ab2      	ldr	r2, [pc, #712]	; (8004ca0 <UART_SetConfig+0x348>)
 80049d6:	4013      	ands	r3, r2
 80049d8:	0019      	movs	r1, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80049e0:	430a      	orrs	r2, r1
 80049e2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4aae      	ldr	r2, [pc, #696]	; (8004ca4 <UART_SetConfig+0x34c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d136      	bne.n	8004a5c <UART_SetConfig+0x104>
 80049ee:	4bae      	ldr	r3, [pc, #696]	; (8004ca8 <UART_SetConfig+0x350>)
 80049f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049f2:	2203      	movs	r2, #3
 80049f4:	4013      	ands	r3, r2
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d020      	beq.n	8004a3c <UART_SetConfig+0xe4>
 80049fa:	d827      	bhi.n	8004a4c <UART_SetConfig+0xf4>
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d00d      	beq.n	8004a1c <UART_SetConfig+0xc4>
 8004a00:	d824      	bhi.n	8004a4c <UART_SetConfig+0xf4>
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d002      	beq.n	8004a0c <UART_SetConfig+0xb4>
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d010      	beq.n	8004a2c <UART_SetConfig+0xd4>
 8004a0a:	e01f      	b.n	8004a4c <UART_SetConfig+0xf4>
 8004a0c:	231b      	movs	r3, #27
 8004a0e:	2218      	movs	r2, #24
 8004a10:	4694      	mov	ip, r2
 8004a12:	44bc      	add	ip, r7
 8004a14:	4463      	add	r3, ip
 8004a16:	2201      	movs	r2, #1
 8004a18:	701a      	strb	r2, [r3, #0]
 8004a1a:	e0ab      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004a1c:	231b      	movs	r3, #27
 8004a1e:	2218      	movs	r2, #24
 8004a20:	4694      	mov	ip, r2
 8004a22:	44bc      	add	ip, r7
 8004a24:	4463      	add	r3, ip
 8004a26:	2202      	movs	r2, #2
 8004a28:	701a      	strb	r2, [r3, #0]
 8004a2a:	e0a3      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004a2c:	231b      	movs	r3, #27
 8004a2e:	2218      	movs	r2, #24
 8004a30:	4694      	mov	ip, r2
 8004a32:	44bc      	add	ip, r7
 8004a34:	4463      	add	r3, ip
 8004a36:	2204      	movs	r2, #4
 8004a38:	701a      	strb	r2, [r3, #0]
 8004a3a:	e09b      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004a3c:	231b      	movs	r3, #27
 8004a3e:	2218      	movs	r2, #24
 8004a40:	4694      	mov	ip, r2
 8004a42:	44bc      	add	ip, r7
 8004a44:	4463      	add	r3, ip
 8004a46:	2208      	movs	r2, #8
 8004a48:	701a      	strb	r2, [r3, #0]
 8004a4a:	e093      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004a4c:	231b      	movs	r3, #27
 8004a4e:	2218      	movs	r2, #24
 8004a50:	4694      	mov	ip, r2
 8004a52:	44bc      	add	ip, r7
 8004a54:	4463      	add	r3, ip
 8004a56:	2210      	movs	r2, #16
 8004a58:	701a      	strb	r2, [r3, #0]
 8004a5a:	e08b      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a92      	ldr	r2, [pc, #584]	; (8004cac <UART_SetConfig+0x354>)
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d136      	bne.n	8004ad4 <UART_SetConfig+0x17c>
 8004a66:	4b90      	ldr	r3, [pc, #576]	; (8004ca8 <UART_SetConfig+0x350>)
 8004a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a6a:	220c      	movs	r2, #12
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b0c      	cmp	r3, #12
 8004a70:	d020      	beq.n	8004ab4 <UART_SetConfig+0x15c>
 8004a72:	d827      	bhi.n	8004ac4 <UART_SetConfig+0x16c>
 8004a74:	2b08      	cmp	r3, #8
 8004a76:	d00d      	beq.n	8004a94 <UART_SetConfig+0x13c>
 8004a78:	d824      	bhi.n	8004ac4 <UART_SetConfig+0x16c>
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d002      	beq.n	8004a84 <UART_SetConfig+0x12c>
 8004a7e:	2b04      	cmp	r3, #4
 8004a80:	d010      	beq.n	8004aa4 <UART_SetConfig+0x14c>
 8004a82:	e01f      	b.n	8004ac4 <UART_SetConfig+0x16c>
 8004a84:	231b      	movs	r3, #27
 8004a86:	2218      	movs	r2, #24
 8004a88:	4694      	mov	ip, r2
 8004a8a:	44bc      	add	ip, r7
 8004a8c:	4463      	add	r3, ip
 8004a8e:	2200      	movs	r2, #0
 8004a90:	701a      	strb	r2, [r3, #0]
 8004a92:	e06f      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004a94:	231b      	movs	r3, #27
 8004a96:	2218      	movs	r2, #24
 8004a98:	4694      	mov	ip, r2
 8004a9a:	44bc      	add	ip, r7
 8004a9c:	4463      	add	r3, ip
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	e067      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004aa4:	231b      	movs	r3, #27
 8004aa6:	2218      	movs	r2, #24
 8004aa8:	4694      	mov	ip, r2
 8004aaa:	44bc      	add	ip, r7
 8004aac:	4463      	add	r3, ip
 8004aae:	2204      	movs	r2, #4
 8004ab0:	701a      	strb	r2, [r3, #0]
 8004ab2:	e05f      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004ab4:	231b      	movs	r3, #27
 8004ab6:	2218      	movs	r2, #24
 8004ab8:	4694      	mov	ip, r2
 8004aba:	44bc      	add	ip, r7
 8004abc:	4463      	add	r3, ip
 8004abe:	2208      	movs	r2, #8
 8004ac0:	701a      	strb	r2, [r3, #0]
 8004ac2:	e057      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004ac4:	231b      	movs	r3, #27
 8004ac6:	2218      	movs	r2, #24
 8004ac8:	4694      	mov	ip, r2
 8004aca:	44bc      	add	ip, r7
 8004acc:	4463      	add	r3, ip
 8004ace:	2210      	movs	r2, #16
 8004ad0:	701a      	strb	r2, [r3, #0]
 8004ad2:	e04f      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a70      	ldr	r2, [pc, #448]	; (8004c9c <UART_SetConfig+0x344>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d143      	bne.n	8004b66 <UART_SetConfig+0x20e>
 8004ade:	4b72      	ldr	r3, [pc, #456]	; (8004ca8 <UART_SetConfig+0x350>)
 8004ae0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ae2:	23c0      	movs	r3, #192	; 0xc0
 8004ae4:	011b      	lsls	r3, r3, #4
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	22c0      	movs	r2, #192	; 0xc0
 8004aea:	0112      	lsls	r2, r2, #4
 8004aec:	4293      	cmp	r3, r2
 8004aee:	d02a      	beq.n	8004b46 <UART_SetConfig+0x1ee>
 8004af0:	22c0      	movs	r2, #192	; 0xc0
 8004af2:	0112      	lsls	r2, r2, #4
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d82e      	bhi.n	8004b56 <UART_SetConfig+0x1fe>
 8004af8:	2280      	movs	r2, #128	; 0x80
 8004afa:	0112      	lsls	r2, r2, #4
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d012      	beq.n	8004b26 <UART_SetConfig+0x1ce>
 8004b00:	2280      	movs	r2, #128	; 0x80
 8004b02:	0112      	lsls	r2, r2, #4
 8004b04:	4293      	cmp	r3, r2
 8004b06:	d826      	bhi.n	8004b56 <UART_SetConfig+0x1fe>
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <UART_SetConfig+0x1be>
 8004b0c:	2280      	movs	r2, #128	; 0x80
 8004b0e:	00d2      	lsls	r2, r2, #3
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d010      	beq.n	8004b36 <UART_SetConfig+0x1de>
 8004b14:	e01f      	b.n	8004b56 <UART_SetConfig+0x1fe>
 8004b16:	231b      	movs	r3, #27
 8004b18:	2218      	movs	r2, #24
 8004b1a:	4694      	mov	ip, r2
 8004b1c:	44bc      	add	ip, r7
 8004b1e:	4463      	add	r3, ip
 8004b20:	2200      	movs	r2, #0
 8004b22:	701a      	strb	r2, [r3, #0]
 8004b24:	e026      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004b26:	231b      	movs	r3, #27
 8004b28:	2218      	movs	r2, #24
 8004b2a:	4694      	mov	ip, r2
 8004b2c:	44bc      	add	ip, r7
 8004b2e:	4463      	add	r3, ip
 8004b30:	2202      	movs	r2, #2
 8004b32:	701a      	strb	r2, [r3, #0]
 8004b34:	e01e      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004b36:	231b      	movs	r3, #27
 8004b38:	2218      	movs	r2, #24
 8004b3a:	4694      	mov	ip, r2
 8004b3c:	44bc      	add	ip, r7
 8004b3e:	4463      	add	r3, ip
 8004b40:	2204      	movs	r2, #4
 8004b42:	701a      	strb	r2, [r3, #0]
 8004b44:	e016      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004b46:	231b      	movs	r3, #27
 8004b48:	2218      	movs	r2, #24
 8004b4a:	4694      	mov	ip, r2
 8004b4c:	44bc      	add	ip, r7
 8004b4e:	4463      	add	r3, ip
 8004b50:	2208      	movs	r2, #8
 8004b52:	701a      	strb	r2, [r3, #0]
 8004b54:	e00e      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004b56:	231b      	movs	r3, #27
 8004b58:	2218      	movs	r2, #24
 8004b5a:	4694      	mov	ip, r2
 8004b5c:	44bc      	add	ip, r7
 8004b5e:	4463      	add	r3, ip
 8004b60:	2210      	movs	r2, #16
 8004b62:	701a      	strb	r2, [r3, #0]
 8004b64:	e006      	b.n	8004b74 <UART_SetConfig+0x21c>
 8004b66:	231b      	movs	r3, #27
 8004b68:	2218      	movs	r2, #24
 8004b6a:	4694      	mov	ip, r2
 8004b6c:	44bc      	add	ip, r7
 8004b6e:	4463      	add	r3, ip
 8004b70:	2210      	movs	r2, #16
 8004b72:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004b74:	69fb      	ldr	r3, [r7, #28]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a48      	ldr	r2, [pc, #288]	; (8004c9c <UART_SetConfig+0x344>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d000      	beq.n	8004b80 <UART_SetConfig+0x228>
 8004b7e:	e09b      	b.n	8004cb8 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004b80:	231b      	movs	r3, #27
 8004b82:	2218      	movs	r2, #24
 8004b84:	4694      	mov	ip, r2
 8004b86:	44bc      	add	ip, r7
 8004b88:	4463      	add	r3, ip
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	2b08      	cmp	r3, #8
 8004b8e:	d01d      	beq.n	8004bcc <UART_SetConfig+0x274>
 8004b90:	dc20      	bgt.n	8004bd4 <UART_SetConfig+0x27c>
 8004b92:	2b04      	cmp	r3, #4
 8004b94:	d015      	beq.n	8004bc2 <UART_SetConfig+0x26a>
 8004b96:	dc1d      	bgt.n	8004bd4 <UART_SetConfig+0x27c>
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d002      	beq.n	8004ba2 <UART_SetConfig+0x24a>
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d005      	beq.n	8004bac <UART_SetConfig+0x254>
 8004ba0:	e018      	b.n	8004bd4 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ba2:	f7ff fa27 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004ba6:	0003      	movs	r3, r0
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004baa:	e01d      	b.n	8004be8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bac:	4b3e      	ldr	r3, [pc, #248]	; (8004ca8 <UART_SetConfig+0x350>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	d002      	beq.n	8004bbc <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004bb6:	4b3e      	ldr	r3, [pc, #248]	; (8004cb0 <UART_SetConfig+0x358>)
 8004bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bba:	e015      	b.n	8004be8 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 8004bbc:	4b3d      	ldr	r3, [pc, #244]	; (8004cb4 <UART_SetConfig+0x35c>)
 8004bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bc0:	e012      	b.n	8004be8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bc2:	f7ff f967 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8004bc6:	0003      	movs	r3, r0
 8004bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bca:	e00d      	b.n	8004be8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bcc:	2380      	movs	r3, #128	; 0x80
 8004bce:	021b      	lsls	r3, r3, #8
 8004bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004bd2:	e009      	b.n	8004be8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004bd8:	231a      	movs	r3, #26
 8004bda:	2218      	movs	r2, #24
 8004bdc:	4694      	mov	ip, r2
 8004bde:	44bc      	add	ip, r7
 8004be0:	4463      	add	r3, ip
 8004be2:	2201      	movs	r2, #1
 8004be4:	701a      	strb	r2, [r3, #0]
        break;
 8004be6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d100      	bne.n	8004bf0 <UART_SetConfig+0x298>
 8004bee:	e139      	b.n	8004e64 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	685a      	ldr	r2, [r3, #4]
 8004bf4:	0013      	movs	r3, r2
 8004bf6:	005b      	lsls	r3, r3, #1
 8004bf8:	189b      	adds	r3, r3, r2
 8004bfa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d305      	bcc.n	8004c0c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004c06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c08:	429a      	cmp	r2, r3
 8004c0a:	d907      	bls.n	8004c1c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 8004c0c:	231a      	movs	r3, #26
 8004c0e:	2218      	movs	r2, #24
 8004c10:	4694      	mov	ip, r2
 8004c12:	44bc      	add	ip, r7
 8004c14:	4463      	add	r3, ip
 8004c16:	2201      	movs	r2, #1
 8004c18:	701a      	strb	r2, [r3, #0]
 8004c1a:	e123      	b.n	8004e64 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8004c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1e:	613b      	str	r3, [r7, #16]
 8004c20:	2300      	movs	r3, #0
 8004c22:	617b      	str	r3, [r7, #20]
 8004c24:	6939      	ldr	r1, [r7, #16]
 8004c26:	697a      	ldr	r2, [r7, #20]
 8004c28:	000b      	movs	r3, r1
 8004c2a:	0e1b      	lsrs	r3, r3, #24
 8004c2c:	0010      	movs	r0, r2
 8004c2e:	0205      	lsls	r5, r0, #8
 8004c30:	431d      	orrs	r5, r3
 8004c32:	000b      	movs	r3, r1
 8004c34:	021c      	lsls	r4, r3, #8
 8004c36:	69fb      	ldr	r3, [r7, #28]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]
 8004c42:	68b8      	ldr	r0, [r7, #8]
 8004c44:	68f9      	ldr	r1, [r7, #12]
 8004c46:	1900      	adds	r0, r0, r4
 8004c48:	4169      	adcs	r1, r5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	603b      	str	r3, [r7, #0]
 8004c50:	2300      	movs	r3, #0
 8004c52:	607b      	str	r3, [r7, #4]
 8004c54:	683a      	ldr	r2, [r7, #0]
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f7fb fae2 	bl	8000220 <__aeabi_uldivmod>
 8004c5c:	0002      	movs	r2, r0
 8004c5e:	000b      	movs	r3, r1
 8004c60:	0013      	movs	r3, r2
 8004c62:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004c64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c66:	23c0      	movs	r3, #192	; 0xc0
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d309      	bcc.n	8004c82 <UART_SetConfig+0x32a>
 8004c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c70:	2380      	movs	r3, #128	; 0x80
 8004c72:	035b      	lsls	r3, r3, #13
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d204      	bcs.n	8004c82 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004c7e:	60da      	str	r2, [r3, #12]
 8004c80:	e0f0      	b.n	8004e64 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8004c82:	231a      	movs	r3, #26
 8004c84:	2218      	movs	r2, #24
 8004c86:	4694      	mov	ip, r2
 8004c88:	44bc      	add	ip, r7
 8004c8a:	4463      	add	r3, ip
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	701a      	strb	r2, [r3, #0]
 8004c90:	e0e8      	b.n	8004e64 <UART_SetConfig+0x50c>
 8004c92:	46c0      	nop			; (mov r8, r8)
 8004c94:	efff69f3 	.word	0xefff69f3
 8004c98:	ffffcfff 	.word	0xffffcfff
 8004c9c:	40004800 	.word	0x40004800
 8004ca0:	fffff4ff 	.word	0xfffff4ff
 8004ca4:	40013800 	.word	0x40013800
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	40004400 	.word	0x40004400
 8004cb0:	003d0900 	.word	0x003d0900
 8004cb4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cb8:	69fb      	ldr	r3, [r7, #28]
 8004cba:	69da      	ldr	r2, [r3, #28]
 8004cbc:	2380      	movs	r3, #128	; 0x80
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d000      	beq.n	8004cc6 <UART_SetConfig+0x36e>
 8004cc4:	e074      	b.n	8004db0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 8004cc6:	231b      	movs	r3, #27
 8004cc8:	2218      	movs	r2, #24
 8004cca:	4694      	mov	ip, r2
 8004ccc:	44bc      	add	ip, r7
 8004cce:	4463      	add	r3, ip
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	2b08      	cmp	r3, #8
 8004cd4:	d822      	bhi.n	8004d1c <UART_SetConfig+0x3c4>
 8004cd6:	009a      	lsls	r2, r3, #2
 8004cd8:	4b6a      	ldr	r3, [pc, #424]	; (8004e84 <UART_SetConfig+0x52c>)
 8004cda:	18d3      	adds	r3, r2, r3
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7ff f988 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004ce4:	0003      	movs	r3, r0
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ce8:	e022      	b.n	8004d30 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cea:	f7ff f999 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004cee:	0003      	movs	r3, r0
 8004cf0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004cf2:	e01d      	b.n	8004d30 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cf4:	4b64      	ldr	r3, [pc, #400]	; (8004e88 <UART_SetConfig+0x530>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d002      	beq.n	8004d04 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <UART_SetConfig+0x534>)
 8004d00:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d02:	e015      	b.n	8004d30 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8004d04:	4b62      	ldr	r3, [pc, #392]	; (8004e90 <UART_SetConfig+0x538>)
 8004d06:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d08:	e012      	b.n	8004d30 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004d0a:	f7ff f8c3 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8004d0e:	0003      	movs	r3, r0
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d12:	e00d      	b.n	8004d30 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d14:	2380      	movs	r3, #128	; 0x80
 8004d16:	021b      	lsls	r3, r3, #8
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004d1a:	e009      	b.n	8004d30 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004d20:	231a      	movs	r3, #26
 8004d22:	2218      	movs	r2, #24
 8004d24:	4694      	mov	ip, r2
 8004d26:	44bc      	add	ip, r7
 8004d28:	4463      	add	r3, ip
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	701a      	strb	r2, [r3, #0]
        break;
 8004d2e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d100      	bne.n	8004d38 <UART_SetConfig+0x3e0>
 8004d36:	e095      	b.n	8004e64 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d3a:	005a      	lsls	r2, r3, #1
 8004d3c:	69fb      	ldr	r3, [r7, #28]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	085b      	lsrs	r3, r3, #1
 8004d42:	18d2      	adds	r2, r2, r3
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	0019      	movs	r1, r3
 8004d4a:	0010      	movs	r0, r2
 8004d4c:	f7fb f9dc 	bl	8000108 <__udivsi3>
 8004d50:	0003      	movs	r3, r0
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d58:	2b0f      	cmp	r3, #15
 8004d5a:	d921      	bls.n	8004da0 <UART_SetConfig+0x448>
 8004d5c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004d5e:	2380      	movs	r3, #128	; 0x80
 8004d60:	025b      	lsls	r3, r3, #9
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d21c      	bcs.n	8004da0 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d68:	b29a      	uxth	r2, r3
 8004d6a:	200e      	movs	r0, #14
 8004d6c:	2418      	movs	r4, #24
 8004d6e:	193b      	adds	r3, r7, r4
 8004d70:	181b      	adds	r3, r3, r0
 8004d72:	210f      	movs	r1, #15
 8004d74:	438a      	bics	r2, r1
 8004d76:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d7a:	085b      	lsrs	r3, r3, #1
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	2207      	movs	r2, #7
 8004d80:	4013      	ands	r3, r2
 8004d82:	b299      	uxth	r1, r3
 8004d84:	193b      	adds	r3, r7, r4
 8004d86:	181b      	adds	r3, r3, r0
 8004d88:	193a      	adds	r2, r7, r4
 8004d8a:	1812      	adds	r2, r2, r0
 8004d8c:	8812      	ldrh	r2, [r2, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	193a      	adds	r2, r7, r4
 8004d98:	1812      	adds	r2, r2, r0
 8004d9a:	8812      	ldrh	r2, [r2, #0]
 8004d9c:	60da      	str	r2, [r3, #12]
 8004d9e:	e061      	b.n	8004e64 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004da0:	231a      	movs	r3, #26
 8004da2:	2218      	movs	r2, #24
 8004da4:	4694      	mov	ip, r2
 8004da6:	44bc      	add	ip, r7
 8004da8:	4463      	add	r3, ip
 8004daa:	2201      	movs	r2, #1
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	e059      	b.n	8004e64 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004db0:	231b      	movs	r3, #27
 8004db2:	2218      	movs	r2, #24
 8004db4:	4694      	mov	ip, r2
 8004db6:	44bc      	add	ip, r7
 8004db8:	4463      	add	r3, ip
 8004dba:	781b      	ldrb	r3, [r3, #0]
 8004dbc:	2b08      	cmp	r3, #8
 8004dbe:	d822      	bhi.n	8004e06 <UART_SetConfig+0x4ae>
 8004dc0:	009a      	lsls	r2, r3, #2
 8004dc2:	4b34      	ldr	r3, [pc, #208]	; (8004e94 <UART_SetConfig+0x53c>)
 8004dc4:	18d3      	adds	r3, r2, r3
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004dca:	f7ff f913 	bl	8003ff4 <HAL_RCC_GetPCLK1Freq>
 8004dce:	0003      	movs	r3, r0
 8004dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dd2:	e022      	b.n	8004e1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004dd4:	f7ff f924 	bl	8004020 <HAL_RCC_GetPCLK2Freq>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004ddc:	e01d      	b.n	8004e1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dde:	4b2a      	ldr	r3, [pc, #168]	; (8004e88 <UART_SetConfig+0x530>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2210      	movs	r2, #16
 8004de4:	4013      	ands	r3, r2
 8004de6:	d002      	beq.n	8004dee <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8004de8:	4b28      	ldr	r3, [pc, #160]	; (8004e8c <UART_SetConfig+0x534>)
 8004dea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dec:	e015      	b.n	8004e1a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8004dee:	4b28      	ldr	r3, [pc, #160]	; (8004e90 <UART_SetConfig+0x538>)
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004df2:	e012      	b.n	8004e1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004df4:	f7ff f84e 	bl	8003e94 <HAL_RCC_GetSysClockFreq>
 8004df8:	0003      	movs	r3, r0
 8004dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004dfc:	e00d      	b.n	8004e1a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dfe:	2380      	movs	r3, #128	; 0x80
 8004e00:	021b      	lsls	r3, r3, #8
 8004e02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8004e04:	e009      	b.n	8004e1a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8004e0a:	231a      	movs	r3, #26
 8004e0c:	2218      	movs	r2, #24
 8004e0e:	4694      	mov	ip, r2
 8004e10:	44bc      	add	ip, r7
 8004e12:	4463      	add	r3, ip
 8004e14:	2201      	movs	r2, #1
 8004e16:	701a      	strb	r2, [r3, #0]
        break;
 8004e18:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d021      	beq.n	8004e64 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004e20:	69fb      	ldr	r3, [r7, #28]
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	085a      	lsrs	r2, r3, #1
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	18d2      	adds	r2, r2, r3
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	0019      	movs	r1, r3
 8004e30:	0010      	movs	r0, r2
 8004e32:	f7fb f969 	bl	8000108 <__udivsi3>
 8004e36:	0003      	movs	r3, r0
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e3e:	2b0f      	cmp	r3, #15
 8004e40:	d909      	bls.n	8004e56 <UART_SetConfig+0x4fe>
 8004e42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e44:	2380      	movs	r3, #128	; 0x80
 8004e46:	025b      	lsls	r3, r3, #9
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d204      	bcs.n	8004e56 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e52:	60da      	str	r2, [r3, #12]
 8004e54:	e006      	b.n	8004e64 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e56:	231a      	movs	r3, #26
 8004e58:	2218      	movs	r2, #24
 8004e5a:	4694      	mov	ip, r2
 8004e5c:	44bc      	add	ip, r7
 8004e5e:	4463      	add	r3, ip
 8004e60:	2201      	movs	r2, #1
 8004e62:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	2200      	movs	r2, #0
 8004e68:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004e70:	231a      	movs	r3, #26
 8004e72:	2218      	movs	r2, #24
 8004e74:	4694      	mov	ip, r2
 8004e76:	44bc      	add	ip, r7
 8004e78:	4463      	add	r3, ip
 8004e7a:	781b      	ldrb	r3, [r3, #0]
}
 8004e7c:	0018      	movs	r0, r3
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	b00e      	add	sp, #56	; 0x38
 8004e82:	bdb0      	pop	{r4, r5, r7, pc}
 8004e84:	08005788 	.word	0x08005788
 8004e88:	40021000 	.word	0x40021000
 8004e8c:	003d0900 	.word	0x003d0900
 8004e90:	00f42400 	.word	0x00f42400
 8004e94:	080057ac 	.word	0x080057ac

08004e98 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b082      	sub	sp, #8
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	4013      	ands	r3, r2
 8004ea8:	d00b      	beq.n	8004ec2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	685b      	ldr	r3, [r3, #4]
 8004eb0:	4a4a      	ldr	r2, [pc, #296]	; (8004fdc <UART_AdvFeatureConfig+0x144>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	0019      	movs	r1, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	4013      	ands	r3, r2
 8004eca:	d00b      	beq.n	8004ee4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a43      	ldr	r2, [pc, #268]	; (8004fe0 <UART_AdvFeatureConfig+0x148>)
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	430a      	orrs	r2, r1
 8004ee2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2204      	movs	r2, #4
 8004eea:	4013      	ands	r3, r2
 8004eec:	d00b      	beq.n	8004f06 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	4a3b      	ldr	r2, [pc, #236]	; (8004fe4 <UART_AdvFeatureConfig+0x14c>)
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	0019      	movs	r1, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	430a      	orrs	r2, r1
 8004f04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0a:	2208      	movs	r2, #8
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	d00b      	beq.n	8004f28 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4a34      	ldr	r2, [pc, #208]	; (8004fe8 <UART_AdvFeatureConfig+0x150>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	0019      	movs	r1, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	430a      	orrs	r2, r1
 8004f26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2210      	movs	r2, #16
 8004f2e:	4013      	ands	r3, r2
 8004f30:	d00b      	beq.n	8004f4a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4a2c      	ldr	r2, [pc, #176]	; (8004fec <UART_AdvFeatureConfig+0x154>)
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	0019      	movs	r1, r3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	2220      	movs	r2, #32
 8004f50:	4013      	ands	r3, r2
 8004f52:	d00b      	beq.n	8004f6c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	4a25      	ldr	r2, [pc, #148]	; (8004ff0 <UART_AdvFeatureConfig+0x158>)
 8004f5c:	4013      	ands	r3, r2
 8004f5e:	0019      	movs	r1, r3
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2240      	movs	r2, #64	; 0x40
 8004f72:	4013      	ands	r3, r2
 8004f74:	d01d      	beq.n	8004fb2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a1d      	ldr	r2, [pc, #116]	; (8004ff4 <UART_AdvFeatureConfig+0x15c>)
 8004f7e:	4013      	ands	r3, r2
 8004f80:	0019      	movs	r1, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004f92:	2380      	movs	r3, #128	; 0x80
 8004f94:	035b      	lsls	r3, r3, #13
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d10b      	bne.n	8004fb2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	4a15      	ldr	r2, [pc, #84]	; (8004ff8 <UART_AdvFeatureConfig+0x160>)
 8004fa2:	4013      	ands	r3, r2
 8004fa4:	0019      	movs	r1, r3
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	430a      	orrs	r2, r1
 8004fb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb6:	2280      	movs	r2, #128	; 0x80
 8004fb8:	4013      	ands	r3, r2
 8004fba:	d00b      	beq.n	8004fd4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	4a0e      	ldr	r2, [pc, #56]	; (8004ffc <UART_AdvFeatureConfig+0x164>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	0019      	movs	r1, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	430a      	orrs	r2, r1
 8004fd2:	605a      	str	r2, [r3, #4]
  }
}
 8004fd4:	46c0      	nop			; (mov r8, r8)
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	b002      	add	sp, #8
 8004fda:	bd80      	pop	{r7, pc}
 8004fdc:	fffdffff 	.word	0xfffdffff
 8004fe0:	fffeffff 	.word	0xfffeffff
 8004fe4:	fffbffff 	.word	0xfffbffff
 8004fe8:	ffff7fff 	.word	0xffff7fff
 8004fec:	ffffefff 	.word	0xffffefff
 8004ff0:	ffffdfff 	.word	0xffffdfff
 8004ff4:	ffefffff 	.word	0xffefffff
 8004ff8:	ff9fffff 	.word	0xff9fffff
 8004ffc:	fff7ffff 	.word	0xfff7ffff

08005000 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b086      	sub	sp, #24
 8005004:	af02      	add	r7, sp, #8
 8005006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2280      	movs	r2, #128	; 0x80
 800500c:	2100      	movs	r1, #0
 800500e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005010:	f7fc f890 	bl	8001134 <HAL_GetTick>
 8005014:	0003      	movs	r3, r0
 8005016:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	2208      	movs	r2, #8
 8005020:	4013      	ands	r3, r2
 8005022:	2b08      	cmp	r3, #8
 8005024:	d10c      	bne.n	8005040 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	2280      	movs	r2, #128	; 0x80
 800502a:	0391      	lsls	r1, r2, #14
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	4a17      	ldr	r2, [pc, #92]	; (800508c <UART_CheckIdleState+0x8c>)
 8005030:	9200      	str	r2, [sp, #0]
 8005032:	2200      	movs	r2, #0
 8005034:	f000 f82c 	bl	8005090 <UART_WaitOnFlagUntilTimeout>
 8005038:	1e03      	subs	r3, r0, #0
 800503a:	d001      	beq.n	8005040 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e021      	b.n	8005084 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	2204      	movs	r2, #4
 8005048:	4013      	ands	r3, r2
 800504a:	2b04      	cmp	r3, #4
 800504c:	d10c      	bne.n	8005068 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2280      	movs	r2, #128	; 0x80
 8005052:	03d1      	lsls	r1, r2, #15
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	4a0d      	ldr	r2, [pc, #52]	; (800508c <UART_CheckIdleState+0x8c>)
 8005058:	9200      	str	r2, [sp, #0]
 800505a:	2200      	movs	r2, #0
 800505c:	f000 f818 	bl	8005090 <UART_WaitOnFlagUntilTimeout>
 8005060:	1e03      	subs	r3, r0, #0
 8005062:	d001      	beq.n	8005068 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005064:	2303      	movs	r3, #3
 8005066:	e00d      	b.n	8005084 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2220      	movs	r2, #32
 800506c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2274      	movs	r2, #116	; 0x74
 800507e:	2100      	movs	r1, #0
 8005080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	0018      	movs	r0, r3
 8005086:	46bd      	mov	sp, r7
 8005088:	b004      	add	sp, #16
 800508a:	bd80      	pop	{r7, pc}
 800508c:	01ffffff 	.word	0x01ffffff

08005090 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b084      	sub	sp, #16
 8005094:	af00      	add	r7, sp, #0
 8005096:	60f8      	str	r0, [r7, #12]
 8005098:	60b9      	str	r1, [r7, #8]
 800509a:	603b      	str	r3, [r7, #0]
 800509c:	1dfb      	adds	r3, r7, #7
 800509e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050a0:	e05e      	b.n	8005160 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	3301      	adds	r3, #1
 80050a6:	d05b      	beq.n	8005160 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050a8:	f7fc f844 	bl	8001134 <HAL_GetTick>
 80050ac:	0002      	movs	r2, r0
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d302      	bcc.n	80050be <UART_WaitOnFlagUntilTimeout+0x2e>
 80050b8:	69bb      	ldr	r3, [r7, #24]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d11b      	bne.n	80050f6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	492f      	ldr	r1, [pc, #188]	; (8005188 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80050ca:	400a      	ands	r2, r1
 80050cc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	689a      	ldr	r2, [r3, #8]
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	2101      	movs	r1, #1
 80050da:	438a      	bics	r2, r1
 80050dc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2220      	movs	r2, #32
 80050e2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2274      	movs	r2, #116	; 0x74
 80050ee:	2100      	movs	r1, #0
 80050f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80050f2:	2303      	movs	r3, #3
 80050f4:	e044      	b.n	8005180 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	2204      	movs	r2, #4
 80050fe:	4013      	ands	r3, r2
 8005100:	d02e      	beq.n	8005160 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	69da      	ldr	r2, [r3, #28]
 8005108:	2380      	movs	r3, #128	; 0x80
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	401a      	ands	r2, r3
 800510e:	2380      	movs	r3, #128	; 0x80
 8005110:	011b      	lsls	r3, r3, #4
 8005112:	429a      	cmp	r2, r3
 8005114:	d124      	bne.n	8005160 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2280      	movs	r2, #128	; 0x80
 800511c:	0112      	lsls	r2, r2, #4
 800511e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4917      	ldr	r1, [pc, #92]	; (8005188 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800512c:	400a      	ands	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2101      	movs	r1, #1
 800513c:	438a      	bics	r2, r1
 800513e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2220      	movs	r2, #32
 8005144:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2220      	movs	r2, #32
 800514a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2280      	movs	r2, #128	; 0x80
 8005150:	2120      	movs	r1, #32
 8005152:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2274      	movs	r2, #116	; 0x74
 8005158:	2100      	movs	r1, #0
 800515a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800515c:	2303      	movs	r3, #3
 800515e:	e00f      	b.n	8005180 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	68ba      	ldr	r2, [r7, #8]
 8005168:	4013      	ands	r3, r2
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	425a      	negs	r2, r3
 8005170:	4153      	adcs	r3, r2
 8005172:	b2db      	uxtb	r3, r3
 8005174:	001a      	movs	r2, r3
 8005176:	1dfb      	adds	r3, r7, #7
 8005178:	781b      	ldrb	r3, [r3, #0]
 800517a:	429a      	cmp	r2, r3
 800517c:	d091      	beq.n	80050a2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800517e:	2300      	movs	r3, #0
}
 8005180:	0018      	movs	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	b004      	add	sp, #16
 8005186:	bd80      	pop	{r7, pc}
 8005188:	fffffe5f 	.word	0xfffffe5f

0800518c <EEPROM_save>:

// save a file in the eeprom
// for now we relay on predefined names for file names later we will change it to a real file name and variable file size
// TODO we need uint8_t EEPROM_save(unsigned char *file_name, uint8_t *buffer, uint8_t how_many_byte_write)
uint8_t EEPROM_save(uint32_t file_name, uint8_t *buffer, uint8_t buffer_size)
{
 800518c:	b590      	push	{r4, r7, lr}
 800518e:	b087      	sub	sp, #28
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	1dfb      	adds	r3, r7, #7
 8005198:	701a      	strb	r2, [r3, #0]
	uint8_t result = 0;
 800519a:	2417      	movs	r4, #23
 800519c:	193b      	adds	r3, r7, r4
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
	//before anything else first check if the address you are trying to write to is in fact within the EEPROM memory map
	if (IS_FLASH_DATA_ADDRESS(file_name))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	4a13      	ldr	r2, [pc, #76]	; (80051f4 <EEPROM_save+0x68>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d91c      	bls.n	80051e4 <EEPROM_save+0x58>
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	4a12      	ldr	r2, [pc, #72]	; (80051f8 <EEPROM_save+0x6c>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d818      	bhi.n	80051e4 <EEPROM_save+0x58>
	{
		//Call unlock before programming operations to ensure that you have control of the EEPROM memory
		if ( HAL_OK == HAL_FLASHEx_DATAEEPROM_Unlock() )
 80051b2:	f7fc fc47 	bl	8001a44 <HAL_FLASHEx_DATAEEPROM_Unlock>
 80051b6:	1e03      	subs	r3, r0, #0
 80051b8:	d114      	bne.n	80051e4 <EEPROM_save+0x58>
		{
			//if( HAL_OK == HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEPROGRAMDATA_BYTE) )
			{
				if( HAL_OK == HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (uint32_t) file_name, (uint32_t) buffer[0]) )
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	781b      	ldrb	r3, [r3, #0]
 80051be:	001a      	movs	r2, r3
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	0019      	movs	r1, r3
 80051c4:	2000      	movs	r0, #0
 80051c6:	f7fc fc79 	bl	8001abc <HAL_FLASHEx_DATAEEPROM_Program>
 80051ca:	1e03      	subs	r3, r0, #0
 80051cc:	d102      	bne.n	80051d4 <EEPROM_save+0x48>
				{
					result =1;
 80051ce:	193b      	adds	r3, r7, r4
 80051d0:	2201      	movs	r2, #1
 80051d2:	701a      	strb	r2, [r3, #0]
				}
				//we already unlocked the EEPROM memory no matter if we succes to write or not we need to relock
				if( HAL_OK != HAL_FLASHEx_DATAEEPROM_Lock())
 80051d4:	f7fc fc64 	bl	8001aa0 <HAL_FLASHEx_DATAEEPROM_Lock>
 80051d8:	1e03      	subs	r3, r0, #0
 80051da:	d003      	beq.n	80051e4 <EEPROM_save+0x58>
				{
					result =0;  //if we can not relock again it is a problem no matter if we succes to write
 80051dc:	2317      	movs	r3, #23
 80051de:	18fb      	adds	r3, r7, r3
 80051e0:	2200      	movs	r2, #0
 80051e2:	701a      	strb	r2, [r3, #0]
				}
			}
		}
	}
	//Lock the EEPROM afterwards to protect it from accidental memory writes
	return(result);
 80051e4:	2317      	movs	r3, #23
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	781b      	ldrb	r3, [r3, #0]
}
 80051ea:	0018      	movs	r0, r3
 80051ec:	46bd      	mov	sp, r7
 80051ee:	b007      	add	sp, #28
 80051f0:	bd90      	pop	{r4, r7, pc}
 80051f2:	46c0      	nop			; (mov r8, r8)
 80051f4:	0807ffff 	.word	0x0807ffff
 80051f8:	080807ff 	.word	0x080807ff

080051fc <EEPROM_load>:

// load a file from the eeprom
// for now we relay on predefined names for file names later we will change it to a real file name and variable file size
// TODO we need uint8_t EEPROM_load(unsigned char *file_name, uint8_t *buffer, uint8_t how_many_byte_read)
uint8_t EEPROM_load(uint32_t file_name, uint8_t *buffer, uint8_t buffer_size)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b086      	sub	sp, #24
 8005200:	af00      	add	r7, sp, #0
 8005202:	60f8      	str	r0, [r7, #12]
 8005204:	60b9      	str	r1, [r7, #8]
 8005206:	1dfb      	adds	r3, r7, #7
 8005208:	701a      	strb	r2, [r3, #0]

	uint8_t result = 0;
 800520a:	2117      	movs	r1, #23
 800520c:	187b      	adds	r3, r7, r1
 800520e:	2200      	movs	r2, #0
 8005210:	701a      	strb	r2, [r3, #0]
	//before anything else first check if the address you are trying to write to is in fact within the EEPROM memory map
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4a0a      	ldr	r2, [pc, #40]	; (8005240 <EEPROM_load+0x44>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d90a      	bls.n	8005230 <EEPROM_load+0x34>
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	4a09      	ldr	r2, [pc, #36]	; (8005244 <EEPROM_load+0x48>)
 800521e:	4293      	cmp	r3, r2
 8005220:	d806      	bhi.n	8005230 <EEPROM_load+0x34>
	{
		buffer[0] = *(uint8_t*) file_name;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	781a      	ldrb	r2, [r3, #0]
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	701a      	strb	r2, [r3, #0]
		result = 1;
 800522a:	187b      	adds	r3, r7, r1
 800522c:	2201      	movs	r2, #1
 800522e:	701a      	strb	r2, [r3, #0]
	}
	//Lock the EEPROM afterwards to protect it from accidental memory writes
	return(result);
 8005230:	2317      	movs	r3, #23
 8005232:	18fb      	adds	r3, r7, r3
 8005234:	781b      	ldrb	r3, [r3, #0]
}
 8005236:	0018      	movs	r0, r3
 8005238:	46bd      	mov	sp, r7
 800523a:	b006      	add	sp, #24
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	0807ffff 	.word	0x0807ffff
 8005244:	080807ff 	.word	0x080807ff

08005248 <I2C_interface_create>:
#include "i2c_network_interface.h"


I2C_t * I2C_interface_create(I2C_HandleTypeDef *I2C_handle,uint8_t channel_address)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	000a      	movs	r2, r1
 8005252:	1cfb      	adds	r3, r7, #3
 8005254:	701a      	strb	r2, [r3, #0]
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8005256:	2008      	movs	r0, #8
 8005258:	f000 f9d8 	bl	800560c <malloc>
 800525c:	0003      	movs	r3, r0
 800525e:	60fb      	str	r3, [r7, #12]
	if(thisI2C != NULL)
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d02f      	beq.n	80052c6 <I2C_interface_create+0x7e>
	{
		thisI2C->I2C_line = I2C_handle;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	605a      	str	r2, [r3, #4]
		i2c2_interrupt_interface_pointer = thisI2C;
 800526c:	4b18      	ldr	r3, [pc, #96]	; (80052d0 <I2C_interface_create+0x88>)
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	601a      	str	r2, [r3, #0]
		thisI2C->buffer_index=0;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2200      	movs	r2, #0
 8005276:	701a      	strb	r2, [r3, #0]

		// Disable Own Address1 before setting the new address configuration
		//TODO it is much safer to use HAL compatible address change instead of manual mode
		//is ther any reason for using manual mode?
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689a      	ldr	r2, [r3, #8]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4913      	ldr	r1, [pc, #76]	; (80052d4 <I2C_interface_create+0x8c>)
 8005288:	400a      	ands	r2, r1
 800528a:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 800528c:	1cfb      	adds	r3, r7, #3
 800528e:	781b      	ldrb	r3, [r3, #0]
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	0019      	movs	r1, r3
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2280      	movs	r2, #128	; 0x80
 800529c:	0212      	lsls	r2, r2, #8
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	681a      	ldr	r2, [r3, #0]
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	212c      	movs	r1, #44	; 0x2c
 80052b2:	430a      	orrs	r2, r1
 80052b4:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Receive_IT(thisI2C->I2C_line, thisI2C->receiveBuffer, I2C_RECEIVE_LENGTH);
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6858      	ldr	r0, [r3, #4]
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	3301      	adds	r3, #1
 80052be:	2201      	movs	r2, #1
 80052c0:	0019      	movs	r1, r3
 80052c2:	f7fc fe7d 	bl	8001fc0 <HAL_I2C_Slave_Receive_IT>
	}
	else
	{
		//TODO  erro handler
	}
	return thisI2C;
 80052c6:	68fb      	ldr	r3, [r7, #12]
}
 80052c8:	0018      	movs	r0, r3
 80052ca:	46bd      	mov	sp, r7
 80052cc:	b004      	add	sp, #16
 80052ce:	bd80      	pop	{r7, pc}
 80052d0:	200001c0 	.word	0x200001c0
 80052d4:	ffff7fff 	.word	0xffff7fff

080052d8 <I2C2_IRQHandler>:
//------------------------------------------
void I2C2_IRQHandler(void)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	af00      	add	r7, sp, #0
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_STOPI) != RESET))
 80052dc:	4b33      	ldr	r3, [pc, #204]	; (80053ac <I2C2_IRQHandler+0xd4>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	699b      	ldr	r3, [r3, #24]
 80052e6:	2220      	movs	r2, #32
 80052e8:	4013      	ands	r3, r2
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d10e      	bne.n	800530c <I2C2_IRQHandler+0x34>
 80052ee:	4b2f      	ldr	r3, [pc, #188]	; (80053ac <I2C2_IRQHandler+0xd4>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2220      	movs	r2, #32
 80052fa:	4013      	ands	r3, r2
 80052fc:	2b20      	cmp	r3, #32
 80052fe:	d105      	bne.n	800530c <I2C2_IRQHandler+0x34>
	{
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_STOPF);
 8005300:	4b2a      	ldr	r3, [pc, #168]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2220      	movs	r2, #32
 800530a:	61da      	str	r2, [r3, #28]
	}
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_RXI) != RESET))
 800530c:	4b27      	ldr	r3, [pc, #156]	; (80053ac <I2C2_IRQHandler+0xd4>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	699b      	ldr	r3, [r3, #24]
 8005316:	2204      	movs	r2, #4
 8005318:	4013      	ands	r3, r2
 800531a:	2b04      	cmp	r3, #4
 800531c:	d12a      	bne.n	8005374 <I2C2_IRQHandler+0x9c>
 800531e:	4b23      	ldr	r3, [pc, #140]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2204      	movs	r2, #4
 800532a:	4013      	ands	r3, r2
 800532c:	2b04      	cmp	r3, #4
 800532e:	d121      	bne.n	8005374 <I2C2_IRQHandler+0x9c>
	{
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_RXNE);
 8005330:	4b1e      	ldr	r3, [pc, #120]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2204      	movs	r2, #4
 800533a:	61da      	str	r2, [r3, #28]
		if(i2c2_interrupt_interface_pointer->buffer_index < I2C_RECEIVE_LENGTH)
 800533c:	4b1b      	ldr	r3, [pc, #108]	; (80053ac <I2C2_IRQHandler+0xd4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2b00      	cmp	r3, #0
 8005346:	d115      	bne.n	8005374 <I2C2_IRQHandler+0x9c>
		{
			i2c2_interrupt_interface_pointer->receiveBuffer[i2c2_interrupt_interface_pointer->buffer_index] = (uint8_t)i2c2_interrupt_interface_pointer->I2C_line->Instance->RXDR;
 8005348:	4b18      	ldr	r3, [pc, #96]	; (80053ac <I2C2_IRQHandler+0xd4>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	685b      	ldr	r3, [r3, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005352:	4b16      	ldr	r3, [pc, #88]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	4b15      	ldr	r3, [pc, #84]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	781b      	ldrb	r3, [r3, #0]
 800535c:	b2db      	uxtb	r3, r3
 800535e:	b2c9      	uxtb	r1, r1
 8005360:	18d3      	adds	r3, r2, r3
 8005362:	1c0a      	adds	r2, r1, #0
 8005364:	705a      	strb	r2, [r3, #1]
			i2c2_interrupt_interface_pointer->buffer_index++;
 8005366:	4b11      	ldr	r3, [pc, #68]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	781a      	ldrb	r2, [r3, #0]
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	3201      	adds	r2, #1
 8005370:	b2d2      	uxtb	r2, r2
 8005372:	701a      	strb	r2, [r3, #0]
		}
	}
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_ADDRI) != RESET))
 8005374:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699b      	ldr	r3, [r3, #24]
 800537e:	2208      	movs	r2, #8
 8005380:	4013      	ands	r3, r2
 8005382:	2b08      	cmp	r3, #8
 8005384:	d10f      	bne.n	80053a6 <I2C2_IRQHandler+0xce>
 8005386:	4b09      	ldr	r3, [pc, #36]	; (80053ac <I2C2_IRQHandler+0xd4>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	2208      	movs	r2, #8
 8005392:	4013      	ands	r3, r2
 8005394:	2b08      	cmp	r3, #8
 8005396:	d106      	bne.n	80053a6 <I2C2_IRQHandler+0xce>
	{
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_ADDR);
 8005398:	4b04      	ldr	r3, [pc, #16]	; (80053ac <I2C2_IRQHandler+0xd4>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2208      	movs	r2, #8
 80053a2:	61da      	str	r2, [r3, #28]
	}
	return;
 80053a4:	46c0      	nop			; (mov r8, r8)
 80053a6:	46c0      	nop			; (mov r8, r8)
}
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	200001c0 	.word	0x200001c0

080053b0 <module_system_init>:
extern TIM_HandleTypeDef htim21;
extern TIM_HandleTypeDef htim22;
extern System my_sys;

void module_system_init(System *thisSystem)
{
 80053b0:	b5b0      	push	{r4, r5, r7, lr}
 80053b2:	b084      	sub	sp, #16
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	//my_sys.data_bus = internal_bus_create(GPIOB, 0xFF, BUS_CLK_GPIO_Port, BUS_CLK_Pin, BUS_C1_GPIO_Port, BUS_C1_Pin);


		  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_RESET);//todo test
 80053b8:	2380      	movs	r3, #128	; 0x80
 80053ba:	01db      	lsls	r3, r3, #7
 80053bc:	4821      	ldr	r0, [pc, #132]	; (8005444 <module_system_init+0x94>)
 80053be:	2200      	movs	r2, #0
 80053c0:	0019      	movs	r1, r3
 80053c2:	f7fc fd49 	bl	8001e58 <HAL_GPIO_WritePin>

	//GlobalTimerInit(&thisSystem->GlobalTimer);

	uint8_t temp_data[4]={0,0,0,0};
 80053c6:	210c      	movs	r1, #12
 80053c8:	187b      	adds	r3, r7, r1
 80053ca:	2200      	movs	r2, #0
 80053cc:	601a      	str	r2, [r3, #0]
	uint8_t i2c_new_address[4]={0,0,0,0};
 80053ce:	2508      	movs	r5, #8
 80053d0:	197b      	adds	r3, r7, r5
 80053d2:	2200      	movs	r2, #0
 80053d4:	601a      	str	r2, [r3, #0]

	EEPROM_load(EEPROM_FIRST_TIME_INITIATION, temp_data, 1);  //TODO  this is bungee jumping without rope we assume everything if good no error check
 80053d6:	000c      	movs	r4, r1
 80053d8:	187b      	adds	r3, r7, r1
 80053da:	481b      	ldr	r0, [pc, #108]	; (8005448 <module_system_init+0x98>)
 80053dc:	2201      	movs	r2, #1
 80053de:	0019      	movs	r1, r3
 80053e0:	f7ff ff0c 	bl	80051fc <EEPROM_load>
	if (temp_data[0] == EEPROM_FIRST_TIME_BOOT_MARKE )
 80053e4:	193b      	adds	r3, r7, r4
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b21      	cmp	r3, #33	; 0x21
 80053ea:	d117      	bne.n	800541c <module_system_init+0x6c>
	{
		EEPROM_load(EEPROM_I2C_ADDR, i2c_new_address, 1);
 80053ec:	197b      	adds	r3, r7, r5
 80053ee:	4817      	ldr	r0, [pc, #92]	; (800544c <module_system_init+0x9c>)
 80053f0:	2201      	movs	r2, #1
 80053f2:	0019      	movs	r1, r3
 80053f4:	f7ff ff02 	bl	80051fc <EEPROM_load>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);//green we set from eeprom  //todo test
 80053f8:	23a0      	movs	r3, #160	; 0xa0
 80053fa:	05db      	lsls	r3, r3, #23
 80053fc:	2200      	movs	r2, #0
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	0018      	movs	r0, r3
 8005402:	f7fc fd29 	bl	8001e58 <HAL_GPIO_WritePin>
		my_sys.i2c_line = I2C_interface_create(&hi2c2,i2c_new_address[0]);
 8005406:	197b      	adds	r3, r7, r5
 8005408:	781a      	ldrb	r2, [r3, #0]
 800540a:	4b11      	ldr	r3, [pc, #68]	; (8005450 <module_system_init+0xa0>)
 800540c:	0011      	movs	r1, r2
 800540e:	0018      	movs	r0, r3
 8005410:	f7ff ff1a 	bl	8005248 <I2C_interface_create>
 8005414:	0002      	movs	r2, r0
 8005416:	4b0f      	ldr	r3, [pc, #60]	; (8005454 <module_system_init+0xa4>)
 8005418:	62da      	str	r2, [r3, #44]	; 0x2c
	else
	{
		my_sys.i2c_line = I2C_interface_create(&hi2c2,100 );   //TDOD hard code this to correct default value
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//red on we hard coded  address//todo test
	}
	return;
 800541a:	e010      	b.n	800543e <module_system_init+0x8e>
		my_sys.i2c_line = I2C_interface_create(&hi2c2,100 );   //TDOD hard code this to correct default value
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <module_system_init+0xa0>)
 800541e:	2164      	movs	r1, #100	; 0x64
 8005420:	0018      	movs	r0, r3
 8005422:	f7ff ff11 	bl	8005248 <I2C_interface_create>
 8005426:	0002      	movs	r2, r0
 8005428:	4b0a      	ldr	r3, [pc, #40]	; (8005454 <module_system_init+0xa4>)
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);//red on we hard coded  address//todo test
 800542c:	2380      	movs	r3, #128	; 0x80
 800542e:	0059      	lsls	r1, r3, #1
 8005430:	23a0      	movs	r3, #160	; 0xa0
 8005432:	05db      	lsls	r3, r3, #23
 8005434:	2200      	movs	r2, #0
 8005436:	0018      	movs	r0, r3
 8005438:	f7fc fd0e 	bl	8001e58 <HAL_GPIO_WritePin>
	return;
 800543c:	46c0      	nop			; (mov r8, r8)
}
 800543e:	46bd      	mov	sp, r7
 8005440:	b004      	add	sp, #16
 8005442:	bdb0      	pop	{r4, r5, r7, pc}
 8005444:	50000800 	.word	0x50000800
 8005448:	08080020 	.word	0x08080020
 800544c:	08080010 	.word	0x08080010
 8005450:	200000f4 	.word	0x200000f4
 8005454:	20000140 	.word	0x20000140

08005458 <state_machine>:



void state_machine(System *thisSystem)
{
 8005458:	b590      	push	{r4, r7, lr}
 800545a:	b08b      	sub	sp, #44	; 0x2c
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
	uint8_t testData[23] = {3,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,0,2,1};  //TODO remove after Link data output to magnetometer memory instead
 8005460:	2310      	movs	r3, #16
 8005462:	18fb      	adds	r3, r7, r3
 8005464:	4a4d      	ldr	r2, [pc, #308]	; (800559c <state_machine+0x144>)
 8005466:	ca13      	ldmia	r2!, {r0, r1, r4}
 8005468:	c313      	stmia	r3!, {r0, r1, r4}
 800546a:	ca03      	ldmia	r2!, {r0, r1}
 800546c:	c303      	stmia	r3!, {r0, r1}
 800546e:	8811      	ldrh	r1, [r2, #0]
 8005470:	8019      	strh	r1, [r3, #0]
 8005472:	7892      	ldrb	r2, [r2, #2]
 8005474:	709a      	strb	r2, [r3, #2]

	while(1)
	{
	//internal_bus_write_data_frame(my_sys.data_bus,testData,22);HAL_Delay(500);
		if(my_sys.i2c_line->buffer_index)
 8005476:	4b4a      	ldr	r3, [pc, #296]	; (80055a0 <state_machine+0x148>)
 8005478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f9      	beq.n	8005476 <state_machine+0x1e>
		{
			switch(my_sys.i2c_line->receiveBuffer[0])
 8005482:	4b47      	ldr	r3, [pc, #284]	; (80055a0 <state_machine+0x148>)
 8005484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005486:	785b      	ldrb	r3, [r3, #1]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	3b0a      	subs	r3, #10
 800548c:	2b0a      	cmp	r3, #10
 800548e:	d857      	bhi.n	8005540 <state_machine+0xe8>
 8005490:	009a      	lsls	r2, r3, #2
 8005492:	4b44      	ldr	r3, [pc, #272]	; (80055a4 <state_machine+0x14c>)
 8005494:	18d3      	adds	r3, r2, r3
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	469f      	mov	pc, r3
					break;
				}
				//-------------------------------
				case I2C_PACKET_SET_BOOT0_LOW:
				{
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 800549a:	2380      	movs	r3, #128	; 0x80
 800549c:	021b      	lsls	r3, r3, #8
 800549e:	4842      	ldr	r0, [pc, #264]	; (80055a8 <state_machine+0x150>)
 80054a0:	2200      	movs	r2, #0
 80054a2:	0019      	movs	r1, r3
 80054a4:	f7fc fcd8 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 80054a8:	e04a      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_BOOT0_HIGH:
				{
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_SET);
 80054aa:	2380      	movs	r3, #128	; 0x80
 80054ac:	021b      	lsls	r3, r3, #8
 80054ae:	483e      	ldr	r0, [pc, #248]	; (80055a8 <state_machine+0x150>)
 80054b0:	2201      	movs	r2, #1
 80054b2:	0019      	movs	r1, r3
 80054b4:	f7fc fcd0 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 80054b8:	e042      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_RESET_LOW:
				{
					  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_RESET);
 80054ba:	2380      	movs	r3, #128	; 0x80
 80054bc:	01db      	lsls	r3, r3, #7
 80054be:	483a      	ldr	r0, [pc, #232]	; (80055a8 <state_machine+0x150>)
 80054c0:	2200      	movs	r2, #0
 80054c2:	0019      	movs	r1, r3
 80054c4:	f7fc fcc8 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 80054c8:	e03a      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_RESET_HIGH:
				{
					 HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_SET);
 80054ca:	2380      	movs	r3, #128	; 0x80
 80054cc:	01db      	lsls	r3, r3, #7
 80054ce:	4836      	ldr	r0, [pc, #216]	; (80055a8 <state_machine+0x150>)
 80054d0:	2201      	movs	r2, #1
 80054d2:	0019      	movs	r1, r3
 80054d4:	f7fc fcc0 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 80054d8:	e032      	b.n	8005540 <state_machine+0xe8>
				}
				//---------this is a code for testing LED and making fun demo we can not have them in production release version
				//---------since it may make serious conflicts and issue with magnetometer reader and scheduler ----------------
				case I2C_PACKET_SET_RED_ON:
				{
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80054da:	2380      	movs	r3, #128	; 0x80
 80054dc:	0059      	lsls	r1, r3, #1
 80054de:	23a0      	movs	r3, #160	; 0xa0
 80054e0:	05db      	lsls	r3, r3, #23
 80054e2:	2200      	movs	r2, #0
 80054e4:	0018      	movs	r0, r3
 80054e6:	f7fc fcb7 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 80054ea:	e029      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_RED_OFF:
				{
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80054ec:	2380      	movs	r3, #128	; 0x80
 80054ee:	0059      	lsls	r1, r3, #1
 80054f0:	23a0      	movs	r3, #160	; 0xa0
 80054f2:	05db      	lsls	r3, r3, #23
 80054f4:	2201      	movs	r2, #1
 80054f6:	0018      	movs	r0, r3
 80054f8:	f7fc fcae 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 80054fc:	e020      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_GREEN_ON:
				{
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80054fe:	23a0      	movs	r3, #160	; 0xa0
 8005500:	05db      	lsls	r3, r3, #23
 8005502:	2200      	movs	r2, #0
 8005504:	2140      	movs	r1, #64	; 0x40
 8005506:	0018      	movs	r0, r3
 8005508:	f7fc fca6 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 800550c:	e018      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_GREEN_OFF:
				{
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 800550e:	23a0      	movs	r3, #160	; 0xa0
 8005510:	05db      	lsls	r3, r3, #23
 8005512:	2201      	movs	r2, #1
 8005514:	2140      	movs	r1, #64	; 0x40
 8005516:	0018      	movs	r0, r3
 8005518:	f7fc fc9e 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 800551c:	e010      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_ON:
				{
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 800551e:	23a0      	movs	r3, #160	; 0xa0
 8005520:	05db      	lsls	r3, r3, #23
 8005522:	2200      	movs	r2, #0
 8005524:	2180      	movs	r1, #128	; 0x80
 8005526:	0018      	movs	r0, r3
 8005528:	f7fc fc96 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 800552c:	e008      	b.n	8005540 <state_machine+0xe8>
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_OFF:
				{
					  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800552e:	23a0      	movs	r3, #160	; 0xa0
 8005530:	05db      	lsls	r3, r3, #23
 8005532:	2201      	movs	r2, #1
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	0018      	movs	r0, r3
 8005538:	f7fc fc8e 	bl	8001e58 <HAL_GPIO_WritePin>
					break;
 800553c:	e000      	b.n	8005540 <state_machine+0xe8>
					break;
 800553e:	46c0      	nop			; (mov r8, r8)
				}
			}
			//-------- if we get any data higher than 0x80  it mean it is a new address
			if ( my_sys.i2c_line->receiveBuffer[0] > I2C_PACKET_SET_NEW_ADDRESS )
 8005540:	4b17      	ldr	r3, [pc, #92]	; (80055a0 <state_machine+0x148>)
 8005542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b80      	cmp	r3, #128	; 0x80
 800554a:	d921      	bls.n	8005590 <state_machine+0x138>
			{
				uint8_t i2c_new_address[4]={3,3,3,3};
 800554c:	210c      	movs	r1, #12
 800554e:	187b      	adds	r3, r7, r1
 8005550:	4a16      	ldr	r2, [pc, #88]	; (80055ac <state_machine+0x154>)
 8005552:	601a      	str	r2, [r3, #0]
				uint8_t temp_data[4]={0,0,0,0};
 8005554:	2408      	movs	r4, #8
 8005556:	193b      	adds	r3, r7, r4
 8005558:	2200      	movs	r2, #0
 800555a:	601a      	str	r2, [r3, #0]
				i2c_new_address[0] =  (uint8_t)my_sys.i2c_line->receiveBuffer[0] & 0x7f;
 800555c:	4b10      	ldr	r3, [pc, #64]	; (80055a0 <state_machine+0x148>)
 800555e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005560:	785b      	ldrb	r3, [r3, #1]
 8005562:	b2db      	uxtb	r3, r3
 8005564:	227f      	movs	r2, #127	; 0x7f
 8005566:	4013      	ands	r3, r2
 8005568:	b2da      	uxtb	r2, r3
 800556a:	187b      	adds	r3, r7, r1
 800556c:	701a      	strb	r2, [r3, #0]
				if( !EEPROM_save(EEPROM_I2C_ADDR, i2c_new_address, 1) )
 800556e:	187b      	adds	r3, r7, r1
 8005570:	480f      	ldr	r0, [pc, #60]	; (80055b0 <state_machine+0x158>)
 8005572:	2201      	movs	r2, #1
 8005574:	0019      	movs	r1, r3
 8005576:	f7ff fe09 	bl	800518c <EEPROM_save>
 800557a:	1e03      	subs	r3, r0, #0
 800557c:	d008      	beq.n	8005590 <state_machine+0x138>
					//we donot have any valid address for now we go to idle mode we never activate common bus

				}
				else
				{
					temp_data[0] = EEPROM_FIRST_TIME_BOOT_MARKE;
 800557e:	193b      	adds	r3, r7, r4
 8005580:	2221      	movs	r2, #33	; 0x21
 8005582:	701a      	strb	r2, [r3, #0]
					if( !EEPROM_save(EEPROM_FIRST_TIME_INITIATION, temp_data,1) )  //TODO  this is bungee jumping without rope we assume everything if good no error check
 8005584:	193b      	adds	r3, r7, r4
 8005586:	480b      	ldr	r0, [pc, #44]	; (80055b4 <state_machine+0x15c>)
 8005588:	2201      	movs	r2, #1
 800558a:	0019      	movs	r1, r3
 800558c:	f7ff fdfe 	bl	800518c <EEPROM_save>
						//this is bad we can kill the whole system master micro should now about this
						//we donot have any valid address for now we go to idle mode we never activate common bus
					}
				}
			}
		my_sys.i2c_line->buffer_index =0;
 8005590:	4b03      	ldr	r3, [pc, #12]	; (80055a0 <state_machine+0x148>)
 8005592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005594:	2200      	movs	r2, #0
 8005596:	701a      	strb	r2, [r3, #0]
		if(my_sys.i2c_line->buffer_index)
 8005598:	e76d      	b.n	8005476 <state_machine+0x1e>
 800559a:	46c0      	nop			; (mov r8, r8)
 800559c:	0800574c 	.word	0x0800574c
 80055a0:	20000140 	.word	0x20000140
 80055a4:	080057d0 	.word	0x080057d0
 80055a8:	50000800 	.word	0x50000800
 80055ac:	03030303 	.word	0x03030303
 80055b0:	08080010 	.word	0x08080010
 80055b4:	08080020 	.word	0x08080020

080055b8 <__errno>:
 80055b8:	4b01      	ldr	r3, [pc, #4]	; (80055c0 <__errno+0x8>)
 80055ba:	6818      	ldr	r0, [r3, #0]
 80055bc:	4770      	bx	lr
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	2000000c 	.word	0x2000000c

080055c4 <__libc_init_array>:
 80055c4:	b570      	push	{r4, r5, r6, lr}
 80055c6:	2600      	movs	r6, #0
 80055c8:	4d0c      	ldr	r5, [pc, #48]	; (80055fc <__libc_init_array+0x38>)
 80055ca:	4c0d      	ldr	r4, [pc, #52]	; (8005600 <__libc_init_array+0x3c>)
 80055cc:	1b64      	subs	r4, r4, r5
 80055ce:	10a4      	asrs	r4, r4, #2
 80055d0:	42a6      	cmp	r6, r4
 80055d2:	d109      	bne.n	80055e8 <__libc_init_array+0x24>
 80055d4:	2600      	movs	r6, #0
 80055d6:	f000 f8ad 	bl	8005734 <_init>
 80055da:	4d0a      	ldr	r5, [pc, #40]	; (8005604 <__libc_init_array+0x40>)
 80055dc:	4c0a      	ldr	r4, [pc, #40]	; (8005608 <__libc_init_array+0x44>)
 80055de:	1b64      	subs	r4, r4, r5
 80055e0:	10a4      	asrs	r4, r4, #2
 80055e2:	42a6      	cmp	r6, r4
 80055e4:	d105      	bne.n	80055f2 <__libc_init_array+0x2e>
 80055e6:	bd70      	pop	{r4, r5, r6, pc}
 80055e8:	00b3      	lsls	r3, r6, #2
 80055ea:	58eb      	ldr	r3, [r5, r3]
 80055ec:	4798      	blx	r3
 80055ee:	3601      	adds	r6, #1
 80055f0:	e7ee      	b.n	80055d0 <__libc_init_array+0xc>
 80055f2:	00b3      	lsls	r3, r6, #2
 80055f4:	58eb      	ldr	r3, [r5, r3]
 80055f6:	4798      	blx	r3
 80055f8:	3601      	adds	r6, #1
 80055fa:	e7f2      	b.n	80055e2 <__libc_init_array+0x1e>
 80055fc:	08005804 	.word	0x08005804
 8005600:	08005804 	.word	0x08005804
 8005604:	08005804 	.word	0x08005804
 8005608:	08005808 	.word	0x08005808

0800560c <malloc>:
 800560c:	b510      	push	{r4, lr}
 800560e:	4b03      	ldr	r3, [pc, #12]	; (800561c <malloc+0x10>)
 8005610:	0001      	movs	r1, r0
 8005612:	6818      	ldr	r0, [r3, #0]
 8005614:	f000 f80c 	bl	8005630 <_malloc_r>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	2000000c 	.word	0x2000000c

08005620 <memset>:
 8005620:	0003      	movs	r3, r0
 8005622:	1882      	adds	r2, r0, r2
 8005624:	4293      	cmp	r3, r2
 8005626:	d100      	bne.n	800562a <memset+0xa>
 8005628:	4770      	bx	lr
 800562a:	7019      	strb	r1, [r3, #0]
 800562c:	3301      	adds	r3, #1
 800562e:	e7f9      	b.n	8005624 <memset+0x4>

08005630 <_malloc_r>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	2303      	movs	r3, #3
 8005634:	1ccd      	adds	r5, r1, #3
 8005636:	439d      	bics	r5, r3
 8005638:	3508      	adds	r5, #8
 800563a:	0006      	movs	r6, r0
 800563c:	2d0c      	cmp	r5, #12
 800563e:	d21f      	bcs.n	8005680 <_malloc_r+0x50>
 8005640:	250c      	movs	r5, #12
 8005642:	42a9      	cmp	r1, r5
 8005644:	d81e      	bhi.n	8005684 <_malloc_r+0x54>
 8005646:	0030      	movs	r0, r6
 8005648:	f000 f862 	bl	8005710 <__malloc_lock>
 800564c:	4925      	ldr	r1, [pc, #148]	; (80056e4 <_malloc_r+0xb4>)
 800564e:	680a      	ldr	r2, [r1, #0]
 8005650:	0014      	movs	r4, r2
 8005652:	2c00      	cmp	r4, #0
 8005654:	d11a      	bne.n	800568c <_malloc_r+0x5c>
 8005656:	4f24      	ldr	r7, [pc, #144]	; (80056e8 <_malloc_r+0xb8>)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d104      	bne.n	8005668 <_malloc_r+0x38>
 800565e:	0021      	movs	r1, r4
 8005660:	0030      	movs	r0, r6
 8005662:	f000 f843 	bl	80056ec <_sbrk_r>
 8005666:	6038      	str	r0, [r7, #0]
 8005668:	0029      	movs	r1, r5
 800566a:	0030      	movs	r0, r6
 800566c:	f000 f83e 	bl	80056ec <_sbrk_r>
 8005670:	1c43      	adds	r3, r0, #1
 8005672:	d12b      	bne.n	80056cc <_malloc_r+0x9c>
 8005674:	230c      	movs	r3, #12
 8005676:	0030      	movs	r0, r6
 8005678:	6033      	str	r3, [r6, #0]
 800567a:	f000 f851 	bl	8005720 <__malloc_unlock>
 800567e:	e003      	b.n	8005688 <_malloc_r+0x58>
 8005680:	2d00      	cmp	r5, #0
 8005682:	dade      	bge.n	8005642 <_malloc_r+0x12>
 8005684:	230c      	movs	r3, #12
 8005686:	6033      	str	r3, [r6, #0]
 8005688:	2000      	movs	r0, #0
 800568a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800568c:	6823      	ldr	r3, [r4, #0]
 800568e:	1b5b      	subs	r3, r3, r5
 8005690:	d419      	bmi.n	80056c6 <_malloc_r+0x96>
 8005692:	2b0b      	cmp	r3, #11
 8005694:	d903      	bls.n	800569e <_malloc_r+0x6e>
 8005696:	6023      	str	r3, [r4, #0]
 8005698:	18e4      	adds	r4, r4, r3
 800569a:	6025      	str	r5, [r4, #0]
 800569c:	e003      	b.n	80056a6 <_malloc_r+0x76>
 800569e:	6863      	ldr	r3, [r4, #4]
 80056a0:	42a2      	cmp	r2, r4
 80056a2:	d10e      	bne.n	80056c2 <_malloc_r+0x92>
 80056a4:	600b      	str	r3, [r1, #0]
 80056a6:	0030      	movs	r0, r6
 80056a8:	f000 f83a 	bl	8005720 <__malloc_unlock>
 80056ac:	0020      	movs	r0, r4
 80056ae:	2207      	movs	r2, #7
 80056b0:	300b      	adds	r0, #11
 80056b2:	1d23      	adds	r3, r4, #4
 80056b4:	4390      	bics	r0, r2
 80056b6:	1ac2      	subs	r2, r0, r3
 80056b8:	4298      	cmp	r0, r3
 80056ba:	d0e6      	beq.n	800568a <_malloc_r+0x5a>
 80056bc:	1a1b      	subs	r3, r3, r0
 80056be:	50a3      	str	r3, [r4, r2]
 80056c0:	e7e3      	b.n	800568a <_malloc_r+0x5a>
 80056c2:	6053      	str	r3, [r2, #4]
 80056c4:	e7ef      	b.n	80056a6 <_malloc_r+0x76>
 80056c6:	0022      	movs	r2, r4
 80056c8:	6864      	ldr	r4, [r4, #4]
 80056ca:	e7c2      	b.n	8005652 <_malloc_r+0x22>
 80056cc:	2303      	movs	r3, #3
 80056ce:	1cc4      	adds	r4, r0, #3
 80056d0:	439c      	bics	r4, r3
 80056d2:	42a0      	cmp	r0, r4
 80056d4:	d0e1      	beq.n	800569a <_malloc_r+0x6a>
 80056d6:	1a21      	subs	r1, r4, r0
 80056d8:	0030      	movs	r0, r6
 80056da:	f000 f807 	bl	80056ec <_sbrk_r>
 80056de:	1c43      	adds	r3, r0, #1
 80056e0:	d1db      	bne.n	800569a <_malloc_r+0x6a>
 80056e2:	e7c7      	b.n	8005674 <_malloc_r+0x44>
 80056e4:	20000090 	.word	0x20000090
 80056e8:	20000094 	.word	0x20000094

080056ec <_sbrk_r>:
 80056ec:	2300      	movs	r3, #0
 80056ee:	b570      	push	{r4, r5, r6, lr}
 80056f0:	4d06      	ldr	r5, [pc, #24]	; (800570c <_sbrk_r+0x20>)
 80056f2:	0004      	movs	r4, r0
 80056f4:	0008      	movs	r0, r1
 80056f6:	602b      	str	r3, [r5, #0]
 80056f8:	f7fb fa88 	bl	8000c0c <_sbrk>
 80056fc:	1c43      	adds	r3, r0, #1
 80056fe:	d103      	bne.n	8005708 <_sbrk_r+0x1c>
 8005700:	682b      	ldr	r3, [r5, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d000      	beq.n	8005708 <_sbrk_r+0x1c>
 8005706:	6023      	str	r3, [r4, #0]
 8005708:	bd70      	pop	{r4, r5, r6, pc}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	2000037c 	.word	0x2000037c

08005710 <__malloc_lock>:
 8005710:	b510      	push	{r4, lr}
 8005712:	4802      	ldr	r0, [pc, #8]	; (800571c <__malloc_lock+0xc>)
 8005714:	f000 f80c 	bl	8005730 <__retarget_lock_acquire_recursive>
 8005718:	bd10      	pop	{r4, pc}
 800571a:	46c0      	nop			; (mov r8, r8)
 800571c:	20000384 	.word	0x20000384

08005720 <__malloc_unlock>:
 8005720:	b510      	push	{r4, lr}
 8005722:	4802      	ldr	r0, [pc, #8]	; (800572c <__malloc_unlock+0xc>)
 8005724:	f000 f805 	bl	8005732 <__retarget_lock_release_recursive>
 8005728:	bd10      	pop	{r4, pc}
 800572a:	46c0      	nop			; (mov r8, r8)
 800572c:	20000384 	.word	0x20000384

08005730 <__retarget_lock_acquire_recursive>:
 8005730:	4770      	bx	lr

08005732 <__retarget_lock_release_recursive>:
 8005732:	4770      	bx	lr

08005734 <_init>:
 8005734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005736:	46c0      	nop			; (mov r8, r8)
 8005738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800573a:	bc08      	pop	{r3}
 800573c:	469e      	mov	lr, r3
 800573e:	4770      	bx	lr

08005740 <_fini>:
 8005740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005742:	46c0      	nop			; (mov r8, r8)
 8005744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005746:	bc08      	pop	{r3}
 8005748:	469e      	mov	lr, r3
 800574a:	4770      	bx	lr
