
mantarray-firmware-channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004cec  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004dac  08004dac  00014dac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f44  08004f44  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08004f44  08004f44  00014f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f4c  08004f4c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f50  08004f50  00014f50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004f54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08004fc4  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004fc4  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184b5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003436  00000000  00000000  0003854d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0003b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  0003c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e84  00000000  00000000  0003d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015822  00000000  00000000  000543c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cd95  00000000  00000000  00069be6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e697b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003478  00000000  00000000  000e69d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004d94 	.word	0x08004d94

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004d94 	.word	0x08004d94

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	240c      	movs	r4, #12
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2314      	movs	r3, #20
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f004 fbe7 	bl	8004c80 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b40      	ldr	r3, [pc, #256]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80004be:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c2:	2201      	movs	r2, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ce:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004d0:	2102      	movs	r1, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d6:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	2202      	movs	r2, #2
 80004dc:	4013      	ands	r3, r2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004e8:	2104      	movs	r1, #4
 80004ea:	430a      	orrs	r2, r1
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f2:	2204      	movs	r2, #4
 80004f4:	4013      	ands	r3, r2
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004fa:	23c0      	movs	r3, #192	; 0xc0
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	482e      	ldr	r0, [pc, #184]	; (80005b8 <MX_GPIO_Init+0x11c>)
 8000500:	2200      	movs	r2, #0
 8000502:	0019      	movs	r1, r3
 8000504:	f000 fe34 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 8000508:	23e0      	movs	r3, #224	; 0xe0
 800050a:	0059      	lsls	r1, r3, #1
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	2200      	movs	r2, #0
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fe2c 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 8000518:	193b      	adds	r3, r7, r4
 800051a:	4a28      	ldr	r2, [pc, #160]	; (80005bc <MX_GPIO_Init+0x120>)
 800051c:	601a      	str	r2, [r3, #0]
                          |programmer_RX_line_Pin|BUS_CLK_Pin|mag_int_c_Pin|mag_int_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	193a      	adds	r2, r7, r4
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fca6 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 8000538:	193b      	adds	r3, r7, r4
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <MX_GPIO_Init+0x124>)
 800053c:	601a      	str	r2, [r3, #0]
                          |mag_int_a_Pin|BUS1_Pin|BUS5_Pin|BUS0_Pin
                          |BUS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <MX_GPIO_Init+0x128>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 fc97 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	22c0      	movs	r2, #192	; 0xc0
 800055c:	0212      	lsls	r2, r2, #8
 800055e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	000c      	movs	r4, r1
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2201      	movs	r2, #1
 8000566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	193b      	adds	r3, r7, r4
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <MX_GPIO_Init+0x11c>)
 8000578:	0019      	movs	r1, r3
 800057a:	0010      	movs	r0, r2
 800057c:	f000 fc82 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 8000580:	0021      	movs	r1, r4
 8000582:	187b      	adds	r3, r7, r1
 8000584:	22e0      	movs	r2, #224	; 0xe0
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	187a      	adds	r2, r7, r1
 800059e:	23a0      	movs	r3, #160	; 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fc6d 	bl	8000e84 <HAL_GPIO_Init>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b009      	add	sp, #36	; 0x24
 80005b0:	bd90      	pop	{r4, r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000
 80005b8:	50000800 	.word	0x50000800
 80005bc:	0000e619 	.word	0x0000e619
 80005c0:	000001ff 	.word	0x000001ff
 80005c4:	50000400 	.word	0x50000400

080005c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_I2C2_Init+0x84>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	; (8000650 <MX_I2C2_Init+0x88>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100413;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_I2C2_Init+0x84>)
 80005d4:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <MX_I2C2_Init+0x8c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 200;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_I2C2_Init+0x84>)
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_I2C2_Init+0x84>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_I2C2_Init+0x84>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_I2C2_Init+0x84>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_I2C2_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_I2C2_Init+0x84>)
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0312      	lsls	r2, r2, #12
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_I2C2_Init+0x84>)
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	0292      	lsls	r2, r2, #10
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C2_Init+0x84>)
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fde9 	bl	80011e0 <HAL_I2C_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000612:	f000 f8ef 	bl	80007f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_I2C2_Init+0x84>)
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fe76 	bl	800130c <HAL_I2CEx_ConfigAnalogFilter>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 8000624:	f000 f8e6 	bl	80007f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_I2C2_Init+0x84>)
 800062a:	2100      	movs	r1, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f000 feb9 	bl	80013a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 8000636:	f000 f8dd 	bl	80007f4 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	019b      	lsls	r3, r3, #6
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fefc 	bl	800143c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000098 	.word	0x20000098
 8000650:	40005800 	.word	0x40005800
 8000654:	00100413 	.word	0x00100413

08000658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	240c      	movs	r4, #12
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	2314      	movs	r3, #20
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f004 fb08 	bl	8004c80 <memset>
  if(i2cHandle->Instance==I2C2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <HAL_I2C_MspInit+0x90>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d131      	bne.n	80006de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_I2C_MspInit+0x94>)
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_I2C_MspInit+0x94>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_I2C_MspInit+0x94>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	22c0      	movs	r2, #192	; 0xc0
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069a:	0021      	movs	r1, r4
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2212      	movs	r2, #18
 80006a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2201      	movs	r2, #1
 80006a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2203      	movs	r2, #3
 80006ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2206      	movs	r2, #6
 80006b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_I2C_MspInit+0x98>)
 80006b8:	0019      	movs	r1, r3
 80006ba:	0010      	movs	r0, r2
 80006bc:	f000 fbe2 	bl	8000e84 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_I2C_MspInit+0x94>)
 80006c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_I2C_MspInit+0x94>)
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	03c9      	lsls	r1, r1, #15
 80006ca:	430a      	orrs	r2, r1
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2018      	movs	r0, #24
 80006d4:	f000 fba4 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80006d8:	2018      	movs	r0, #24
 80006da:	f000 fbb6 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b009      	add	sp, #36	; 0x24
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40005800 	.word	0x40005800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	50000400 	.word	0x50000400

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fa44 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f81c 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff fecc 	bl	800049c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000704:	f7ff ff60 	bl	80005c8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000708:	f000 f87a 	bl	8000800 <MX_SPI1_Init>
  MX_TIM21_Init();
 800070c:	f000 f968 	bl	80009e0 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  module_system_init(&my_sys, &hspi1, &hi2c2, &htim21);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <main+0x34>)
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <main+0x38>)
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <main+0x3c>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <main+0x40>)
 8000718:	f003 feda 	bl	80044d0 <module_system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine(&my_sys);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <main+0x40>)
 800071e:	0018      	movs	r0, r3
 8000720:	f003 ff4e 	bl	80045c0 <state_machine>
 8000724:	e7fa      	b.n	800071c <main+0x28>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000228 	.word	0x20000228
 800072c:	20000098 	.word	0x20000098
 8000730:	200001d0 	.word	0x200001d0
 8000734:	200000e4 	.word	0x200000e4

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b095      	sub	sp, #84	; 0x54
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	2418      	movs	r4, #24
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2338      	movs	r3, #56	; 0x38
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f004 fa99 	bl	8004c80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f004 fa92 	bl	8004c80 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xb4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <SystemClock_Config+0xb8>)
 8000762:	401a      	ands	r2, r3
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <SystemClock_Config+0xb4>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0109      	lsls	r1, r1, #4
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800076e:	0021      	movs	r1, r4
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2222      	movs	r2, #34	; 0x22
 8000774:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2210      	movs	r2, #16
 8000780:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2201      	movs	r2, #1
 8000786:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	02d2      	lsls	r2, r2, #11
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fe60 	bl	800146c <HAL_RCC_OscConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f820 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	220f      	movs	r2, #15
 80007b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2203      	movs	r2, #3
 80007be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2101      	movs	r1, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 fa0c 	bl	8001bf4 <HAL_RCC_ClockConfig>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007e0:	f000 f808 	bl	80007f4 <Error_Handler>
  }
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b015      	add	sp, #84	; 0x54
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40007000 	.word	0x40007000
 80007f0:	ffffe7ff 	.word	0xffffe7ff

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_SPI1_Init+0x68>)
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <MX_SPI1_Init+0x6c>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI1_Init+0x68>)
 800080c:	2282      	movs	r2, #130	; 0x82
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_SPI1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SPI1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI1_Init+0x68>)
 8000820:	2202      	movs	r2, #2
 8000822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_SPI1_Init+0x68>)
 8000826:	2201      	movs	r2, #1
 8000828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x68>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_SPI1_Init+0x68>)
 8000834:	2208      	movs	r2, #8
 8000836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI1_Init+0x68>)
 800084c:	2207      	movs	r2, #7
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_SPI1_Init+0x68>)
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fbbc 	bl	8001fd0 <HAL_SPI_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800085c:	f7ff ffca 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	200001d0 	.word	0x200001d0
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	240c      	movs	r4, #12
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f004 f9fc 	bl	8004c80 <memset>
  if(spiHandle->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12a      	bne.n	80008e8 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0149      	lsls	r1, r1, #5
 800089c:	430a      	orrs	r2, r1
 800089e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	2201      	movs	r2, #1
 80008b2:	4013      	ands	r3, r2
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	22c1      	movs	r2, #193	; 0xc1
 80008bc:	0152      	lsls	r2, r2, #5
 80008be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2202      	movs	r2, #2
 80008c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	187a      	adds	r2, r7, r1
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 face 	bl	8000e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b009      	add	sp, #36	; 0x24
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_MspInit+0x24>)
 80008fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x24>)
 8000902:	2101      	movs	r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_MspInit+0x24>)
 800090a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_MspInit+0x24>)
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	0549      	lsls	r1, r1, #21
 8000912:	430a      	orrs	r2, r1
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f972 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <TIM21_IRQHandler+0x14>)
 8000956:	0018      	movs	r0, r3
 8000958:	f002 f840 	bl	80029dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000228 	.word	0x20000228

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f004 f93e 	bl	8004c18 <__errno>
 800099c:	0003      	movs	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	18d2      	adds	r2, r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <_sbrk+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b006      	add	sp, #24
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20002000 	.word	0x20002000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	20000280 	.word	0x20000280

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	2308      	movs	r3, #8
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	0018      	movs	r0, r3
 80009ec:	2310      	movs	r3, #16
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f004 f945 	bl	8004c80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	003b      	movs	r3, r7
 80009f8:	0018      	movs	r0, r3
 80009fa:	2308      	movs	r3, #8
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f004 f93e 	bl	8004c80 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_TIM21_Init+0xb4>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a18:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <MX_TIM21_Init+0xb8>)
 8000a1a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 ff4a 	bl	80028c4 <HAL_TIM_Base_Init>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a34:	f7ff fede 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a38:	2108      	movs	r1, #8
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0192      	lsls	r2, r2, #6
 8000a40:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 f8a6 	bl	8002bac <HAL_TIM_ConfigClockSource>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8000a64:	f7ff fec6 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a74:	003a      	movs	r2, r7
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fa6e 	bl	8002f5c <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8000a84:	f7ff feb6 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b006      	add	sp, #24
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000228 	.word	0x20000228
 8000a94:	40010800 	.word	0x40010800
 8000a98:	0000ffff 	.word	0x0000ffff

08000a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	240c      	movs	r4, #12
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f004 f8e6 	bl	8004c80 <memset>
  if(tim_baseHandle->Instance==TIM21)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d130      	bne.n	8000b20 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PA1     ------> TIM21_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2205      	movs	r2, #5
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f9ba 	bl	8000e84 <HAL_GPIO_Init>

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2014      	movs	r0, #20
 8000b16:	f000 f983 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f000 f995 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b009      	add	sp, #36	; 0x24
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b5a:	f7ff ff3b 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f004 f861 	bl	8004c24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fdc7 	bl	80006f4 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
   ldr   r0, =_estack
 8000b68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b74:	08004f54 	.word	0x08004f54
  ldr r2, =_sbss
 8000b78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b7c:	2000027c 	.word	0x2000027c

08000b80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_COMP_IRQHandler>
	...

08000b84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x3c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Init+0x3c>)
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 f811 	bl	8000bc4 <HAL_InitTick>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e001      	b.n	8000bb2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bae:	f7ff fea3 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_InitTick+0x5c>)
 8000bce:	681c      	ldr	r4, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x60>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	23fa      	movs	r3, #250	; 0xfa
 8000bd8:	0098      	lsls	r0, r3, #2
 8000bda:	f7ff fa95 	bl	8000108 <__udivsi3>
 8000bde:	0003      	movs	r3, r0
 8000be0:	0019      	movs	r1, r3
 8000be2:	0020      	movs	r0, r4
 8000be4:	f7ff fa90 	bl	8000108 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f93d 	bl	8000e6a <HAL_SYSTICK_Config>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e00f      	b.n	8000c18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80b      	bhi.n	8000c16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f90a 	bl	8000e20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_InitTick+0x64>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	18d2      	adds	r2, r2, r3
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000268 	.word	0x20000268

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000268 	.word	0x20000268

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff fff0 	bl	8000c50 <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	001a      	movs	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	f7ff ffe0 	bl	8000c50 <HAL_GetTick>
 8000c90:	0002      	movs	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_SuspendTick+0x18>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_SuspendTick+0x18>)
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	438a      	bics	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cda:	d809      	bhi.n	8000cf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_EnableIRQ+0x30>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4091      	lsls	r1, r2
 8000cec:	000a      	movs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
  }
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d10:	d828      	bhi.n	8000d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	33c0      	adds	r3, #192	; 0xc0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	589b      	ldr	r3, [r3, r2]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	2203      	movs	r2, #3
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	21ff      	movs	r1, #255	; 0xff
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	401a      	ands	r2, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0018      	movs	r0, r3
 8000d48:	2303      	movs	r3, #3
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	33c0      	adds	r3, #192	; 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d62:	e031      	b.n	8000dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	400b      	ands	r3, r1
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3306      	adds	r3, #6
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	001c      	movs	r4, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	4023      	ands	r3, r4
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	18c3      	adds	r3, r0, r3
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b003      	add	sp, #12
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	045b      	lsls	r3, r3, #17
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d301      	bcc.n	8000df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dec:	2301      	movs	r3, #1
 8000dee:	e010      	b.n	8000e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SysTick_Config+0x44>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x44>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x44>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff33 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ffaf 	bl	8000dd8 <SysTick_Config>
 8000e7a:	0003      	movs	r3, r0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9a:	e14f      	b.n	800113c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d100      	bne.n	8000eb4 <HAL_GPIO_Init+0x30>
 8000eb2:	e140      	b.n	8001136 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d00b      	beq.n	8000ed4 <HAL_GPIO_Init+0x50>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	2b11      	cmp	r3, #17
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	2201      	movs	r2, #1
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0xf2>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2207      	movs	r2, #7
 8000f88:	4013      	ands	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	055b      	lsls	r3, r3, #21
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d100      	bne.n	8001000 <HAL_GPIO_Init+0x17c>
 8000ffe:	e09a      	b.n	8001136 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_GPIO_Init+0x2d4>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	589b      	ldr	r3, [r3, r2]
 8001018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2203      	movs	r2, #3
 800101e:	4013      	ands	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	43da      	mvns	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	23a0      	movs	r3, #160	; 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	429a      	cmp	r2, r3
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x1ea>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <HAL_GPIO_Init+0x2d8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x1e6>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a46      	ldr	r2, [pc, #280]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x1e2>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a45      	ldr	r2, [pc, #276]	; (8001164 <HAL_GPIO_Init+0x2e0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x1de>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a44      	ldr	r2, [pc, #272]	; (8001168 <HAL_GPIO_Init+0x2e4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x1da>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 800105e:	2306      	movs	r3, #6
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 800106e:	2300      	movs	r3, #0
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	2103      	movs	r1, #3
 8001074:	400a      	ands	r2, r1
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	; (8001158 <HAL_GPIO_Init+0x2d4>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	025b      	lsls	r3, r3, #9
 80010a6:	4013      	ands	r3, r2
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	035b      	lsls	r3, r3, #13
 80010fa:	4013      	ands	r3, r2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_GPIO_Init+0x2e8>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	039b      	lsls	r3, r3, #14
 8001124:	4013      	ands	r3, r2
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	1e13      	subs	r3, r2, #0
 8001146:	d000      	beq.n	800114a <HAL_GPIO_Init+0x2c6>
 8001148:	e6a8      	b.n	8000e9c <HAL_GPIO_Init+0x18>
  }
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b006      	add	sp, #24
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	50000400 	.word	0x50000400
 8001160:	50000800 	.word	0x50000800
 8001164:	50000c00 	.word	0x50000c00
 8001168:	50001c00 	.word	0x50001c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	0008      	movs	r0, r1
 800117a:	0011      	movs	r1, r2
 800117c:	1cbb      	adds	r3, r7, #2
 800117e:	1c02      	adds	r2, r0, #0
 8001180:	801a      	strh	r2, [r3, #0]
 8001182:	1c7b      	adds	r3, r7, #1
 8001184:	1c0a      	adds	r2, r1, #0
 8001186:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	1c7b      	adds	r3, r7, #1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001190:	1cbb      	adds	r3, r7, #2
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800119a:	1cbb      	adds	r3, r7, #2
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}

080011aa <HAL_GPIO_TogglePin>:
  *                All port bits are not necessarily available on all GPIOs.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b084      	sub	sp, #16
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
 80011b2:	000a      	movs	r2, r1
 80011b4:	1cbb      	adds	r3, r7, #2
 80011b6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011be:	1cbb      	adds	r3, r7, #2
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	4013      	ands	r3, r2
 80011c6:	041a      	lsls	r2, r3, #16
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	1cb9      	adds	r1, r7, #2
 80011ce:	8809      	ldrh	r1, [r1, #0]
 80011d0:	400b      	ands	r3, r1
 80011d2:	431a      	orrs	r2, r3
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	619a      	str	r2, [r3, #24]
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b004      	add	sp, #16
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d101      	bne.n	80011f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e082      	b.n	80012f8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2241      	movs	r2, #65	; 0x41
 80011f6:	5c9b      	ldrb	r3, [r3, r2]
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d107      	bne.n	800120e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	2240      	movs	r2, #64	; 0x40
 8001202:	2100      	movs	r1, #0
 8001204:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	0018      	movs	r0, r3
 800120a:	f7ff fa25 	bl	8000658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2241      	movs	r2, #65	; 0x41
 8001212:	2124      	movs	r1, #36	; 0x24
 8001214:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	438a      	bics	r2, r1
 8001224:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685a      	ldr	r2, [r3, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4934      	ldr	r1, [pc, #208]	; (8001300 <HAL_I2C_Init+0x120>)
 8001230:	400a      	ands	r2, r1
 8001232:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	4931      	ldr	r1, [pc, #196]	; (8001304 <HAL_I2C_Init+0x124>)
 8001240:	400a      	ands	r2, r1
 8001242:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d108      	bne.n	800125e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689a      	ldr	r2, [r3, #8]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2180      	movs	r1, #128	; 0x80
 8001256:	0209      	lsls	r1, r1, #8
 8001258:	430a      	orrs	r2, r1
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	e007      	b.n	800126e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	689a      	ldr	r2, [r3, #8]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	2184      	movs	r1, #132	; 0x84
 8001268:	0209      	lsls	r1, r1, #8
 800126a:	430a      	orrs	r2, r1
 800126c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	68db      	ldr	r3, [r3, #12]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d104      	bne.n	8001280 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	0112      	lsls	r2, r2, #4
 800127e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	491f      	ldr	r1, [pc, #124]	; (8001308 <HAL_I2C_Init+0x128>)
 800128c:	430a      	orrs	r2, r1
 800128e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	68da      	ldr	r2, [r3, #12]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	491a      	ldr	r1, [pc, #104]	; (8001304 <HAL_I2C_Init+0x124>)
 800129c:	400a      	ands	r2, r1
 800129e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	691a      	ldr	r2, [r3, #16]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	431a      	orrs	r2, r3
 80012aa:	0011      	movs	r1, r2
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	021a      	lsls	r2, r3, #8
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	69d9      	ldr	r1, [r3, #28]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6a1a      	ldr	r2, [r3, #32]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	430a      	orrs	r2, r1
 80012c8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2101      	movs	r1, #1
 80012d6:	430a      	orrs	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2200      	movs	r2, #0
 80012de:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2241      	movs	r2, #65	; 0x41
 80012e4:	2120      	movs	r1, #32
 80012e6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	2200      	movs	r2, #0
 80012ec:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2242      	movs	r2, #66	; 0x42
 80012f2:	2100      	movs	r1, #0
 80012f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012f6:	2300      	movs	r3, #0
}
 80012f8:	0018      	movs	r0, r3
 80012fa:	46bd      	mov	sp, r7
 80012fc:	b002      	add	sp, #8
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	f0ffffff 	.word	0xf0ffffff
 8001304:	ffff7fff 	.word	0xffff7fff
 8001308:	02008000 	.word	0x02008000

0800130c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	2241      	movs	r2, #65	; 0x41
 800131a:	5c9b      	ldrb	r3, [r3, r2]
 800131c:	b2db      	uxtb	r3, r3
 800131e:	2b20      	cmp	r3, #32
 8001320:	d138      	bne.n	8001394 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2240      	movs	r2, #64	; 0x40
 8001326:	5c9b      	ldrb	r3, [r3, r2]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d101      	bne.n	8001330 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800132c:	2302      	movs	r3, #2
 800132e:	e032      	b.n	8001396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2240      	movs	r2, #64	; 0x40
 8001334:	2101      	movs	r1, #1
 8001336:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2241      	movs	r2, #65	; 0x41
 800133c:	2124      	movs	r1, #36	; 0x24
 800133e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2101      	movs	r1, #1
 800134c:	438a      	bics	r2, r1
 800134e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	681a      	ldr	r2, [r3, #0]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4911      	ldr	r1, [pc, #68]	; (80013a0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800135c:	400a      	ands	r2, r1
 800135e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	6819      	ldr	r1, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	2101      	movs	r1, #1
 800137c:	430a      	orrs	r2, r1
 800137e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2241      	movs	r2, #65	; 0x41
 8001384:	2120      	movs	r1, #32
 8001386:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2240      	movs	r2, #64	; 0x40
 800138c:	2100      	movs	r1, #0
 800138e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001390:	2300      	movs	r3, #0
 8001392:	e000      	b.n	8001396 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001394:	2302      	movs	r3, #2
  }
}
 8001396:	0018      	movs	r0, r3
 8001398:	46bd      	mov	sp, r7
 800139a:	b002      	add	sp, #8
 800139c:	bd80      	pop	{r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	ffffefff 	.word	0xffffefff

080013a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2241      	movs	r2, #65	; 0x41
 80013b2:	5c9b      	ldrb	r3, [r3, r2]
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b20      	cmp	r3, #32
 80013b8:	d139      	bne.n	800142e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	5c9b      	ldrb	r3, [r3, r2]
 80013c0:	2b01      	cmp	r3, #1
 80013c2:	d101      	bne.n	80013c8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80013c4:	2302      	movs	r3, #2
 80013c6:	e033      	b.n	8001430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2240      	movs	r2, #64	; 0x40
 80013cc:	2101      	movs	r1, #1
 80013ce:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2241      	movs	r2, #65	; 0x41
 80013d4:	2124      	movs	r1, #36	; 0x24
 80013d6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	681a      	ldr	r2, [r3, #0]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2101      	movs	r1, #1
 80013e4:	438a      	bics	r2, r1
 80013e6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a11      	ldr	r2, [pc, #68]	; (8001438 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80013f4:	4013      	ands	r3, r2
 80013f6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	021b      	lsls	r3, r3, #8
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	4313      	orrs	r3, r2
 8001400:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2101      	movs	r1, #1
 8001416:	430a      	orrs	r2, r1
 8001418:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2241      	movs	r2, #65	; 0x41
 800141e:	2120      	movs	r1, #32
 8001420:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2240      	movs	r2, #64	; 0x40
 8001426:	2100      	movs	r1, #0
 8001428:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800142a:	2300      	movs	r3, #0
 800142c:	e000      	b.n	8001430 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800142e:	2302      	movs	r3, #2
  }
}
 8001430:	0018      	movs	r0, r3
 8001432:	46bd      	mov	sp, r7
 8001434:	b004      	add	sp, #16
 8001436:	bd80      	pop	{r7, pc}
 8001438:	fffff0ff 	.word	0xfffff0ff

0800143c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001444:	4b07      	ldr	r3, [pc, #28]	; (8001464 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001446:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001448:	4b06      	ldr	r3, [pc, #24]	; (8001464 <HAL_I2CEx_EnableFastModePlus+0x28>)
 800144a:	2101      	movs	r1, #1
 800144c:	430a      	orrs	r2, r1
 800144e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8001450:	4b05      	ldr	r3, [pc, #20]	; (8001468 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001452:	6859      	ldr	r1, [r3, #4]
 8001454:	4b04      	ldr	r3, [pc, #16]	; (8001468 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	430a      	orrs	r2, r1
 800145a:	605a      	str	r2, [r3, #4]
}
 800145c:	46c0      	nop			; (mov r8, r8)
 800145e:	46bd      	mov	sp, r7
 8001460:	b002      	add	sp, #8
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40021000 	.word	0x40021000
 8001468:	40010000 	.word	0x40010000

0800146c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800146c:	b5b0      	push	{r4, r5, r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d102      	bne.n	8001480 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	f000 fbaf 	bl	8001bde <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001480:	4bcf      	ldr	r3, [pc, #828]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	220c      	movs	r2, #12
 8001486:	4013      	ands	r3, r2
 8001488:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800148a:	4bcd      	ldr	r3, [pc, #820]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	2380      	movs	r3, #128	; 0x80
 8001490:	025b      	lsls	r3, r3, #9
 8001492:	4013      	ands	r3, r2
 8001494:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	d100      	bne.n	80014a2 <HAL_RCC_OscConfig+0x36>
 80014a0:	e07e      	b.n	80015a0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80014a2:	6a3b      	ldr	r3, [r7, #32]
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d007      	beq.n	80014b8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014a8:	6a3b      	ldr	r3, [r7, #32]
 80014aa:	2b0c      	cmp	r3, #12
 80014ac:	d112      	bne.n	80014d4 <HAL_RCC_OscConfig+0x68>
 80014ae:	69fa      	ldr	r2, [r7, #28]
 80014b0:	2380      	movs	r3, #128	; 0x80
 80014b2:	025b      	lsls	r3, r3, #9
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d10d      	bne.n	80014d4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4bc1      	ldr	r3, [pc, #772]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	2380      	movs	r3, #128	; 0x80
 80014be:	029b      	lsls	r3, r3, #10
 80014c0:	4013      	ands	r3, r2
 80014c2:	d100      	bne.n	80014c6 <HAL_RCC_OscConfig+0x5a>
 80014c4:	e06b      	b.n	800159e <HAL_RCC_OscConfig+0x132>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	685b      	ldr	r3, [r3, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d167      	bne.n	800159e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	f000 fb85 	bl	8001bde <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	025b      	lsls	r3, r3, #9
 80014dc:	429a      	cmp	r2, r3
 80014de:	d107      	bne.n	80014f0 <HAL_RCC_OscConfig+0x84>
 80014e0:	4bb7      	ldr	r3, [pc, #732]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4bb6      	ldr	r3, [pc, #728]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80014e6:	2180      	movs	r1, #128	; 0x80
 80014e8:	0249      	lsls	r1, r1, #9
 80014ea:	430a      	orrs	r2, r1
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	e027      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	23a0      	movs	r3, #160	; 0xa0
 80014f6:	02db      	lsls	r3, r3, #11
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d10e      	bne.n	800151a <HAL_RCC_OscConfig+0xae>
 80014fc:	4bb0      	ldr	r3, [pc, #704]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	4baf      	ldr	r3, [pc, #700]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001502:	2180      	movs	r1, #128	; 0x80
 8001504:	02c9      	lsls	r1, r1, #11
 8001506:	430a      	orrs	r2, r1
 8001508:	601a      	str	r2, [r3, #0]
 800150a:	4bad      	ldr	r3, [pc, #692]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	4bac      	ldr	r3, [pc, #688]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001510:	2180      	movs	r1, #128	; 0x80
 8001512:	0249      	lsls	r1, r1, #9
 8001514:	430a      	orrs	r2, r1
 8001516:	601a      	str	r2, [r3, #0]
 8001518:	e012      	b.n	8001540 <HAL_RCC_OscConfig+0xd4>
 800151a:	4ba9      	ldr	r3, [pc, #676]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	4ba8      	ldr	r3, [pc, #672]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001520:	49a8      	ldr	r1, [pc, #672]	; (80017c4 <HAL_RCC_OscConfig+0x358>)
 8001522:	400a      	ands	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	4ba6      	ldr	r3, [pc, #664]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	025b      	lsls	r3, r3, #9
 800152e:	4013      	ands	r3, r2
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	4ba2      	ldr	r3, [pc, #648]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4ba1      	ldr	r3, [pc, #644]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800153a:	49a3      	ldr	r1, [pc, #652]	; (80017c8 <HAL_RCC_OscConfig+0x35c>)
 800153c:	400a      	ands	r2, r1
 800153e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d015      	beq.n	8001574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001548:	f7ff fb82 	bl	8000c50 <HAL_GetTick>
 800154c:	0003      	movs	r3, r0
 800154e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001550:	e009      	b.n	8001566 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001552:	f7ff fb7d 	bl	8000c50 <HAL_GetTick>
 8001556:	0002      	movs	r2, r0
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	2b64      	cmp	r3, #100	; 0x64
 800155e:	d902      	bls.n	8001566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	f000 fb3c 	bl	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001566:	4b96      	ldr	r3, [pc, #600]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	2380      	movs	r3, #128	; 0x80
 800156c:	029b      	lsls	r3, r3, #10
 800156e:	4013      	ands	r3, r2
 8001570:	d0ef      	beq.n	8001552 <HAL_RCC_OscConfig+0xe6>
 8001572:	e015      	b.n	80015a0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fb6c 	bl	8000c50 <HAL_GetTick>
 8001578:	0003      	movs	r3, r0
 800157a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800157e:	f7ff fb67 	bl	8000c50 <HAL_GetTick>
 8001582:	0002      	movs	r2, r0
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e326      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001590:	4b8b      	ldr	r3, [pc, #556]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	2380      	movs	r3, #128	; 0x80
 8001596:	029b      	lsls	r3, r3, #10
 8001598:	4013      	ands	r3, r2
 800159a:	d1f0      	bne.n	800157e <HAL_RCC_OscConfig+0x112>
 800159c:	e000      	b.n	80015a0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2202      	movs	r2, #2
 80015a6:	4013      	ands	r3, r2
 80015a8:	d100      	bne.n	80015ac <HAL_RCC_OscConfig+0x140>
 80015aa:	e08b      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	2b04      	cmp	r3, #4
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015b8:	6a3b      	ldr	r3, [r7, #32]
 80015ba:	2b0c      	cmp	r3, #12
 80015bc:	d13e      	bne.n	800163c <HAL_RCC_OscConfig+0x1d0>
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d13b      	bne.n	800163c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80015c4:	4b7e      	ldr	r3, [pc, #504]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	2204      	movs	r2, #4
 80015ca:	4013      	ands	r3, r2
 80015cc:	d004      	beq.n	80015d8 <HAL_RCC_OscConfig+0x16c>
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e302      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d8:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	4a7b      	ldr	r2, [pc, #492]	; (80017cc <HAL_RCC_OscConfig+0x360>)
 80015de:	4013      	ands	r3, r2
 80015e0:	0019      	movs	r1, r3
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	021a      	lsls	r2, r3, #8
 80015e8:	4b75      	ldr	r3, [pc, #468]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015ee:	4b74      	ldr	r3, [pc, #464]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2209      	movs	r2, #9
 80015f4:	4393      	bics	r3, r2
 80015f6:	0019      	movs	r1, r3
 80015f8:	4b71      	ldr	r3, [pc, #452]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001600:	f000 fc40 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001604:	0001      	movs	r1, r0
 8001606:	4b6e      	ldr	r3, [pc, #440]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	220f      	movs	r2, #15
 800160e:	4013      	ands	r3, r2
 8001610:	4a6f      	ldr	r2, [pc, #444]	; (80017d0 <HAL_RCC_OscConfig+0x364>)
 8001612:	5cd3      	ldrb	r3, [r2, r3]
 8001614:	000a      	movs	r2, r1
 8001616:	40da      	lsrs	r2, r3
 8001618:	4b6e      	ldr	r3, [pc, #440]	; (80017d4 <HAL_RCC_OscConfig+0x368>)
 800161a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800161c:	4b6e      	ldr	r3, [pc, #440]	; (80017d8 <HAL_RCC_OscConfig+0x36c>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	2513      	movs	r5, #19
 8001622:	197c      	adds	r4, r7, r5
 8001624:	0018      	movs	r0, r3
 8001626:	f7ff facd 	bl	8000bc4 <HAL_InitTick>
 800162a:	0003      	movs	r3, r0
 800162c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800162e:	197b      	adds	r3, r7, r5
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d046      	beq.n	80016c4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001636:	197b      	adds	r3, r7, r5
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	e2d0      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d027      	beq.n	8001692 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001642:	4b5f      	ldr	r3, [pc, #380]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2209      	movs	r2, #9
 8001648:	4393      	bics	r3, r2
 800164a:	0019      	movs	r1, r3
 800164c:	4b5c      	ldr	r3, [pc, #368]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800164e:	697a      	ldr	r2, [r7, #20]
 8001650:	430a      	orrs	r2, r1
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff fafc 	bl	8000c50 <HAL_GetTick>
 8001658:	0003      	movs	r3, r0
 800165a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800165c:	e008      	b.n	8001670 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800165e:	f7ff faf7 	bl	8000c50 <HAL_GetTick>
 8001662:	0002      	movs	r2, r0
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	1ad3      	subs	r3, r2, r3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d901      	bls.n	8001670 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 800166c:	2303      	movs	r3, #3
 800166e:	e2b6      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001670:	4b53      	ldr	r3, [pc, #332]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2204      	movs	r2, #4
 8001676:	4013      	ands	r3, r2
 8001678:	d0f1      	beq.n	800165e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800167a:	4b51      	ldr	r3, [pc, #324]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	4a53      	ldr	r2, [pc, #332]	; (80017cc <HAL_RCC_OscConfig+0x360>)
 8001680:	4013      	ands	r3, r2
 8001682:	0019      	movs	r1, r3
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	691b      	ldr	r3, [r3, #16]
 8001688:	021a      	lsls	r2, r3, #8
 800168a:	4b4d      	ldr	r3, [pc, #308]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800168c:	430a      	orrs	r2, r1
 800168e:	605a      	str	r2, [r3, #4]
 8001690:	e018      	b.n	80016c4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001692:	4b4b      	ldr	r3, [pc, #300]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	4b4a      	ldr	r3, [pc, #296]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001698:	2101      	movs	r1, #1
 800169a:	438a      	bics	r2, r1
 800169c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800169e:	f7ff fad7 	bl	8000c50 <HAL_GetTick>
 80016a2:	0003      	movs	r3, r0
 80016a4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fad2 	bl	8000c50 <HAL_GetTick>
 80016ac:	0002      	movs	r2, r0
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e291      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80016ba:	4b41      	ldr	r3, [pc, #260]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2204      	movs	r2, #4
 80016c0:	4013      	ands	r3, r2
 80016c2:	d1f1      	bne.n	80016a8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	2210      	movs	r2, #16
 80016ca:	4013      	ands	r3, r2
 80016cc:	d100      	bne.n	80016d0 <HAL_RCC_OscConfig+0x264>
 80016ce:	e0a1      	b.n	8001814 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016d0:	6a3b      	ldr	r3, [r7, #32]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d140      	bne.n	8001758 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016d6:	4b3a      	ldr	r3, [pc, #232]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4013      	ands	r3, r2
 80016e0:	d005      	beq.n	80016ee <HAL_RCC_OscConfig+0x282>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	69db      	ldr	r3, [r3, #28]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d101      	bne.n	80016ee <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80016ea:	2301      	movs	r3, #1
 80016ec:	e277      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ee:	4b34      	ldr	r3, [pc, #208]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <HAL_RCC_OscConfig+0x370>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80016fe:	430a      	orrs	r2, r1
 8001700:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001702:	4b2f      	ldr	r3, [pc, #188]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	021b      	lsls	r3, r3, #8
 8001708:	0a19      	lsrs	r1, r3, #8
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	061a      	lsls	r2, r3, #24
 8001710:	4b2b      	ldr	r3, [pc, #172]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001712:	430a      	orrs	r2, r1
 8001714:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	0b5b      	lsrs	r3, r3, #13
 800171c:	3301      	adds	r3, #1
 800171e:	2280      	movs	r2, #128	; 0x80
 8001720:	0212      	lsls	r2, r2, #8
 8001722:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	091b      	lsrs	r3, r3, #4
 800172a:	210f      	movs	r1, #15
 800172c:	400b      	ands	r3, r1
 800172e:	4928      	ldr	r1, [pc, #160]	; (80017d0 <HAL_RCC_OscConfig+0x364>)
 8001730:	5ccb      	ldrb	r3, [r1, r3]
 8001732:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001734:	4b27      	ldr	r3, [pc, #156]	; (80017d4 <HAL_RCC_OscConfig+0x368>)
 8001736:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001738:	4b27      	ldr	r3, [pc, #156]	; (80017d8 <HAL_RCC_OscConfig+0x36c>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2513      	movs	r5, #19
 800173e:	197c      	adds	r4, r7, r5
 8001740:	0018      	movs	r0, r3
 8001742:	f7ff fa3f 	bl	8000bc4 <HAL_InitTick>
 8001746:	0003      	movs	r3, r0
 8001748:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800174a:	197b      	adds	r3, r7, r5
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d060      	beq.n	8001814 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001752:	197b      	adds	r3, r7, r5
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	e242      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d03f      	beq.n	80017e0 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001762:	681a      	ldr	r2, [r3, #0]
 8001764:	4b16      	ldr	r3, [pc, #88]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001766:	2180      	movs	r1, #128	; 0x80
 8001768:	0049      	lsls	r1, r1, #1
 800176a:	430a      	orrs	r2, r1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fa6f 	bl	8000c50 <HAL_GetTick>
 8001772:	0003      	movs	r3, r0
 8001774:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001776:	e008      	b.n	800178a <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001778:	f7ff fa6a 	bl	8000c50 <HAL_GetTick>
 800177c:	0002      	movs	r2, r0
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b02      	cmp	r3, #2
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e229      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	4013      	ands	r3, r2
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4a10      	ldr	r2, [pc, #64]	; (80017dc <HAL_RCC_OscConfig+0x370>)
 800179c:	4013      	ands	r3, r2
 800179e:	0019      	movs	r1, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80017a6:	430a      	orrs	r2, r1
 80017a8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017aa:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	021b      	lsls	r3, r3, #8
 80017b0:	0a19      	lsrs	r1, r3, #8
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a1b      	ldr	r3, [r3, #32]
 80017b6:	061a      	lsls	r2, r3, #24
 80017b8:	4b01      	ldr	r3, [pc, #4]	; (80017c0 <HAL_RCC_OscConfig+0x354>)
 80017ba:	430a      	orrs	r2, r1
 80017bc:	605a      	str	r2, [r3, #4]
 80017be:	e029      	b.n	8001814 <HAL_RCC_OscConfig+0x3a8>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	fffeffff 	.word	0xfffeffff
 80017c8:	fffbffff 	.word	0xfffbffff
 80017cc:	ffffe0ff 	.word	0xffffe0ff
 80017d0:	08004dac 	.word	0x08004dac
 80017d4:	20000000 	.word	0x20000000
 80017d8:	20000004 	.word	0x20000004
 80017dc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017e0:	4bbd      	ldr	r3, [pc, #756]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	4bbc      	ldr	r3, [pc, #752]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80017e6:	49bd      	ldr	r1, [pc, #756]	; (8001adc <HAL_RCC_OscConfig+0x670>)
 80017e8:	400a      	ands	r2, r1
 80017ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ec:	f7ff fa30 	bl	8000c50 <HAL_GetTick>
 80017f0:	0003      	movs	r3, r0
 80017f2:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017f4:	e008      	b.n	8001808 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f6:	f7ff fa2b 	bl	8000c50 <HAL_GetTick>
 80017fa:	0002      	movs	r2, r0
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	1ad3      	subs	r3, r2, r3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d901      	bls.n	8001808 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001804:	2303      	movs	r3, #3
 8001806:	e1ea      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001808:	4bb3      	ldr	r3, [pc, #716]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800180a:	681a      	ldr	r2, [r3, #0]
 800180c:	2380      	movs	r3, #128	; 0x80
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4013      	ands	r3, r2
 8001812:	d1f0      	bne.n	80017f6 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2208      	movs	r2, #8
 800181a:	4013      	ands	r3, r2
 800181c:	d036      	beq.n	800188c <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	695b      	ldr	r3, [r3, #20]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d019      	beq.n	800185a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001826:	4bac      	ldr	r3, [pc, #688]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182a:	4bab      	ldr	r3, [pc, #684]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fa0d 	bl	8000c50 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fa08 	bl	8000c50 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1c7      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800184e:	4ba2      	ldr	r3, [pc, #648]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d0f1      	beq.n	800183c <HAL_RCC_OscConfig+0x3d0>
 8001858:	e018      	b.n	800188c <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800185a:	4b9f      	ldr	r3, [pc, #636]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800185c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800185e:	4b9e      	ldr	r3, [pc, #632]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001860:	2101      	movs	r1, #1
 8001862:	438a      	bics	r2, r1
 8001864:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001866:	f7ff f9f3 	bl	8000c50 <HAL_GetTick>
 800186a:	0003      	movs	r3, r0
 800186c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800186e:	e008      	b.n	8001882 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001870:	f7ff f9ee 	bl	8000c50 <HAL_GetTick>
 8001874:	0002      	movs	r2, r0
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	2b02      	cmp	r3, #2
 800187c:	d901      	bls.n	8001882 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800187e:	2303      	movs	r3, #3
 8001880:	e1ad      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001882:	4b95      	ldr	r3, [pc, #596]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001884:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001886:	2202      	movs	r2, #2
 8001888:	4013      	ands	r3, r2
 800188a:	d1f1      	bne.n	8001870 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2204      	movs	r2, #4
 8001892:	4013      	ands	r3, r2
 8001894:	d100      	bne.n	8001898 <HAL_RCC_OscConfig+0x42c>
 8001896:	e0ae      	b.n	80019f6 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001898:	2027      	movs	r0, #39	; 0x27
 800189a:	183b      	adds	r3, r7, r0
 800189c:	2200      	movs	r2, #0
 800189e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018a0:	4b8d      	ldr	r3, [pc, #564]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80018a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018a4:	2380      	movs	r3, #128	; 0x80
 80018a6:	055b      	lsls	r3, r3, #21
 80018a8:	4013      	ands	r3, r2
 80018aa:	d109      	bne.n	80018c0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ac:	4b8a      	ldr	r3, [pc, #552]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80018ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80018b0:	4b89      	ldr	r3, [pc, #548]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80018b2:	2180      	movs	r1, #128	; 0x80
 80018b4:	0549      	lsls	r1, r1, #21
 80018b6:	430a      	orrs	r2, r1
 80018b8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80018ba:	183b      	adds	r3, r7, r0
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c0:	4b87      	ldr	r3, [pc, #540]	; (8001ae0 <HAL_RCC_OscConfig+0x674>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	4013      	ands	r3, r2
 80018ca:	d11a      	bne.n	8001902 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018cc:	4b84      	ldr	r3, [pc, #528]	; (8001ae0 <HAL_RCC_OscConfig+0x674>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b83      	ldr	r3, [pc, #524]	; (8001ae0 <HAL_RCC_OscConfig+0x674>)
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	0049      	lsls	r1, r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff f9b9 	bl	8000c50 <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e4:	f7ff f9b4 	bl	8000c50 <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	; 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e173      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f6:	4b7a      	ldr	r3, [pc, #488]	; (8001ae0 <HAL_RCC_OscConfig+0x674>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689a      	ldr	r2, [r3, #8]
 8001906:	2380      	movs	r3, #128	; 0x80
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	429a      	cmp	r2, r3
 800190c:	d107      	bne.n	800191e <HAL_RCC_OscConfig+0x4b2>
 800190e:	4b72      	ldr	r3, [pc, #456]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001910:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001912:	4b71      	ldr	r3, [pc, #452]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001914:	2180      	movs	r1, #128	; 0x80
 8001916:	0049      	lsls	r1, r1, #1
 8001918:	430a      	orrs	r2, r1
 800191a:	651a      	str	r2, [r3, #80]	; 0x50
 800191c:	e031      	b.n	8001982 <HAL_RCC_OscConfig+0x516>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10c      	bne.n	8001940 <HAL_RCC_OscConfig+0x4d4>
 8001926:	4b6c      	ldr	r3, [pc, #432]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800192a:	4b6b      	ldr	r3, [pc, #428]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800192c:	496b      	ldr	r1, [pc, #428]	; (8001adc <HAL_RCC_OscConfig+0x670>)
 800192e:	400a      	ands	r2, r1
 8001930:	651a      	str	r2, [r3, #80]	; 0x50
 8001932:	4b69      	ldr	r3, [pc, #420]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001934:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001936:	4b68      	ldr	r3, [pc, #416]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001938:	496a      	ldr	r1, [pc, #424]	; (8001ae4 <HAL_RCC_OscConfig+0x678>)
 800193a:	400a      	ands	r2, r1
 800193c:	651a      	str	r2, [r3, #80]	; 0x50
 800193e:	e020      	b.n	8001982 <HAL_RCC_OscConfig+0x516>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689a      	ldr	r2, [r3, #8]
 8001944:	23a0      	movs	r3, #160	; 0xa0
 8001946:	00db      	lsls	r3, r3, #3
 8001948:	429a      	cmp	r2, r3
 800194a:	d10e      	bne.n	800196a <HAL_RCC_OscConfig+0x4fe>
 800194c:	4b62      	ldr	r3, [pc, #392]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800194e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001950:	4b61      	ldr	r3, [pc, #388]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	00c9      	lsls	r1, r1, #3
 8001956:	430a      	orrs	r2, r1
 8001958:	651a      	str	r2, [r3, #80]	; 0x50
 800195a:	4b5f      	ldr	r3, [pc, #380]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800195c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800195e:	4b5e      	ldr	r3, [pc, #376]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001960:	2180      	movs	r1, #128	; 0x80
 8001962:	0049      	lsls	r1, r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	651a      	str	r2, [r3, #80]	; 0x50
 8001968:	e00b      	b.n	8001982 <HAL_RCC_OscConfig+0x516>
 800196a:	4b5b      	ldr	r3, [pc, #364]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800196c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800196e:	4b5a      	ldr	r3, [pc, #360]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001970:	495a      	ldr	r1, [pc, #360]	; (8001adc <HAL_RCC_OscConfig+0x670>)
 8001972:	400a      	ands	r2, r1
 8001974:	651a      	str	r2, [r3, #80]	; 0x50
 8001976:	4b58      	ldr	r3, [pc, #352]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001978:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800197a:	4b57      	ldr	r3, [pc, #348]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 800197c:	4959      	ldr	r1, [pc, #356]	; (8001ae4 <HAL_RCC_OscConfig+0x678>)
 800197e:	400a      	ands	r2, r1
 8001980:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d015      	beq.n	80019b6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198a:	f7ff f961 	bl	8000c50 <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001992:	e009      	b.n	80019a8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff f95c 	bl	8000c50 <HAL_GetTick>
 8001998:	0002      	movs	r2, r0
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	4a52      	ldr	r2, [pc, #328]	; (8001ae8 <HAL_RCC_OscConfig+0x67c>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e11a      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019a8:	4b4b      	ldr	r3, [pc, #300]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80019aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4013      	ands	r3, r2
 80019b2:	d0ef      	beq.n	8001994 <HAL_RCC_OscConfig+0x528>
 80019b4:	e014      	b.n	80019e0 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019b6:	f7ff f94b 	bl	8000c50 <HAL_GetTick>
 80019ba:	0003      	movs	r3, r0
 80019bc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019be:	e009      	b.n	80019d4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff f946 	bl	8000c50 <HAL_GetTick>
 80019c4:	0002      	movs	r2, r0
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	4a47      	ldr	r2, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x67c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d901      	bls.n	80019d4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80019d0:	2303      	movs	r3, #3
 80019d2:	e104      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d4:	4b40      	ldr	r3, [pc, #256]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80019d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019d8:	2380      	movs	r3, #128	; 0x80
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4013      	ands	r3, r2
 80019de:	d1ef      	bne.n	80019c0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019e0:	2327      	movs	r3, #39	; 0x27
 80019e2:	18fb      	adds	r3, r7, r3
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d105      	bne.n	80019f6 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019ea:	4b3b      	ldr	r3, [pc, #236]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80019ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ee:	4b3a      	ldr	r3, [pc, #232]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 80019f0:	493e      	ldr	r1, [pc, #248]	; (8001aec <HAL_RCC_OscConfig+0x680>)
 80019f2:	400a      	ands	r2, r1
 80019f4:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2220      	movs	r2, #32
 80019fc:	4013      	ands	r3, r2
 80019fe:	d049      	beq.n	8001a94 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d026      	beq.n	8001a56 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a08:	4b33      	ldr	r3, [pc, #204]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	4b32      	ldr	r3, [pc, #200]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a0e:	2101      	movs	r1, #1
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	4b30      	ldr	r3, [pc, #192]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a18:	4b2f      	ldr	r3, [pc, #188]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	430a      	orrs	r2, r1
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34
 8001a20:	4b33      	ldr	r3, [pc, #204]	; (8001af0 <HAL_RCC_OscConfig+0x684>)
 8001a22:	6a1a      	ldr	r2, [r3, #32]
 8001a24:	4b32      	ldr	r3, [pc, #200]	; (8001af0 <HAL_RCC_OscConfig+0x684>)
 8001a26:	2180      	movs	r1, #128	; 0x80
 8001a28:	0189      	lsls	r1, r1, #6
 8001a2a:	430a      	orrs	r2, r1
 8001a2c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2e:	f7ff f90f 	bl	8000c50 <HAL_GetTick>
 8001a32:	0003      	movs	r3, r0
 8001a34:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a38:	f7ff f90a 	bl	8000c50 <HAL_GetTick>
 8001a3c:	0002      	movs	r2, r0
 8001a3e:	69bb      	ldr	r3, [r7, #24]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e0c9      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a4a:	4b23      	ldr	r3, [pc, #140]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2202      	movs	r2, #2
 8001a50:	4013      	ands	r3, r2
 8001a52:	d0f1      	beq.n	8001a38 <HAL_RCC_OscConfig+0x5cc>
 8001a54:	e01e      	b.n	8001a94 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a56:	4b20      	ldr	r3, [pc, #128]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a58:	689a      	ldr	r2, [r3, #8]
 8001a5a:	4b1f      	ldr	r3, [pc, #124]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a5c:	2101      	movs	r1, #1
 8001a5e:	438a      	bics	r2, r1
 8001a60:	609a      	str	r2, [r3, #8]
 8001a62:	4b23      	ldr	r3, [pc, #140]	; (8001af0 <HAL_RCC_OscConfig+0x684>)
 8001a64:	6a1a      	ldr	r2, [r3, #32]
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <HAL_RCC_OscConfig+0x684>)
 8001a68:	4922      	ldr	r1, [pc, #136]	; (8001af4 <HAL_RCC_OscConfig+0x688>)
 8001a6a:	400a      	ands	r2, r1
 8001a6c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a6e:	f7ff f8ef 	bl	8000c50 <HAL_GetTick>
 8001a72:	0003      	movs	r3, r0
 8001a74:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a78:	f7ff f8ea 	bl	8000c50 <HAL_GetTick>
 8001a7c:	0002      	movs	r2, r0
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	1ad3      	subs	r3, r2, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d901      	bls.n	8001a8a <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001a86:	2303      	movs	r3, #3
 8001a88:	e0a9      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a8a:	4b13      	ldr	r3, [pc, #76]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2202      	movs	r2, #2
 8001a90:	4013      	ands	r3, r2
 8001a92:	d1f1      	bne.n	8001a78 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d100      	bne.n	8001a9e <HAL_RCC_OscConfig+0x632>
 8001a9c:	e09e      	b.n	8001bdc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a9e:	6a3b      	ldr	r3, [r7, #32]
 8001aa0:	2b0c      	cmp	r3, #12
 8001aa2:	d100      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x63a>
 8001aa4:	e077      	b.n	8001b96 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d158      	bne.n	8001b60 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aae:	4b0a      	ldr	r3, [pc, #40]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	4b09      	ldr	r3, [pc, #36]	; (8001ad8 <HAL_RCC_OscConfig+0x66c>)
 8001ab4:	4910      	ldr	r1, [pc, #64]	; (8001af8 <HAL_RCC_OscConfig+0x68c>)
 8001ab6:	400a      	ands	r2, r1
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff f8c9 	bl	8000c50 <HAL_GetTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ac2:	e01b      	b.n	8001afc <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ac4:	f7ff f8c4 	bl	8000c50 <HAL_GetTick>
 8001ac8:	0002      	movs	r2, r0
 8001aca:	69bb      	ldr	r3, [r7, #24]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d914      	bls.n	8001afc <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e083      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
 8001ad6:	46c0      	nop			; (mov r8, r8)
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	fffffeff 	.word	0xfffffeff
 8001ae0:	40007000 	.word	0x40007000
 8001ae4:	fffffbff 	.word	0xfffffbff
 8001ae8:	00001388 	.word	0x00001388
 8001aec:	efffffff 	.word	0xefffffff
 8001af0:	40010000 	.word	0x40010000
 8001af4:	ffffdfff 	.word	0xffffdfff
 8001af8:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001afc:	4b3a      	ldr	r3, [pc, #232]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	049b      	lsls	r3, r3, #18
 8001b04:	4013      	ands	r3, r2
 8001b06:	d1dd      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b08:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	4a37      	ldr	r2, [pc, #220]	; (8001bec <HAL_RCC_OscConfig+0x780>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	431a      	orrs	r2, r3
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b20:	431a      	orrs	r2, r3
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b24:	430a      	orrs	r2, r1
 8001b26:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	4b2e      	ldr	r3, [pc, #184]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b2e:	2180      	movs	r1, #128	; 0x80
 8001b30:	0449      	lsls	r1, r1, #17
 8001b32:	430a      	orrs	r2, r1
 8001b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b36:	f7ff f88b 	bl	8000c50 <HAL_GetTick>
 8001b3a:	0003      	movs	r3, r0
 8001b3c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b3e:	e008      	b.n	8001b52 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b40:	f7ff f886 	bl	8000c50 <HAL_GetTick>
 8001b44:	0002      	movs	r2, r0
 8001b46:	69bb      	ldr	r3, [r7, #24]
 8001b48:	1ad3      	subs	r3, r2, r3
 8001b4a:	2b02      	cmp	r3, #2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e045      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b52:	4b25      	ldr	r3, [pc, #148]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	049b      	lsls	r3, r3, #18
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	d0f0      	beq.n	8001b40 <HAL_RCC_OscConfig+0x6d4>
 8001b5e:	e03d      	b.n	8001bdc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b60:	4b21      	ldr	r3, [pc, #132]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b66:	4922      	ldr	r1, [pc, #136]	; (8001bf0 <HAL_RCC_OscConfig+0x784>)
 8001b68:	400a      	ands	r2, r1
 8001b6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6c:	f7ff f870 	bl	8000c50 <HAL_GetTick>
 8001b70:	0003      	movs	r3, r0
 8001b72:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b76:	f7ff f86b 	bl	8000c50 <HAL_GetTick>
 8001b7a:	0002      	movs	r2, r0
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e02a      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b88:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001b8a:	681a      	ldr	r2, [r3, #0]
 8001b8c:	2380      	movs	r3, #128	; 0x80
 8001b8e:	049b      	lsls	r3, r3, #18
 8001b90:	4013      	ands	r3, r2
 8001b92:	d1f0      	bne.n	8001b76 <HAL_RCC_OscConfig+0x70a>
 8001b94:	e022      	b.n	8001bdc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d101      	bne.n	8001ba2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e01d      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ba2:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <HAL_RCC_OscConfig+0x77c>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba8:	69fa      	ldr	r2, [r7, #28]
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	025b      	lsls	r3, r3, #9
 8001bae:	401a      	ands	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d10f      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bb8:	69fa      	ldr	r2, [r7, #28]
 8001bba:	23f0      	movs	r3, #240	; 0xf0
 8001bbc:	039b      	lsls	r3, r3, #14
 8001bbe:	401a      	ands	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d107      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001bc8:	69fa      	ldr	r2, [r7, #28]
 8001bca:	23c0      	movs	r3, #192	; 0xc0
 8001bcc:	041b      	lsls	r3, r3, #16
 8001bce:	401a      	ands	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001bd4:	429a      	cmp	r2, r3
 8001bd6:	d001      	beq.n	8001bdc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e000      	b.n	8001bde <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	0018      	movs	r0, r3
 8001be0:	46bd      	mov	sp, r7
 8001be2:	b00a      	add	sp, #40	; 0x28
 8001be4:	bdb0      	pop	{r4, r5, r7, pc}
 8001be6:	46c0      	nop			; (mov r8, r8)
 8001be8:	40021000 	.word	0x40021000
 8001bec:	ff02ffff 	.word	0xff02ffff
 8001bf0:	feffffff 	.word	0xfeffffff

08001bf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bf4:	b5b0      	push	{r4, r5, r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d101      	bne.n	8001c08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e128      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c08:	4b96      	ldr	r3, [pc, #600]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	4013      	ands	r3, r2
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d91e      	bls.n	8001c54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b93      	ldr	r3, [pc, #588]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	4393      	bics	r3, r2
 8001c1e:	0019      	movs	r1, r3
 8001c20:	4b90      	ldr	r3, [pc, #576]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001c28:	f7ff f812 	bl	8000c50 <HAL_GetTick>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c30:	e009      	b.n	8001c46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c32:	f7ff f80d 	bl	8000c50 <HAL_GetTick>
 8001c36:	0002      	movs	r2, r0
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	4a8a      	ldr	r2, [pc, #552]	; (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d901      	bls.n	8001c46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c42:	2303      	movs	r3, #3
 8001c44:	e109      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c46:	4b87      	ldr	r3, [pc, #540]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	683a      	ldr	r2, [r7, #0]
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d1ee      	bne.n	8001c32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d009      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c5e:	4b83      	ldr	r3, [pc, #524]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	22f0      	movs	r2, #240	; 0xf0
 8001c64:	4393      	bics	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689a      	ldr	r2, [r3, #8]
 8001c6c:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2201      	movs	r2, #1
 8001c78:	4013      	ands	r3, r2
 8001c7a:	d100      	bne.n	8001c7e <HAL_RCC_ClockConfig+0x8a>
 8001c7c:	e089      	b.n	8001d92 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c86:	4b79      	ldr	r3, [pc, #484]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001c88:	681a      	ldr	r2, [r3, #0]
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	029b      	lsls	r3, r3, #10
 8001c8e:	4013      	ands	r3, r2
 8001c90:	d120      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e0e1      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d107      	bne.n	8001cae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	2380      	movs	r3, #128	; 0x80
 8001ca4:	049b      	lsls	r3, r3, #18
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	d114      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001caa:	2301      	movs	r3, #1
 8001cac:	e0d5      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d106      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cb6:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d109      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e0ca      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001cc4:	4b69      	ldr	r3, [pc, #420]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	009b      	lsls	r3, r3, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e0c2      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cd4:	4b65      	ldr	r3, [pc, #404]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	2203      	movs	r2, #3
 8001cda:	4393      	bics	r3, r2
 8001cdc:	0019      	movs	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	685a      	ldr	r2, [r3, #4]
 8001ce2:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ce8:	f7fe ffb2 	bl	8000c50 <HAL_GetTick>
 8001cec:	0003      	movs	r3, r0
 8001cee:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d111      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cf8:	e009      	b.n	8001d0e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cfa:	f7fe ffa9 	bl	8000c50 <HAL_GetTick>
 8001cfe:	0002      	movs	r2, r0
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	1ad3      	subs	r3, r2, r3
 8001d04:	4a58      	ldr	r2, [pc, #352]	; (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e0a5      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d0e:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	220c      	movs	r2, #12
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d1ef      	bne.n	8001cfa <HAL_RCC_ClockConfig+0x106>
 8001d1a:	e03a      	b.n	8001d92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b03      	cmp	r3, #3
 8001d22:	d111      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d24:	e009      	b.n	8001d3a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d26:	f7fe ff93 	bl	8000c50 <HAL_GetTick>
 8001d2a:	0002      	movs	r2, r0
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	1ad3      	subs	r3, r2, r3
 8001d30:	4a4d      	ldr	r2, [pc, #308]	; (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d901      	bls.n	8001d3a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d36:	2303      	movs	r3, #3
 8001d38:	e08f      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d3a:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001d3c:	68db      	ldr	r3, [r3, #12]
 8001d3e:	220c      	movs	r2, #12
 8001d40:	4013      	ands	r3, r2
 8001d42:	2b0c      	cmp	r3, #12
 8001d44:	d1ef      	bne.n	8001d26 <HAL_RCC_ClockConfig+0x132>
 8001d46:	e024      	b.n	8001d92 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	2b01      	cmp	r3, #1
 8001d4e:	d11b      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d50:	e009      	b.n	8001d66 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d52:	f7fe ff7d 	bl	8000c50 <HAL_GetTick>
 8001d56:	0002      	movs	r2, r0
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	4a42      	ldr	r2, [pc, #264]	; (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e079      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d66:	4b41      	ldr	r3, [pc, #260]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001d68:	68db      	ldr	r3, [r3, #12]
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	2b04      	cmp	r3, #4
 8001d70:	d1ef      	bne.n	8001d52 <HAL_RCC_ClockConfig+0x15e>
 8001d72:	e00e      	b.n	8001d92 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d74:	f7fe ff6c 	bl	8000c50 <HAL_GetTick>
 8001d78:	0002      	movs	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	4a3a      	ldr	r2, [pc, #232]	; (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e068      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d88:	4b38      	ldr	r3, [pc, #224]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	220c      	movs	r2, #12
 8001d8e:	4013      	ands	r3, r2
 8001d90:	d1f0      	bne.n	8001d74 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2201      	movs	r2, #1
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d21e      	bcs.n	8001dde <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da0:	4b30      	ldr	r3, [pc, #192]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2201      	movs	r2, #1
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	4b2e      	ldr	r3, [pc, #184]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001db2:	f7fe ff4d 	bl	8000c50 <HAL_GetTick>
 8001db6:	0003      	movs	r3, r0
 8001db8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dba:	e009      	b.n	8001dd0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dbc:	f7fe ff48 	bl	8000c50 <HAL_GetTick>
 8001dc0:	0002      	movs	r2, r0
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	4a28      	ldr	r2, [pc, #160]	; (8001e68 <HAL_RCC_ClockConfig+0x274>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e044      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd0:	4b24      	ldr	r3, [pc, #144]	; (8001e64 <HAL_RCC_ClockConfig+0x270>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d1ee      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2204      	movs	r2, #4
 8001de4:	4013      	ands	r3, r2
 8001de6:	d009      	beq.n	8001dfc <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4a20      	ldr	r2, [pc, #128]	; (8001e70 <HAL_RCC_ClockConfig+0x27c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68da      	ldr	r2, [r3, #12]
 8001df6:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2208      	movs	r2, #8
 8001e02:	4013      	ands	r3, r2
 8001e04:	d00a      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001e06:	4b19      	ldr	r3, [pc, #100]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	4a1a      	ldr	r2, [pc, #104]	; (8001e74 <HAL_RCC_ClockConfig+0x280>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	0019      	movs	r1, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	00da      	lsls	r2, r3, #3
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e1c:	f000 f832 	bl	8001e84 <HAL_RCC_GetSysClockFreq>
 8001e20:	0001      	movs	r1, r0
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_ClockConfig+0x278>)
 8001e24:	68db      	ldr	r3, [r3, #12]
 8001e26:	091b      	lsrs	r3, r3, #4
 8001e28:	220f      	movs	r2, #15
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	4a12      	ldr	r2, [pc, #72]	; (8001e78 <HAL_RCC_ClockConfig+0x284>)
 8001e2e:	5cd3      	ldrb	r3, [r2, r3]
 8001e30:	000a      	movs	r2, r1
 8001e32:	40da      	lsrs	r2, r3
 8001e34:	4b11      	ldr	r3, [pc, #68]	; (8001e7c <HAL_RCC_ClockConfig+0x288>)
 8001e36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e38:	4b11      	ldr	r3, [pc, #68]	; (8001e80 <HAL_RCC_ClockConfig+0x28c>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	250b      	movs	r5, #11
 8001e3e:	197c      	adds	r4, r7, r5
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7fe febf 	bl	8000bc4 <HAL_InitTick>
 8001e46:	0003      	movs	r3, r0
 8001e48:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e4a:	197b      	adds	r3, r7, r5
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d002      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e52:	197b      	adds	r3, r7, r5
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	0018      	movs	r0, r3
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	b004      	add	sp, #16
 8001e60:	bdb0      	pop	{r4, r5, r7, pc}
 8001e62:	46c0      	nop			; (mov r8, r8)
 8001e64:	40022000 	.word	0x40022000
 8001e68:	00001388 	.word	0x00001388
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	fffff8ff 	.word	0xfffff8ff
 8001e74:	ffffc7ff 	.word	0xffffc7ff
 8001e78:	08004dac 	.word	0x08004dac
 8001e7c:	20000000 	.word	0x20000000
 8001e80:	20000004 	.word	0x20000004

08001e84 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e84:	b5b0      	push	{r4, r5, r7, lr}
 8001e86:	b08e      	sub	sp, #56	; 0x38
 8001e88:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e8a:	4b4c      	ldr	r3, [pc, #304]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001e8c:	68db      	ldr	r3, [r3, #12]
 8001e8e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e92:	230c      	movs	r3, #12
 8001e94:	4013      	ands	r3, r2
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d014      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0x40>
 8001e9a:	d900      	bls.n	8001e9e <HAL_RCC_GetSysClockFreq+0x1a>
 8001e9c:	e07b      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x112>
 8001e9e:	2b04      	cmp	r3, #4
 8001ea0:	d002      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x24>
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d00b      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ea6:	e076      	b.n	8001f96 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001ea8:	4b44      	ldr	r3, [pc, #272]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2210      	movs	r2, #16
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d002      	beq.n	8001eb8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001eb2:	4b43      	ldr	r3, [pc, #268]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001eb4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001eb6:	e07c      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001eb8:	4b42      	ldr	r3, [pc, #264]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001eba:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ebc:	e079      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ebe:	4b42      	ldr	r3, [pc, #264]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ec0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ec2:	e076      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001ec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ec6:	0c9a      	lsrs	r2, r3, #18
 8001ec8:	230f      	movs	r3, #15
 8001eca:	401a      	ands	r2, r3
 8001ecc:	4b3f      	ldr	r3, [pc, #252]	; (8001fcc <HAL_RCC_GetSysClockFreq+0x148>)
 8001ece:	5c9b      	ldrb	r3, [r3, r2]
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ed4:	0d9a      	lsrs	r2, r3, #22
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	4013      	ands	r3, r2
 8001eda:	3301      	adds	r3, #1
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ede:	4b37      	ldr	r3, [pc, #220]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	2380      	movs	r3, #128	; 0x80
 8001ee4:	025b      	lsls	r3, r3, #9
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	d01a      	beq.n	8001f20 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eec:	61bb      	str	r3, [r7, #24]
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
 8001ef2:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	69b8      	ldr	r0, [r7, #24]
 8001ef8:	69f9      	ldr	r1, [r7, #28]
 8001efa:	f7fe f9b1 	bl	8000260 <__aeabi_lmul>
 8001efe:	0002      	movs	r2, r0
 8001f00:	000b      	movs	r3, r1
 8001f02:	0010      	movs	r0, r2
 8001f04:	0019      	movs	r1, r3
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f7fe f985 	bl	8000220 <__aeabi_uldivmod>
 8001f16:	0002      	movs	r2, r0
 8001f18:	000b      	movs	r3, r1
 8001f1a:	0013      	movs	r3, r2
 8001f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f1e:	e037      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001f20:	4b26      	ldr	r3, [pc, #152]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2210      	movs	r2, #16
 8001f26:	4013      	ands	r3, r2
 8001f28:	d01a      	beq.n	8001f60 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60fb      	str	r3, [r7, #12]
 8001f32:	4a23      	ldr	r2, [pc, #140]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f34:	2300      	movs	r3, #0
 8001f36:	68b8      	ldr	r0, [r7, #8]
 8001f38:	68f9      	ldr	r1, [r7, #12]
 8001f3a:	f7fe f991 	bl	8000260 <__aeabi_lmul>
 8001f3e:	0002      	movs	r2, r0
 8001f40:	000b      	movs	r3, r1
 8001f42:	0010      	movs	r0, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	603b      	str	r3, [r7, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	f7fe f965 	bl	8000220 <__aeabi_uldivmod>
 8001f56:	0002      	movs	r2, r0
 8001f58:	000b      	movs	r3, r1
 8001f5a:	0013      	movs	r3, r2
 8001f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8001f5e:	e017      	b.n	8001f90 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f62:	0018      	movs	r0, r3
 8001f64:	2300      	movs	r3, #0
 8001f66:	0019      	movs	r1, r3
 8001f68:	4a16      	ldr	r2, [pc, #88]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f7fe f978 	bl	8000260 <__aeabi_lmul>
 8001f70:	0002      	movs	r2, r0
 8001f72:	000b      	movs	r3, r1
 8001f74:	0010      	movs	r0, r2
 8001f76:	0019      	movs	r1, r3
 8001f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7a:	001c      	movs	r4, r3
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	001d      	movs	r5, r3
 8001f80:	0022      	movs	r2, r4
 8001f82:	002b      	movs	r3, r5
 8001f84:	f7fe f94c 	bl	8000220 <__aeabi_uldivmod>
 8001f88:	0002      	movs	r2, r0
 8001f8a:	000b      	movs	r3, r1
 8001f8c:	0013      	movs	r3, r2
 8001f8e:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f94:	e00d      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f96:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_GetSysClockFreq+0x138>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	0b5b      	lsrs	r3, r3, #13
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001fa2:	6a3b      	ldr	r3, [r7, #32]
 8001fa4:	3301      	adds	r3, #1
 8001fa6:	2280      	movs	r2, #128	; 0x80
 8001fa8:	0212      	lsls	r2, r2, #8
 8001faa:	409a      	lsls	r2, r3
 8001fac:	0013      	movs	r3, r2
 8001fae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fb0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fb4:	0018      	movs	r0, r3
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b00e      	add	sp, #56	; 0x38
 8001fba:	bdb0      	pop	{r4, r5, r7, pc}
 8001fbc:	40021000 	.word	0x40021000
 8001fc0:	003d0900 	.word	0x003d0900
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200
 8001fcc:	08004dbc 	.word	0x08004dbc

08001fd0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e083      	b.n	80020ea <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d109      	bne.n	8001ffe <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	2382      	movs	r3, #130	; 0x82
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	429a      	cmp	r2, r3
 8001ff4:	d009      	beq.n	800200a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	61da      	str	r2, [r3, #28]
 8001ffc:	e005      	b.n	800200a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2200      	movs	r2, #0
 8002002:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2200      	movs	r2, #0
 8002008:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2251      	movs	r2, #81	; 0x51
 8002014:	5c9b      	ldrb	r3, [r3, r2]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b00      	cmp	r3, #0
 800201a:	d107      	bne.n	800202c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2250      	movs	r2, #80	; 0x50
 8002020:	2100      	movs	r1, #0
 8002022:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	0018      	movs	r0, r3
 8002028:	f7fe fc22 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2251      	movs	r2, #81	; 0x51
 8002030:	2102      	movs	r1, #2
 8002032:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	2140      	movs	r1, #64	; 0x40
 8002040:	438a      	bics	r2, r1
 8002042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685a      	ldr	r2, [r3, #4]
 8002048:	2382      	movs	r3, #130	; 0x82
 800204a:	005b      	lsls	r3, r3, #1
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6899      	ldr	r1, [r3, #8]
 8002052:	2384      	movs	r3, #132	; 0x84
 8002054:	021b      	lsls	r3, r3, #8
 8002056:	400b      	ands	r3, r1
 8002058:	431a      	orrs	r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	68d9      	ldr	r1, [r3, #12]
 800205e:	2380      	movs	r3, #128	; 0x80
 8002060:	011b      	lsls	r3, r3, #4
 8002062:	400b      	ands	r3, r1
 8002064:	431a      	orrs	r2, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	2102      	movs	r1, #2
 800206c:	400b      	ands	r3, r1
 800206e:	431a      	orrs	r2, r3
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	695b      	ldr	r3, [r3, #20]
 8002074:	2101      	movs	r1, #1
 8002076:	400b      	ands	r3, r1
 8002078:	431a      	orrs	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6999      	ldr	r1, [r3, #24]
 800207e:	2380      	movs	r3, #128	; 0x80
 8002080:	009b      	lsls	r3, r3, #2
 8002082:	400b      	ands	r3, r1
 8002084:	431a      	orrs	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
 800208a:	2138      	movs	r1, #56	; 0x38
 800208c:	400b      	ands	r3, r1
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6a1b      	ldr	r3, [r3, #32]
 8002094:	2180      	movs	r1, #128	; 0x80
 8002096:	400b      	ands	r3, r1
 8002098:	431a      	orrs	r2, r3
 800209a:	0011      	movs	r1, r2
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	019b      	lsls	r3, r3, #6
 80020a4:	401a      	ands	r2, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	699b      	ldr	r3, [r3, #24]
 80020b2:	0c1b      	lsrs	r3, r3, #16
 80020b4:	2204      	movs	r2, #4
 80020b6:	4013      	ands	r3, r2
 80020b8:	0019      	movs	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020be:	2210      	movs	r2, #16
 80020c0:	401a      	ands	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	430a      	orrs	r2, r1
 80020c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	69da      	ldr	r2, [r3, #28]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4907      	ldr	r1, [pc, #28]	; (80020f4 <HAL_SPI_Init+0x124>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2251      	movs	r2, #81	; 0x51
 80020e4:	2101      	movs	r1, #1
 80020e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	0018      	movs	r0, r3
 80020ec:	46bd      	mov	sp, r7
 80020ee:	b002      	add	sp, #8
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	fffff7ff 	.word	0xfffff7ff

080020f8 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	603b      	str	r3, [r7, #0]
 8002104:	1dbb      	adds	r3, r7, #6
 8002106:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002108:	231f      	movs	r3, #31
 800210a:	18fb      	adds	r3, r7, r3
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2250      	movs	r2, #80	; 0x50
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_SPI_Transmit+0x26>
 800211a:	2302      	movs	r3, #2
 800211c:	e13e      	b.n	800239c <HAL_SPI_Transmit+0x2a4>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2250      	movs	r2, #80	; 0x50
 8002122:	2101      	movs	r1, #1
 8002124:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002126:	f7fe fd93 	bl	8000c50 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800212e:	2316      	movs	r3, #22
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	1dba      	adds	r2, r7, #6
 8002134:	8812      	ldrh	r2, [r2, #0]
 8002136:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2251      	movs	r2, #81	; 0x51
 800213c:	5c9b      	ldrb	r3, [r3, r2]
 800213e:	b2db      	uxtb	r3, r3
 8002140:	2b01      	cmp	r3, #1
 8002142:	d004      	beq.n	800214e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002144:	231f      	movs	r3, #31
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	2202      	movs	r2, #2
 800214a:	701a      	strb	r2, [r3, #0]
    goto error;
 800214c:	e11b      	b.n	8002386 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_SPI_Transmit+0x64>
 8002154:	1dbb      	adds	r3, r7, #6
 8002156:	881b      	ldrh	r3, [r3, #0]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d104      	bne.n	8002166 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 800215c:	231f      	movs	r3, #31
 800215e:	18fb      	adds	r3, r7, r3
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
    goto error;
 8002164:	e10f      	b.n	8002386 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	2251      	movs	r2, #81	; 0x51
 800216a:	2103      	movs	r1, #3
 800216c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	68ba      	ldr	r2, [r7, #8]
 8002178:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	1dba      	adds	r2, r7, #6
 800217e:	8812      	ldrh	r2, [r2, #0]
 8002180:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1dba      	adds	r2, r7, #6
 8002186:	8812      	ldrh	r2, [r2, #0]
 8002188:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	2200      	movs	r2, #0
 80021a0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2200      	movs	r2, #0
 80021a6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689a      	ldr	r2, [r3, #8]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	021b      	lsls	r3, r3, #8
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d110      	bne.n	80021d6 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2140      	movs	r1, #64	; 0x40
 80021c0:	438a      	bics	r2, r1
 80021c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	2180      	movs	r1, #128	; 0x80
 80021d0:	01c9      	lsls	r1, r1, #7
 80021d2:	430a      	orrs	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	2240      	movs	r2, #64	; 0x40
 80021de:	4013      	ands	r3, r2
 80021e0:	2b40      	cmp	r3, #64	; 0x40
 80021e2:	d007      	beq.n	80021f4 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	2140      	movs	r1, #64	; 0x40
 80021f0:	430a      	orrs	r2, r1
 80021f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	68da      	ldr	r2, [r3, #12]
 80021f8:	2380      	movs	r3, #128	; 0x80
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d14e      	bne.n	800229e <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d004      	beq.n	8002212 <HAL_SPI_Transmit+0x11a>
 8002208:	2316      	movs	r3, #22
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	881b      	ldrh	r3, [r3, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d13f      	bne.n	8002292 <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002236:	e02c      	b.n	8002292 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	2202      	movs	r2, #2
 8002240:	4013      	ands	r3, r2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d112      	bne.n	800226c <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	881a      	ldrh	r2, [r3, #0]
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	1c9a      	adds	r2, r3, #2
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002260:	b29b      	uxth	r3, r3
 8002262:	3b01      	subs	r3, #1
 8002264:	b29a      	uxth	r2, r3
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	86da      	strh	r2, [r3, #54]	; 0x36
 800226a:	e012      	b.n	8002292 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800226c:	f7fe fcf0 	bl	8000c50 <HAL_GetTick>
 8002270:	0002      	movs	r2, r0
 8002272:	69bb      	ldr	r3, [r7, #24]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d802      	bhi.n	8002282 <HAL_SPI_Transmit+0x18a>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	3301      	adds	r3, #1
 8002280:	d102      	bne.n	8002288 <HAL_SPI_Transmit+0x190>
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d104      	bne.n	8002292 <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8002288:	231f      	movs	r3, #31
 800228a:	18fb      	adds	r3, r7, r3
 800228c:	2203      	movs	r2, #3
 800228e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002290:	e079      	b.n	8002386 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002296:	b29b      	uxth	r3, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1cd      	bne.n	8002238 <HAL_SPI_Transmit+0x140>
 800229c:	e04f      	b.n	800233e <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d004      	beq.n	80022b0 <HAL_SPI_Transmit+0x1b8>
 80022a6:	2316      	movs	r3, #22
 80022a8:	18fb      	adds	r3, r7, r3
 80022aa:	881b      	ldrh	r3, [r3, #0]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d141      	bne.n	8002334 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	330c      	adds	r3, #12
 80022ba:	7812      	ldrb	r2, [r2, #0]
 80022bc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	1c5a      	adds	r2, r3, #1
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022cc:	b29b      	uxth	r3, r3
 80022ce:	3b01      	subs	r3, #1
 80022d0:	b29a      	uxth	r2, r3
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022d6:	e02d      	b.n	8002334 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d113      	bne.n	800230e <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	330c      	adds	r3, #12
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	1c5a      	adds	r2, r3, #1
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002302:	b29b      	uxth	r3, r3
 8002304:	3b01      	subs	r3, #1
 8002306:	b29a      	uxth	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	86da      	strh	r2, [r3, #54]	; 0x36
 800230c:	e012      	b.n	8002334 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800230e:	f7fe fc9f 	bl	8000c50 <HAL_GetTick>
 8002312:	0002      	movs	r2, r0
 8002314:	69bb      	ldr	r3, [r7, #24]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d802      	bhi.n	8002324 <HAL_SPI_Transmit+0x22c>
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	3301      	adds	r3, #1
 8002322:	d102      	bne.n	800232a <HAL_SPI_Transmit+0x232>
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d104      	bne.n	8002334 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 800232a:	231f      	movs	r3, #31
 800232c:	18fb      	adds	r3, r7, r3
 800232e:	2203      	movs	r2, #3
 8002330:	701a      	strb	r2, [r3, #0]
          goto error;
 8002332:	e028      	b.n	8002386 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002338:	b29b      	uxth	r3, r3
 800233a:	2b00      	cmp	r3, #0
 800233c:	d1cc      	bne.n	80022d8 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	6839      	ldr	r1, [r7, #0]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	0018      	movs	r0, r3
 8002346:	f000 fa77 	bl	8002838 <SPI_EndRxTxTransaction>
 800234a:	1e03      	subs	r3, r0, #0
 800234c:	d002      	beq.n	8002354 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	2220      	movs	r2, #32
 8002352:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10a      	bne.n	8002372 <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	613b      	str	r3, [r7, #16]
 8002370:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002376:	2b00      	cmp	r3, #0
 8002378:	d004      	beq.n	8002384 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 800237a:	231f      	movs	r3, #31
 800237c:	18fb      	adds	r3, r7, r3
 800237e:	2201      	movs	r2, #1
 8002380:	701a      	strb	r2, [r3, #0]
 8002382:	e000      	b.n	8002386 <HAL_SPI_Transmit+0x28e>
  }

error:
 8002384:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	2251      	movs	r2, #81	; 0x51
 800238a:	2101      	movs	r1, #1
 800238c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2250      	movs	r2, #80	; 0x50
 8002392:	2100      	movs	r1, #0
 8002394:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002396:	231f      	movs	r3, #31
 8002398:	18fb      	adds	r3, r7, r3
 800239a:	781b      	ldrb	r3, [r3, #0]
}
 800239c:	0018      	movs	r0, r3
 800239e:	46bd      	mov	sp, r7
 80023a0:	b008      	add	sp, #32
 80023a2:	bd80      	pop	{r7, pc}

080023a4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b08c      	sub	sp, #48	; 0x30
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
 80023b0:	001a      	movs	r2, r3
 80023b2:	1cbb      	adds	r3, r7, #2
 80023b4:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80023b6:	2301      	movs	r3, #1
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80023ba:	232b      	movs	r3, #43	; 0x2b
 80023bc:	18fb      	adds	r3, r7, r3
 80023be:	2200      	movs	r2, #0
 80023c0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2250      	movs	r2, #80	; 0x50
 80023c6:	5c9b      	ldrb	r3, [r3, r2]
 80023c8:	2b01      	cmp	r3, #1
 80023ca:	d101      	bne.n	80023d0 <HAL_SPI_TransmitReceive+0x2c>
 80023cc:	2302      	movs	r3, #2
 80023ce:	e1a0      	b.n	8002712 <HAL_SPI_TransmitReceive+0x36e>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2250      	movs	r2, #80	; 0x50
 80023d4:	2101      	movs	r1, #1
 80023d6:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023d8:	f7fe fc3a 	bl	8000c50 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023e0:	2023      	movs	r0, #35	; 0x23
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	2151      	movs	r1, #81	; 0x51
 80023e8:	5c52      	ldrb	r2, [r2, r1]
 80023ea:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023f2:	231a      	movs	r3, #26
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	1cba      	adds	r2, r7, #2
 80023f8:	8812      	ldrh	r2, [r2, #0]
 80023fa:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023fc:	183b      	adds	r3, r7, r0
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	2b01      	cmp	r3, #1
 8002402:	d011      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x84>
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	2382      	movs	r3, #130	; 0x82
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	429a      	cmp	r2, r3
 800240c:	d107      	bne.n	800241e <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d103      	bne.n	800241e <HAL_SPI_TransmitReceive+0x7a>
 8002416:	183b      	adds	r3, r7, r0
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b04      	cmp	r3, #4
 800241c:	d004      	beq.n	8002428 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800241e:	232b      	movs	r3, #43	; 0x2b
 8002420:	18fb      	adds	r3, r7, r3
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
    goto error;
 8002426:	e169      	b.n	80026fc <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d006      	beq.n	800243c <HAL_SPI_TransmitReceive+0x98>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_SPI_TransmitReceive+0x98>
 8002434:	1cbb      	adds	r3, r7, #2
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d104      	bne.n	8002446 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 800243c:	232b      	movs	r3, #43	; 0x2b
 800243e:	18fb      	adds	r3, r7, r3
 8002440:	2201      	movs	r2, #1
 8002442:	701a      	strb	r2, [r3, #0]
    goto error;
 8002444:	e15a      	b.n	80026fc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2251      	movs	r2, #81	; 0x51
 800244a:	5c9b      	ldrb	r3, [r3, r2]
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b04      	cmp	r3, #4
 8002450:	d003      	beq.n	800245a <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2251      	movs	r2, #81	; 0x51
 8002456:	2105      	movs	r1, #5
 8002458:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	1cba      	adds	r2, r7, #2
 800246a:	8812      	ldrh	r2, [r2, #0]
 800246c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1cba      	adds	r2, r7, #2
 8002472:	8812      	ldrh	r2, [r2, #0]
 8002474:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	68ba      	ldr	r2, [r7, #8]
 800247a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	1cba      	adds	r2, r7, #2
 8002480:	8812      	ldrh	r2, [r2, #0]
 8002482:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	1cba      	adds	r2, r7, #2
 8002488:	8812      	ldrh	r2, [r2, #0]
 800248a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	4013      	ands	r3, r2
 80024a2:	2b40      	cmp	r3, #64	; 0x40
 80024a4:	d007      	beq.n	80024b6 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	681a      	ldr	r2, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2140      	movs	r1, #64	; 0x40
 80024b2:	430a      	orrs	r2, r1
 80024b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	68da      	ldr	r2, [r3, #12]
 80024ba:	2380      	movs	r3, #128	; 0x80
 80024bc:	011b      	lsls	r3, r3, #4
 80024be:	429a      	cmp	r2, r3
 80024c0:	d000      	beq.n	80024c4 <HAL_SPI_TransmitReceive+0x120>
 80024c2:	e07a      	b.n	80025ba <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d004      	beq.n	80024d6 <HAL_SPI_TransmitReceive+0x132>
 80024cc:	231a      	movs	r3, #26
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	881b      	ldrh	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d166      	bne.n	80025a4 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	881a      	ldrh	r2, [r3, #0]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	1c9a      	adds	r2, r3, #2
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	3b01      	subs	r3, #1
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024fa:	e053      	b.n	80025a4 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	2202      	movs	r2, #2
 8002504:	4013      	ands	r3, r2
 8002506:	2b02      	cmp	r3, #2
 8002508:	d11b      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x19e>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800250e:	b29b      	uxth	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d016      	beq.n	8002542 <HAL_SPI_TransmitReceive+0x19e>
 8002514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002516:	2b01      	cmp	r3, #1
 8002518:	d113      	bne.n	8002542 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	881a      	ldrh	r2, [r3, #0]
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252a:	1c9a      	adds	r2, r3, #2
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002534:	b29b      	uxth	r3, r3
 8002536:	3b01      	subs	r3, #1
 8002538:	b29a      	uxth	r2, r3
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800253e:	2300      	movs	r3, #0
 8002540:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	2201      	movs	r2, #1
 800254a:	4013      	ands	r3, r2
 800254c:	2b01      	cmp	r3, #1
 800254e:	d119      	bne.n	8002584 <HAL_SPI_TransmitReceive+0x1e0>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002554:	b29b      	uxth	r3, r3
 8002556:	2b00      	cmp	r3, #0
 8002558:	d014      	beq.n	8002584 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	68da      	ldr	r2, [r3, #12]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002564:	b292      	uxth	r2, r2
 8002566:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b01      	subs	r3, #1
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002580:	2301      	movs	r3, #1
 8002582:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002584:	f7fe fb64 	bl	8000c50 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002590:	429a      	cmp	r2, r3
 8002592:	d807      	bhi.n	80025a4 <HAL_SPI_TransmitReceive+0x200>
 8002594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002596:	3301      	adds	r3, #1
 8002598:	d004      	beq.n	80025a4 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 800259a:	232b      	movs	r3, #43	; 0x2b
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	2203      	movs	r2, #3
 80025a0:	701a      	strb	r2, [r3, #0]
        goto error;
 80025a2:	e0ab      	b.n	80026fc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d1a6      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x158>
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d1a1      	bne.n	80024fc <HAL_SPI_TransmitReceive+0x158>
 80025b8:	e07f      	b.n	80026ba <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d005      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x22a>
 80025c2:	231a      	movs	r3, #26
 80025c4:	18fb      	adds	r3, r7, r3
 80025c6:	881b      	ldrh	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d000      	beq.n	80025ce <HAL_SPI_TransmitReceive+0x22a>
 80025cc:	e06b      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	330c      	adds	r3, #12
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025ea:	b29b      	uxth	r3, r3
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025f4:	e057      	b.n	80026a6 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	2202      	movs	r2, #2
 80025fe:	4013      	ands	r3, r2
 8002600:	2b02      	cmp	r3, #2
 8002602:	d11c      	bne.n	800263e <HAL_SPI_TransmitReceive+0x29a>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002608:	b29b      	uxth	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d017      	beq.n	800263e <HAL_SPI_TransmitReceive+0x29a>
 800260e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002610:	2b01      	cmp	r3, #1
 8002612:	d114      	bne.n	800263e <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	7812      	ldrb	r2, [r2, #0]
 8002620:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002626:	1c5a      	adds	r2, r3, #1
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800263a:	2300      	movs	r3, #0
 800263c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689b      	ldr	r3, [r3, #8]
 8002644:	2201      	movs	r2, #1
 8002646:	4013      	ands	r3, r2
 8002648:	2b01      	cmp	r3, #1
 800264a:	d119      	bne.n	8002680 <HAL_SPI_TransmitReceive+0x2dc>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002650:	b29b      	uxth	r3, r3
 8002652:	2b00      	cmp	r3, #0
 8002654:	d014      	beq.n	8002680 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002660:	b2d2      	uxtb	r2, r2
 8002662:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002668:	1c5a      	adds	r2, r3, #1
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002672:	b29b      	uxth	r3, r3
 8002674:	3b01      	subs	r3, #1
 8002676:	b29a      	uxth	r2, r3
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800267c:	2301      	movs	r3, #1
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002680:	f7fe fae6 	bl	8000c50 <HAL_GetTick>
 8002684:	0002      	movs	r2, r0
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800268c:	429a      	cmp	r2, r3
 800268e:	d802      	bhi.n	8002696 <HAL_SPI_TransmitReceive+0x2f2>
 8002690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002692:	3301      	adds	r3, #1
 8002694:	d102      	bne.n	800269c <HAL_SPI_TransmitReceive+0x2f8>
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b00      	cmp	r3, #0
 800269a:	d104      	bne.n	80026a6 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 800269c:	232b      	movs	r3, #43	; 0x2b
 800269e:	18fb      	adds	r3, r7, r3
 80026a0:	2203      	movs	r2, #3
 80026a2:	701a      	strb	r2, [r3, #0]
        goto error;
 80026a4:	e02a      	b.n	80026fc <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1a2      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x252>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d19d      	bne.n	80025f6 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80026ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	0018      	movs	r0, r3
 80026c2:	f000 f8b9 	bl	8002838 <SPI_EndRxTxTransaction>
 80026c6:	1e03      	subs	r3, r0, #0
 80026c8:	d007      	beq.n	80026da <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 80026ca:	232b      	movs	r3, #43	; 0x2b
 80026cc:	18fb      	adds	r3, r7, r3
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2220      	movs	r2, #32
 80026d6:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026d8:	e010      	b.n	80026fc <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10b      	bne.n	80026fa <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	617b      	str	r3, [r7, #20]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	e000      	b.n	80026fc <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80026fa:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2251      	movs	r2, #81	; 0x51
 8002700:	2101      	movs	r1, #1
 8002702:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	2250      	movs	r2, #80	; 0x50
 8002708:	2100      	movs	r1, #0
 800270a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800270c:	232b      	movs	r3, #43	; 0x2b
 800270e:	18fb      	adds	r3, r7, r3
 8002710:	781b      	ldrb	r3, [r3, #0]
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b00c      	add	sp, #48	; 0x30
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b088      	sub	sp, #32
 8002720:	af00      	add	r7, sp, #0
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	603b      	str	r3, [r7, #0]
 8002728:	1dfb      	adds	r3, r7, #7
 800272a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800272c:	f7fe fa90 	bl	8000c50 <HAL_GetTick>
 8002730:	0002      	movs	r2, r0
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	18d3      	adds	r3, r2, r3
 800273a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800273c:	f7fe fa88 	bl	8000c50 <HAL_GetTick>
 8002740:	0003      	movs	r3, r0
 8002742:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002744:	4b3a      	ldr	r3, [pc, #232]	; (8002830 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	015b      	lsls	r3, r3, #5
 800274a:	0d1b      	lsrs	r3, r3, #20
 800274c:	69fa      	ldr	r2, [r7, #28]
 800274e:	4353      	muls	r3, r2
 8002750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002752:	e058      	b.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	3301      	adds	r3, #1
 8002758:	d055      	beq.n	8002806 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800275a:	f7fe fa79 	bl	8000c50 <HAL_GetTick>
 800275e:	0002      	movs	r2, r0
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	69fa      	ldr	r2, [r7, #28]
 8002766:	429a      	cmp	r2, r3
 8002768:	d902      	bls.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x54>
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d142      	bne.n	80027f6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	21e0      	movs	r1, #224	; 0xe0
 800277c:	438a      	bics	r2, r1
 800277e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	2382      	movs	r3, #130	; 0x82
 8002786:	005b      	lsls	r3, r3, #1
 8002788:	429a      	cmp	r2, r3
 800278a:	d113      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	689a      	ldr	r2, [r3, #8]
 8002790:	2380      	movs	r3, #128	; 0x80
 8002792:	021b      	lsls	r3, r3, #8
 8002794:	429a      	cmp	r2, r3
 8002796:	d005      	beq.n	80027a4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	689a      	ldr	r2, [r3, #8]
 800279c:	2380      	movs	r3, #128	; 0x80
 800279e:	00db      	lsls	r3, r3, #3
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d107      	bne.n	80027b4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	2140      	movs	r1, #64	; 0x40
 80027b0:	438a      	bics	r2, r1
 80027b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027b8:	2380      	movs	r3, #128	; 0x80
 80027ba:	019b      	lsls	r3, r3, #6
 80027bc:	429a      	cmp	r2, r3
 80027be:	d110      	bne.n	80027e2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	491a      	ldr	r1, [pc, #104]	; (8002834 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80027cc:	400a      	ands	r2, r1
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	2180      	movs	r1, #128	; 0x80
 80027dc:	0189      	lsls	r1, r1, #6
 80027de:	430a      	orrs	r2, r1
 80027e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2251      	movs	r2, #81	; 0x51
 80027e6:	2101      	movs	r1, #1
 80027e8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2250      	movs	r2, #80	; 0x50
 80027ee:	2100      	movs	r1, #0
 80027f0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027f2:	2303      	movs	r3, #3
 80027f4:	e017      	b.n	8002826 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027f6:	697b      	ldr	r3, [r7, #20]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	3b01      	subs	r3, #1
 8002804:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	4013      	ands	r3, r2
 8002810:	68ba      	ldr	r2, [r7, #8]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	425a      	negs	r2, r3
 8002816:	4153      	adcs	r3, r2
 8002818:	b2db      	uxtb	r3, r3
 800281a:	001a      	movs	r2, r3
 800281c:	1dfb      	adds	r3, r7, #7
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	429a      	cmp	r2, r3
 8002822:	d197      	bne.n	8002754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002824:	2300      	movs	r3, #0
}
 8002826:	0018      	movs	r0, r3
 8002828:	46bd      	mov	sp, r7
 800282a:	b008      	add	sp, #32
 800282c:	bd80      	pop	{r7, pc}
 800282e:	46c0      	nop			; (mov r8, r8)
 8002830:	20000000 	.word	0x20000000
 8002834:	ffffdfff 	.word	0xffffdfff

08002838 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <SPI_EndRxTxTransaction+0x84>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	491d      	ldr	r1, [pc, #116]	; (80028c0 <SPI_EndRxTxTransaction+0x88>)
 800284a:	0018      	movs	r0, r3
 800284c:	f7fd fc5c 	bl	8000108 <__udivsi3>
 8002850:	0003      	movs	r3, r0
 8002852:	001a      	movs	r2, r3
 8002854:	0013      	movs	r3, r2
 8002856:	015b      	lsls	r3, r3, #5
 8002858:	1a9b      	subs	r3, r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	189b      	adds	r3, r3, r2
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	2382      	movs	r3, #130	; 0x82
 8002868:	005b      	lsls	r3, r3, #1
 800286a:	429a      	cmp	r2, r3
 800286c:	d112      	bne.n	8002894 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800286e:	68ba      	ldr	r2, [r7, #8]
 8002870:	68f8      	ldr	r0, [r7, #12]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	0013      	movs	r3, r2
 8002878:	2200      	movs	r2, #0
 800287a:	2180      	movs	r1, #128	; 0x80
 800287c:	f7ff ff4e 	bl	800271c <SPI_WaitFlagStateUntilTimeout>
 8002880:	1e03      	subs	r3, r0, #0
 8002882:	d016      	beq.n	80028b2 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002888:	2220      	movs	r2, #32
 800288a:	431a      	orrs	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8002890:	2303      	movs	r3, #3
 8002892:	e00f      	b.n	80028b4 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d00a      	beq.n	80028b0 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	3b01      	subs	r3, #1
 800289e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	2280      	movs	r2, #128	; 0x80
 80028a8:	4013      	ands	r3, r2
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d0f2      	beq.n	8002894 <SPI_EndRxTxTransaction+0x5c>
 80028ae:	e000      	b.n	80028b2 <SPI_EndRxTxTransaction+0x7a>
        break;
 80028b0:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000000 	.word	0x20000000
 80028c0:	016e3600 	.word	0x016e3600

080028c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e032      	b.n	800293c <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2239      	movs	r2, #57	; 0x39
 80028da:	5c9b      	ldrb	r3, [r3, r2]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d107      	bne.n	80028f2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2238      	movs	r2, #56	; 0x38
 80028e6:	2100      	movs	r1, #0
 80028e8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	0018      	movs	r0, r3
 80028ee:	f7fe f8d5 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2239      	movs	r2, #57	; 0x39
 80028f6:	2102      	movs	r1, #2
 80028f8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681a      	ldr	r2, [r3, #0]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	3304      	adds	r3, #4
 8002902:	0019      	movs	r1, r3
 8002904:	0010      	movs	r0, r2
 8002906:	f000 fa3b 	bl	8002d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	223e      	movs	r2, #62	; 0x3e
 800290e:	2101      	movs	r1, #1
 8002910:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	223a      	movs	r2, #58	; 0x3a
 8002916:	2101      	movs	r1, #1
 8002918:	5499      	strb	r1, [r3, r2]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	223b      	movs	r2, #59	; 0x3b
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	223c      	movs	r2, #60	; 0x3c
 8002926:	2101      	movs	r1, #1
 8002928:	5499      	strb	r1, [r3, r2]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	223d      	movs	r2, #61	; 0x3d
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2239      	movs	r2, #57	; 0x39
 8002936:	2101      	movs	r1, #1
 8002938:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	0018      	movs	r0, r3
 800293e:	46bd      	mov	sp, r7
 8002940:	b002      	add	sp, #8
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2239      	movs	r2, #57	; 0x39
 8002950:	5c9b      	ldrb	r3, [r3, r2]
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b01      	cmp	r3, #1
 8002956:	d001      	beq.n	800295c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e036      	b.n	80029ca <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2239      	movs	r2, #57	; 0x39
 8002960:	2102      	movs	r1, #2
 8002962:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68da      	ldr	r2, [r3, #12]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	2101      	movs	r1, #1
 8002970:	430a      	orrs	r2, r1
 8002972:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	2380      	movs	r3, #128	; 0x80
 800297a:	05db      	lsls	r3, r3, #23
 800297c:	429a      	cmp	r2, r3
 800297e:	d009      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x50>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a13      	ldr	r2, [pc, #76]	; (80029d4 <HAL_TIM_Base_Start_IT+0x90>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d004      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x50>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a12      	ldr	r2, [pc, #72]	; (80029d8 <HAL_TIM_Base_Start_IT+0x94>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d111      	bne.n	80029b8 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	2207      	movs	r2, #7
 800299c:	4013      	ands	r3, r2
 800299e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b06      	cmp	r3, #6
 80029a4:	d010      	beq.n	80029c8 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2101      	movs	r1, #1
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029b6:	e007      	b.n	80029c8 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	2101      	movs	r1, #1
 80029c4:	430a      	orrs	r2, r1
 80029c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029c8:	2300      	movs	r3, #0
}
 80029ca:	0018      	movs	r0, r3
 80029cc:	46bd      	mov	sp, r7
 80029ce:	b004      	add	sp, #16
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	46c0      	nop			; (mov r8, r8)
 80029d4:	40010800 	.word	0x40010800
 80029d8:	40011400 	.word	0x40011400

080029dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b082      	sub	sp, #8
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	2202      	movs	r2, #2
 80029ec:	4013      	ands	r3, r2
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d124      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	2202      	movs	r2, #2
 80029fa:	4013      	ands	r3, r2
 80029fc:	2b02      	cmp	r3, #2
 80029fe:	d11d      	bne.n	8002a3c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2203      	movs	r2, #3
 8002a06:	4252      	negs	r2, r2
 8002a08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	2203      	movs	r2, #3
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d004      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	0018      	movs	r0, r3
 8002a20:	f000 f996 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e007      	b.n	8002a36 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	0018      	movs	r0, r3
 8002a2a:	f000 f989 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	0018      	movs	r0, r3
 8002a32:	f000 f995 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	2204      	movs	r2, #4
 8002a44:	4013      	ands	r3, r2
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d125      	bne.n	8002a96 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	2204      	movs	r2, #4
 8002a52:	4013      	ands	r3, r2
 8002a54:	2b04      	cmp	r3, #4
 8002a56:	d11e      	bne.n	8002a96 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2205      	movs	r2, #5
 8002a5e:	4252      	negs	r2, r2
 8002a60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2202      	movs	r2, #2
 8002a66:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	699a      	ldr	r2, [r3, #24]
 8002a6e:	23c0      	movs	r3, #192	; 0xc0
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4013      	ands	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	0018      	movs	r0, r3
 8002a7a:	f000 f969 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002a7e:	e007      	b.n	8002a90 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	0018      	movs	r0, r3
 8002a84:	f000 f95c 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	0018      	movs	r0, r3
 8002a8c:	f000 f968 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2200      	movs	r2, #0
 8002a94:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	691b      	ldr	r3, [r3, #16]
 8002a9c:	2208      	movs	r2, #8
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	2b08      	cmp	r3, #8
 8002aa2:	d124      	bne.n	8002aee <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	2208      	movs	r2, #8
 8002aac:	4013      	ands	r3, r2
 8002aae:	2b08      	cmp	r3, #8
 8002ab0:	d11d      	bne.n	8002aee <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	2209      	movs	r2, #9
 8002ab8:	4252      	negs	r2, r2
 8002aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2204      	movs	r2, #4
 8002ac0:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	69db      	ldr	r3, [r3, #28]
 8002ac8:	2203      	movs	r2, #3
 8002aca:	4013      	ands	r3, r2
 8002acc:	d004      	beq.n	8002ad8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	0018      	movs	r0, r3
 8002ad2:	f000 f93d 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002ad6:	e007      	b.n	8002ae8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	0018      	movs	r0, r3
 8002adc:	f000 f930 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	0018      	movs	r0, r3
 8002ae4:	f000 f93c 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	691b      	ldr	r3, [r3, #16]
 8002af4:	2210      	movs	r2, #16
 8002af6:	4013      	ands	r3, r2
 8002af8:	2b10      	cmp	r3, #16
 8002afa:	d125      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	2210      	movs	r2, #16
 8002b04:	4013      	ands	r3, r2
 8002b06:	2b10      	cmp	r3, #16
 8002b08:	d11e      	bne.n	8002b48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2211      	movs	r2, #17
 8002b10:	4252      	negs	r2, r2
 8002b12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2208      	movs	r2, #8
 8002b18:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69da      	ldr	r2, [r3, #28]
 8002b20:	23c0      	movs	r3, #192	; 0xc0
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4013      	ands	r3, r2
 8002b26:	d004      	beq.n	8002b32 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	0018      	movs	r0, r3
 8002b2c:	f000 f910 	bl	8002d50 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e007      	b.n	8002b42 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	0018      	movs	r0, r3
 8002b36:	f000 f903 	bl	8002d40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 f90f 	bl	8002d60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2200      	movs	r2, #0
 8002b46:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	691b      	ldr	r3, [r3, #16]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d10f      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d108      	bne.n	8002b76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2202      	movs	r2, #2
 8002b6a:	4252      	negs	r2, r2
 8002b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	0018      	movs	r0, r3
 8002b72:	f001 fa79 	bl	8004068 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	691b      	ldr	r3, [r3, #16]
 8002b7c:	2240      	movs	r2, #64	; 0x40
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d10f      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	68db      	ldr	r3, [r3, #12]
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	2b40      	cmp	r3, #64	; 0x40
 8002b90:	d108      	bne.n	8002ba4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2241      	movs	r2, #65	; 0x41
 8002b98:	4252      	negs	r2, r2
 8002b9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	f000 f8e6 	bl	8002d70 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ba4:	46c0      	nop			; (mov r8, r8)
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b002      	add	sp, #8
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2238      	movs	r2, #56	; 0x38
 8002bba:	5c9b      	ldrb	r3, [r3, r2]
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d101      	bne.n	8002bc4 <HAL_TIM_ConfigClockSource+0x18>
 8002bc0:	2302      	movs	r3, #2
 8002bc2:	e0b7      	b.n	8002d34 <HAL_TIM_ConfigClockSource+0x188>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2238      	movs	r2, #56	; 0x38
 8002bc8:	2101      	movs	r1, #1
 8002bca:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2239      	movs	r2, #57	; 0x39
 8002bd0:	2102      	movs	r1, #2
 8002bd2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2277      	movs	r2, #119	; 0x77
 8002be0:	4393      	bics	r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	4a55      	ldr	r2, [pc, #340]	; (8002d3c <HAL_TIM_ConfigClockSource+0x190>)
 8002be8:	4013      	ands	r3, r2
 8002bea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	0192      	lsls	r2, r2, #6
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d040      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xd6>
 8002c00:	2280      	movs	r2, #128	; 0x80
 8002c02:	0192      	lsls	r2, r2, #6
 8002c04:	4293      	cmp	r3, r2
 8002c06:	d900      	bls.n	8002c0a <HAL_TIM_ConfigClockSource+0x5e>
 8002c08:	e088      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	0152      	lsls	r2, r2, #5
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d100      	bne.n	8002c14 <HAL_TIM_ConfigClockSource+0x68>
 8002c12:	e085      	b.n	8002d20 <HAL_TIM_ConfigClockSource+0x174>
 8002c14:	2280      	movs	r2, #128	; 0x80
 8002c16:	0152      	lsls	r2, r2, #5
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d900      	bls.n	8002c1e <HAL_TIM_ConfigClockSource+0x72>
 8002c1c:	e07e      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c1e:	2b70      	cmp	r3, #112	; 0x70
 8002c20:	d018      	beq.n	8002c54 <HAL_TIM_ConfigClockSource+0xa8>
 8002c22:	d900      	bls.n	8002c26 <HAL_TIM_ConfigClockSource+0x7a>
 8002c24:	e07a      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c26:	2b60      	cmp	r3, #96	; 0x60
 8002c28:	d04f      	beq.n	8002cca <HAL_TIM_ConfigClockSource+0x11e>
 8002c2a:	d900      	bls.n	8002c2e <HAL_TIM_ConfigClockSource+0x82>
 8002c2c:	e076      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c2e:	2b50      	cmp	r3, #80	; 0x50
 8002c30:	d03b      	beq.n	8002caa <HAL_TIM_ConfigClockSource+0xfe>
 8002c32:	d900      	bls.n	8002c36 <HAL_TIM_ConfigClockSource+0x8a>
 8002c34:	e072      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d057      	beq.n	8002cea <HAL_TIM_ConfigClockSource+0x13e>
 8002c3a:	d900      	bls.n	8002c3e <HAL_TIM_ConfigClockSource+0x92>
 8002c3c:	e06e      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c3e:	2b30      	cmp	r3, #48	; 0x30
 8002c40:	d063      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c42:	d86b      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c44:	2b20      	cmp	r3, #32
 8002c46:	d060      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c48:	d868      	bhi.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d05d      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
 8002c4e:	2b10      	cmp	r3, #16
 8002c50:	d05b      	beq.n	8002d0a <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c52:	e063      	b.n	8002d1c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6818      	ldr	r0, [r3, #0]
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	6899      	ldr	r1, [r3, #8]
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	f000 f95a 	bl	8002f1c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2277      	movs	r2, #119	; 0x77
 8002c74:	4313      	orrs	r3, r2
 8002c76:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	68fa      	ldr	r2, [r7, #12]
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e04f      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6899      	ldr	r1, [r3, #8]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685a      	ldr	r2, [r3, #4]
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	68db      	ldr	r3, [r3, #12]
 8002c92:	f000 f943 	bl	8002f1c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	689a      	ldr	r2, [r3, #8]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2180      	movs	r1, #128	; 0x80
 8002ca2:	01c9      	lsls	r1, r1, #7
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	609a      	str	r2, [r3, #8]
      break;
 8002ca8:	e03b      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6818      	ldr	r0, [r3, #0]
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	6859      	ldr	r1, [r3, #4]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	001a      	movs	r2, r3
 8002cb8:	f000 f8b6 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	2150      	movs	r1, #80	; 0x50
 8002cc2:	0018      	movs	r0, r3
 8002cc4:	f000 f910 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002cc8:	e02b      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6818      	ldr	r0, [r3, #0]
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	6859      	ldr	r1, [r3, #4]
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	68db      	ldr	r3, [r3, #12]
 8002cd6:	001a      	movs	r2, r3
 8002cd8:	f000 f8d4 	bl	8002e84 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2160      	movs	r1, #96	; 0x60
 8002ce2:	0018      	movs	r0, r3
 8002ce4:	f000 f900 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002ce8:	e01b      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6818      	ldr	r0, [r3, #0]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	6859      	ldr	r1, [r3, #4]
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	001a      	movs	r2, r3
 8002cf8:	f000 f896 	bl	8002e28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2140      	movs	r1, #64	; 0x40
 8002d02:	0018      	movs	r0, r3
 8002d04:	f000 f8f0 	bl	8002ee8 <TIM_ITRx_SetConfig>
      break;
 8002d08:	e00b      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681a      	ldr	r2, [r3, #0]
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	0019      	movs	r1, r3
 8002d14:	0010      	movs	r0, r2
 8002d16:	f000 f8e7 	bl	8002ee8 <TIM_ITRx_SetConfig>
        break;
 8002d1a:	e002      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002d1c:	46c0      	nop			; (mov r8, r8)
 8002d1e:	e000      	b.n	8002d22 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002d20:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2239      	movs	r2, #57	; 0x39
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2238      	movs	r2, #56	; 0x38
 8002d2e:	2100      	movs	r1, #0
 8002d30:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	0018      	movs	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b004      	add	sp, #16
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	ffff00ff 	.word	0xffff00ff

08002d40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d48:	46c0      	nop			; (mov r8, r8)
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	b002      	add	sp, #8
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d58:	46c0      	nop			; (mov r8, r8)
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	b002      	add	sp, #8
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d78:	46c0      	nop			; (mov r8, r8)
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	b002      	add	sp, #8
 8002d7e:	bd80      	pop	{r7, pc}

08002d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b084      	sub	sp, #16
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	05db      	lsls	r3, r3, #23
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d007      	beq.n	8002daa <TIM_Base_SetConfig+0x2a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1f      	ldr	r2, [pc, #124]	; (8002e1c <TIM_Base_SetConfig+0x9c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d003      	beq.n	8002daa <TIM_Base_SetConfig+0x2a>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a1e      	ldr	r2, [pc, #120]	; (8002e20 <TIM_Base_SetConfig+0xa0>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d108      	bne.n	8002dbc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2270      	movs	r2, #112	; 0x70
 8002dae:	4393      	bics	r3, r2
 8002db0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	68fa      	ldr	r2, [r7, #12]
 8002db8:	4313      	orrs	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	05db      	lsls	r3, r3, #23
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d007      	beq.n	8002dd6 <TIM_Base_SetConfig+0x56>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a14      	ldr	r2, [pc, #80]	; (8002e1c <TIM_Base_SetConfig+0x9c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d003      	beq.n	8002dd6 <TIM_Base_SetConfig+0x56>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a13      	ldr	r2, [pc, #76]	; (8002e20 <TIM_Base_SetConfig+0xa0>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d108      	bne.n	8002de8 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	4a12      	ldr	r2, [pc, #72]	; (8002e24 <TIM_Base_SetConfig+0xa4>)
 8002dda:	4013      	ands	r3, r2
 8002ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	68db      	ldr	r3, [r3, #12]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2280      	movs	r2, #128	; 0x80
 8002dec:	4393      	bics	r3, r2
 8002dee:	001a      	movs	r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	4313      	orrs	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	689a      	ldr	r2, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2201      	movs	r2, #1
 8002e12:	615a      	str	r2, [r3, #20]
}
 8002e14:	46c0      	nop			; (mov r8, r8)
 8002e16:	46bd      	mov	sp, r7
 8002e18:	b004      	add	sp, #16
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40010800 	.word	0x40010800
 8002e20:	40011400 	.word	0x40011400
 8002e24:	fffffcff 	.word	0xfffffcff

08002e28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	6a1b      	ldr	r3, [r3, #32]
 8002e38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	6a1b      	ldr	r3, [r3, #32]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	4393      	bics	r3, r2
 8002e42:	001a      	movs	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	699b      	ldr	r3, [r3, #24]
 8002e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	22f0      	movs	r2, #240	; 0xf0
 8002e52:	4393      	bics	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	011b      	lsls	r3, r3, #4
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	220a      	movs	r2, #10
 8002e64:	4393      	bics	r3, r2
 8002e66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	693a      	ldr	r2, [r7, #16]
 8002e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	697a      	ldr	r2, [r7, #20]
 8002e7a:	621a      	str	r2, [r3, #32]
}
 8002e7c:	46c0      	nop			; (mov r8, r8)
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	b006      	add	sp, #24
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	2210      	movs	r2, #16
 8002e96:	4393      	bics	r3, r2
 8002e98:	001a      	movs	r2, r3
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6a1b      	ldr	r3, [r3, #32]
 8002ea8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	4a0d      	ldr	r2, [pc, #52]	; (8002ee4 <TIM_TI2_ConfigInputStage+0x60>)
 8002eae:	4013      	ands	r3, r2
 8002eb0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	031b      	lsls	r3, r3, #12
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	22a0      	movs	r2, #160	; 0xa0
 8002ec0:	4393      	bics	r3, r2
 8002ec2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	693a      	ldr	r2, [r7, #16]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	693a      	ldr	r2, [r7, #16]
 8002ed8:	621a      	str	r2, [r3, #32]
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b006      	add	sp, #24
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	46c0      	nop			; (mov r8, r8)
 8002ee4:	ffff0fff 	.word	0xffff0fff

08002ee8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2270      	movs	r2, #112	; 0x70
 8002efc:	4393      	bics	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	2207      	movs	r2, #7
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68fa      	ldr	r2, [r7, #12]
 8002f10:	609a      	str	r2, [r3, #8]
}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	46bd      	mov	sp, r7
 8002f16:	b004      	add	sp, #16
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	4a09      	ldr	r2, [pc, #36]	; (8002f58 <TIM_ETR_SetConfig+0x3c>)
 8002f34:	4013      	ands	r3, r2
 8002f36:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	021a      	lsls	r2, r3, #8
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	4313      	orrs	r3, r2
 8002f44:	697a      	ldr	r2, [r7, #20]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	609a      	str	r2, [r3, #8]
}
 8002f50:	46c0      	nop			; (mov r8, r8)
 8002f52:	46bd      	mov	sp, r7
 8002f54:	b006      	add	sp, #24
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	ffff00ff 	.word	0xffff00ff

08002f5c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2238      	movs	r2, #56	; 0x38
 8002f6a:	5c9b      	ldrb	r3, [r3, r2]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	d101      	bne.n	8002f74 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f70:	2302      	movs	r3, #2
 8002f72:	e042      	b.n	8002ffa <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2238      	movs	r2, #56	; 0x38
 8002f78:	2101      	movs	r1, #1
 8002f7a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2239      	movs	r2, #57	; 0x39
 8002f80:	2102      	movs	r1, #2
 8002f82:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2270      	movs	r2, #112	; 0x70
 8002f98:	4393      	bics	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	68fa      	ldr	r2, [r7, #12]
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68fa      	ldr	r2, [r7, #12]
 8002fac:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	2380      	movs	r3, #128	; 0x80
 8002fb4:	05db      	lsls	r3, r3, #23
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d009      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4a11      	ldr	r2, [pc, #68]	; (8003004 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fc0:	4293      	cmp	r3, r2
 8002fc2:	d004      	beq.n	8002fce <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a0f      	ldr	r2, [pc, #60]	; (8003008 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d10c      	bne.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2280      	movs	r2, #128	; 0x80
 8002fd2:	4393      	bics	r3, r2
 8002fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2239      	movs	r2, #57	; 0x39
 8002fec:	2101      	movs	r1, #1
 8002fee:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2238      	movs	r2, #56	; 0x38
 8002ff4:	2100      	movs	r1, #0
 8002ff6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	0018      	movs	r0, r3
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	b004      	add	sp, #16
 8003000:	bd80      	pop	{r7, pc}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	40010800 	.word	0x40010800
 8003008:	40011400 	.word	0x40011400

0800300c <internal_bus_create>:
#include "Bus.h"

InternalBus_t * internal_bus_create(GPIO_TypeDef *bus_line,uint16_t bus_pins,GPIO_TypeDef *cl_bus,uint16_t cl_pin,GPIO_TypeDef *ak_bus,uint16_t ak_pin)
{
 800300c:	b5b0      	push	{r4, r5, r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	0008      	movs	r0, r1
 8003016:	607a      	str	r2, [r7, #4]
 8003018:	0019      	movs	r1, r3
 800301a:	240a      	movs	r4, #10
 800301c:	193b      	adds	r3, r7, r4
 800301e:	1c02      	adds	r2, r0, #0
 8003020:	801a      	strh	r2, [r3, #0]
 8003022:	2508      	movs	r5, #8
 8003024:	197b      	adds	r3, r7, r5
 8003026:	1c0a      	adds	r2, r1, #0
 8003028:	801a      	strh	r2, [r3, #0]
	InternalBus_t * thisInternalBus = (InternalBus_t *) malloc(sizeof(InternalBus_t));
 800302a:	203c      	movs	r0, #60	; 0x3c
 800302c:	f001 fe1e 	bl	8004c6c <malloc>
 8003030:	0003      	movs	r3, r0
 8003032:	61bb      	str	r3, [r7, #24]
	if(thisInternalBus != NULL)
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d100      	bne.n	800303c <internal_bus_create+0x30>
 800303a:	e14d      	b.n	80032d8 <internal_bus_create+0x2cc>
	{
		//assign desired value for clock pin and other bus  so this bus will now which pins assigned for clock ack and bus line it self
		//everything else in this lib should use this data for other settings
		thisInternalBus->bus = bus_line;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]
		thisInternalBus->bus_mask = bus_pins;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	193a      	adds	r2, r7, r4
 8003046:	8812      	ldrh	r2, [r2, #0]
 8003048:	809a      	strh	r2, [r3, #4]
		thisInternalBus->BUS_BUSMASK32 = 0;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2200      	movs	r2, #0
 800304e:	609a      	str	r2, [r3, #8]
		thisInternalBus->BUS_BUSMODER = 0;
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2200      	movs	r2, #0
 8003054:	60da      	str	r2, [r3, #12]
		thisInternalBus->BUS_BUSOSPEEDR = 0;
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2200      	movs	r2, #0
 800305a:	611a      	str	r2, [r3, #16]

		thisInternalBus->bus_clk = cl_bus;
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	615a      	str	r2, [r3, #20]
		thisInternalBus->bus_clk_mask = cl_pin;
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	197a      	adds	r2, r7, r5
 8003066:	8812      	ldrh	r2, [r2, #0]
 8003068:	831a      	strh	r2, [r3, #24]
		thisInternalBus->BUS_CLKMASK32 = 0;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2200      	movs	r2, #0
 800306e:	61da      	str	r2, [r3, #28]
		thisInternalBus->BUS_CLKMODER = 0;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2200      	movs	r2, #0
 8003074:	621a      	str	r2, [r3, #32]
		thisInternalBus->BUS_CLKOSPEEDR = 0;
 8003076:	69bb      	ldr	r3, [r7, #24]
 8003078:	2200      	movs	r2, #0
 800307a:	625a      	str	r2, [r3, #36]	; 0x24

		thisInternalBus->bus_ack = ak_bus;
 800307c:	69bb      	ldr	r3, [r7, #24]
 800307e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003080:	629a      	str	r2, [r3, #40]	; 0x28
		thisInternalBus->bus_ack_mask = ak_pin;
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	222c      	movs	r2, #44	; 0x2c
 8003086:	2108      	movs	r1, #8
 8003088:	468c      	mov	ip, r1
 800308a:	44bc      	add	ip, r7
 800308c:	4462      	add	r2, ip
 800308e:	8812      	ldrh	r2, [r2, #0]
 8003090:	859a      	strh	r2, [r3, #44]	; 0x2c
		thisInternalBus->BUS_ACKMASK32 = 0;
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
		thisInternalBus->BUS_ACKMODER = 0;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2200      	movs	r2, #0
 800309c:	635a      	str	r2, [r3, #52]	; 0x34
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	2200      	movs	r2, #0
 80030a2:	639a      	str	r2, [r3, #56]	; 0x38

		uint32_t pinShifter = 0;
 80030a4:	2300      	movs	r3, #0
 80030a6:	61fb      	str	r3, [r7, #28]
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
 80030a8:	2300      	movs	r3, #0
 80030aa:	61fb      	str	r3, [r7, #28]
 80030ac:	e07a      	b.n	80031a4 <internal_bus_create+0x198>
		{
			if (bus_pins & (1 << pinShifter))
 80030ae:	230a      	movs	r3, #10
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	881a      	ldrh	r2, [r3, #0]
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	411a      	asrs	r2, r3
 80030b8:	0013      	movs	r3, r2
 80030ba:	2201      	movs	r2, #1
 80030bc:	4013      	ands	r3, r2
 80030be:	d01d      	beq.n	80030fc <internal_bus_create+0xf0>
			{
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	69fa      	ldr	r2, [r7, #28]
 80030c6:	0052      	lsls	r2, r2, #1
 80030c8:	2103      	movs	r1, #3
 80030ca:	4091      	lsls	r1, r2
 80030cc:	000a      	movs	r2, r1
 80030ce:	431a      	orrs	r2, r3
 80030d0:	69bb      	ldr	r3, [r7, #24]
 80030d2:	609a      	str	r2, [r3, #8]
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 80030d4:	69bb      	ldr	r3, [r7, #24]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	69fa      	ldr	r2, [r7, #28]
 80030da:	0052      	lsls	r2, r2, #1
 80030dc:	2101      	movs	r1, #1
 80030de:	4091      	lsls	r1, r2
 80030e0:	000a      	movs	r2, r1
 80030e2:	431a      	orrs	r2, r3
 80030e4:	69bb      	ldr	r3, [r7, #24]
 80030e6:	60da      	str	r2, [r3, #12]
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	69fa      	ldr	r2, [r7, #28]
 80030ee:	0052      	lsls	r2, r2, #1
 80030f0:	2103      	movs	r1, #3
 80030f2:	4091      	lsls	r1, r2
 80030f4:	000a      	movs	r2, r1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	611a      	str	r2, [r3, #16]
			}
			if (cl_pin & (1 << pinShifter))
 80030fc:	2308      	movs	r3, #8
 80030fe:	18fb      	adds	r3, r7, r3
 8003100:	881a      	ldrh	r2, [r3, #0]
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	411a      	asrs	r2, r3
 8003106:	0013      	movs	r3, r2
 8003108:	2201      	movs	r2, #1
 800310a:	4013      	ands	r3, r2
 800310c:	d01d      	beq.n	800314a <internal_bus_create+0x13e>
			{
				thisInternalBus->BUS_CLKMASK32  |= (0b11 << (pinShifter * 2));
 800310e:	69bb      	ldr	r3, [r7, #24]
 8003110:	69db      	ldr	r3, [r3, #28]
 8003112:	69fa      	ldr	r2, [r7, #28]
 8003114:	0052      	lsls	r2, r2, #1
 8003116:	2103      	movs	r1, #3
 8003118:	4091      	lsls	r1, r2
 800311a:	000a      	movs	r2, r1
 800311c:	431a      	orrs	r2, r3
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	61da      	str	r2, [r3, #28]
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 8003122:	69bb      	ldr	r3, [r7, #24]
 8003124:	6a1b      	ldr	r3, [r3, #32]
 8003126:	69fa      	ldr	r2, [r7, #28]
 8003128:	0052      	lsls	r2, r2, #1
 800312a:	2101      	movs	r1, #1
 800312c:	4091      	lsls	r1, r2
 800312e:	000a      	movs	r2, r1
 8003130:	431a      	orrs	r2, r3
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	621a      	str	r2, [r3, #32]
				thisInternalBus->BUS_CLKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	69fa      	ldr	r2, [r7, #28]
 800313c:	0052      	lsls	r2, r2, #1
 800313e:	2103      	movs	r1, #3
 8003140:	4091      	lsls	r1, r2
 8003142:	000a      	movs	r2, r1
 8003144:	431a      	orrs	r2, r3
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (ak_pin & (1 << pinShifter))
 800314a:	232c      	movs	r3, #44	; 0x2c
 800314c:	2208      	movs	r2, #8
 800314e:	4694      	mov	ip, r2
 8003150:	44bc      	add	ip, r7
 8003152:	4463      	add	r3, ip
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	411a      	asrs	r2, r3
 800315a:	0013      	movs	r3, r2
 800315c:	2201      	movs	r2, #1
 800315e:	4013      	ands	r3, r2
 8003160:	d01d      	beq.n	800319e <internal_bus_create+0x192>
			{
				thisInternalBus->BUS_ACKMASK32  |= (0b11 << (pinShifter * 2));
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	69fa      	ldr	r2, [r7, #28]
 8003168:	0052      	lsls	r2, r2, #1
 800316a:	2103      	movs	r1, #3
 800316c:	4091      	lsls	r1, r2
 800316e:	000a      	movs	r2, r1
 8003170:	431a      	orrs	r2, r3
 8003172:	69bb      	ldr	r3, [r7, #24]
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
				thisInternalBus->BUS_ACKMODER   |= (0b01 << (pinShifter * 2));
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	0052      	lsls	r2, r2, #1
 800317e:	2101      	movs	r1, #1
 8003180:	4091      	lsls	r1, r2
 8003182:	000a      	movs	r2, r1
 8003184:	431a      	orrs	r2, r3
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	635a      	str	r2, [r3, #52]	; 0x34
				thisInternalBus->BUS_ACKOSPEEDR |= (0b11 << (pinShifter * 2));
 800318a:	69bb      	ldr	r3, [r7, #24]
 800318c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	0052      	lsls	r2, r2, #1
 8003192:	2103      	movs	r1, #3
 8003194:	4091      	lsls	r1, r2
 8003196:	000a      	movs	r2, r1
 8003198:	431a      	orrs	r2, r3
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	3301      	adds	r3, #1
 80031a2:	61fb      	str	r3, [r7, #28]
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	2b0f      	cmp	r3, #15
 80031a8:	d800      	bhi.n	80031ac <internal_bus_create+0x1a0>
 80031aa:	e780      	b.n	80030ae <internal_bus_create+0xa2>
			}
		}

		uint32_t temp = 0;
 80031ac:	2300      	movs	r3, #0
 80031ae:	617b      	str	r3, [r7, #20]
		//Set main bus output speed to very high
		temp = thisInternalBus->bus->OSPEEDR;
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	43da      	mvns	r2, r3
 80031be:	697b      	ldr	r3, [r7, #20]
 80031c0:	4013      	ands	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]
		temp |= thisInternalBus->BUS_BUSOSPEEDR;
 80031c4:	69bb      	ldr	r3, [r7, #24]
 80031c6:	691b      	ldr	r3, [r3, #16]
 80031c8:	697a      	ldr	r2, [r7, #20]
 80031ca:	4313      	orrs	r3, r2
 80031cc:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus->OSPEEDR = temp;
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	697a      	ldr	r2, [r7, #20]
 80031d4:	609a      	str	r2, [r3, #8]
		//Set main bus output type to output push-pull
		temp = thisInternalBus->bus->OTYPER;
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->bus_mask;
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	889b      	ldrh	r3, [r3, #4]
 80031e2:	43db      	mvns	r3, r3
 80031e4:	001a      	movs	r2, r3
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	4013      	ands	r3, r2
 80031ea:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus->OTYPER = temp;
 80031ec:	69bb      	ldr	r3, [r7, #24]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	605a      	str	r2, [r3, #4]
		//Set main bus pullup/down resistors to none
		temp = thisInternalBus->bus->PUPDR;
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68db      	ldr	r3, [r3, #12]
 80031fa:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 80031fc:	69bb      	ldr	r3, [r7, #24]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	43da      	mvns	r2, r3
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus->PUPDR = temp;
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	697a      	ldr	r2, [r7, #20]
 800320e:	60da      	str	r2, [r3, #12]

		//Set Clock line, output speed to very high
		temp = thisInternalBus->bus_clk->OSPEEDR;
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	695b      	ldr	r3, [r3, #20]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	43da      	mvns	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	4013      	ands	r3, r2
 8003222:	617b      	str	r3, [r7, #20]
		temp |= thisInternalBus->BUS_CLKOSPEEDR;
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	697a      	ldr	r2, [r7, #20]
 800322a:	4313      	orrs	r3, r2
 800322c:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_clk->OSPEEDR = temp;
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	695b      	ldr	r3, [r3, #20]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	609a      	str	r2, [r3, #8]
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_clk->OTYPER;
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->bus_clk_mask;
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	8b1b      	ldrh	r3, [r3, #24]
 8003242:	43db      	mvns	r3, r3
 8003244:	001a      	movs	r2, r3
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4013      	ands	r3, r2
 800324a:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_clk->OTYPER = temp;
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	605a      	str	r2, [r3, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_clk->PUPDR;
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	68db      	ldr	r3, [r3, #12]
 800325a:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 800325c:	69bb      	ldr	r3, [r7, #24]
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	43da      	mvns	r2, r3
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4013      	ands	r3, r2
 8003266:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_clk->PUPDR = temp;
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	695b      	ldr	r3, [r3, #20]
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	60da      	str	r2, [r3, #12]

		//Set Ack line, output speed to very high
		temp = thisInternalBus->bus_ack->OSPEEDR;
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327c:	43da      	mvns	r2, r3
 800327e:	697b      	ldr	r3, [r7, #20]
 8003280:	4013      	ands	r3, r2
 8003282:	617b      	str	r3, [r7, #20]
		temp |= thisInternalBus->BUS_ACKOSPEEDR;
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003288:	697a      	ldr	r2, [r7, #20]
 800328a:	4313      	orrs	r3, r2
 800328c:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_ack->OSPEEDR = temp;
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003292:	697a      	ldr	r2, [r7, #20]
 8003294:	609a      	str	r2, [r3, #8]
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_ack->OTYPER;
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->bus_ack_mask;
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80032a2:	43db      	mvns	r3, r3
 80032a4:	001a      	movs	r2, r3
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	4013      	ands	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_ack->OTYPER = temp;
 80032ac:	69bb      	ldr	r3, [r7, #24]
 80032ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	605a      	str	r2, [r3, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_ack->PUPDR;
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c0:	43da      	mvns	r2, r3
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	4013      	ands	r3, r2
 80032c6:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_ack->PUPDR = temp;
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	697a      	ldr	r2, [r7, #20]
 80032ce:	60da      	str	r2, [r3, #12]

		//by default we do not have to take the bus before any persmission from the master micro
		internal_bus_release(thisInternalBus);
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	0018      	movs	r0, r3
 80032d4:	f000 fb3a 	bl	800394c <internal_bus_release>
	}
	else
	{
		//TODO  erro handler
	}
	return thisInternalBus;
 80032d8:	69bb      	ldr	r3, [r7, #24]
}
 80032da:	0018      	movs	r0, r3
 80032dc:	46bd      	mov	sp, r7
 80032de:	b008      	add	sp, #32
 80032e0:	bdb0      	pop	{r4, r5, r7, pc}

080032e2 <internal_bus_write_data_frame>:

inline void internal_bus_write_data_frame(InternalBus_t *thisInternalBus, uint32_t *buffer, uint8_t buffer_len)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	b086      	sub	sp, #24
 80032e6:	af00      	add	r7, sp, #0
 80032e8:	60f8      	str	r0, [r7, #12]
 80032ea:	60b9      	str	r1, [r7, #8]
 80032ec:	1dfb      	adds	r3, r7, #7
 80032ee:	701a      	strb	r2, [r3, #0]
	//TODO Link data output to magnetometer memory instead

	internal_bus_utilize(thisInternalBus);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f000 fae2 	bl	80038bc <internal_bus_utilize>
		thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;
		thisInternalBus->bus->BSRR = buffer[buf_cnt];
		thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
	}*/
	//this code is 3 time faster than loop
	uint8_t buf_cnt=0;
 80032f8:	2017      	movs	r0, #23
 80032fa:	183b      	adds	r3, r7, r0
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	8b1a      	ldrh	r2, [r3, #24]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	619a      	str	r2, [r3, #24]
 800330a:	183b      	adds	r3, r7, r0
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	183a      	adds	r2, r7, r0
 8003310:	1c59      	adds	r1, r3, #1
 8003312:	7011      	strb	r1, [r2, #0]
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	18d2      	adds	r2, r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6812      	ldr	r2, [r2, #0]
 8003320:	619a      	str	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8b1a      	ldrh	r2, [r3, #24]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8b1a      	ldrh	r2, [r3, #24]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	695b      	ldr	r3, [r3, #20]
 8003334:	619a      	str	r2, [r3, #24]
 8003336:	183b      	adds	r3, r7, r0
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	183a      	adds	r2, r7, r0
 800333c:	1c59      	adds	r1, r3, #1
 800333e:	7011      	strb	r1, [r2, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	68ba      	ldr	r2, [r7, #8]
 8003344:	18d2      	adds	r2, r2, r3
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6812      	ldr	r2, [r2, #0]
 800334c:	619a      	str	r2, [r3, #24]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	8b1a      	ldrh	r2, [r3, #24]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	695b      	ldr	r3, [r3, #20]
 8003356:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8b1a      	ldrh	r2, [r3, #24]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	695b      	ldr	r3, [r3, #20]
 8003360:	619a      	str	r2, [r3, #24]
 8003362:	183b      	adds	r3, r7, r0
 8003364:	781b      	ldrb	r3, [r3, #0]
 8003366:	183a      	adds	r2, r7, r0
 8003368:	1c59      	adds	r1, r3, #1
 800336a:	7011      	strb	r1, [r2, #0]
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	68ba      	ldr	r2, [r7, #8]
 8003370:	18d2      	adds	r2, r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6812      	ldr	r2, [r2, #0]
 8003378:	619a      	str	r2, [r3, #24]
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	8b1a      	ldrh	r2, [r3, #24]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	695b      	ldr	r3, [r3, #20]
 8003382:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	8b1a      	ldrh	r2, [r3, #24]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	695b      	ldr	r3, [r3, #20]
 800338c:	619a      	str	r2, [r3, #24]
 800338e:	183b      	adds	r3, r7, r0
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	183a      	adds	r2, r7, r0
 8003394:	1c59      	adds	r1, r3, #1
 8003396:	7011      	strb	r1, [r2, #0]
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	68ba      	ldr	r2, [r7, #8]
 800339c:	18d2      	adds	r2, r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	619a      	str	r2, [r3, #24]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	8b1a      	ldrh	r2, [r3, #24]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8b1a      	ldrh	r2, [r3, #24]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	695b      	ldr	r3, [r3, #20]
 80033b8:	619a      	str	r2, [r3, #24]
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	781b      	ldrb	r3, [r3, #0]
 80033be:	183a      	adds	r2, r7, r0
 80033c0:	1c59      	adds	r1, r3, #1
 80033c2:	7011      	strb	r1, [r2, #0]
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	18d2      	adds	r2, r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	6812      	ldr	r2, [r2, #0]
 80033d0:	619a      	str	r2, [r3, #24]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8b1a      	ldrh	r2, [r3, #24]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8b1a      	ldrh	r2, [r3, #24]
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	695b      	ldr	r3, [r3, #20]
 80033e4:	619a      	str	r2, [r3, #24]
 80033e6:	183b      	adds	r3, r7, r0
 80033e8:	781b      	ldrb	r3, [r3, #0]
 80033ea:	183a      	adds	r2, r7, r0
 80033ec:	1c59      	adds	r1, r3, #1
 80033ee:	7011      	strb	r1, [r2, #0]
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	18d2      	adds	r2, r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	619a      	str	r2, [r3, #24]
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	8b1a      	ldrh	r2, [r3, #24]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	695b      	ldr	r3, [r3, #20]
 8003406:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	8b1a      	ldrh	r2, [r3, #24]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	695b      	ldr	r3, [r3, #20]
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	183b      	adds	r3, r7, r0
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	183a      	adds	r2, r7, r0
 8003418:	1c59      	adds	r1, r3, #1
 800341a:	7011      	strb	r1, [r2, #0]
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	68ba      	ldr	r2, [r7, #8]
 8003420:	18d2      	adds	r2, r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6812      	ldr	r2, [r2, #0]
 8003428:	619a      	str	r2, [r3, #24]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8b1a      	ldrh	r2, [r3, #24]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	695b      	ldr	r3, [r3, #20]
 8003432:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	8b1a      	ldrh	r2, [r3, #24]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	619a      	str	r2, [r3, #24]
 800343e:	183b      	adds	r3, r7, r0
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	183a      	adds	r2, r7, r0
 8003444:	1c59      	adds	r1, r3, #1
 8003446:	7011      	strb	r1, [r2, #0]
 8003448:	009b      	lsls	r3, r3, #2
 800344a:	68ba      	ldr	r2, [r7, #8]
 800344c:	18d2      	adds	r2, r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6812      	ldr	r2, [r2, #0]
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8b1a      	ldrh	r2, [r3, #24]
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	695b      	ldr	r3, [r3, #20]
 800345e:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	8b1a      	ldrh	r2, [r3, #24]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	695b      	ldr	r3, [r3, #20]
 8003468:	619a      	str	r2, [r3, #24]
 800346a:	183b      	adds	r3, r7, r0
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	183a      	adds	r2, r7, r0
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	7011      	strb	r1, [r2, #0]
 8003474:	009b      	lsls	r3, r3, #2
 8003476:	68ba      	ldr	r2, [r7, #8]
 8003478:	18d2      	adds	r2, r2, r3
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6812      	ldr	r2, [r2, #0]
 8003480:	619a      	str	r2, [r3, #24]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8b1a      	ldrh	r2, [r3, #24]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8b1a      	ldrh	r2, [r3, #24]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	619a      	str	r2, [r3, #24]
 8003496:	183b      	adds	r3, r7, r0
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	183a      	adds	r2, r7, r0
 800349c:	1c59      	adds	r1, r3, #1
 800349e:	7011      	strb	r1, [r2, #0]
 80034a0:	009b      	lsls	r3, r3, #2
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	18d2      	adds	r2, r2, r3
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6812      	ldr	r2, [r2, #0]
 80034ac:	619a      	str	r2, [r3, #24]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8b1a      	ldrh	r2, [r3, #24]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8b1a      	ldrh	r2, [r3, #24]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	695b      	ldr	r3, [r3, #20]
 80034c0:	619a      	str	r2, [r3, #24]
 80034c2:	183b      	adds	r3, r7, r0
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	183a      	adds	r2, r7, r0
 80034c8:	1c59      	adds	r1, r3, #1
 80034ca:	7011      	strb	r1, [r2, #0]
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	68ba      	ldr	r2, [r7, #8]
 80034d0:	18d2      	adds	r2, r2, r3
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6812      	ldr	r2, [r2, #0]
 80034d8:	619a      	str	r2, [r3, #24]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	8b1a      	ldrh	r2, [r3, #24]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8b1a      	ldrh	r2, [r3, #24]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	695b      	ldr	r3, [r3, #20]
 80034ec:	619a      	str	r2, [r3, #24]
 80034ee:	183b      	adds	r3, r7, r0
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	183a      	adds	r2, r7, r0
 80034f4:	1c59      	adds	r1, r3, #1
 80034f6:	7011      	strb	r1, [r2, #0]
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	68ba      	ldr	r2, [r7, #8]
 80034fc:	18d2      	adds	r2, r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6812      	ldr	r2, [r2, #0]
 8003504:	619a      	str	r2, [r3, #24]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	8b1a      	ldrh	r2, [r3, #24]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	695b      	ldr	r3, [r3, #20]
 800350e:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8b1a      	ldrh	r2, [r3, #24]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	695b      	ldr	r3, [r3, #20]
 8003518:	619a      	str	r2, [r3, #24]
 800351a:	183b      	adds	r3, r7, r0
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	183a      	adds	r2, r7, r0
 8003520:	1c59      	adds	r1, r3, #1
 8003522:	7011      	strb	r1, [r2, #0]
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	18d2      	adds	r2, r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6812      	ldr	r2, [r2, #0]
 8003530:	619a      	str	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	8b1a      	ldrh	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	695b      	ldr	r3, [r3, #20]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8b1a      	ldrh	r2, [r3, #24]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	695b      	ldr	r3, [r3, #20]
 8003544:	619a      	str	r2, [r3, #24]
 8003546:	183b      	adds	r3, r7, r0
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	183a      	adds	r2, r7, r0
 800354c:	1c59      	adds	r1, r3, #1
 800354e:	7011      	strb	r1, [r2, #0]
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	68ba      	ldr	r2, [r7, #8]
 8003554:	18d2      	adds	r2, r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	6812      	ldr	r2, [r2, #0]
 800355c:	619a      	str	r2, [r3, #24]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8b1a      	ldrh	r2, [r3, #24]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	8b1a      	ldrh	r2, [r3, #24]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	695b      	ldr	r3, [r3, #20]
 8003570:	619a      	str	r2, [r3, #24]
 8003572:	183b      	adds	r3, r7, r0
 8003574:	781b      	ldrb	r3, [r3, #0]
 8003576:	183a      	adds	r2, r7, r0
 8003578:	1c59      	adds	r1, r3, #1
 800357a:	7011      	strb	r1, [r2, #0]
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	18d2      	adds	r2, r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	6812      	ldr	r2, [r2, #0]
 8003588:	619a      	str	r2, [r3, #24]
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	8b1a      	ldrh	r2, [r3, #24]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	8b1a      	ldrh	r2, [r3, #24]
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	619a      	str	r2, [r3, #24]
 800359e:	183b      	adds	r3, r7, r0
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	183a      	adds	r2, r7, r0
 80035a4:	1c59      	adds	r1, r3, #1
 80035a6:	7011      	strb	r1, [r2, #0]
 80035a8:	009b      	lsls	r3, r3, #2
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	18d2      	adds	r2, r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6812      	ldr	r2, [r2, #0]
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8b1a      	ldrh	r2, [r3, #24]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8b1a      	ldrh	r2, [r3, #24]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	619a      	str	r2, [r3, #24]
 80035ca:	183b      	adds	r3, r7, r0
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	183a      	adds	r2, r7, r0
 80035d0:	1c59      	adds	r1, r3, #1
 80035d2:	7011      	strb	r1, [r2, #0]
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	18d2      	adds	r2, r2, r3
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	619a      	str	r2, [r3, #24]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8b1a      	ldrh	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8b1a      	ldrh	r2, [r3, #24]
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	619a      	str	r2, [r3, #24]
 80035f6:	183b      	adds	r3, r7, r0
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	183a      	adds	r2, r7, r0
 80035fc:	1c59      	adds	r1, r3, #1
 80035fe:	7011      	strb	r1, [r2, #0]
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	68ba      	ldr	r2, [r7, #8]
 8003604:	18d2      	adds	r2, r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6812      	ldr	r2, [r2, #0]
 800360c:	619a      	str	r2, [r3, #24]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8b1a      	ldrh	r2, [r3, #24]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	695b      	ldr	r3, [r3, #20]
 8003616:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	8b1a      	ldrh	r2, [r3, #24]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	695b      	ldr	r3, [r3, #20]
 8003620:	619a      	str	r2, [r3, #24]
 8003622:	183b      	adds	r3, r7, r0
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	183a      	adds	r2, r7, r0
 8003628:	1c59      	adds	r1, r3, #1
 800362a:	7011      	strb	r1, [r2, #0]
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	68ba      	ldr	r2, [r7, #8]
 8003630:	18d2      	adds	r2, r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	6812      	ldr	r2, [r2, #0]
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	8b1a      	ldrh	r2, [r3, #24]
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8b1a      	ldrh	r2, [r3, #24]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	695b      	ldr	r3, [r3, #20]
 800364c:	619a      	str	r2, [r3, #24]
 800364e:	183b      	adds	r3, r7, r0
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	183a      	adds	r2, r7, r0
 8003654:	1c59      	adds	r1, r3, #1
 8003656:	7011      	strb	r1, [r2, #0]
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	68ba      	ldr	r2, [r7, #8]
 800365c:	18d2      	adds	r2, r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6812      	ldr	r2, [r2, #0]
 8003664:	619a      	str	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8b1a      	ldrh	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	695b      	ldr	r3, [r3, #20]
 800366e:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8b1a      	ldrh	r2, [r3, #24]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	695b      	ldr	r3, [r3, #20]
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	183b      	adds	r3, r7, r0
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	183a      	adds	r2, r7, r0
 8003680:	1c59      	adds	r1, r3, #1
 8003682:	7011      	strb	r1, [r2, #0]
 8003684:	009b      	lsls	r3, r3, #2
 8003686:	68ba      	ldr	r2, [r7, #8]
 8003688:	18d2      	adds	r2, r2, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	6812      	ldr	r2, [r2, #0]
 8003690:	619a      	str	r2, [r3, #24]
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8b1a      	ldrh	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8b1a      	ldrh	r2, [r3, #24]
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	695b      	ldr	r3, [r3, #20]
 80036a4:	619a      	str	r2, [r3, #24]
 80036a6:	183b      	adds	r3, r7, r0
 80036a8:	781b      	ldrb	r3, [r3, #0]
 80036aa:	183a      	adds	r2, r7, r0
 80036ac:	1c59      	adds	r1, r3, #1
 80036ae:	7011      	strb	r1, [r2, #0]
 80036b0:	009b      	lsls	r3, r3, #2
 80036b2:	68ba      	ldr	r2, [r7, #8]
 80036b4:	18d2      	adds	r2, r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	6812      	ldr	r2, [r2, #0]
 80036bc:	619a      	str	r2, [r3, #24]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	8b1a      	ldrh	r2, [r3, #24]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	8b1a      	ldrh	r2, [r3, #24]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	619a      	str	r2, [r3, #24]
 80036d2:	183b      	adds	r3, r7, r0
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	183a      	adds	r2, r7, r0
 80036d8:	1c59      	adds	r1, r3, #1
 80036da:	7011      	strb	r1, [r2, #0]
 80036dc:	009b      	lsls	r3, r3, #2
 80036de:	68ba      	ldr	r2, [r7, #8]
 80036e0:	18d2      	adds	r2, r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6812      	ldr	r2, [r2, #0]
 80036e8:	619a      	str	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8b1a      	ldrh	r2, [r3, #24]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8b1a      	ldrh	r2, [r3, #24]
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	695b      	ldr	r3, [r3, #20]
 80036fc:	619a      	str	r2, [r3, #24]
 80036fe:	183b      	adds	r3, r7, r0
 8003700:	781b      	ldrb	r3, [r3, #0]
 8003702:	183a      	adds	r2, r7, r0
 8003704:	1c59      	adds	r1, r3, #1
 8003706:	7011      	strb	r1, [r2, #0]
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	18d2      	adds	r2, r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	6812      	ldr	r2, [r2, #0]
 8003714:	619a      	str	r2, [r3, #24]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8b1a      	ldrh	r2, [r3, #24]
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	695b      	ldr	r3, [r3, #20]
 800371e:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8b1a      	ldrh	r2, [r3, #24]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	695b      	ldr	r3, [r3, #20]
 8003728:	619a      	str	r2, [r3, #24]
 800372a:	183b      	adds	r3, r7, r0
 800372c:	781b      	ldrb	r3, [r3, #0]
 800372e:	183a      	adds	r2, r7, r0
 8003730:	1c59      	adds	r1, r3, #1
 8003732:	7011      	strb	r1, [r2, #0]
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	68ba      	ldr	r2, [r7, #8]
 8003738:	18d2      	adds	r2, r2, r3
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6812      	ldr	r2, [r2, #0]
 8003740:	619a      	str	r2, [r3, #24]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8b1a      	ldrh	r2, [r3, #24]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8b1a      	ldrh	r2, [r3, #24]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	695b      	ldr	r3, [r3, #20]
 8003754:	619a      	str	r2, [r3, #24]
 8003756:	183b      	adds	r3, r7, r0
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	183a      	adds	r2, r7, r0
 800375c:	1c59      	adds	r1, r3, #1
 800375e:	7011      	strb	r1, [r2, #0]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	18d2      	adds	r2, r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6812      	ldr	r2, [r2, #0]
 800376c:	619a      	str	r2, [r3, #24]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8b1a      	ldrh	r2, [r3, #24]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	695b      	ldr	r3, [r3, #20]
 8003776:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8b1a      	ldrh	r2, [r3, #24]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	695b      	ldr	r3, [r3, #20]
 8003780:	619a      	str	r2, [r3, #24]
 8003782:	183b      	adds	r3, r7, r0
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	183a      	adds	r2, r7, r0
 8003788:	1c59      	adds	r1, r3, #1
 800378a:	7011      	strb	r1, [r2, #0]
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	68ba      	ldr	r2, [r7, #8]
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6812      	ldr	r2, [r2, #0]
 8003798:	619a      	str	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8b1a      	ldrh	r2, [r3, #24]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	695b      	ldr	r3, [r3, #20]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8b1a      	ldrh	r2, [r3, #24]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	695b      	ldr	r3, [r3, #20]
 80037ac:	619a      	str	r2, [r3, #24]
 80037ae:	183b      	adds	r3, r7, r0
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	183a      	adds	r2, r7, r0
 80037b4:	1c59      	adds	r1, r3, #1
 80037b6:	7011      	strb	r1, [r2, #0]
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	68ba      	ldr	r2, [r7, #8]
 80037bc:	18d2      	adds	r2, r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6812      	ldr	r2, [r2, #0]
 80037c4:	619a      	str	r2, [r3, #24]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8b1a      	ldrh	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8b1a      	ldrh	r2, [r3, #24]
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	695b      	ldr	r3, [r3, #20]
 80037d8:	619a      	str	r2, [r3, #24]
 80037da:	183b      	adds	r3, r7, r0
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	183a      	adds	r2, r7, r0
 80037e0:	1c59      	adds	r1, r3, #1
 80037e2:	7011      	strb	r1, [r2, #0]
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	18d2      	adds	r2, r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	6812      	ldr	r2, [r2, #0]
 80037f0:	619a      	str	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	8b1a      	ldrh	r2, [r3, #24]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	695b      	ldr	r3, [r3, #20]
 80037fa:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	8b1a      	ldrh	r2, [r3, #24]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	695b      	ldr	r3, [r3, #20]
 8003804:	619a      	str	r2, [r3, #24]
 8003806:	183b      	adds	r3, r7, r0
 8003808:	781b      	ldrb	r3, [r3, #0]
 800380a:	183a      	adds	r2, r7, r0
 800380c:	1c59      	adds	r1, r3, #1
 800380e:	7011      	strb	r1, [r2, #0]
 8003810:	009b      	lsls	r3, r3, #2
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	18d2      	adds	r2, r2, r3
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	619a      	str	r2, [r3, #24]
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8b1a      	ldrh	r2, [r3, #24]
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	8b1a      	ldrh	r2, [r3, #24]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	695b      	ldr	r3, [r3, #20]
 8003830:	619a      	str	r2, [r3, #24]
 8003832:	183b      	adds	r3, r7, r0
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	183a      	adds	r2, r7, r0
 8003838:	1c59      	adds	r1, r3, #1
 800383a:	7011      	strb	r1, [r2, #0]
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	68ba      	ldr	r2, [r7, #8]
 8003840:	18d2      	adds	r2, r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6812      	ldr	r2, [r2, #0]
 8003848:	619a      	str	r2, [r3, #24]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8b1a      	ldrh	r2, [r3, #24]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	695b      	ldr	r3, [r3, #20]
 8003852:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8b1a      	ldrh	r2, [r3, #24]
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	695b      	ldr	r3, [r3, #20]
 800385c:	619a      	str	r2, [r3, #24]
 800385e:	183b      	adds	r3, r7, r0
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	183a      	adds	r2, r7, r0
 8003864:	1c59      	adds	r1, r3, #1
 8003866:	7011      	strb	r1, [r2, #0]
 8003868:	009b      	lsls	r3, r3, #2
 800386a:	68ba      	ldr	r2, [r7, #8]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	6812      	ldr	r2, [r2, #0]
 8003874:	619a      	str	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8b1a      	ldrh	r2, [r3, #24]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8b1a      	ldrh	r2, [r3, #24]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	695b      	ldr	r3, [r3, #20]
 8003888:	619a      	str	r2, [r3, #24]
 800388a:	183b      	adds	r3, r7, r0
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	183a      	adds	r2, r7, r0
 8003890:	1c59      	adds	r1, r3, #1
 8003892:	7011      	strb	r1, [r2, #0]
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	18d2      	adds	r2, r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	6812      	ldr	r2, [r2, #0]
 80038a0:	619a      	str	r2, [r3, #24]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	8b1a      	ldrh	r2, [r3, #24]
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	629a      	str	r2, [r3, #40]	; 0x28

    internal_bus_release(thisInternalBus);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f000 f84c 	bl	800394c <internal_bus_release>
}
 80038b4:	46c0      	nop			; (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b006      	add	sp, #24
 80038ba:	bd80      	pop	{r7, pc}

080038bc <internal_bus_utilize>:

inline void internal_bus_utilize(InternalBus_t *thisInternalBus)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]
	//Set Bus pins to output
	temp = thisInternalBus->bus->MODER;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	43da      	mvns	r2, r3
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	4013      	ands	r3, r2
 80038da:	60fb      	str	r3, [r7, #12]
	temp |= thisInternalBus->BUS_BUSMODER;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus->MODER = temp;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68fa      	ldr	r2, [r7, #12]
 80038ec:	601a      	str	r2, [r3, #0]

	//Set clock pin to output
	temp = thisInternalBus->bus_clk->MODER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	69db      	ldr	r3, [r3, #28]
 80038fa:	43da      	mvns	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
	temp |= thisInternalBus->BUS_CLKMODER;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a1b      	ldr	r3, [r3, #32]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4313      	orrs	r3, r2
 800390a:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus_clk->MODER = temp;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	695b      	ldr	r3, [r3, #20]
 8003910:	68fa      	ldr	r2, [r7, #12]
 8003912:	601a      	str	r2, [r3, #0]

	//Set ack pin to output
	temp = thisInternalBus->bus_ack->MODER;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003920:	43da      	mvns	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
	temp |= thisInternalBus->BUS_ACKMODER;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus_ack->MODER = temp;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003936:	68fa      	ldr	r2, [r7, #12]
 8003938:	601a      	str	r2, [r3, #0]

	thisInternalBus->bus_ack->BSRR = (uint32_t) thisInternalBus->bus_ack_mask;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003942:	619a      	str	r2, [r3, #24]
}
 8003944:	46c0      	nop			; (mov r8, r8)
 8003946:	46bd      	mov	sp, r7
 8003948:	b004      	add	sp, #16
 800394a:	bd80      	pop	{r7, pc}

0800394c <internal_bus_release>:

inline void internal_bus_release(InternalBus_t *thisInternalBus)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8003954:	2300      	movs	r3, #0
 8003956:	60fb      	str	r3, [r7, #12]
	//Set all bus pins to low and send complete
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	889a      	ldrh	r2, [r3, #4]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800396a:	629a      	str	r2, [r3, #40]	; 0x28

	//Set Bus pins to input
	temp = thisInternalBus->bus->MODER;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	43da      	mvns	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus->MODER = temp;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68fa      	ldr	r2, [r7, #12]
 8003986:	601a      	str	r2, [r3, #0]

	//Set clock pin to input
	temp = thisInternalBus->bus_clk->MODER;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	69db      	ldr	r3, [r3, #28]
 8003994:	43da      	mvns	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	4013      	ands	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus_clk->MODER = temp;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	601a      	str	r2, [r3, #0]

	//Set ack pins to input
	temp = thisInternalBus->bus_ack->MODER;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b0:	43da      	mvns	r2, r3
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	4013      	ands	r3, r2
 80039b6:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus_ack->MODER = temp;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	601a      	str	r2, [r3, #0]
}
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b004      	add	sp, #16
 80039c6:	bd80      	pop	{r7, pc}

080039c8 <global_timer_create>:
#include <stdlib.h>
extern TIM_HandleTypeDef htim21;


GlobalTimer_t * global_timer_create(TIM_HandleTypeDef *timer_id)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	//Start global timer and initialize struct
	GlobalTimer_t *thisGlobalTimer = malloc(sizeof(GlobalTimer_t));
 80039d0:	2008      	movs	r0, #8
 80039d2:	f001 f94b 	bl	8004c6c <malloc>
 80039d6:	0003      	movs	r3, r0
 80039d8:	60fb      	str	r3, [r7, #12]
	thisGlobalTimer->h_timer = timer_id;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start_IT(thisGlobalTimer->h_timer);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	0018      	movs	r0, r3
 80039e6:	f7fe ffad 	bl	8002944 <HAL_TIM_Base_Start_IT>
	thisGlobalTimer->overflow_counter = 0;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
	return thisGlobalTimer;
 80039f0:	68fb      	ldr	r3, [r7, #12]
}
 80039f2:	0018      	movs	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	b004      	add	sp, #16
 80039f8:	bd80      	pop	{r7, pc}

080039fa <get_global_timer>:


uint64_t get_global_timer(GlobalTimer_t *thisGlobalTimer)
{
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b086      	sub	sp, #24
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
	uint8_t overflow_count_begin;
	uint64_t tot_value;
	do
	{
		overflow_count_begin = thisGlobalTimer->overflow_counter;
 8003a02:	2017      	movs	r0, #23
 8003a04:	183b      	adds	r3, r7, r0
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	7812      	ldrb	r2, [r2, #0]
 8003a0a:	701a      	strb	r2, [r3, #0]
		tot_value = thisGlobalTimer->h_timer->Instance->CNT + thisGlobalTimer->h_timer->Instance->ARR * (thisGlobalTimer->overflow_counter);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	685b      	ldr	r3, [r3, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1c:	6879      	ldr	r1, [r7, #4]
 8003a1e:	7809      	ldrb	r1, [r1, #0]
 8003a20:	434b      	muls	r3, r1
 8003a22:	18d3      	adds	r3, r2, r3
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	2300      	movs	r3, #0
 8003a28:	60fb      	str	r3, [r7, #12]

	} while (overflow_count_begin != thisGlobalTimer->overflow_counter);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	183a      	adds	r2, r7, r0
 8003a30:	7812      	ldrb	r2, [r2, #0]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d1e5      	bne.n	8003a02 <get_global_timer+0x8>

	return tot_value;	//TODO there is a lot of potential timestamp synchronization issues here, need to be addressed
 8003a36:	68ba      	ldr	r2, [r7, #8]
 8003a38:	68fb      	ldr	r3, [r7, #12]
}
 8003a3a:	0010      	movs	r0, r2
 8003a3c:	0019      	movs	r1, r3
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	b006      	add	sp, #24
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <magnetometer_create>:
//!since different sensors may have different type and number of variables
//!1 - sensor type  depend to the sensor type
//!2 - data tranmitter handler in this implimentation we just limited that to SPI in future if we add I2C or analog sensor ADC line can passs as a parameter
//!--------------------------create a new magnotmemeter of any type lower layer support and make a interface and initilize that-----------------------------------
Magnetometer_t * magnetometer_create(uint8_t type,SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 8003a44:	b590      	push	{r4, r7, lr}
 8003a46:	b089      	sub	sp, #36	; 0x24
 8003a48:	af02      	add	r7, sp, #8
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
 8003a4e:	0019      	movs	r1, r3
 8003a50:	240f      	movs	r4, #15
 8003a52:	193b      	adds	r3, r7, r4
 8003a54:	1c02      	adds	r2, r0, #0
 8003a56:	701a      	strb	r2, [r3, #0]
 8003a58:	230c      	movs	r3, #12
 8003a5a:	18fb      	adds	r3, r7, r3
 8003a5c:	1c0a      	adds	r2, r1, #0
 8003a5e:	801a      	strh	r2, [r3, #0]
	Magnetometer_t *  thisMagnetometer = malloc(sizeof(Magnetometer_t));
 8003a60:	2019      	movs	r0, #25
 8003a62:	f001 f903 	bl	8004c6c <malloc>
 8003a66:	0003      	movs	r3, r0
 8003a68:	617b      	str	r3, [r7, #20]
	if(thisMagnetometer != NULL)
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d100      	bne.n	8003a72 <magnetometer_create+0x2e>
 8003a70:	e143      	b.n	8003cfa <magnetometer_create+0x2b6>
	{
		thisMagnetometer->whichMagnetometer = type;
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	193a      	adds	r2, r7, r4
 8003a76:	7812      	ldrb	r2, [r2, #0]
 8003a78:	701a      	strb	r2, [r3, #0]
		switch (thisMagnetometer->whichMagnetometer)
 8003a7a:	697b      	ldr	r3, [r7, #20]
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b0a      	cmp	r3, #10
 8003a80:	d003      	beq.n	8003a8a <magnetometer_create+0x46>
 8003a82:	2b14      	cmp	r3, #20
 8003a84:	d100      	bne.n	8003a88 <magnetometer_create+0x44>
 8003a86:	e092      	b.n	8003bae <magnetometer_create+0x16a>
 8003a88:	e13c      	b.n	8003d04 <magnetometer_create+0x2c0>
		{
		case MAGNETOMETER_TYPE_LIS3MDL:
			{
				thisMagnetometer->magnetometer = (LIS3MDL_t*)LIS3MDL_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8003a8a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003a8c:	230c      	movs	r3, #12
 8003a8e:	18fb      	adds	r3, r7, r3
 8003a90:	881a      	ldrh	r2, [r3, #0]
 8003a92:	6879      	ldr	r1, [r7, #4]
 8003a94:	68b8      	ldr	r0, [r7, #8]
 8003a96:	232c      	movs	r3, #44	; 0x2c
 8003a98:	18fb      	adds	r3, r7, r3
 8003a9a:	881b      	ldrh	r3, [r3, #0]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	0023      	movs	r3, r4
 8003aa0:	f000 fafa 	bl	8004098 <LIS3MDL_create>
 8003aa4:	0002      	movs	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	21ff      	movs	r1, #255	; 0xff
 8003aac:	4011      	ands	r1, r2
 8003aae:	000c      	movs	r4, r1
 8003ab0:	7819      	ldrb	r1, [r3, #0]
 8003ab2:	2000      	movs	r0, #0
 8003ab4:	4001      	ands	r1, r0
 8003ab6:	1c08      	adds	r0, r1, #0
 8003ab8:	1c21      	adds	r1, r4, #0
 8003aba:	4301      	orrs	r1, r0
 8003abc:	7019      	strb	r1, [r3, #0]
 8003abe:	0a11      	lsrs	r1, r2, #8
 8003ac0:	20ff      	movs	r0, #255	; 0xff
 8003ac2:	4001      	ands	r1, r0
 8003ac4:	000c      	movs	r4, r1
 8003ac6:	7859      	ldrb	r1, [r3, #1]
 8003ac8:	2000      	movs	r0, #0
 8003aca:	4001      	ands	r1, r0
 8003acc:	1c08      	adds	r0, r1, #0
 8003ace:	1c21      	adds	r1, r4, #0
 8003ad0:	4301      	orrs	r1, r0
 8003ad2:	7059      	strb	r1, [r3, #1]
 8003ad4:	0c11      	lsrs	r1, r2, #16
 8003ad6:	20ff      	movs	r0, #255	; 0xff
 8003ad8:	4001      	ands	r1, r0
 8003ada:	000c      	movs	r4, r1
 8003adc:	7899      	ldrb	r1, [r3, #2]
 8003ade:	2000      	movs	r0, #0
 8003ae0:	4001      	ands	r1, r0
 8003ae2:	1c08      	adds	r0, r1, #0
 8003ae4:	1c21      	adds	r1, r4, #0
 8003ae6:	4301      	orrs	r1, r0
 8003ae8:	7099      	strb	r1, [r3, #2]
 8003aea:	0e10      	lsrs	r0, r2, #24
 8003aec:	78da      	ldrb	r2, [r3, #3]
 8003aee:	2100      	movs	r1, #0
 8003af0:	400a      	ands	r2, r1
 8003af2:	1c11      	adds	r1, r2, #0
 8003af4:	1c02      	adds	r2, r0, #0
 8003af6:	430a      	orrs	r2, r1
 8003af8:	70da      	strb	r2, [r3, #3]
				if(thisMagnetometer->magnetometer != NULL)
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	785a      	ldrb	r2, [r3, #1]
 8003afe:	7899      	ldrb	r1, [r3, #2]
 8003b00:	0209      	lsls	r1, r1, #8
 8003b02:	430a      	orrs	r2, r1
 8003b04:	78d9      	ldrb	r1, [r3, #3]
 8003b06:	0409      	lsls	r1, r1, #16
 8003b08:	430a      	orrs	r2, r1
 8003b0a:	791b      	ldrb	r3, [r3, #4]
 8003b0c:	061b      	lsls	r3, r3, #24
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	d100      	bne.n	8003b14 <magnetometer_create+0xd0>
 8003b12:	e0f4      	b.n	8003cfe <magnetometer_create+0x2ba>
				{
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	7d1a      	ldrb	r2, [r3, #20]
 8003b18:	2100      	movs	r1, #0
 8003b1a:	400a      	ands	r2, r1
 8003b1c:	1c11      	adds	r1, r2, #0
 8003b1e:	2264      	movs	r2, #100	; 0x64
 8003b20:	430a      	orrs	r2, r1
 8003b22:	751a      	strb	r2, [r3, #20]
 8003b24:	7d5a      	ldrb	r2, [r3, #21]
 8003b26:	2100      	movs	r1, #0
 8003b28:	400a      	ands	r2, r1
 8003b2a:	755a      	strb	r2, [r3, #21]
					thisMagnetometer->time_stamp = 0;
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	330b      	adds	r3, #11
 8003b30:	781a      	ldrb	r2, [r3, #0]
 8003b32:	2100      	movs	r1, #0
 8003b34:	400a      	ands	r2, r1
 8003b36:	701a      	strb	r2, [r3, #0]
 8003b38:	785a      	ldrb	r2, [r3, #1]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	400a      	ands	r2, r1
 8003b3e:	705a      	strb	r2, [r3, #1]
 8003b40:	789a      	ldrb	r2, [r3, #2]
 8003b42:	2100      	movs	r1, #0
 8003b44:	400a      	ands	r2, r1
 8003b46:	709a      	strb	r2, [r3, #2]
 8003b48:	78da      	ldrb	r2, [r3, #3]
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	70da      	strb	r2, [r3, #3]
 8003b50:	791a      	ldrb	r2, [r3, #4]
 8003b52:	2100      	movs	r1, #0
 8003b54:	400a      	ands	r2, r1
 8003b56:	711a      	strb	r2, [r3, #4]
 8003b58:	795a      	ldrb	r2, [r3, #5]
 8003b5a:	2100      	movs	r1, #0
 8003b5c:	400a      	ands	r2, r1
 8003b5e:	715a      	strb	r2, [r3, #5]
 8003b60:	799a      	ldrb	r2, [r3, #6]
 8003b62:	2100      	movs	r1, #0
 8003b64:	400a      	ands	r2, r1
 8003b66:	719a      	strb	r2, [r3, #6]
 8003b68:	79da      	ldrb	r2, [r3, #7]
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	71da      	strb	r2, [r3, #7]
					thisMagnetometer->Readings[X_AX] = 0;
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	3305      	adds	r3, #5
 8003b74:	781a      	ldrb	r2, [r3, #0]
 8003b76:	2100      	movs	r1, #0
 8003b78:	400a      	ands	r2, r1
 8003b7a:	701a      	strb	r2, [r3, #0]
 8003b7c:	785a      	ldrb	r2, [r3, #1]
 8003b7e:	2100      	movs	r1, #0
 8003b80:	400a      	ands	r2, r1
 8003b82:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Y_AX] = 0;
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	3307      	adds	r3, #7
 8003b88:	781a      	ldrb	r2, [r3, #0]
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	400a      	ands	r2, r1
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	785a      	ldrb	r2, [r3, #1]
 8003b92:	2100      	movs	r1, #0
 8003b94:	400a      	ands	r2, r1
 8003b96:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Z_AX] = 0;
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	3309      	adds	r3, #9
 8003b9c:	781a      	ldrb	r2, [r3, #0]
 8003b9e:	2100      	movs	r1, #0
 8003ba0:	400a      	ands	r2, r1
 8003ba2:	701a      	strb	r2, [r3, #0]
 8003ba4:	785a      	ldrb	r2, [r3, #1]
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	400a      	ands	r2, r1
 8003baa:	705a      	strb	r2, [r3, #1]
				}
			}
		break;
 8003bac:	e0a7      	b.n	8003cfe <magnetometer_create+0x2ba>
		//------------------------------
		case MAGNETOMETER_TYPE_MMC5983:
			{
				thisMagnetometer->magnetometer = (MMC5983_t*)MMC5983_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8003bae:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003bb0:	230c      	movs	r3, #12
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	881a      	ldrh	r2, [r3, #0]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	68b8      	ldr	r0, [r7, #8]
 8003bba:	232c      	movs	r3, #44	; 0x2c
 8003bbc:	18fb      	adds	r3, r7, r3
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	9300      	str	r3, [sp, #0]
 8003bc2:	0023      	movs	r3, r4
 8003bc4:	f000 fb47 	bl	8004256 <MMC5983_create>
 8003bc8:	0002      	movs	r2, r0
 8003bca:	697b      	ldr	r3, [r7, #20]
 8003bcc:	3301      	adds	r3, #1
 8003bce:	21ff      	movs	r1, #255	; 0xff
 8003bd0:	4011      	ands	r1, r2
 8003bd2:	000c      	movs	r4, r1
 8003bd4:	7819      	ldrb	r1, [r3, #0]
 8003bd6:	2000      	movs	r0, #0
 8003bd8:	4001      	ands	r1, r0
 8003bda:	1c08      	adds	r0, r1, #0
 8003bdc:	1c21      	adds	r1, r4, #0
 8003bde:	4301      	orrs	r1, r0
 8003be0:	7019      	strb	r1, [r3, #0]
 8003be2:	0a11      	lsrs	r1, r2, #8
 8003be4:	20ff      	movs	r0, #255	; 0xff
 8003be6:	4001      	ands	r1, r0
 8003be8:	000c      	movs	r4, r1
 8003bea:	7859      	ldrb	r1, [r3, #1]
 8003bec:	2000      	movs	r0, #0
 8003bee:	4001      	ands	r1, r0
 8003bf0:	1c08      	adds	r0, r1, #0
 8003bf2:	1c21      	adds	r1, r4, #0
 8003bf4:	4301      	orrs	r1, r0
 8003bf6:	7059      	strb	r1, [r3, #1]
 8003bf8:	0c11      	lsrs	r1, r2, #16
 8003bfa:	20ff      	movs	r0, #255	; 0xff
 8003bfc:	4001      	ands	r1, r0
 8003bfe:	000c      	movs	r4, r1
 8003c00:	7899      	ldrb	r1, [r3, #2]
 8003c02:	2000      	movs	r0, #0
 8003c04:	4001      	ands	r1, r0
 8003c06:	1c08      	adds	r0, r1, #0
 8003c08:	1c21      	adds	r1, r4, #0
 8003c0a:	4301      	orrs	r1, r0
 8003c0c:	7099      	strb	r1, [r3, #2]
 8003c0e:	0e10      	lsrs	r0, r2, #24
 8003c10:	78da      	ldrb	r2, [r3, #3]
 8003c12:	2100      	movs	r1, #0
 8003c14:	400a      	ands	r2, r1
 8003c16:	1c11      	adds	r1, r2, #0
 8003c18:	1c02      	adds	r2, r0, #0
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	70da      	strb	r2, [r3, #3]
				if(thisMagnetometer->magnetometer != NULL)
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	785a      	ldrb	r2, [r3, #1]
 8003c22:	7899      	ldrb	r1, [r3, #2]
 8003c24:	0209      	lsls	r1, r1, #8
 8003c26:	430a      	orrs	r2, r1
 8003c28:	78d9      	ldrb	r1, [r3, #3]
 8003c2a:	0409      	lsls	r1, r1, #16
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	061b      	lsls	r3, r3, #24
 8003c32:	4313      	orrs	r3, r2
 8003c34:	d065      	beq.n	8003d02 <magnetometer_create+0x2be>
				{
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	7d1a      	ldrb	r2, [r3, #20]
 8003c3a:	2100      	movs	r1, #0
 8003c3c:	400a      	ands	r2, r1
 8003c3e:	1c11      	adds	r1, r2, #0
 8003c40:	2264      	movs	r2, #100	; 0x64
 8003c42:	430a      	orrs	r2, r1
 8003c44:	751a      	strb	r2, [r3, #20]
 8003c46:	7d5a      	ldrb	r2, [r3, #21]
 8003c48:	2100      	movs	r1, #0
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	755a      	strb	r2, [r3, #21]
					thisMagnetometer->time_stamp = 0;
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	330b      	adds	r3, #11
 8003c52:	781a      	ldrb	r2, [r3, #0]
 8003c54:	2100      	movs	r1, #0
 8003c56:	400a      	ands	r2, r1
 8003c58:	701a      	strb	r2, [r3, #0]
 8003c5a:	785a      	ldrb	r2, [r3, #1]
 8003c5c:	2100      	movs	r1, #0
 8003c5e:	400a      	ands	r2, r1
 8003c60:	705a      	strb	r2, [r3, #1]
 8003c62:	789a      	ldrb	r2, [r3, #2]
 8003c64:	2100      	movs	r1, #0
 8003c66:	400a      	ands	r2, r1
 8003c68:	709a      	strb	r2, [r3, #2]
 8003c6a:	78da      	ldrb	r2, [r3, #3]
 8003c6c:	2100      	movs	r1, #0
 8003c6e:	400a      	ands	r2, r1
 8003c70:	70da      	strb	r2, [r3, #3]
 8003c72:	791a      	ldrb	r2, [r3, #4]
 8003c74:	2100      	movs	r1, #0
 8003c76:	400a      	ands	r2, r1
 8003c78:	711a      	strb	r2, [r3, #4]
 8003c7a:	795a      	ldrb	r2, [r3, #5]
 8003c7c:	2100      	movs	r1, #0
 8003c7e:	400a      	ands	r2, r1
 8003c80:	715a      	strb	r2, [r3, #5]
 8003c82:	799a      	ldrb	r2, [r3, #6]
 8003c84:	2100      	movs	r1, #0
 8003c86:	400a      	ands	r2, r1
 8003c88:	719a      	strb	r2, [r3, #6]
 8003c8a:	79da      	ldrb	r2, [r3, #7]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	400a      	ands	r2, r1
 8003c90:	71da      	strb	r2, [r3, #7]
					thisMagnetometer->Readings[X_AX] = 0;
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	3305      	adds	r3, #5
 8003c96:	781a      	ldrb	r2, [r3, #0]
 8003c98:	2100      	movs	r1, #0
 8003c9a:	400a      	ands	r2, r1
 8003c9c:	701a      	strb	r2, [r3, #0]
 8003c9e:	785a      	ldrb	r2, [r3, #1]
 8003ca0:	2100      	movs	r1, #0
 8003ca2:	400a      	ands	r2, r1
 8003ca4:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Y_AX] = 0;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	3307      	adds	r3, #7
 8003caa:	781a      	ldrb	r2, [r3, #0]
 8003cac:	2100      	movs	r1, #0
 8003cae:	400a      	ands	r2, r1
 8003cb0:	701a      	strb	r2, [r3, #0]
 8003cb2:	785a      	ldrb	r2, [r3, #1]
 8003cb4:	2100      	movs	r1, #0
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Z_AX] = 0;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	3309      	adds	r3, #9
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	2100      	movs	r1, #0
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	701a      	strb	r2, [r3, #0]
 8003cc6:	785a      	ldrb	r2, [r3, #1]
 8003cc8:	2100      	movs	r1, #0
 8003cca:	400a      	ands	r2, r1
 8003ccc:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->sensor_status = ( MMC5983_get_status(thisMagnetometer->magnetometer) ? MAGNETOMETER_OK : MAGNETOMETER_FAULTY);
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	785a      	ldrb	r2, [r3, #1]
 8003cd2:	7899      	ldrb	r1, [r3, #2]
 8003cd4:	0209      	lsls	r1, r1, #8
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	78d9      	ldrb	r1, [r3, #3]
 8003cda:	0409      	lsls	r1, r1, #16
 8003cdc:	430a      	orrs	r2, r1
 8003cde:	791b      	ldrb	r3, [r3, #4]
 8003ce0:	061b      	lsls	r3, r3, #24
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	0018      	movs	r0, r3
 8003ce6:	f000 fbe4 	bl	80044b2 <MMC5983_get_status>
 8003cea:	1e03      	subs	r3, r0, #0
 8003cec:	d001      	beq.n	8003cf2 <magnetometer_create+0x2ae>
 8003cee:	2251      	movs	r2, #81	; 0x51
 8003cf0:	e000      	b.n	8003cf4 <magnetometer_create+0x2b0>
 8003cf2:	2250      	movs	r2, #80	; 0x50
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	761a      	strb	r2, [r3, #24]
				}
			}
		break;
 8003cf8:	e003      	b.n	8003d02 <magnetometer_create+0x2be>
		}
	}
 8003cfa:	46c0      	nop			; (mov r8, r8)
 8003cfc:	e002      	b.n	8003d04 <magnetometer_create+0x2c0>
		break;
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	e000      	b.n	8003d04 <magnetometer_create+0x2c0>
		break;
 8003d02:	46c0      	nop			; (mov r8, r8)
	return(thisMagnetometer);
 8003d04:	697b      	ldr	r3, [r7, #20]
}
 8003d06:	0018      	movs	r0, r3
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	b007      	add	sp, #28
 8003d0c:	bd90      	pop	{r4, r7, pc}

08003d0e <magnetometer_read>:
	free(thisMagnetometer);
}
//----------------regardless of magnetometer type this methode is our interface between higher layer and driver layer---------------------------------------
//--------------- by calling this methode we will have fresh data provided by low level layer driver ready to use --------------------------
uint8_t magnetometer_read(Magnetometer_t *thisMagnetometer)
{
 8003d0e:	b590      	push	{r4, r7, lr}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	6078      	str	r0, [r7, #4]
	uint8_t res=0;
 8003d16:	230f      	movs	r3, #15
 8003d18:	18fb      	adds	r3, r7, r3
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	701a      	strb	r2, [r3, #0]
	switch (thisMagnetometer->whichMagnetometer)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b0a      	cmp	r3, #10
 8003d24:	d002      	beq.n	8003d2c <magnetometer_read+0x1e>
 8003d26:	2b14      	cmp	r3, #20
 8003d28:	d017      	beq.n	8003d5a <magnetometer_read+0x4c>
 8003d2a:	e02d      	b.n	8003d88 <magnetometer_read+0x7a>
	{
	case MAGNETOMETER_TYPE_LIS3MDL:
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	785a      	ldrb	r2, [r3, #1]
 8003d30:	7899      	ldrb	r1, [r3, #2]
 8003d32:	0209      	lsls	r1, r1, #8
 8003d34:	430a      	orrs	r2, r1
 8003d36:	78d9      	ldrb	r1, [r3, #3]
 8003d38:	0409      	lsls	r1, r1, #16
 8003d3a:	430a      	orrs	r2, r1
 8003d3c:	791b      	ldrb	r3, [r3, #4]
 8003d3e:	061b      	lsls	r3, r3, #24
 8003d40:	4313      	orrs	r3, r2
 8003d42:	001a      	movs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	3305      	adds	r3, #5
 8003d48:	210f      	movs	r1, #15
 8003d4a:	187c      	adds	r4, r7, r1
 8003d4c:	0019      	movs	r1, r3
 8003d4e:	0010      	movs	r0, r2
 8003d50:	f000 fa77 	bl	8004242 <LIS3MDL_read_XYZ>
 8003d54:	0003      	movs	r3, r0
 8003d56:	7023      	strb	r3, [r4, #0]
		break;
 8003d58:	e016      	b.n	8003d88 <magnetometer_read+0x7a>
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		res = MMC5983_read_XYZ((MMC5983_t*)thisMagnetometer->magnetometer, (uint8_t*)thisMagnetometer->Readings);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	785a      	ldrb	r2, [r3, #1]
 8003d5e:	7899      	ldrb	r1, [r3, #2]
 8003d60:	0209      	lsls	r1, r1, #8
 8003d62:	430a      	orrs	r2, r1
 8003d64:	78d9      	ldrb	r1, [r3, #3]
 8003d66:	0409      	lsls	r1, r1, #16
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	791b      	ldrb	r3, [r3, #4]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	001a      	movs	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	3305      	adds	r3, #5
 8003d76:	210f      	movs	r1, #15
 8003d78:	187c      	adds	r4, r7, r1
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	0010      	movs	r0, r2
 8003d7e:	f000 fb48 	bl	8004412 <MMC5983_read_XYZ>
 8003d82:	0003      	movs	r3, r0
 8003d84:	7023      	strb	r3, [r4, #0]
		break;
 8003d86:	46c0      	nop			; (mov r8, r8)
	}
	return res;
 8003d88:	230f      	movs	r3, #15
 8003d8a:	18fb      	adds	r3, r7, r3
 8003d8c:	781b      	ldrb	r3, [r3, #0]
}
 8003d8e:	0018      	movs	r0, r3
 8003d90:	46bd      	mov	sp, r7
 8003d92:	b005      	add	sp, #20
 8003d94:	bd90      	pop	{r4, r7, pc}

08003d96 <magnetometer_direct_register_write>:
//---------------------------------------------------------------------------
uint8_t magnetometer_direct_register_write(Magnetometer_t *thisMagnetometer, uint8_t sensor_reg_add, uint8_t sensor_reg_val)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b084      	sub	sp, #16
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
 8003d9e:	0008      	movs	r0, r1
 8003da0:	0011      	movs	r1, r2
 8003da2:	1cfb      	adds	r3, r7, #3
 8003da4:	1c02      	adds	r2, r0, #0
 8003da6:	701a      	strb	r2, [r3, #0]
 8003da8:	1cbb      	adds	r3, r7, #2
 8003daa:	1c0a      	adds	r2, r1, #0
 8003dac:	701a      	strb	r2, [r3, #0]
	uint8_t res=0;
 8003dae:	230f      	movs	r3, #15
 8003db0:	18fb      	adds	r3, r7, r3
 8003db2:	2200      	movs	r2, #0
 8003db4:	701a      	strb	r2, [r3, #0]
	switch (thisMagnetometer->whichMagnetometer)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	2b0a      	cmp	r3, #10
 8003dbc:	d002      	beq.n	8003dc4 <magnetometer_direct_register_write+0x2e>
 8003dbe:	2b14      	cmp	r3, #20
 8003dc0:	d014      	beq.n	8003dec <magnetometer_direct_register_write+0x56>
 8003dc2:	e027      	b.n	8003e14 <magnetometer_direct_register_write+0x7e>
	{
	case MAGNETOMETER_TYPE_LIS3MDL:
		LIS3MDL_register_write((LIS3MDL_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	785a      	ldrb	r2, [r3, #1]
 8003dc8:	7899      	ldrb	r1, [r3, #2]
 8003dca:	0209      	lsls	r1, r1, #8
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	78d9      	ldrb	r1, [r3, #3]
 8003dd0:	0409      	lsls	r1, r1, #16
 8003dd2:	430a      	orrs	r2, r1
 8003dd4:	791b      	ldrb	r3, [r3, #4]
 8003dd6:	061b      	lsls	r3, r3, #24
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	0018      	movs	r0, r3
 8003ddc:	1cbb      	adds	r3, r7, #2
 8003dde:	781a      	ldrb	r2, [r3, #0]
 8003de0:	1cfb      	adds	r3, r7, #3
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	0019      	movs	r1, r3
 8003de6:	f000 f9fc 	bl	80041e2 <LIS3MDL_register_write>
		break;
 8003dea:	e013      	b.n	8003e14 <magnetometer_direct_register_write+0x7e>
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		MMC5983_register_write((MMC5983_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	785a      	ldrb	r2, [r3, #1]
 8003df0:	7899      	ldrb	r1, [r3, #2]
 8003df2:	0209      	lsls	r1, r1, #8
 8003df4:	430a      	orrs	r2, r1
 8003df6:	78d9      	ldrb	r1, [r3, #3]
 8003df8:	0409      	lsls	r1, r1, #16
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	791b      	ldrb	r3, [r3, #4]
 8003dfe:	061b      	lsls	r3, r3, #24
 8003e00:	4313      	orrs	r3, r2
 8003e02:	0018      	movs	r0, r3
 8003e04:	1cbb      	adds	r3, r7, #2
 8003e06:	781a      	ldrb	r2, [r3, #0]
 8003e08:	1cfb      	adds	r3, r7, #3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	f000 fad0 	bl	80043b2 <MMC5983_register_write>
		break;
 8003e12:	46c0      	nop			; (mov r8, r8)
	}
	return res;
 8003e14:	230f      	movs	r3, #15
 8003e16:	18fb      	adds	r3, r7, r3
 8003e18:	781b      	ldrb	r3, [r3, #0]
}
 8003e1a:	0018      	movs	r0, r3
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	b004      	add	sp, #16
 8003e20:	bd80      	pop	{r7, pc}
	...

08003e24 <I2C_interface_create>:
#include "i2c_network_interface.h"


I2C_t * I2C_interface_create(I2C_HandleTypeDef *I2C_handle,uint8_t channel_address)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
 8003e2c:	000a      	movs	r2, r1
 8003e2e:	1cfb      	adds	r3, r7, #3
 8003e30:	701a      	strb	r2, [r3, #0]
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8003e32:	2028      	movs	r0, #40	; 0x28
 8003e34:	f000 ff1a 	bl	8004c6c <malloc>
 8003e38:	0003      	movs	r3, r0
 8003e3a:	60fb      	str	r3, [r7, #12]
	if(thisI2C != NULL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d031      	beq.n	8003ea6 <I2C_interface_create+0x82>
	{
		thisI2C->I2C_line = I2C_handle;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	625a      	str	r2, [r3, #36]	; 0x24
		thisI2C->buffer_index=0;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	701a      	strb	r2, [r3, #0]
		thisI2C->new_command_is_ready_flag = 0;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	2200      	movs	r2, #0
 8003e52:	705a      	strb	r2, [r3, #1]

		// Disable Own Address1 before setting the new address configuration
		//TODO it is much safer to use HAL compatible address change instead of manual mode
		//is ther any reason for using manual mode?
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4913      	ldr	r1, [pc, #76]	; (8003eb0 <I2C_interface_create+0x8c>)
 8003e64:	400a      	ands	r2, r1
 8003e66:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 8003e68:	1cfb      	adds	r3, r7, #3
 8003e6a:	781b      	ldrb	r3, [r3, #0]
 8003e6c:	005b      	lsls	r3, r3, #1
 8003e6e:	0019      	movs	r1, r3
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2280      	movs	r2, #128	; 0x80
 8003e78:	0212      	lsls	r2, r2, #8
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->CR2 &= ~I2C_CR2_NACK;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	685a      	ldr	r2, [r3, #4]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4908      	ldr	r1, [pc, #32]	; (8003eb0 <I2C_interface_create+0x8c>)
 8003e8e:	400a      	ands	r2, r1
 8003e90:	605a      	str	r2, [r3, #4]
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	212c      	movs	r1, #44	; 0x2c
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		//TODO  erro handler
	}
	return thisI2C;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
}
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b004      	add	sp, #16
 8003eae:	bd80      	pop	{r7, pc}
 8003eb0:	ffff7fff 	.word	0xffff7fff

08003eb4 <I2C2_IRQHandler>:
extern TIM_HandleTypeDef htim21;
extern System my_sys;

//------------------------i2c int------------------
void I2C2_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_RXI) != RESET))
 8003eb8:	4b69      	ldr	r3, [pc, #420]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003eba:	229c      	movs	r2, #156	; 0x9c
 8003ebc:	589b      	ldr	r3, [r3, r2]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	699b      	ldr	r3, [r3, #24]
 8003ec4:	2204      	movs	r2, #4
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d000      	beq.n	8003ece <I2C2_IRQHandler+0x1a>
 8003ecc:	e08e      	b.n	8003fec <I2C2_IRQHandler+0x138>
 8003ece:	4b64      	ldr	r3, [pc, #400]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003ed0:	229c      	movs	r2, #156	; 0x9c
 8003ed2:	589b      	ldr	r3, [r3, r2]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2204      	movs	r2, #4
 8003edc:	4013      	ands	r3, r2
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d000      	beq.n	8003ee4 <I2C2_IRQHandler+0x30>
 8003ee2:	e083      	b.n	8003fec <I2C2_IRQHandler+0x138>
	{
		if(my_sys.i2c_line->buffer_index < I2C_MAX_RECEIVE_LENGTH)
 8003ee4:	4b5e      	ldr	r3, [pc, #376]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003ee6:	229c      	movs	r2, #156	; 0x9c
 8003ee8:	589b      	ldr	r3, [r3, r2]
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	b2db      	uxtb	r3, r3
 8003eee:	2b1e      	cmp	r3, #30
 8003ef0:	d900      	bls.n	8003ef4 <I2C2_IRQHandler+0x40>
 8003ef2:	e074      	b.n	8003fde <I2C2_IRQHandler+0x12a>
		{
			my_sys.i2c_line->receiveBuffer[my_sys.i2c_line->buffer_index] = (uint8_t)my_sys.i2c_line->I2C_line->Instance->RXDR;
 8003ef4:	4b5a      	ldr	r3, [pc, #360]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003ef6:	229c      	movs	r2, #156	; 0x9c
 8003ef8:	589b      	ldr	r3, [r3, r2]
 8003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003f00:	4b57      	ldr	r3, [pc, #348]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f02:	229c      	movs	r2, #156	; 0x9c
 8003f04:	589b      	ldr	r3, [r3, r2]
 8003f06:	4a56      	ldr	r2, [pc, #344]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f08:	219c      	movs	r1, #156	; 0x9c
 8003f0a:	5852      	ldr	r2, [r2, r1]
 8003f0c:	7812      	ldrb	r2, [r2, #0]
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	0011      	movs	r1, r2
 8003f12:	b2c2      	uxtb	r2, r0
 8003f14:	185b      	adds	r3, r3, r1
 8003f16:	709a      	strb	r2, [r3, #2]
			my_sys.i2c_line->buffer_index++;
 8003f18:	4b51      	ldr	r3, [pc, #324]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f1a:	229c      	movs	r2, #156	; 0x9c
 8003f1c:	589b      	ldr	r3, [r3, r2]
 8003f1e:	781a      	ldrb	r2, [r3, #0]
 8003f20:	b2d2      	uxtb	r2, r2
 8003f22:	3201      	adds	r2, #1
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]
			//is it a single byte command?  command higher than I2C_SET_MULTIPLE_BYTE_COMMAND may have more than 1 byte
			//If it is a send data frame command, execute and return immediately
			if (my_sys.i2c_line->receiveBuffer[0] == I2C_PACKET_SEND_DATA_FRAME)
 8003f28:	4b4d      	ldr	r3, [pc, #308]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f2a:	229c      	movs	r2, #156	; 0x9c
 8003f2c:	589b      	ldr	r3, [r3, r2]
 8003f2e:	789b      	ldrb	r3, [r3, #2]
 8003f30:	b2db      	uxtb	r3, r3
 8003f32:	2b0a      	cmp	r3, #10
 8003f34:	d112      	bne.n	8003f5c <I2C2_IRQHandler+0xa8>
			{
				internal_bus_write_data_frame(my_sys.data_bus , my_sys.bus_output_buffer , MODULE_SYSTEM_PACKET_LENGHT);
 8003f36:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f38:	22a0      	movs	r2, #160	; 0xa0
 8003f3a:	589b      	ldr	r3, [r3, r2]
 8003f3c:	4949      	ldr	r1, [pc, #292]	; (8004064 <I2C2_IRQHandler+0x1b0>)
 8003f3e:	2221      	movs	r2, #33	; 0x21
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff f9ce 	bl	80032e2 <internal_bus_write_data_frame>
				my_sys.i2c_line->buffer_index = 0;
 8003f46:	4b46      	ldr	r3, [pc, #280]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f48:	229c      	movs	r2, #156	; 0x9c
 8003f4a:	589b      	ldr	r3, [r3, r2]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
				my_sys.i2c_line->new_command_is_ready_flag = 0;
 8003f50:	4b43      	ldr	r3, [pc, #268]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f52:	229c      	movs	r2, #156	; 0x9c
 8003f54:	589b      	ldr	r3, [r3, r2]
 8003f56:	2200      	movs	r2, #0
 8003f58:	705a      	strb	r2, [r3, #1]
 8003f5a:	e040      	b.n	8003fde <I2C2_IRQHandler+0x12a>
			}

			//Single byte range
			else if (my_sys.i2c_line->receiveBuffer[0] < I2C_SET_3_BYTE_COMMAND)
 8003f5c:	4b40      	ldr	r3, [pc, #256]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f5e:	229c      	movs	r2, #156	; 0x9c
 8003f60:	589b      	ldr	r3, [r3, r2]
 8003f62:	789b      	ldrb	r3, [r3, #2]
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b63      	cmp	r3, #99	; 0x63
 8003f68:	d805      	bhi.n	8003f76 <I2C2_IRQHandler+0xc2>
			{
				my_sys.i2c_line->new_command_is_ready_flag = 1;
 8003f6a:	4b3d      	ldr	r3, [pc, #244]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f6c:	229c      	movs	r2, #156	; 0x9c
 8003f6e:	589b      	ldr	r3, [r3, r2]
 8003f70:	2201      	movs	r2, #1
 8003f72:	705a      	strb	r2, [r3, #1]
 8003f74:	e033      	b.n	8003fde <I2C2_IRQHandler+0x12a>
			}

			//Three byte command range
			else if (my_sys.i2c_line->receiveBuffer[0] < I2C_SET_31_BYTE_COMMAND)
 8003f76:	4b3a      	ldr	r3, [pc, #232]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f78:	229c      	movs	r2, #156	; 0x9c
 8003f7a:	589b      	ldr	r3, [r3, r2]
 8003f7c:	789b      	ldrb	r3, [r3, #2]
 8003f7e:	b2db      	uxtb	r3, r3
 8003f80:	2b6d      	cmp	r3, #109	; 0x6d
 8003f82:	d812      	bhi.n	8003faa <I2C2_IRQHandler+0xf6>
			{
				if(my_sys.i2c_line->buffer_index == 3)
 8003f84:	4b36      	ldr	r3, [pc, #216]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003f86:	229c      	movs	r2, #156	; 0x9c
 8003f88:	589b      	ldr	r3, [r3, r2]
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b03      	cmp	r3, #3
 8003f90:	d125      	bne.n	8003fde <I2C2_IRQHandler+0x12a>
				{
					HAL_GPIO_TogglePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin);
 8003f92:	23a0      	movs	r3, #160	; 0xa0
 8003f94:	05db      	lsls	r3, r3, #23
 8003f96:	2140      	movs	r1, #64	; 0x40
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7fd f906 	bl	80011aa <HAL_GPIO_TogglePin>
					my_sys.i2c_line->new_command_is_ready_flag = 1;
 8003f9e:	4b30      	ldr	r3, [pc, #192]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fa0:	229c      	movs	r2, #156	; 0x9c
 8003fa2:	589b      	ldr	r3, [r3, r2]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	705a      	strb	r2, [r3, #1]
 8003fa8:	e019      	b.n	8003fde <I2C2_IRQHandler+0x12a>
				}
			}

			//Thirty-one byte command range
			else if (my_sys.i2c_line->receiveBuffer[0] < I2C_PACKET_SET_NEW_ADDRESS)
 8003faa:	4b2d      	ldr	r3, [pc, #180]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fac:	229c      	movs	r2, #156	; 0x9c
 8003fae:	589b      	ldr	r3, [r3, r2]
 8003fb0:	789b      	ldrb	r3, [r3, #2]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	db0c      	blt.n	8003fd4 <I2C2_IRQHandler+0x120>
			{
				if(my_sys.i2c_line->buffer_index == 31)
 8003fba:	4b29      	ldr	r3, [pc, #164]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fbc:	229c      	movs	r2, #156	; 0x9c
 8003fbe:	589b      	ldr	r3, [r3, r2]
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b1f      	cmp	r3, #31
 8003fc6:	d10a      	bne.n	8003fde <I2C2_IRQHandler+0x12a>
				{
					my_sys.i2c_line->new_command_is_ready_flag = 1;
 8003fc8:	4b25      	ldr	r3, [pc, #148]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fca:	229c      	movs	r2, #156	; 0x9c
 8003fcc:	589b      	ldr	r3, [r3, r2]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	705a      	strb	r2, [r3, #1]
 8003fd2:	e004      	b.n	8003fde <I2C2_IRQHandler+0x12a>
			}

			//Only thing left for it to be is a new I2C address
			else
			{
				my_sys.i2c_line->new_command_is_ready_flag = 1;
 8003fd4:	4b22      	ldr	r3, [pc, #136]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fd6:	229c      	movs	r2, #156	; 0x9c
 8003fd8:	589b      	ldr	r3, [r3, r2]
 8003fda:	2201      	movs	r2, #1
 8003fdc:	705a      	strb	r2, [r3, #1]
			}
		}
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_RXNE);
 8003fde:	4b20      	ldr	r3, [pc, #128]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fe0:	229c      	movs	r2, #156	; 0x9c
 8003fe2:	589b      	ldr	r3, [r3, r2]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	2204      	movs	r2, #4
 8003fea:	61da      	str	r2, [r3, #28]
	}
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_ADDRI) != RESET))
 8003fec:	4b1c      	ldr	r3, [pc, #112]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8003fee:	229c      	movs	r2, #156	; 0x9c
 8003ff0:	589b      	ldr	r3, [r3, r2]
 8003ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	4013      	ands	r3, r2
 8003ffc:	2b08      	cmp	r3, #8
 8003ffe:	d110      	bne.n	8004022 <I2C2_IRQHandler+0x16e>
 8004000:	4b17      	ldr	r3, [pc, #92]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8004002:	229c      	movs	r2, #156	; 0x9c
 8004004:	589b      	ldr	r3, [r3, r2]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	2208      	movs	r2, #8
 800400e:	4013      	ands	r3, r2
 8004010:	2b08      	cmp	r3, #8
 8004012:	d106      	bne.n	8004022 <I2C2_IRQHandler+0x16e>
	{
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_ADDR);
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8004016:	229c      	movs	r2, #156	; 0x9c
 8004018:	589b      	ldr	r3, [r3, r2]
 800401a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2208      	movs	r2, #8
 8004020:	61da      	str	r2, [r3, #28]
	}
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_STOPI) != RESET))
 8004022:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8004024:	229c      	movs	r2, #156	; 0x9c
 8004026:	589b      	ldr	r3, [r3, r2]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	2220      	movs	r2, #32
 8004030:	4013      	ands	r3, r2
 8004032:	2b20      	cmp	r3, #32
 8004034:	d111      	bne.n	800405a <I2C2_IRQHandler+0x1a6>
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 8004038:	229c      	movs	r2, #156	; 0x9c
 800403a:	589b      	ldr	r3, [r3, r2]
 800403c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2220      	movs	r2, #32
 8004044:	4013      	ands	r3, r2
 8004046:	2b20      	cmp	r3, #32
 8004048:	d107      	bne.n	800405a <I2C2_IRQHandler+0x1a6>
	{
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_STOPF);
 800404a:	4b05      	ldr	r3, [pc, #20]	; (8004060 <I2C2_IRQHandler+0x1ac>)
 800404c:	229c      	movs	r2, #156	; 0x9c
 800404e:	589b      	ldr	r3, [r3, r2]
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	2220      	movs	r2, #32
 8004056:	61da      	str	r2, [r3, #28]
	}
	return;
 8004058:	46c0      	nop			; (mov r8, r8)
 800405a:	46c0      	nop			; (mov r8, r8)
}
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	200000e4 	.word	0x200000e4
 8004064:	200000ec 	.word	0x200000ec

08004068 <HAL_TIM_PeriodElapsedCallback>:
	return;
}
*/
//---------------------------  tim21 int----------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b082      	sub	sp, #8
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
	if (htim == &htim21)
 8004070:	687a      	ldr	r2, [r7, #4]
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8004074:	429a      	cmp	r2, r3
 8004076:	d106      	bne.n	8004086 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		my_sys.ph_global_timer->overflow_counter++;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800407a:	228c      	movs	r2, #140	; 0x8c
 800407c:	589b      	ldr	r3, [r3, r2]
 800407e:	781a      	ldrb	r2, [r3, #0]
 8004080:	3201      	adds	r2, #1
 8004082:	b2d2      	uxtb	r2, r2
 8004084:	701a      	strb	r2, [r3, #0]
	}
}
 8004086:	46c0      	nop			; (mov r8, r8)
 8004088:	46bd      	mov	sp, r7
 800408a:	b002      	add	sp, #8
 800408c:	bd80      	pop	{r7, pc}
 800408e:	46c0      	nop			; (mov r8, r8)
 8004090:	20000228 	.word	0x20000228
 8004094:	200000e4 	.word	0x200000e4

08004098 <LIS3MDL_create>:
#include "lis3mdl_driver.h"

//TODO we need to test the whole library
LIS3MDL_t * LIS3MDL_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *DRDY_Bus,uint16_t DRDY_Pin)
{
 8004098:	b5b0      	push	{r4, r5, r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	603b      	str	r3, [r7, #0]
 80040a4:	1dbb      	adds	r3, r7, #6
 80040a6:	801a      	strh	r2, [r3, #0]
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 80040a8:	2018      	movs	r0, #24
 80040aa:	f000 fddf 	bl	8004c6c <malloc>
 80040ae:	0003      	movs	r3, r0
 80040b0:	617b      	str	r3, [r7, #20]
	thisLIS3MDL->CS_GPIO_Bus = CS_Bus;
 80040b2:	697b      	ldr	r3, [r7, #20]
 80040b4:	68ba      	ldr	r2, [r7, #8]
 80040b6:	609a      	str	r2, [r3, #8]
	thisLIS3MDL->CS_GPIO_Pin = CS_Pin;
 80040b8:	697b      	ldr	r3, [r7, #20]
 80040ba:	1dba      	adds	r2, r7, #6
 80040bc:	8812      	ldrh	r2, [r2, #0]
 80040be:	819a      	strh	r2, [r3, #12]
	thisLIS3MDL->DRDY_GPIO_Bus = DRDY_Bus;
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	611a      	str	r2, [r3, #16]
	thisLIS3MDL->DRDY_GPIO_Pin = DRDY_Pin;
 80040c6:	697a      	ldr	r2, [r7, #20]
 80040c8:	2328      	movs	r3, #40	; 0x28
 80040ca:	18fb      	adds	r3, r7, r3
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	8293      	strh	r3, [r2, #20]
	thisLIS3MDL->spi_channel = spi_line;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	68fa      	ldr	r2, [r7, #12]
 80040d4:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	6898      	ldr	r0, [r3, #8]
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	899b      	ldrh	r3, [r3, #12]
 80040de:	2201      	movs	r2, #1
 80040e0:	0019      	movs	r1, r3
 80040e2:	f7fd f845 	bl	8001170 <HAL_GPIO_WritePin>
	if(thisLIS3MDL != NULL)
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d03a      	beq.n	8004162 <LIS3MDL_create+0xca>
	{
		//Set all of the configuration registers every time on bootup
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG2,0b00001100);  //32/64: Gauss Scale Selection   8: Reboot Memory Content   4: Configuration Registers and User Register Reset
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	220c      	movs	r2, #12
 80040f0:	2121      	movs	r1, #33	; 0x21
 80040f2:	0018      	movs	r0, r3
 80040f4:	f000 f875 	bl	80041e2 <LIS3MDL_register_write>
		HAL_Delay(1);
 80040f8:	2001      	movs	r0, #1
 80040fa:	f7fc fdb3 	bl	8000c64 <HAL_Delay>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG1,0b00011110);  //128: Temp Sensor Enable   32/64: X-Y-axis Performance Selection   4/8/16: Output Data Rate Selection   2: Data Rate Overdrive
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	221e      	movs	r2, #30
 8004102:	2120      	movs	r1, #32
 8004104:	0018      	movs	r0, r3
 8004106:	f000 f86c 	bl	80041e2 <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG2,0b01100000);  //32/64: Gauss Scale Selection   8: Reboot Memory Content   4: Configuration Registers and User Register Reset
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2260      	movs	r2, #96	; 0x60
 800410e:	2121      	movs	r1, #33	; 0x21
 8004110:	0018      	movs	r0, r3
 8004112:	f000 f866 	bl	80041e2 <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG3,0b00000000);  //32: Low Power Mode   4: 3-4 Wire SPI   1/2: Operating Mode Selection
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	2200      	movs	r2, #0
 800411a:	2122      	movs	r1, #34	; 0x22
 800411c:	0018      	movs	r0, r3
 800411e:	f000 f860 	bl	80041e2 <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG4,0b00001100);  //2: Big-Little Endian Data Selection   4/8: Z-axis Performance Selection
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	220c      	movs	r2, #12
 8004126:	2123      	movs	r1, #35	; 0x23
 8004128:	0018      	movs	r0, r3
 800412a:	f000 f85a 	bl	80041e2 <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG5,0b00000000);  //128: Fast Read   64: Block Data Update
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	2200      	movs	r2, #0
 8004132:	2124      	movs	r1, #36	; 0x24
 8004134:	0018      	movs	r0, r3
 8004136:	f000 f854 	bl	80041e2 <LIS3MDL_register_write>
		//Check whether you are communicating with the ST sensor
		uint8_t SPITestWHOAMI = LIS3MDL_register_read(thisLIS3MDL, (uint8_t)LIS3MDL_WHO_AM_I);
 800413a:	2513      	movs	r5, #19
 800413c:	197c      	adds	r4, r7, r5
 800413e:	697b      	ldr	r3, [r7, #20]
 8004140:	210f      	movs	r1, #15
 8004142:	0018      	movs	r0, r3
 8004144:	f000 f812 	bl	800416c <LIS3MDL_register_read>
 8004148:	0003      	movs	r3, r0
 800414a:	7023      	strb	r3, [r4, #0]
		if (SPITestWHOAMI==LIS3MDL_WHO_ID_RESPONSE)
 800414c:	197b      	adds	r3, r7, r5
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b3d      	cmp	r3, #61	; 0x3d
 8004152:	d103      	bne.n	800415c <LIS3MDL_create+0xc4>
		{
			//TODO Implement Sensor found subroutine
			thisLIS3MDL->sensor_status = LIS3MDL_SENSOR_FOUND;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	2220      	movs	r2, #32
 8004158:	701a      	strb	r2, [r3, #0]
 800415a:	e002      	b.n	8004162 <LIS3MDL_create+0xca>
		}
		else
		{
			thisLIS3MDL->sensor_status = LIS3MDL_SENSOR_NOT_FOUND;
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2230      	movs	r2, #48	; 0x30
 8004160:	701a      	strb	r2, [r3, #0]
		}
	}
	return(thisLIS3MDL);
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b006      	add	sp, #24
 800416a:	bdb0      	pop	{r4, r5, r7, pc}

0800416c <LIS3MDL_register_read>:

uint8_t LIS3MDL_register_read(LIS3MDL_t *thisLIS3MDL, uint8_t thisRegister)
{
 800416c:	b5b0      	push	{r4, r5, r7, lr}
 800416e:	b086      	sub	sp, #24
 8004170:	af02      	add	r7, sp, #8
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	000a      	movs	r2, r1
 8004176:	1cfb      	adds	r3, r7, #3
 8004178:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	uint8_t out[2];
	uint8_t in[2] = {0 , 0};
 800417a:	2408      	movs	r4, #8
 800417c:	193b      	adds	r3, r7, r4
 800417e:	2200      	movs	r2, #0
 8004180:	801a      	strh	r2, [r3, #0]
	out[0] = 128 | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004182:	1cfb      	adds	r3, r7, #3
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	2280      	movs	r2, #128	; 0x80
 8004188:	4252      	negs	r2, r2
 800418a:	4313      	orrs	r3, r2
 800418c:	b2da      	uxtb	r2, r3
 800418e:	250c      	movs	r5, #12
 8004190:	197b      	adds	r3, r7, r5
 8004192:	701a      	strb	r2, [r3, #0]
	out[1]= 0;   //transfer dummy byte to get response
 8004194:	197b      	adds	r3, r7, r5
 8004196:	2200      	movs	r2, #0
 8004198:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6898      	ldr	r0, [r3, #8]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	899b      	ldrh	r3, [r3, #12]
 80041a2:	2200      	movs	r2, #0
 80041a4:	0019      	movs	r1, r3
 80041a6:	f7fc ffe3 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisLIS3MDL->spi_channel , out, in, 2, 10);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6858      	ldr	r0, [r3, #4]
 80041ae:	193a      	adds	r2, r7, r4
 80041b0:	1979      	adds	r1, r7, r5
 80041b2:	230a      	movs	r3, #10
 80041b4:	9300      	str	r3, [sp, #0]
 80041b6:	2302      	movs	r3, #2
 80041b8:	f7fe f8f4 	bl	80023a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6898      	ldr	r0, [r3, #8]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	899b      	ldrh	r3, [r3, #12]
 80041c4:	2201      	movs	r2, #1
 80041c6:	0019      	movs	r1, r3
 80041c8:	f7fc ffd2 	bl	8001170 <HAL_GPIO_WritePin>
	result = in[1];
 80041cc:	210f      	movs	r1, #15
 80041ce:	187b      	adds	r3, r7, r1
 80041d0:	193a      	adds	r2, r7, r4
 80041d2:	7852      	ldrb	r2, [r2, #1]
 80041d4:	701a      	strb	r2, [r3, #0]
	return result;
 80041d6:	187b      	adds	r3, r7, r1
 80041d8:	781b      	ldrb	r3, [r3, #0]
}
 80041da:	0018      	movs	r0, r3
 80041dc:	46bd      	mov	sp, r7
 80041de:	b004      	add	sp, #16
 80041e0:	bdb0      	pop	{r4, r5, r7, pc}

080041e2 <LIS3MDL_register_write>:

void LIS3MDL_register_write(LIS3MDL_t *thisLIS3MDL, uint8_t thisRegister, uint8_t val)
{
 80041e2:	b590      	push	{r4, r7, lr}
 80041e4:	b085      	sub	sp, #20
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
 80041ea:	0008      	movs	r0, r1
 80041ec:	0011      	movs	r1, r2
 80041ee:	1cfb      	adds	r3, r7, #3
 80041f0:	1c02      	adds	r2, r0, #0
 80041f2:	701a      	strb	r2, [r3, #0]
 80041f4:	1cbb      	adds	r3, r7, #2
 80041f6:	1c0a      	adds	r2, r1, #0
 80041f8:	701a      	strb	r2, [r3, #0]
	uint8_t out[2];
	out[0] = thisRegister;
 80041fa:	240c      	movs	r4, #12
 80041fc:	193b      	adds	r3, r7, r4
 80041fe:	1cfa      	adds	r2, r7, #3
 8004200:	7812      	ldrb	r2, [r2, #0]
 8004202:	701a      	strb	r2, [r3, #0]
	out[1] = val;
 8004204:	193b      	adds	r3, r7, r4
 8004206:	1cba      	adds	r2, r7, #2
 8004208:	7812      	ldrb	r2, [r2, #0]
 800420a:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6898      	ldr	r0, [r3, #8]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	899b      	ldrh	r3, [r3, #12]
 8004214:	2200      	movs	r2, #0
 8004216:	0019      	movs	r1, r3
 8004218:	f7fc ffaa 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6858      	ldr	r0, [r3, #4]
 8004220:	1939      	adds	r1, r7, r4
 8004222:	230a      	movs	r3, #10
 8004224:	2202      	movs	r2, #2
 8004226:	f7fd ff67 	bl	80020f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6898      	ldr	r0, [r3, #8]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	899b      	ldrh	r3, [r3, #12]
 8004232:	2201      	movs	r2, #1
 8004234:	0019      	movs	r1, r3
 8004236:	f7fc ff9b 	bl	8001170 <HAL_GPIO_WritePin>
}
 800423a:	46c0      	nop			; (mov r8, r8)
 800423c:	46bd      	mov	sp, r7
 800423e:	b005      	add	sp, #20
 8004240:	bd90      	pop	{r4, r7, pc}

08004242 <LIS3MDL_read_XYZ>:
{
	free(thisLIS3MDL);//we may need to turn off or reset chip before freeing memory each chip must have its own destroyer
}
//-----------------------------------------------------
uint8_t LIS3MDL_read_XYZ(LIS3MDL_t *thisLIS3MDL,uint16_t *data)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b082      	sub	sp, #8
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	6039      	str	r1, [r7, #0]
		if (thisLIS3MDL->magneticFront == LIS3MDL_MAXREADINGS)
		{
			thisLIS3MDL->magneticFront = 0;
		}
	}*/
}
 800424c:	46c0      	nop			; (mov r8, r8)
 800424e:	0018      	movs	r0, r3
 8004250:	46bd      	mov	sp, r7
 8004252:	b002      	add	sp, #8
 8004254:	bd80      	pop	{r7, pc}

08004256 <MMC5983_create>:
#include "mmc5983_driver.h"
#include <stdlib.h>

MMC5983_t * MMC5983_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 8004256:	b5b0      	push	{r4, r5, r7, lr}
 8004258:	b086      	sub	sp, #24
 800425a:	af00      	add	r7, sp, #0
 800425c:	60f8      	str	r0, [r7, #12]
 800425e:	60b9      	str	r1, [r7, #8]
 8004260:	603b      	str	r3, [r7, #0]
 8004262:	1dbb      	adds	r3, r7, #6
 8004264:	801a      	strh	r2, [r3, #0]
	//TODO Do we want to use a series of #defines with | in between to describe configuration registers to make this function more human readable?

	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 8004266:	2018      	movs	r0, #24
 8004268:	f000 fd00 	bl	8004c6c <malloc>
 800426c:	0003      	movs	r3, r0
 800426e:	617b      	str	r3, [r7, #20]
	thisMMC5983->CS_GPIO_Bus = CS_Bus;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	611a      	str	r2, [r3, #16]
	thisMMC5983->CS_GPIO_Pin = CS_Pin;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	1dba      	adds	r2, r7, #6
 800427a:	8812      	ldrh	r2, [r2, #0]
 800427c:	829a      	strh	r2, [r3, #20]
	thisMMC5983->INT_GPIO_Bus = INT_Bus;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	609a      	str	r2, [r3, #8]
	thisMMC5983->INT_GPIO_Pin = INT_Pin;
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	2328      	movs	r3, #40	; 0x28
 8004288:	18fb      	adds	r3, r7, r3
 800428a:	881b      	ldrh	r3, [r3, #0]
 800428c:	8193      	strh	r3, [r2, #12]
	thisMMC5983->spi_channel = spi_line;
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	6918      	ldr	r0, [r3, #16]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	8a9b      	ldrh	r3, [r3, #20]
 800429c:	2201      	movs	r2, #1
 800429e:	0019      	movs	r1, r3
 80042a0:	f7fc ff66 	bl	8001170 <HAL_GPIO_WritePin>
	if(thisMMC5983 != NULL)
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d03d      	beq.n	8004326 <MMC5983_create+0xd0>
	{
		//Set all of the configuration registers every time on bootup
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL1, MMC5983_CTRL1_SW_RST); //128: Reset chip, operation takes 10 msec
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	2280      	movs	r2, #128	; 0x80
 80042ae:	210a      	movs	r1, #10
 80042b0:	0018      	movs	r0, r3
 80042b2:	f000 f87e 	bl	80043b2 <MMC5983_register_write>
		HAL_Delay(20);
 80042b6:	2014      	movs	r0, #20
 80042b8:	f7fc fcd4 	bl	8000c64 <HAL_Delay>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_Set);  //8: Set  magnetic sensor
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	2208      	movs	r2, #8
 80042c0:	2109      	movs	r1, #9
 80042c2:	0018      	movs	r0, r3
 80042c4:	f000 f875 	bl	80043b2 <MMC5983_register_write>
		HAL_Delay(5);
 80042c8:	2005      	movs	r0, #5
 80042ca:	f7fc fccb 	bl	8000c64 <HAL_Delay>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL3, 0);  //64: SPI 3-wire mode   4/2: Saturation checks.
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2200      	movs	r2, #0
 80042d2:	210c      	movs	r1, #12
 80042d4:	0018      	movs	r0, r3
 80042d6:	f000 f86c 	bl	80043b2 <MMC5983_register_write>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_Auto_SR_en);  //7:Reserved    6:OTP    5:Auto_SR  4:Reset    3:Set   2:INT_meas_done_en   1:TM_T   0:TM_M
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2220      	movs	r2, #32
 80042de:	2109      	movs	r1, #9
 80042e0:	0018      	movs	r0, r3
 80042e2:	f000 f866 	bl	80043b2 <MMC5983_register_write>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL1, 0);  //7:SW_	RST    6:Reserved    5:Reserved  4:YZ-inhibit    3:YZ-inhibit   2:X-inhibit   1:BW1   0:BW0 {100 200 400 800}Hz
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	2200      	movs	r2, #0
 80042ea:	210a      	movs	r1, #10
 80042ec:	0018      	movs	r0, r3
 80042ee:	f000 f860 	bl	80043b2 <MMC5983_register_write>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL2, 0);  //7:En_prd_set     4-6:Prd_set    3:Cmm_en     0-2: CM_Freq {off 1 10 20 50 100 200 1000}Hz
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	2200      	movs	r2, #0
 80042f6:	210b      	movs	r1, #11
 80042f8:	0018      	movs	r0, r3
 80042fa:	f000 f85a 	bl	80043b2 <MMC5983_register_write>
		//Check whether you are communicating with the MEMSIC sensor
		uint8_t SPITestWHOAMI = MMC5983_register_read(thisMMC5983, MMC5983_WHOAMI);
 80042fe:	2513      	movs	r5, #19
 8004300:	197c      	adds	r4, r7, r5
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	212f      	movs	r1, #47	; 0x2f
 8004306:	0018      	movs	r0, r3
 8004308:	f000 f818 	bl	800433c <MMC5983_register_read>
 800430c:	0003      	movs	r3, r0
 800430e:	7023      	strb	r3, [r4, #0]
		if (SPITestWHOAMI==MMC5983_WHO_ID_RESPONSE)
 8004310:	197b      	adds	r3, r7, r5
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	2b30      	cmp	r3, #48	; 0x30
 8004316:	d103      	bne.n	8004320 <MMC5983_create+0xca>
		{
			//TODO Implement Sensor found subroutine
			thisMMC5983->sensor_status = MMC5983_SENSOR_FOUND;
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2220      	movs	r2, #32
 800431c:	701a      	strb	r2, [r3, #0]
 800431e:	e002      	b.n	8004326 <MMC5983_create+0xd0>
		}
		else
		{
			thisMMC5983->sensor_status = MMC5983_SENSOR_NOT_FOUND;
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	2230      	movs	r2, #48	; 0x30
 8004324:	701a      	strb	r2, [r3, #0]
		}
	}
	MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	2201      	movs	r2, #1
 800432a:	2109      	movs	r1, #9
 800432c:	0018      	movs	r0, r3
 800432e:	f000 f840 	bl	80043b2 <MMC5983_register_write>
	return(thisMMC5983);
 8004332:	697b      	ldr	r3, [r7, #20]
}
 8004334:	0018      	movs	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	b006      	add	sp, #24
 800433a:	bdb0      	pop	{r4, r5, r7, pc}

0800433c <MMC5983_register_read>:

uint8_t MMC5983_register_read(MMC5983_t *thisMMC5983, uint8_t thisRegister)
{
 800433c:	b5b0      	push	{r4, r5, r7, lr}
 800433e:	b086      	sub	sp, #24
 8004340:	af02      	add	r7, sp, #8
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	000a      	movs	r2, r1
 8004346:	1cfb      	adds	r3, r7, #3
 8004348:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	uint8_t out[2];
	uint8_t in[2] = {0 , 0};
 800434a:	2408      	movs	r4, #8
 800434c:	193b      	adds	r3, r7, r4
 800434e:	2200      	movs	r2, #0
 8004350:	801a      	strh	r2, [r3, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004352:	1cfb      	adds	r3, r7, #3
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2280      	movs	r2, #128	; 0x80
 8004358:	4252      	negs	r2, r2
 800435a:	4313      	orrs	r3, r2
 800435c:	b2da      	uxtb	r2, r3
 800435e:	250c      	movs	r5, #12
 8004360:	197b      	adds	r3, r7, r5
 8004362:	701a      	strb	r2, [r3, #0]
	out[1]= 0;   //transfer dummy byte to get response
 8004364:	197b      	adds	r3, r7, r5
 8004366:	2200      	movs	r2, #0
 8004368:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6918      	ldr	r0, [r3, #16]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8a9b      	ldrh	r3, [r3, #20]
 8004372:	2200      	movs	r2, #0
 8004374:	0019      	movs	r1, r3
 8004376:	f7fc fefb 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6858      	ldr	r0, [r3, #4]
 800437e:	193a      	adds	r2, r7, r4
 8004380:	1979      	adds	r1, r7, r5
 8004382:	230a      	movs	r3, #10
 8004384:	9300      	str	r3, [sp, #0]
 8004386:	2302      	movs	r3, #2
 8004388:	f7fe f80c 	bl	80023a4 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6918      	ldr	r0, [r3, #16]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	8a9b      	ldrh	r3, [r3, #20]
 8004394:	2201      	movs	r2, #1
 8004396:	0019      	movs	r1, r3
 8004398:	f7fc feea 	bl	8001170 <HAL_GPIO_WritePin>
	result = in[1];
 800439c:	210f      	movs	r1, #15
 800439e:	187b      	adds	r3, r7, r1
 80043a0:	193a      	adds	r2, r7, r4
 80043a2:	7852      	ldrb	r2, [r2, #1]
 80043a4:	701a      	strb	r2, [r3, #0]
	return result;
 80043a6:	187b      	adds	r3, r7, r1
 80043a8:	781b      	ldrb	r3, [r3, #0]
}
 80043aa:	0018      	movs	r0, r3
 80043ac:	46bd      	mov	sp, r7
 80043ae:	b004      	add	sp, #16
 80043b0:	bdb0      	pop	{r4, r5, r7, pc}

080043b2 <MMC5983_register_write>:

void MMC5983_register_write(MMC5983_t *thisMMC5983, uint8_t thisRegister, uint8_t val)
{
 80043b2:	b590      	push	{r4, r7, lr}
 80043b4:	b085      	sub	sp, #20
 80043b6:	af00      	add	r7, sp, #0
 80043b8:	6078      	str	r0, [r7, #4]
 80043ba:	0008      	movs	r0, r1
 80043bc:	0011      	movs	r1, r2
 80043be:	1cfb      	adds	r3, r7, #3
 80043c0:	1c02      	adds	r2, r0, #0
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	1cbb      	adds	r3, r7, #2
 80043c6:	1c0a      	adds	r2, r1, #0
 80043c8:	701a      	strb	r2, [r3, #0]
	uint8_t out[2];
	out[0] = thisRegister;
 80043ca:	240c      	movs	r4, #12
 80043cc:	193b      	adds	r3, r7, r4
 80043ce:	1cfa      	adds	r2, r7, #3
 80043d0:	7812      	ldrb	r2, [r2, #0]
 80043d2:	701a      	strb	r2, [r3, #0]
	out[1] = val;
 80043d4:	193b      	adds	r3, r7, r4
 80043d6:	1cba      	adds	r2, r7, #2
 80043d8:	7812      	ldrb	r2, [r2, #0]
 80043da:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6918      	ldr	r0, [r3, #16]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8a9b      	ldrh	r3, [r3, #20]
 80043e4:	2200      	movs	r2, #0
 80043e6:	0019      	movs	r1, r3
 80043e8:	f7fc fec2 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6858      	ldr	r0, [r3, #4]
 80043f0:	1939      	adds	r1, r7, r4
 80043f2:	230a      	movs	r3, #10
 80043f4:	2202      	movs	r2, #2
 80043f6:	f7fd fe7f 	bl	80020f8 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6918      	ldr	r0, [r3, #16]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	8a9b      	ldrh	r3, [r3, #20]
 8004402:	2201      	movs	r2, #1
 8004404:	0019      	movs	r1, r3
 8004406:	f7fc feb3 	bl	8001170 <HAL_GPIO_WritePin>
}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	46bd      	mov	sp, r7
 800440e:	b005      	add	sp, #20
 8004410:	bd90      	pop	{r4, r7, pc}

08004412 <MMC5983_read_XYZ>:
//-----------  we really do not need to send the second parameter since by having the address of the magnetometer object ----------
//------- we can calculate the offset of x y z data place holder there is risk on that approach if someone in future ------------
//--- add more eleman at the bigining of the structure or change the data type we need to consider those changes ---------
//----and after c++ 11 compiler can not guarantee the address of the first member of the struct is equal to the struct address -------------
uint8_t MMC5983_read_XYZ(MMC5983_t *thisMMC5983,uint8_t * data)
{
 8004412:	b5b0      	push	{r4, r5, r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
	//TODO  need a better implimentation
	uint8_t sensor_status;
	sensor_status = MMC5983_register_read(thisMMC5983, MMC5983_STATUS);
 800441c:	250f      	movs	r5, #15
 800441e:	197c      	adds	r4, r7, r5
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2108      	movs	r1, #8
 8004424:	0018      	movs	r0, r3
 8004426:	f7ff ff89 	bl	800433c <MMC5983_register_read>
 800442a:	0003      	movs	r3, r0
 800442c:	7023      	strb	r3, [r4, #0]
	if(sensor_status & MMC5983_STATUS_Meas_M_Done )
 800442e:	197b      	adds	r3, r7, r5
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2201      	movs	r2, #1
 8004434:	4013      	ands	r3, r2
 8004436:	d037      	beq.n	80044a8 <MMC5983_read_XYZ+0x96>
	{
		data[0] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT1);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2101      	movs	r1, #1
 800443c:	0018      	movs	r0, r3
 800443e:	f7ff ff7d 	bl	800433c <MMC5983_register_read>
 8004442:	0003      	movs	r3, r0
 8004444:	001a      	movs	r2, r3
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	701a      	strb	r2, [r3, #0]
		data[1] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT0);
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	1c5c      	adds	r4, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2100      	movs	r1, #0
 8004452:	0018      	movs	r0, r3
 8004454:	f7ff ff72 	bl	800433c <MMC5983_register_read>
 8004458:	0003      	movs	r3, r0
 800445a:	7023      	strb	r3, [r4, #0]
		data[2] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT1);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	1c9c      	adds	r4, r3, #2
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2103      	movs	r1, #3
 8004464:	0018      	movs	r0, r3
 8004466:	f7ff ff69 	bl	800433c <MMC5983_register_read>
 800446a:	0003      	movs	r3, r0
 800446c:	7023      	strb	r3, [r4, #0]
		data[3] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT0);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	1cdc      	adds	r4, r3, #3
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2102      	movs	r1, #2
 8004476:	0018      	movs	r0, r3
 8004478:	f7ff ff60 	bl	800433c <MMC5983_register_read>
 800447c:	0003      	movs	r3, r0
 800447e:	7023      	strb	r3, [r4, #0]
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	1d1c      	adds	r4, r3, #4
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2105      	movs	r1, #5
 8004488:	0018      	movs	r0, r3
 800448a:	f7ff ff57 	bl	800433c <MMC5983_register_read>
 800448e:	0003      	movs	r3, r0
 8004490:	7023      	strb	r3, [r4, #0]
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	1d5c      	adds	r4, r3, #5
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2104      	movs	r1, #4
 800449a:	0018      	movs	r0, r3
 800449c:	f7ff ff4e 	bl	800433c <MMC5983_register_read>
 80044a0:	0003      	movs	r3, r0
 80044a2:	7023      	strb	r3, [r4, #0]
		return 1;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e000      	b.n	80044aa <MMC5983_read_XYZ+0x98>
	}
	return 0;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	0018      	movs	r0, r3
 80044ac:	46bd      	mov	sp, r7
 80044ae:	b004      	add	sp, #16
 80044b0:	bdb0      	pop	{r4, r5, r7, pc}

080044b2 <MMC5983_get_status>:
//---------------------------
uint8_t MMC5983_get_status(MMC5983_t *thisMMC5983)
{
 80044b2:	b580      	push	{r7, lr}
 80044b4:	b082      	sub	sp, #8
 80044b6:	af00      	add	r7, sp, #0
 80044b8:	6078      	str	r0, [r7, #4]
	if(thisMMC5983->sensor_status == MMC5983_SENSOR_FOUND)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	781b      	ldrb	r3, [r3, #0]
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d101      	bne.n	80044c6 <MMC5983_get_status+0x14>
	{
		return 1;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e000      	b.n	80044c8 <MMC5983_get_status+0x16>
	}
	else
	{
		return 0;
 80044c6:	2300      	movs	r3, #0
	}
}
 80044c8:	0018      	movs	r0, r3
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b002      	add	sp, #8
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <module_system_init>:
#include "system.h"

//----------------------------------
void module_system_init(System *thisSystem, SPI_HandleTypeDef * h_SPI, I2C_HandleTypeDef * h_I2C, TIM_HandleTypeDef * h_global_timer)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b086      	sub	sp, #24
 80044d4:	af02      	add	r7, sp, #8
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
	thisSystem->data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 80044de:	23a0      	movs	r3, #160	; 0xa0
 80044e0:	05da      	lsls	r2, r3, #23
 80044e2:	4836      	ldr	r0, [pc, #216]	; (80045bc <module_system_init+0xec>)
 80044e4:	2380      	movs	r3, #128	; 0x80
 80044e6:	01db      	lsls	r3, r3, #7
 80044e8:	9301      	str	r3, [sp, #4]
 80044ea:	23a0      	movs	r3, #160	; 0xa0
 80044ec:	05db      	lsls	r3, r3, #23
 80044ee:	9300      	str	r3, [sp, #0]
 80044f0:	2301      	movs	r3, #1
 80044f2:	21ff      	movs	r1, #255	; 0xff
 80044f4:	f7fe fd8a 	bl	800300c <internal_bus_create>
 80044f8:	0002      	movs	r2, r0
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	21a0      	movs	r1, #160	; 0xa0
 80044fe:	505a      	str	r2, [r3, r1]
											BUS_CLK_GPIO_Port, BUS_CLK_Pin,
											BUS_C1_GPIO_Port, BUS_C1_Pin);

	thisSystem->ph_global_timer = global_timer_create(h_global_timer);
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	0018      	movs	r0, r3
 8004504:	f7ff fa60 	bl	80039c8 <global_timer_create>
 8004508:	0002      	movs	r2, r0
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	218c      	movs	r1, #140	; 0x8c
 800450e:	505a      	str	r2, [r3, r1]

	HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 8004510:	23a0      	movs	r3, #160	; 0xa0
 8004512:	05db      	lsls	r3, r3, #23
 8004514:	2201      	movs	r2, #1
 8004516:	2140      	movs	r1, #64	; 0x40
 8004518:	0018      	movs	r0, r3
 800451a:	f7fc fe29 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 800451e:	23a0      	movs	r3, #160	; 0xa0
 8004520:	05db      	lsls	r3, r3, #23
 8004522:	2201      	movs	r2, #1
 8004524:	2180      	movs	r1, #128	; 0x80
 8004526:	0018      	movs	r0, r3
 8004528:	f7fc fe22 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	0059      	lsls	r1, r3, #1
 8004530:	23a0      	movs	r3, #160	; 0xa0
 8004532:	05db      	lsls	r3, r3, #23
 8004534:	2201      	movs	r2, #1
 8004536:	0018      	movs	r0, r3
 8004538:	f7fc fe1a 	bl	8001170 <HAL_GPIO_WritePin>

	thisSystem->i2c_line = I2C_interface_create(h_I2C,100);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2164      	movs	r1, #100	; 0x64
 8004540:	0018      	movs	r0, r3
 8004542:	f7ff fc6f 	bl	8003e24 <I2C_interface_create>
 8004546:	0002      	movs	r2, r0
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	219c      	movs	r1, #156	; 0x9c
 800454c:	505a      	str	r2, [r3, r1]

	// init sensors
	thisSystem->sensors[0] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_A_CS_GPIO_Port , SPI_A_CS_Pin , mag_int_a_GPIO_Port , mag_int_a_Pin);
 800454e:	23a0      	movs	r3, #160	; 0xa0
 8004550:	05da      	lsls	r2, r3, #23
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	2380      	movs	r3, #128	; 0x80
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	9301      	str	r3, [sp, #4]
 800455a:	4b18      	ldr	r3, [pc, #96]	; (80045bc <module_system_init+0xec>)
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	2340      	movs	r3, #64	; 0x40
 8004560:	2014      	movs	r0, #20
 8004562:	f7ff fa6f 	bl	8003a44 <magnetometer_create>
 8004566:	0002      	movs	r2, r0
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2190      	movs	r1, #144	; 0x90
 800456c:	505a      	str	r2, [r3, r1]
	thisSystem->sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
 800456e:	23a0      	movs	r3, #160	; 0xa0
 8004570:	05da      	lsls	r2, r3, #23
 8004572:	68b9      	ldr	r1, [r7, #8]
 8004574:	2308      	movs	r3, #8
 8004576:	9301      	str	r3, [sp, #4]
 8004578:	23a0      	movs	r3, #160	; 0xa0
 800457a:	05db      	lsls	r3, r3, #23
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	2380      	movs	r3, #128	; 0x80
 8004580:	2014      	movs	r0, #20
 8004582:	f7ff fa5f 	bl	8003a44 <magnetometer_create>
 8004586:	0002      	movs	r2, r0
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2194      	movs	r1, #148	; 0x94
 800458c:	505a      	str	r2, [r3, r1]
	thisSystem->sensors[2] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_C_CS_GPIO_Port , SPI_C_CS_Pin , mag_int_c_GPIO_Port , mag_int_c_Pin);
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	0058      	lsls	r0, r3, #1
 8004592:	23a0      	movs	r3, #160	; 0xa0
 8004594:	05da      	lsls	r2, r3, #23
 8004596:	68b9      	ldr	r1, [r7, #8]
 8004598:	2310      	movs	r3, #16
 800459a:	9301      	str	r3, [sp, #4]
 800459c:	23a0      	movs	r3, #160	; 0xa0
 800459e:	05db      	lsls	r3, r3, #23
 80045a0:	9300      	str	r3, [sp, #0]
 80045a2:	0003      	movs	r3, r0
 80045a4:	2014      	movs	r0, #20
 80045a6:	f7ff fa4d 	bl	8003a44 <magnetometer_create>
 80045aa:	0002      	movs	r2, r0
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	2198      	movs	r1, #152	; 0x98
 80045b0:	505a      	str	r2, [r3, r1]

	return;
 80045b2:	46c0      	nop			; (mov r8, r8)
}
 80045b4:	46bd      	mov	sp, r7
 80045b6:	b004      	add	sp, #16
 80045b8:	bd80      	pop	{r7, pc}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	50000400 	.word	0x50000400

080045c0 <state_machine>:

void state_machine(System *thisSystem)
{
 80045c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	uint8_t b_read_permit =0;
 80045c8:	230f      	movs	r3, #15
 80045ca:	18fb      	adds	r3, r7, r3
 80045cc:	2200      	movs	r2, #0
 80045ce:	701a      	strb	r2, [r3, #0]
	uint8_t byte_shifter = 0;
 80045d0:	230e      	movs	r3, #14
 80045d2:	18fb      	adds	r3, r7, r3
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
	uint8_t this_byte = 0;
 80045d8:	230c      	movs	r3, #12
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(b_read_permit)
 80045e0:	230f      	movs	r3, #15
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d100      	bne.n	80045ec <state_machine+0x2c>
 80045ea:	e139      	b.n	8004860 <state_machine+0x2a0>
		{
			for (uint8_t sensor_num = 0; sensor_num < MODULE_SYSTEM_NUM_SENSORS; sensor_num++)
 80045ec:	230d      	movs	r3, #13
 80045ee:	18fb      	adds	r3, r7, r3
 80045f0:	2200      	movs	r2, #0
 80045f2:	701a      	strb	r2, [r3, #0]
 80045f4:	e12a      	b.n	800484c <state_machine+0x28c>
			{
				if( (thisSystem->sensors[sensor_num]->sensor_status == MAGNETOMETER_OK) & thisSystem->sensors[sensor_num]->b_new_data_needed)
 80045f6:	200d      	movs	r0, #13
 80045f8:	183b      	adds	r3, r7, r0
 80045fa:	781a      	ldrb	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3224      	adds	r2, #36	; 0x24
 8004600:	0092      	lsls	r2, r2, #2
 8004602:	58d3      	ldr	r3, [r2, r3]
 8004604:	7e1b      	ldrb	r3, [r3, #24]
 8004606:	3b51      	subs	r3, #81	; 0x51
 8004608:	425a      	negs	r2, r3
 800460a:	4153      	adcs	r3, r2
 800460c:	b2db      	uxtb	r3, r3
 800460e:	0019      	movs	r1, r3
 8004610:	183b      	adds	r3, r7, r0
 8004612:	781a      	ldrb	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	3224      	adds	r2, #36	; 0x24
 8004618:	0092      	lsls	r2, r2, #2
 800461a:	58d3      	ldr	r3, [r2, r3]
 800461c:	7cdb      	ldrb	r3, [r3, #19]
 800461e:	400b      	ands	r3, r1
 8004620:	d100      	bne.n	8004624 <state_machine+0x64>
 8004622:	e10d      	b.n	8004840 <state_machine+0x280>
				{
					if(magnetometer_read(thisSystem->sensors[sensor_num]))
 8004624:	183b      	adds	r3, r7, r0
 8004626:	781a      	ldrb	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3224      	adds	r2, #36	; 0x24
 800462c:	0092      	lsls	r2, r2, #2
 800462e:	58d3      	ldr	r3, [r2, r3]
 8004630:	0018      	movs	r0, r3
 8004632:	f7ff fb6c 	bl	8003d0e <magnetometer_read>
 8004636:	1e03      	subs	r3, r0, #0
 8004638:	d100      	bne.n	800463c <state_machine+0x7c>
 800463a:	e101      	b.n	8004840 <state_machine+0x280>
					{
						byte_shifter = 0;
 800463c:	230e      	movs	r3, #14
 800463e:	18fb      	adds	r3, r7, r3
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 5)
 8004644:	e03a      	b.n	80046bc <state_machine+0xfc>
						{
							//output_data[byte_shifter + sensor_num * 11] = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
							this_byte = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
 8004646:	260d      	movs	r6, #13
 8004648:	19bb      	adds	r3, r7, r6
 800464a:	781a      	ldrb	r2, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3224      	adds	r2, #36	; 0x24
 8004650:	0092      	lsls	r2, r2, #2
 8004652:	58d3      	ldr	r3, [r2, r3]
 8004654:	330b      	adds	r3, #11
 8004656:	001a      	movs	r2, r3
 8004658:	210e      	movs	r1, #14
 800465a:	187b      	adds	r3, r7, r1
 800465c:	781b      	ldrb	r3, [r3, #0]
 800465e:	18d2      	adds	r2, r2, r3
 8004660:	200c      	movs	r0, #12
 8004662:	183b      	adds	r3, r7, r0
 8004664:	7812      	ldrb	r2, [r2, #0]
 8004666:	701a      	strb	r2, [r3, #0]
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	22a0      	movs	r2, #160	; 0xa0
 800466c:	589b      	ldr	r3, [r3, r2]
 800466e:	889b      	ldrh	r3, [r3, #4]
 8004670:	001a      	movs	r2, r3
 8004672:	183b      	adds	r3, r7, r0
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	4013      	ands	r3, r2
 8004678:	001c      	movs	r4, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	22a0      	movs	r2, #160	; 0xa0
 800467e:	589b      	ldr	r3, [r3, r2]
 8004680:	889b      	ldrh	r3, [r3, #4]
 8004682:	001a      	movs	r2, r3
 8004684:	183b      	adds	r3, r7, r0
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	43db      	mvns	r3, r3
 800468a:	4013      	ands	r3, r2
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	0018      	movs	r0, r3
 8004690:	000d      	movs	r5, r1
 8004692:	187b      	adds	r3, r7, r1
 8004694:	7819      	ldrb	r1, [r3, #0]
 8004696:	19bb      	adds	r3, r7, r6
 8004698:	781a      	ldrb	r2, [r3, #0]
 800469a:	0013      	movs	r3, r2
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	189b      	adds	r3, r3, r2
 80046a0:	005b      	lsls	r3, r3, #1
 80046a2:	189b      	adds	r3, r3, r2
 80046a4:	18ca      	adds	r2, r1, r3
 80046a6:	0021      	movs	r1, r4
 80046a8:	4301      	orrs	r1, r0
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	3202      	adds	r2, #2
 80046ae:	0092      	lsls	r2, r2, #2
 80046b0:	50d1      	str	r1, [r2, r3]
							byte_shifter++;
 80046b2:	197b      	adds	r3, r7, r5
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	197b      	adds	r3, r7, r5
 80046b8:	3201      	adds	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 5)
 80046bc:	230e      	movs	r3, #14
 80046be:	18fb      	adds	r3, r7, r3
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d9bf      	bls.n	8004646 <state_machine+0x86>
						}

						while (byte_shifter < 11)
 80046c6:	e03a      	b.n	800473e <state_machine+0x17e>
						{
							//output_data[byte_shifter + sensor_num * 11] = *(((uint8_t*)thisSystem->sensors[sensor_num]->Readings) + (byte_shifter - 5));
							this_byte = *(((uint8_t*)thisSystem->sensors[sensor_num]->Readings) + (byte_shifter - 5));
 80046c8:	260d      	movs	r6, #13
 80046ca:	19bb      	adds	r3, r7, r6
 80046cc:	781a      	ldrb	r2, [r3, #0]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	3224      	adds	r2, #36	; 0x24
 80046d2:	0092      	lsls	r2, r2, #2
 80046d4:	58d3      	ldr	r3, [r2, r3]
 80046d6:	1d5a      	adds	r2, r3, #5
 80046d8:	210e      	movs	r1, #14
 80046da:	187b      	adds	r3, r7, r1
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	3b05      	subs	r3, #5
 80046e0:	18d2      	adds	r2, r2, r3
 80046e2:	200c      	movs	r0, #12
 80046e4:	183b      	adds	r3, r7, r0
 80046e6:	7812      	ldrb	r2, [r2, #0]
 80046e8:	701a      	strb	r2, [r3, #0]
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	22a0      	movs	r2, #160	; 0xa0
 80046ee:	589b      	ldr	r3, [r3, r2]
 80046f0:	889b      	ldrh	r3, [r3, #4]
 80046f2:	001a      	movs	r2, r3
 80046f4:	183b      	adds	r3, r7, r0
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4013      	ands	r3, r2
 80046fa:	001c      	movs	r4, r3
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	22a0      	movs	r2, #160	; 0xa0
 8004700:	589b      	ldr	r3, [r3, r2]
 8004702:	889b      	ldrh	r3, [r3, #4]
 8004704:	001a      	movs	r2, r3
 8004706:	183b      	adds	r3, r7, r0
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	43db      	mvns	r3, r3
 800470c:	4013      	ands	r3, r2
 800470e:	041b      	lsls	r3, r3, #16
 8004710:	0018      	movs	r0, r3
 8004712:	000d      	movs	r5, r1
 8004714:	187b      	adds	r3, r7, r1
 8004716:	7819      	ldrb	r1, [r3, #0]
 8004718:	19bb      	adds	r3, r7, r6
 800471a:	781a      	ldrb	r2, [r3, #0]
 800471c:	0013      	movs	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	189b      	adds	r3, r3, r2
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	189b      	adds	r3, r3, r2
 8004726:	18ca      	adds	r2, r1, r3
 8004728:	0021      	movs	r1, r4
 800472a:	4301      	orrs	r1, r0
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	3202      	adds	r2, #2
 8004730:	0092      	lsls	r2, r2, #2
 8004732:	50d1      	str	r1, [r2, r3]
							byte_shifter++;
 8004734:	197b      	adds	r3, r7, r5
 8004736:	781a      	ldrb	r2, [r3, #0]
 8004738:	197b      	adds	r3, r7, r5
 800473a:	3201      	adds	r2, #1
 800473c:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 11)
 800473e:	230e      	movs	r3, #14
 8004740:	18fb      	adds	r3, r7, r3
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b0a      	cmp	r3, #10
 8004746:	d9bf      	bls.n	80046c8 <state_machine+0x108>
						}

						//Declare that new data is no longer needed
						thisSystem->sensors[sensor_num]->b_new_data_needed = 0;
 8004748:	240d      	movs	r4, #13
 800474a:	193b      	adds	r3, r7, r4
 800474c:	781a      	ldrb	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3224      	adds	r2, #36	; 0x24
 8004752:	0092      	lsls	r2, r2, #2
 8004754:	58d3      	ldr	r3, [r2, r3]
 8004756:	2200      	movs	r2, #0
 8004758:	74da      	strb	r2, [r3, #19]
						//Begin a new data conversion immediately
						//TODO we should not directly touch anything in low layer lib evrythingh must go through magnetometer.c  otherwise there we can not have a sensor agnostic architect
						MMC5983_register_write((MMC5983_t*)thisSystem->sensors[sensor_num]->magnetometer, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
 800475a:	193b      	adds	r3, r7, r4
 800475c:	781a      	ldrb	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	3224      	adds	r2, #36	; 0x24
 8004762:	0092      	lsls	r2, r2, #2
 8004764:	58d3      	ldr	r3, [r2, r3]
 8004766:	785a      	ldrb	r2, [r3, #1]
 8004768:	7899      	ldrb	r1, [r3, #2]
 800476a:	0209      	lsls	r1, r1, #8
 800476c:	430a      	orrs	r2, r1
 800476e:	78d9      	ldrb	r1, [r3, #3]
 8004770:	0409      	lsls	r1, r1, #16
 8004772:	430a      	orrs	r2, r1
 8004774:	791b      	ldrb	r3, [r3, #4]
 8004776:	061b      	lsls	r3, r3, #24
 8004778:	4313      	orrs	r3, r2
 800477a:	2201      	movs	r2, #1
 800477c:	2109      	movs	r1, #9
 800477e:	0018      	movs	r0, r3
 8004780:	f7ff fe17 	bl	80043b2 <MMC5983_register_write>
						//Timestamp the new data conversion you ordered
						thisSystem->sensors[sensor_num]->time_stamp = get_global_timer(thisSystem->ph_global_timer);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	228c      	movs	r2, #140	; 0x8c
 8004788:	5899      	ldr	r1, [r3, r2]
 800478a:	193b      	adds	r3, r7, r4
 800478c:	781a      	ldrb	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	3224      	adds	r2, #36	; 0x24
 8004792:	0092      	lsls	r2, r2, #2
 8004794:	58d4      	ldr	r4, [r2, r3]
 8004796:	0008      	movs	r0, r1
 8004798:	f7ff f92f 	bl	80039fa <get_global_timer>
 800479c:	0023      	movs	r3, r4
 800479e:	330b      	adds	r3, #11
 80047a0:	22ff      	movs	r2, #255	; 0xff
 80047a2:	4002      	ands	r2, r0
 80047a4:	0015      	movs	r5, r2
 80047a6:	781a      	ldrb	r2, [r3, #0]
 80047a8:	2400      	movs	r4, #0
 80047aa:	4022      	ands	r2, r4
 80047ac:	1c14      	adds	r4, r2, #0
 80047ae:	1c2a      	adds	r2, r5, #0
 80047b0:	4322      	orrs	r2, r4
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	0a02      	lsrs	r2, r0, #8
 80047b6:	24ff      	movs	r4, #255	; 0xff
 80047b8:	4022      	ands	r2, r4
 80047ba:	0015      	movs	r5, r2
 80047bc:	785a      	ldrb	r2, [r3, #1]
 80047be:	2400      	movs	r4, #0
 80047c0:	4022      	ands	r2, r4
 80047c2:	1c14      	adds	r4, r2, #0
 80047c4:	1c2a      	adds	r2, r5, #0
 80047c6:	4322      	orrs	r2, r4
 80047c8:	705a      	strb	r2, [r3, #1]
 80047ca:	0c02      	lsrs	r2, r0, #16
 80047cc:	24ff      	movs	r4, #255	; 0xff
 80047ce:	4022      	ands	r2, r4
 80047d0:	0015      	movs	r5, r2
 80047d2:	789a      	ldrb	r2, [r3, #2]
 80047d4:	2400      	movs	r4, #0
 80047d6:	4022      	ands	r2, r4
 80047d8:	1c14      	adds	r4, r2, #0
 80047da:	1c2a      	adds	r2, r5, #0
 80047dc:	4322      	orrs	r2, r4
 80047de:	709a      	strb	r2, [r3, #2]
 80047e0:	0e05      	lsrs	r5, r0, #24
 80047e2:	78da      	ldrb	r2, [r3, #3]
 80047e4:	2400      	movs	r4, #0
 80047e6:	4022      	ands	r2, r4
 80047e8:	1c14      	adds	r4, r2, #0
 80047ea:	1c2a      	adds	r2, r5, #0
 80047ec:	4322      	orrs	r2, r4
 80047ee:	70da      	strb	r2, [r3, #3]
 80047f0:	22ff      	movs	r2, #255	; 0xff
 80047f2:	400a      	ands	r2, r1
 80047f4:	0015      	movs	r5, r2
 80047f6:	791a      	ldrb	r2, [r3, #4]
 80047f8:	2400      	movs	r4, #0
 80047fa:	4022      	ands	r2, r4
 80047fc:	1c14      	adds	r4, r2, #0
 80047fe:	1c2a      	adds	r2, r5, #0
 8004800:	4322      	orrs	r2, r4
 8004802:	711a      	strb	r2, [r3, #4]
 8004804:	0a0a      	lsrs	r2, r1, #8
 8004806:	24ff      	movs	r4, #255	; 0xff
 8004808:	4022      	ands	r2, r4
 800480a:	0015      	movs	r5, r2
 800480c:	795a      	ldrb	r2, [r3, #5]
 800480e:	2400      	movs	r4, #0
 8004810:	4022      	ands	r2, r4
 8004812:	1c14      	adds	r4, r2, #0
 8004814:	1c2a      	adds	r2, r5, #0
 8004816:	4322      	orrs	r2, r4
 8004818:	715a      	strb	r2, [r3, #5]
 800481a:	0c0a      	lsrs	r2, r1, #16
 800481c:	24ff      	movs	r4, #255	; 0xff
 800481e:	4022      	ands	r2, r4
 8004820:	0015      	movs	r5, r2
 8004822:	799a      	ldrb	r2, [r3, #6]
 8004824:	2400      	movs	r4, #0
 8004826:	4022      	ands	r2, r4
 8004828:	1c14      	adds	r4, r2, #0
 800482a:	1c2a      	adds	r2, r5, #0
 800482c:	4322      	orrs	r2, r4
 800482e:	719a      	strb	r2, [r3, #6]
 8004830:	0e08      	lsrs	r0, r1, #24
 8004832:	79da      	ldrb	r2, [r3, #7]
 8004834:	2100      	movs	r1, #0
 8004836:	400a      	ands	r2, r1
 8004838:	1c11      	adds	r1, r2, #0
 800483a:	1c02      	adds	r2, r0, #0
 800483c:	430a      	orrs	r2, r1
 800483e:	71da      	strb	r2, [r3, #7]
			for (uint8_t sensor_num = 0; sensor_num < MODULE_SYSTEM_NUM_SENSORS; sensor_num++)
 8004840:	210d      	movs	r1, #13
 8004842:	187b      	adds	r3, r7, r1
 8004844:	781a      	ldrb	r2, [r3, #0]
 8004846:	187b      	adds	r3, r7, r1
 8004848:	3201      	adds	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]
 800484c:	230d      	movs	r3, #13
 800484e:	18fb      	adds	r3, r7, r3
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d800      	bhi.n	8004858 <state_machine+0x298>
 8004856:	e6ce      	b.n	80045f6 <state_machine+0x36>
						//thisSystem->sensors[sensor_num]->time_stamp++;

					} //Check if the magnetometer has new data ready
				} //Check if magnetometer is functional and if new data is needed
			} //Sensor loop
			b_read_permit =0;
 8004858:	230f      	movs	r3, #15
 800485a:	18fb      	adds	r3, r7, r3
 800485c:	2200      	movs	r2, #0
 800485e:	701a      	strb	r2, [r3, #0]
		}
		//------------------------------------------
		if(thisSystem->i2c_line->new_command_is_ready_flag)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	229c      	movs	r2, #156	; 0x9c
 8004864:	589b      	ldr	r3, [r3, r2]
 8004866:	785b      	ldrb	r3, [r3, #1]
 8004868:	b2db      	uxtb	r3, r3
 800486a:	2b00      	cmp	r3, #0
 800486c:	d100      	bne.n	8004870 <state_machine+0x2b0>
 800486e:	e6b7      	b.n	80045e0 <state_machine+0x20>
		{
			switch(thisSystem->i2c_line->receiveBuffer[0])
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	229c      	movs	r2, #156	; 0x9c
 8004874:	589b      	ldr	r3, [r3, r2]
 8004876:	789b      	ldrb	r3, [r3, #2]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	3b0a      	subs	r3, #10
 800487c:	2b5e      	cmp	r3, #94	; 0x5e
 800487e:	d900      	bls.n	8004882 <state_machine+0x2c2>
 8004880:	e171      	b.n	8004b66 <state_machine+0x5a6>
 8004882:	009a      	lsls	r2, r3, #2
 8004884:	4be1      	ldr	r3, [pc, #900]	; (8004c0c <state_machine+0x64c>)
 8004886:	18d3      	adds	r3, r2, r3
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	469f      	mov	pc, r3
			{
				//-------------------------------
				case I2C_PACKET_SEND_DATA_FRAME:
				{
					thisSystem->sensors[0]->b_new_data_needed = 1;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2290      	movs	r2, #144	; 0x90
 8004890:	589b      	ldr	r3, [r3, r2]
 8004892:	2201      	movs	r2, #1
 8004894:	74da      	strb	r2, [r3, #19]
					thisSystem->sensors[1]->b_new_data_needed = 1;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2294      	movs	r2, #148	; 0x94
 800489a:	589b      	ldr	r3, [r3, r2]
 800489c:	2201      	movs	r2, #1
 800489e:	74da      	strb	r2, [r3, #19]
					thisSystem->sensors[2]->b_new_data_needed = 1;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2298      	movs	r2, #152	; 0x98
 80048a4:	589b      	ldr	r3, [r3, r2]
 80048a6:	2201      	movs	r2, #1
 80048a8:	74da      	strb	r2, [r3, #19]
					break;
 80048aa:	e15c      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BOOT0_LOW:
				{
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80048ac:	2380      	movs	r3, #128	; 0x80
 80048ae:	021b      	lsls	r3, r3, #8
 80048b0:	48d7      	ldr	r0, [pc, #860]	; (8004c10 <state_machine+0x650>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	0019      	movs	r1, r3
 80048b6:	f7fc fc5b 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80048ba:	e154      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BOOT0_HIGH:
				{
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_SET);
 80048bc:	2380      	movs	r3, #128	; 0x80
 80048be:	021b      	lsls	r3, r3, #8
 80048c0:	48d3      	ldr	r0, [pc, #844]	; (8004c10 <state_machine+0x650>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	0019      	movs	r1, r3
 80048c6:	f7fc fc53 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80048ca:	e14c      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_RESET_LOW:
				{
					  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_RESET);
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	01db      	lsls	r3, r3, #7
 80048d0:	48cf      	ldr	r0, [pc, #828]	; (8004c10 <state_machine+0x650>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	0019      	movs	r1, r3
 80048d6:	f7fc fc4b 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80048da:	e144      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_RESET_HIGH:
				{
					 HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_SET);
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	01db      	lsls	r3, r3, #7
 80048e0:	48cb      	ldr	r0, [pc, #812]	; (8004c10 <state_machine+0x650>)
 80048e2:	2201      	movs	r2, #1
 80048e4:	0019      	movs	r1, r3
 80048e6:	f7fc fc43 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80048ea:	e13c      	b.n	8004b66 <state_machine+0x5a6>
				}
				//---------this is a code for testing LED and making fun demo we can not have them in production release version
				//---------since it may make serious conflicts and issue with magnetometer reader and scheduler ----------------
				case I2C_PACKET_SET_RED_ON:
				{
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	0059      	lsls	r1, r3, #1
 80048f0:	23a0      	movs	r3, #160	; 0xa0
 80048f2:	05db      	lsls	r3, r3, #23
 80048f4:	2200      	movs	r2, #0
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7fc fc3a 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80048fc:	e133      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_RED_OFF:
				{
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 80048fe:	2380      	movs	r3, #128	; 0x80
 8004900:	0059      	lsls	r1, r3, #1
 8004902:	23a0      	movs	r3, #160	; 0xa0
 8004904:	05db      	lsls	r3, r3, #23
 8004906:	2201      	movs	r2, #1
 8004908:	0018      	movs	r0, r3
 800490a:	f7fc fc31 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 800490e:	e12a      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_GREEN_ON:
				{
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 8004910:	23a0      	movs	r3, #160	; 0xa0
 8004912:	05db      	lsls	r3, r3, #23
 8004914:	2200      	movs	r2, #0
 8004916:	2140      	movs	r1, #64	; 0x40
 8004918:	0018      	movs	r0, r3
 800491a:	f7fc fc29 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 800491e:	e122      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_GREEN_OFF:
				{
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 8004920:	23a0      	movs	r3, #160	; 0xa0
 8004922:	05db      	lsls	r3, r3, #23
 8004924:	2201      	movs	r2, #1
 8004926:	2140      	movs	r1, #64	; 0x40
 8004928:	0018      	movs	r0, r3
 800492a:	f7fc fc21 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 800492e:	e11a      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_ON:
				{
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 8004930:	23a0      	movs	r3, #160	; 0xa0
 8004932:	05db      	lsls	r3, r3, #23
 8004934:	2200      	movs	r2, #0
 8004936:	2180      	movs	r1, #128	; 0x80
 8004938:	0018      	movs	r0, r3
 800493a:	f7fc fc19 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 800493e:	e112      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_OFF:
				{
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 8004940:	23a0      	movs	r3, #160	; 0xa0
 8004942:	05db      	lsls	r3, r3, #23
 8004944:	2201      	movs	r2, #1
 8004946:	2180      	movs	r1, #128	; 0x80
 8004948:	0018      	movs	r0, r3
 800494a:	f7fc fc11 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 800494e:	e10a      	b.n	8004b66 <state_machine+0x5a6>
				}
				case I2C_PACKET_RESET_GLOBAL_TIMER:
				{
					thisSystem->ph_global_timer->h_timer->Instance->CNT = 0;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	228c      	movs	r2, #140	; 0x8c
 8004954:	589b      	ldr	r3, [r3, r2]
 8004956:	685b      	ldr	r3, [r3, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2200      	movs	r2, #0
 800495c:	625a      	str	r2, [r3, #36]	; 0x24
					thisSystem->ph_global_timer->overflow_counter = 0;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	228c      	movs	r2, #140	; 0x8c
 8004962:	589b      	ldr	r3, [r3, r2]
 8004964:	2200      	movs	r2, #0
 8004966:	701a      	strb	r2, [r3, #0]
					break;
 8004968:	e0fd      	b.n	8004b66 <state_machine+0x5a6>
				}

				//----------test cases---------------------
				case I2C_PACKET_SENSOR_TEST_ROUTINE:
				{
					if(thisSystem->sensors[0]->sensor_status == MAGNETOMETER_FAULTY )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2290      	movs	r2, #144	; 0x90
 800496e:	589b      	ldr	r3, [r3, r2]
 8004970:	7e1b      	ldrb	r3, [r3, #24]
 8004972:	2b50      	cmp	r3, #80	; 0x50
 8004974:	d113      	bne.n	800499e <state_machine+0x3de>
					{
						HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 8004976:	23a0      	movs	r3, #160	; 0xa0
 8004978:	05db      	lsls	r3, r3, #23
 800497a:	2200      	movs	r2, #0
 800497c:	2140      	movs	r1, #64	; 0x40
 800497e:	0018      	movs	r0, r3
 8004980:	f7fc fbf6 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8004984:	20c8      	movs	r0, #200	; 0xc8
 8004986:	f7fc f96d 	bl	8000c64 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 800498a:	23a0      	movs	r3, #160	; 0xa0
 800498c:	05db      	lsls	r3, r3, #23
 800498e:	2201      	movs	r2, #1
 8004990:	2140      	movs	r1, #64	; 0x40
 8004992:	0018      	movs	r0, r3
 8004994:	f7fc fbec 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8004998:	20fa      	movs	r0, #250	; 0xfa
 800499a:	f7fc f963 	bl	8000c64 <HAL_Delay>
					}
					if(thisSystem->sensors[1]->sensor_status == MAGNETOMETER_FAULTY )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2294      	movs	r2, #148	; 0x94
 80049a2:	589b      	ldr	r3, [r3, r2]
 80049a4:	7e1b      	ldrb	r3, [r3, #24]
 80049a6:	2b50      	cmp	r3, #80	; 0x50
 80049a8:	d113      	bne.n	80049d2 <state_machine+0x412>
					{
						HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 80049aa:	23a0      	movs	r3, #160	; 0xa0
 80049ac:	05db      	lsls	r3, r3, #23
 80049ae:	2200      	movs	r2, #0
 80049b0:	2180      	movs	r1, #128	; 0x80
 80049b2:	0018      	movs	r0, r3
 80049b4:	f7fc fbdc 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 80049b8:	20c8      	movs	r0, #200	; 0xc8
 80049ba:	f7fc f953 	bl	8000c64 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 80049be:	23a0      	movs	r3, #160	; 0xa0
 80049c0:	05db      	lsls	r3, r3, #23
 80049c2:	2201      	movs	r2, #1
 80049c4:	2180      	movs	r1, #128	; 0x80
 80049c6:	0018      	movs	r0, r3
 80049c8:	f7fc fbd2 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 80049cc:	20fa      	movs	r0, #250	; 0xfa
 80049ce:	f7fc f949 	bl	8000c64 <HAL_Delay>
					}
					if(thisSystem->sensors[2]->sensor_status == MAGNETOMETER_FAULTY )
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2298      	movs	r2, #152	; 0x98
 80049d6:	589b      	ldr	r3, [r3, r2]
 80049d8:	7e1b      	ldrb	r3, [r3, #24]
 80049da:	2b50      	cmp	r3, #80	; 0x50
 80049dc:	d115      	bne.n	8004a0a <state_machine+0x44a>
					{
						HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 80049de:	2380      	movs	r3, #128	; 0x80
 80049e0:	0059      	lsls	r1, r3, #1
 80049e2:	23a0      	movs	r3, #160	; 0xa0
 80049e4:	05db      	lsls	r3, r3, #23
 80049e6:	2200      	movs	r2, #0
 80049e8:	0018      	movs	r0, r3
 80049ea:	f7fc fbc1 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 80049ee:	20c8      	movs	r0, #200	; 0xc8
 80049f0:	f7fc f938 	bl	8000c64 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 80049f4:	2380      	movs	r3, #128	; 0x80
 80049f6:	0059      	lsls	r1, r3, #1
 80049f8:	23a0      	movs	r3, #160	; 0xa0
 80049fa:	05db      	lsls	r3, r3, #23
 80049fc:	2201      	movs	r2, #1
 80049fe:	0018      	movs	r0, r3
 8004a00:	f7fc fbb6 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8004a04:	20fa      	movs	r0, #250	; 0xfa
 8004a06:	f7fc f92d 	bl	8000c64 <HAL_Delay>
					}
					//after this point we can not use HAL Delay function we disable that because systick interrupt make unpredictable timing for time sensitive procedures
					HAL_SuspendTick();
 8004a0a:	f7fc f94f 	bl	8000cac <HAL_SuspendTick>
					break;
 8004a0e:	e0aa      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------------------
				case I2C_PACKET_BEGIN_MAG_CONVERSION:
				{
					b_read_permit =1;
 8004a10:	230f      	movs	r3, #15
 8004a12:	18fb      	adds	r3, r7, r3
 8004a14:	2201      	movs	r2, #1
 8004a16:	701a      	strb	r2, [r3, #0]
					break;
 8004a18:	e0a5      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSOR1_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2290      	movs	r2, #144	; 0x90
 8004a1e:	589b      	ldr	r3, [r3, r2]
 8004a20:	785a      	ldrb	r2, [r3, #1]
 8004a22:	7899      	ldrb	r1, [r3, #2]
 8004a24:	0209      	lsls	r1, r1, #8
 8004a26:	430a      	orrs	r2, r1
 8004a28:	78d9      	ldrb	r1, [r3, #3]
 8004a2a:	0409      	lsls	r1, r1, #16
 8004a2c:	430a      	orrs	r2, r1
 8004a2e:	791b      	ldrb	r3, [r3, #4]
 8004a30:	061b      	lsls	r3, r3, #24
 8004a32:	4313      	orrs	r3, r2
 8004a34:	0018      	movs	r0, r3
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	229c      	movs	r2, #156	; 0x9c
 8004a3a:	589b      	ldr	r3, [r3, r2]
 8004a3c:	78db      	ldrb	r3, [r3, #3]
 8004a3e:	b2d9      	uxtb	r1, r3
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	229c      	movs	r2, #156	; 0x9c
 8004a44:	589b      	ldr	r3, [r3, r2]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	001a      	movs	r2, r3
 8004a4c:	f7ff f9a3 	bl	8003d96 <magnetometer_direct_register_write>
					break;
 8004a50:	e089      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSOR2_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2294      	movs	r2, #148	; 0x94
 8004a56:	589b      	ldr	r3, [r3, r2]
 8004a58:	785a      	ldrb	r2, [r3, #1]
 8004a5a:	7899      	ldrb	r1, [r3, #2]
 8004a5c:	0209      	lsls	r1, r1, #8
 8004a5e:	430a      	orrs	r2, r1
 8004a60:	78d9      	ldrb	r1, [r3, #3]
 8004a62:	0409      	lsls	r1, r1, #16
 8004a64:	430a      	orrs	r2, r1
 8004a66:	791b      	ldrb	r3, [r3, #4]
 8004a68:	061b      	lsls	r3, r3, #24
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	229c      	movs	r2, #156	; 0x9c
 8004a72:	589b      	ldr	r3, [r3, r2]
 8004a74:	78db      	ldrb	r3, [r3, #3]
 8004a76:	b2d9      	uxtb	r1, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	229c      	movs	r2, #156	; 0x9c
 8004a7c:	589b      	ldr	r3, [r3, r2]
 8004a7e:	791b      	ldrb	r3, [r3, #4]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	001a      	movs	r2, r3
 8004a84:	f7ff f987 	bl	8003d96 <magnetometer_direct_register_write>
					break;
 8004a88:	e06d      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSOR3_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2298      	movs	r2, #152	; 0x98
 8004a8e:	589b      	ldr	r3, [r3, r2]
 8004a90:	785a      	ldrb	r2, [r3, #1]
 8004a92:	7899      	ldrb	r1, [r3, #2]
 8004a94:	0209      	lsls	r1, r1, #8
 8004a96:	430a      	orrs	r2, r1
 8004a98:	78d9      	ldrb	r1, [r3, #3]
 8004a9a:	0409      	lsls	r1, r1, #16
 8004a9c:	430a      	orrs	r2, r1
 8004a9e:	791b      	ldrb	r3, [r3, #4]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	4313      	orrs	r3, r2
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	229c      	movs	r2, #156	; 0x9c
 8004aaa:	589b      	ldr	r3, [r3, r2]
 8004aac:	78db      	ldrb	r3, [r3, #3]
 8004aae:	b2d9      	uxtb	r1, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	229c      	movs	r2, #156	; 0x9c
 8004ab4:	589b      	ldr	r3, [r3, r2]
 8004ab6:	791b      	ldrb	r3, [r3, #4]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	001a      	movs	r2, r3
 8004abc:	f7ff f96b 	bl	8003d96 <magnetometer_direct_register_write>
					break;
 8004ac0:	e051      	b.n	8004b66 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSORS_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2290      	movs	r2, #144	; 0x90
 8004ac6:	589b      	ldr	r3, [r3, r2]
 8004ac8:	785a      	ldrb	r2, [r3, #1]
 8004aca:	7899      	ldrb	r1, [r3, #2]
 8004acc:	0209      	lsls	r1, r1, #8
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	78d9      	ldrb	r1, [r3, #3]
 8004ad2:	0409      	lsls	r1, r1, #16
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	791b      	ldrb	r3, [r3, #4]
 8004ad8:	061b      	lsls	r3, r3, #24
 8004ada:	4313      	orrs	r3, r2
 8004adc:	0018      	movs	r0, r3
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	229c      	movs	r2, #156	; 0x9c
 8004ae2:	589b      	ldr	r3, [r3, r2]
 8004ae4:	78db      	ldrb	r3, [r3, #3]
 8004ae6:	b2d9      	uxtb	r1, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	229c      	movs	r2, #156	; 0x9c
 8004aec:	589b      	ldr	r3, [r3, r2]
 8004aee:	791b      	ldrb	r3, [r3, #4]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	001a      	movs	r2, r3
 8004af4:	f7ff f94f 	bl	8003d96 <magnetometer_direct_register_write>
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2294      	movs	r2, #148	; 0x94
 8004afc:	589b      	ldr	r3, [r3, r2]
 8004afe:	785a      	ldrb	r2, [r3, #1]
 8004b00:	7899      	ldrb	r1, [r3, #2]
 8004b02:	0209      	lsls	r1, r1, #8
 8004b04:	430a      	orrs	r2, r1
 8004b06:	78d9      	ldrb	r1, [r3, #3]
 8004b08:	0409      	lsls	r1, r1, #16
 8004b0a:	430a      	orrs	r2, r1
 8004b0c:	791b      	ldrb	r3, [r3, #4]
 8004b0e:	061b      	lsls	r3, r3, #24
 8004b10:	4313      	orrs	r3, r2
 8004b12:	0018      	movs	r0, r3
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	229c      	movs	r2, #156	; 0x9c
 8004b18:	589b      	ldr	r3, [r3, r2]
 8004b1a:	78db      	ldrb	r3, [r3, #3]
 8004b1c:	b2d9      	uxtb	r1, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	229c      	movs	r2, #156	; 0x9c
 8004b22:	589b      	ldr	r3, [r3, r2]
 8004b24:	791b      	ldrb	r3, [r3, #4]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	001a      	movs	r2, r3
 8004b2a:	f7ff f934 	bl	8003d96 <magnetometer_direct_register_write>
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2298      	movs	r2, #152	; 0x98
 8004b32:	589b      	ldr	r3, [r3, r2]
 8004b34:	785a      	ldrb	r2, [r3, #1]
 8004b36:	7899      	ldrb	r1, [r3, #2]
 8004b38:	0209      	lsls	r1, r1, #8
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	78d9      	ldrb	r1, [r3, #3]
 8004b3e:	0409      	lsls	r1, r1, #16
 8004b40:	430a      	orrs	r2, r1
 8004b42:	791b      	ldrb	r3, [r3, #4]
 8004b44:	061b      	lsls	r3, r3, #24
 8004b46:	4313      	orrs	r3, r2
 8004b48:	0018      	movs	r0, r3
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	229c      	movs	r2, #156	; 0x9c
 8004b4e:	589b      	ldr	r3, [r3, r2]
 8004b50:	78db      	ldrb	r3, [r3, #3]
 8004b52:	b2d9      	uxtb	r1, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	229c      	movs	r2, #156	; 0x9c
 8004b58:	589b      	ldr	r3, [r3, r2]
 8004b5a:	791b      	ldrb	r3, [r3, #4]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	001a      	movs	r2, r3
 8004b60:	f7ff f919 	bl	8003d96 <magnetometer_direct_register_write>
					break;
 8004b64:	46c0      	nop			; (mov r8, r8)
				}
			}
			//-------- if we get any data higher than 0x80 in the first byte it mean it is a new address
			if ( thisSystem->i2c_line->receiveBuffer[0] > I2C_PACKET_SET_NEW_ADDRESS )
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	229c      	movs	r2, #156	; 0x9c
 8004b6a:	589b      	ldr	r3, [r3, r2]
 8004b6c:	789b      	ldrb	r3, [r3, #2]
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b80      	cmp	r3, #128	; 0x80
 8004b72:	d940      	bls.n	8004bf6 <state_machine+0x636>
			{
				__HAL_I2C_DISABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	229c      	movs	r2, #156	; 0x9c
 8004b78:	589b      	ldr	r3, [r3, r2]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	219c      	movs	r1, #156	; 0x9c
 8004b84:	585b      	ldr	r3, [r3, r1]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	212c      	movs	r1, #44	; 0x2c
 8004b8c:	438a      	bics	r2, r1
 8004b8e:	601a      	str	r2, [r3, #0]
				uint8_t i2c_new_address =  (uint8_t)thisSystem->i2c_line->receiveBuffer[0] & 0x7f;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	229c      	movs	r2, #156	; 0x9c
 8004b94:	589b      	ldr	r3, [r3, r2]
 8004b96:	789b      	ldrb	r3, [r3, #2]
 8004b98:	b2da      	uxtb	r2, r3
 8004b9a:	200b      	movs	r0, #11
 8004b9c:	183b      	adds	r3, r7, r0
 8004b9e:	217f      	movs	r1, #127	; 0x7f
 8004ba0:	400a      	ands	r2, r1
 8004ba2:	701a      	strb	r2, [r3, #0]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	229c      	movs	r2, #156	; 0x9c
 8004ba8:	589b      	ldr	r3, [r3, r2]
 8004baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	219c      	movs	r1, #156	; 0x9c
 8004bb4:	585b      	ldr	r3, [r3, r1]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4916      	ldr	r1, [pc, #88]	; (8004c14 <state_machine+0x654>)
 8004bbc:	400a      	ands	r2, r1
 8004bbe:	609a      	str	r2, [r3, #8]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( i2c_new_address << 1) );
 8004bc0:	183b      	adds	r3, r7, r0
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	005b      	lsls	r3, r3, #1
 8004bc6:	0019      	movs	r1, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	229c      	movs	r2, #156	; 0x9c
 8004bcc:	589b      	ldr	r3, [r3, r2]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2280      	movs	r2, #128	; 0x80
 8004bd4:	0212      	lsls	r2, r2, #8
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	609a      	str	r2, [r3, #8]
				__HAL_I2C_ENABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	229c      	movs	r2, #156	; 0x9c
 8004bde:	589b      	ldr	r3, [r3, r2]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	219c      	movs	r1, #156	; 0x9c
 8004bea:	585b      	ldr	r3, [r3, r1]
 8004bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	212c      	movs	r1, #44	; 0x2c
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	601a      	str	r2, [r3, #0]
			}
			thisSystem->i2c_line->buffer_index =0;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	229c      	movs	r2, #156	; 0x9c
 8004bfa:	589b      	ldr	r3, [r3, r2]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	701a      	strb	r2, [r3, #0]
			thisSystem->i2c_line->new_command_is_ready_flag = 0;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	229c      	movs	r2, #156	; 0x9c
 8004c04:	589b      	ldr	r3, [r3, r2]
 8004c06:	2200      	movs	r2, #0
 8004c08:	705a      	strb	r2, [r3, #1]
		if(b_read_permit)
 8004c0a:	e4e9      	b.n	80045e0 <state_machine+0x20>
 8004c0c:	08004dc8 	.word	0x08004dc8
 8004c10:	50000800 	.word	0x50000800
 8004c14:	ffff7fff 	.word	0xffff7fff

08004c18 <__errno>:
 8004c18:	4b01      	ldr	r3, [pc, #4]	; (8004c20 <__errno+0x8>)
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	4770      	bx	lr
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	2000000c 	.word	0x2000000c

08004c24 <__libc_init_array>:
 8004c24:	b570      	push	{r4, r5, r6, lr}
 8004c26:	2600      	movs	r6, #0
 8004c28:	4d0c      	ldr	r5, [pc, #48]	; (8004c5c <__libc_init_array+0x38>)
 8004c2a:	4c0d      	ldr	r4, [pc, #52]	; (8004c60 <__libc_init_array+0x3c>)
 8004c2c:	1b64      	subs	r4, r4, r5
 8004c2e:	10a4      	asrs	r4, r4, #2
 8004c30:	42a6      	cmp	r6, r4
 8004c32:	d109      	bne.n	8004c48 <__libc_init_array+0x24>
 8004c34:	2600      	movs	r6, #0
 8004c36:	f000 f8ad 	bl	8004d94 <_init>
 8004c3a:	4d0a      	ldr	r5, [pc, #40]	; (8004c64 <__libc_init_array+0x40>)
 8004c3c:	4c0a      	ldr	r4, [pc, #40]	; (8004c68 <__libc_init_array+0x44>)
 8004c3e:	1b64      	subs	r4, r4, r5
 8004c40:	10a4      	asrs	r4, r4, #2
 8004c42:	42a6      	cmp	r6, r4
 8004c44:	d105      	bne.n	8004c52 <__libc_init_array+0x2e>
 8004c46:	bd70      	pop	{r4, r5, r6, pc}
 8004c48:	00b3      	lsls	r3, r6, #2
 8004c4a:	58eb      	ldr	r3, [r5, r3]
 8004c4c:	4798      	blx	r3
 8004c4e:	3601      	adds	r6, #1
 8004c50:	e7ee      	b.n	8004c30 <__libc_init_array+0xc>
 8004c52:	00b3      	lsls	r3, r6, #2
 8004c54:	58eb      	ldr	r3, [r5, r3]
 8004c56:	4798      	blx	r3
 8004c58:	3601      	adds	r6, #1
 8004c5a:	e7f2      	b.n	8004c42 <__libc_init_array+0x1e>
 8004c5c:	08004f4c 	.word	0x08004f4c
 8004c60:	08004f4c 	.word	0x08004f4c
 8004c64:	08004f4c 	.word	0x08004f4c
 8004c68:	08004f50 	.word	0x08004f50

08004c6c <malloc>:
 8004c6c:	b510      	push	{r4, lr}
 8004c6e:	4b03      	ldr	r3, [pc, #12]	; (8004c7c <malloc+0x10>)
 8004c70:	0001      	movs	r1, r0
 8004c72:	6818      	ldr	r0, [r3, #0]
 8004c74:	f000 f80c 	bl	8004c90 <_malloc_r>
 8004c78:	bd10      	pop	{r4, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	2000000c 	.word	0x2000000c

08004c80 <memset>:
 8004c80:	0003      	movs	r3, r0
 8004c82:	1882      	adds	r2, r0, r2
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d100      	bne.n	8004c8a <memset+0xa>
 8004c88:	4770      	bx	lr
 8004c8a:	7019      	strb	r1, [r3, #0]
 8004c8c:	3301      	adds	r3, #1
 8004c8e:	e7f9      	b.n	8004c84 <memset+0x4>

08004c90 <_malloc_r>:
 8004c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c92:	2303      	movs	r3, #3
 8004c94:	1ccd      	adds	r5, r1, #3
 8004c96:	439d      	bics	r5, r3
 8004c98:	3508      	adds	r5, #8
 8004c9a:	0006      	movs	r6, r0
 8004c9c:	2d0c      	cmp	r5, #12
 8004c9e:	d21f      	bcs.n	8004ce0 <_malloc_r+0x50>
 8004ca0:	250c      	movs	r5, #12
 8004ca2:	42a9      	cmp	r1, r5
 8004ca4:	d81e      	bhi.n	8004ce4 <_malloc_r+0x54>
 8004ca6:	0030      	movs	r0, r6
 8004ca8:	f000 f862 	bl	8004d70 <__malloc_lock>
 8004cac:	4925      	ldr	r1, [pc, #148]	; (8004d44 <_malloc_r+0xb4>)
 8004cae:	680a      	ldr	r2, [r1, #0]
 8004cb0:	0014      	movs	r4, r2
 8004cb2:	2c00      	cmp	r4, #0
 8004cb4:	d11a      	bne.n	8004cec <_malloc_r+0x5c>
 8004cb6:	4f24      	ldr	r7, [pc, #144]	; (8004d48 <_malloc_r+0xb8>)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d104      	bne.n	8004cc8 <_malloc_r+0x38>
 8004cbe:	0021      	movs	r1, r4
 8004cc0:	0030      	movs	r0, r6
 8004cc2:	f000 f843 	bl	8004d4c <_sbrk_r>
 8004cc6:	6038      	str	r0, [r7, #0]
 8004cc8:	0029      	movs	r1, r5
 8004cca:	0030      	movs	r0, r6
 8004ccc:	f000 f83e 	bl	8004d4c <_sbrk_r>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d12b      	bne.n	8004d2c <_malloc_r+0x9c>
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	0030      	movs	r0, r6
 8004cd8:	6033      	str	r3, [r6, #0]
 8004cda:	f000 f851 	bl	8004d80 <__malloc_unlock>
 8004cde:	e003      	b.n	8004ce8 <_malloc_r+0x58>
 8004ce0:	2d00      	cmp	r5, #0
 8004ce2:	dade      	bge.n	8004ca2 <_malloc_r+0x12>
 8004ce4:	230c      	movs	r3, #12
 8004ce6:	6033      	str	r3, [r6, #0]
 8004ce8:	2000      	movs	r0, #0
 8004cea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cec:	6823      	ldr	r3, [r4, #0]
 8004cee:	1b5b      	subs	r3, r3, r5
 8004cf0:	d419      	bmi.n	8004d26 <_malloc_r+0x96>
 8004cf2:	2b0b      	cmp	r3, #11
 8004cf4:	d903      	bls.n	8004cfe <_malloc_r+0x6e>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	18e4      	adds	r4, r4, r3
 8004cfa:	6025      	str	r5, [r4, #0]
 8004cfc:	e003      	b.n	8004d06 <_malloc_r+0x76>
 8004cfe:	6863      	ldr	r3, [r4, #4]
 8004d00:	42a2      	cmp	r2, r4
 8004d02:	d10e      	bne.n	8004d22 <_malloc_r+0x92>
 8004d04:	600b      	str	r3, [r1, #0]
 8004d06:	0030      	movs	r0, r6
 8004d08:	f000 f83a 	bl	8004d80 <__malloc_unlock>
 8004d0c:	0020      	movs	r0, r4
 8004d0e:	2207      	movs	r2, #7
 8004d10:	300b      	adds	r0, #11
 8004d12:	1d23      	adds	r3, r4, #4
 8004d14:	4390      	bics	r0, r2
 8004d16:	1ac2      	subs	r2, r0, r3
 8004d18:	4298      	cmp	r0, r3
 8004d1a:	d0e6      	beq.n	8004cea <_malloc_r+0x5a>
 8004d1c:	1a1b      	subs	r3, r3, r0
 8004d1e:	50a3      	str	r3, [r4, r2]
 8004d20:	e7e3      	b.n	8004cea <_malloc_r+0x5a>
 8004d22:	6053      	str	r3, [r2, #4]
 8004d24:	e7ef      	b.n	8004d06 <_malloc_r+0x76>
 8004d26:	0022      	movs	r2, r4
 8004d28:	6864      	ldr	r4, [r4, #4]
 8004d2a:	e7c2      	b.n	8004cb2 <_malloc_r+0x22>
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	1cc4      	adds	r4, r0, #3
 8004d30:	439c      	bics	r4, r3
 8004d32:	42a0      	cmp	r0, r4
 8004d34:	d0e1      	beq.n	8004cfa <_malloc_r+0x6a>
 8004d36:	1a21      	subs	r1, r4, r0
 8004d38:	0030      	movs	r0, r6
 8004d3a:	f000 f807 	bl	8004d4c <_sbrk_r>
 8004d3e:	1c43      	adds	r3, r0, #1
 8004d40:	d1db      	bne.n	8004cfa <_malloc_r+0x6a>
 8004d42:	e7c7      	b.n	8004cd4 <_malloc_r+0x44>
 8004d44:	20000090 	.word	0x20000090
 8004d48:	20000094 	.word	0x20000094

08004d4c <_sbrk_r>:
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	b570      	push	{r4, r5, r6, lr}
 8004d50:	4d06      	ldr	r5, [pc, #24]	; (8004d6c <_sbrk_r+0x20>)
 8004d52:	0004      	movs	r4, r0
 8004d54:	0008      	movs	r0, r1
 8004d56:	602b      	str	r3, [r5, #0]
 8004d58:	f7fb fe06 	bl	8000968 <_sbrk>
 8004d5c:	1c43      	adds	r3, r0, #1
 8004d5e:	d103      	bne.n	8004d68 <_sbrk_r+0x1c>
 8004d60:	682b      	ldr	r3, [r5, #0]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d000      	beq.n	8004d68 <_sbrk_r+0x1c>
 8004d66:	6023      	str	r3, [r4, #0]
 8004d68:	bd70      	pop	{r4, r5, r6, pc}
 8004d6a:	46c0      	nop			; (mov r8, r8)
 8004d6c:	2000026c 	.word	0x2000026c

08004d70 <__malloc_lock>:
 8004d70:	b510      	push	{r4, lr}
 8004d72:	4802      	ldr	r0, [pc, #8]	; (8004d7c <__malloc_lock+0xc>)
 8004d74:	f000 f80c 	bl	8004d90 <__retarget_lock_acquire_recursive>
 8004d78:	bd10      	pop	{r4, pc}
 8004d7a:	46c0      	nop			; (mov r8, r8)
 8004d7c:	20000274 	.word	0x20000274

08004d80 <__malloc_unlock>:
 8004d80:	b510      	push	{r4, lr}
 8004d82:	4802      	ldr	r0, [pc, #8]	; (8004d8c <__malloc_unlock+0xc>)
 8004d84:	f000 f805 	bl	8004d92 <__retarget_lock_release_recursive>
 8004d88:	bd10      	pop	{r4, pc}
 8004d8a:	46c0      	nop			; (mov r8, r8)
 8004d8c:	20000274 	.word	0x20000274

08004d90 <__retarget_lock_acquire_recursive>:
 8004d90:	4770      	bx	lr

08004d92 <__retarget_lock_release_recursive>:
 8004d92:	4770      	bx	lr

08004d94 <_init>:
 8004d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d9a:	bc08      	pop	{r3}
 8004d9c:	469e      	mov	lr, r3
 8004d9e:	4770      	bx	lr

08004da0 <_fini>:
 8004da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004da2:	46c0      	nop			; (mov r8, r8)
 8004da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da6:	bc08      	pop	{r3}
 8004da8:	469e      	mov	lr, r3
 8004daa:	4770      	bx	lr
