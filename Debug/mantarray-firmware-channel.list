
mantarray-firmware-channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000450c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080045cc  080045cc  000145cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046a0  080046a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080046a0  080046a0  000146a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080046a8  080046a8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046a8  080046a8  000146a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046ac  080046ac  000146ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080046b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000070  08004720  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08004720  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027fc4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000053fc  00000000  00000000  0004805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010a0  00000000  00000000  0004d458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002e70  00000000  00000000  0004e4f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000188da  00000000  00000000  00051368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002879e  00000000  00000000  00069c42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086222  00000000  00000000  000923e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00118602  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003504  00000000  00000000  00118658  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00019b1d  00000000  00000000  0011bb5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080045b4 	.word	0x080045b4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080045b4 	.word	0x080045b4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 800049c:	b510      	push	{r4, lr}
 800049e:	b082      	sub	sp, #8

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004a0:	2208      	movs	r2, #8
 80004a2:	2100      	movs	r1, #0
 80004a4:	4668      	mov	r0, sp
 80004a6:	f003 fffb 	bl	80044a0 <memset>
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004aa:	22c2      	movs	r2, #194	; 0xc2
  hadc.Init.OversamplingMode = DISABLE;
 80004ac:	2300      	movs	r3, #0
 80004ae:	4c1e      	ldr	r4, [pc, #120]	; (8000528 <MX_ADC_Init+0x8c>)
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004b0:	32ff      	adds	r2, #255	; 0xff
 80004b2:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80004b4:	3a96      	subs	r2, #150	; 0x96
 80004b6:	3aff      	subs	r2, #255	; 0xff
 80004b8:	54a3      	strb	r3, [r4, r2]
  hadc.Instance = ADC1;
 80004ba:	4a1c      	ldr	r2, [pc, #112]	; (800052c <MX_ADC_Init+0x90>)
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004bc:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80004be:	6022      	str	r2, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80004c0:	2280      	movs	r2, #128	; 0x80
 80004c2:	05d2      	lsls	r2, r2, #23
 80004c4:	6062      	str	r2, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004c6:	2201      	movs	r2, #1
  hadc.Init.ContinuousConvMode = DISABLE;
 80004c8:	8423      	strh	r3, [r4, #32]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80004ca:	6122      	str	r2, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004cc:	3203      	adds	r2, #3
  hadc.Init.OversamplingMode = DISABLE;
 80004ce:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80004d0:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80004d2:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80004d4:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 80004d6:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80004d8:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80004da:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80004dc:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80004de:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80004e0:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80004e2:	f000 fc8d 	bl	8000e00 <HAL_ADC_Init>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	d114      	bne.n	8000514 <MX_ADC_Init+0x78>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004ea:	2380      	movs	r3, #128	; 0x80
 80004ec:	4a10      	ldr	r2, [pc, #64]	; (8000530 <MX_ADC_Init+0x94>)
 80004ee:	015b      	lsls	r3, r3, #5
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f0:	4669      	mov	r1, sp
 80004f2:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80004f4:	9200      	str	r2, [sp, #0]
 80004f6:	9301      	str	r3, [sp, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80004f8:	f000 fd64 	bl	8000fc4 <HAL_ADC_ConfigChannel>
 80004fc:	2800      	cmp	r0, #0
 80004fe:	d10f      	bne.n	8000520 <MX_ADC_Init+0x84>
  {
    Error_Handler();
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <MX_ADC_Init+0x98>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000502:	4669      	mov	r1, sp
 8000504:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000506:	9300      	str	r3, [sp, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000508:	f000 fd5c 	bl	8000fc4 <HAL_ADC_ConfigChannel>
 800050c:	2800      	cmp	r0, #0
 800050e:	d104      	bne.n	800051a <MX_ADC_Init+0x7e>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000510:	b002      	add	sp, #8
 8000512:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000514:	f000 fa02 	bl	800091c <Error_Handler>
 8000518:	e7e7      	b.n	80004ea <MX_ADC_Init+0x4e>
    Error_Handler();
 800051a:	f000 f9ff 	bl	800091c <Error_Handler>
}
 800051e:	e7f7      	b.n	8000510 <MX_ADC_Init+0x74>
    Error_Handler();
 8000520:	f000 f9fc 	bl	800091c <Error_Handler>
 8000524:	e7ec      	b.n	8000500 <MX_ADC_Init+0x64>
 8000526:	46c0      	nop			; (mov r8, r8)
 8000528:	20000098 	.word	0x20000098
 800052c:	40012400 	.word	0x40012400
 8000530:	48040000 	.word	0x48040000
 8000534:	44020000 	.word	0x44020000

08000538 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC1)
 8000538:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_ADC_MspInit+0x18>)
 800053a:	6802      	ldr	r2, [r0, #0]
 800053c:	429a      	cmp	r2, r3
 800053e:	d000      	beq.n	8000542 <HAL_ADC_MspInit+0xa>
    __HAL_RCC_ADC1_CLK_ENABLE();
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000540:	4770      	bx	lr
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000542:	2380      	movs	r3, #128	; 0x80
 8000544:	4a03      	ldr	r2, [pc, #12]	; (8000554 <HAL_ADC_MspInit+0x1c>)
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800054a:	430b      	orrs	r3, r1
 800054c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800054e:	e7f7      	b.n	8000540 <HAL_ADC_MspInit+0x8>
 8000550:	40012400 	.word	0x40012400
 8000554:	40021000 	.word	0x40021000

08000558 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8000558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055a:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800055c:	2214      	movs	r2, #20
 800055e:	2100      	movs	r1, #0
 8000560:	a804      	add	r0, sp, #16
 8000562:	f003 ff9d 	bl	80044a0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000566:	2201      	movs	r2, #1
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 800056a:	4d2a      	ldr	r5, [pc, #168]	; (8000614 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800056c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 800056e:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000570:	4311      	orrs	r1, r2
 8000572:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000574:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 8000576:	24a0      	movs	r4, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	400a      	ands	r2, r1
 800057a:	9201      	str	r2, [sp, #4]
 800057c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800057e:	2202      	movs	r2, #2
 8000580:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 8000582:	05e4      	lsls	r4, r4, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000584:	4311      	orrs	r1, r2
 8000586:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000588:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
                          |programmer_RX_line_Pin|BUS_CLK_Pin|mag_int_c_Pin|mag_int_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800058a:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800058c:	400a      	ands	r2, r1
 800058e:	9202      	str	r2, [sp, #8]
 8000590:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000592:	2204      	movs	r2, #4
 8000594:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 8000596:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000598:	4311      	orrs	r1, r2
 800059a:	62d9      	str	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 800059c:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800059e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80005a0:	0209      	lsls	r1, r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a2:	401a      	ands	r2, r3
 80005a4:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a8:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80005aa:	f001 f9cf 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 80005ae:	21e0      	movs	r1, #224	; 0xe0
 80005b0:	0020      	movs	r0, r4
 80005b2:	2200      	movs	r2, #0
 80005b4:	0049      	lsls	r1, r1, #1
 80005b6:	f001 f9c9 	bl	800194c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 80005ba:	2300      	movs	r3, #0
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005be:	0020      	movs	r0, r4
 80005c0:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 80005c2:	9204      	str	r2, [sp, #16]
 80005c4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005c8:	f001 f8d0 	bl	800176c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 80005cc:	2300      	movs	r3, #0
 80005ce:	4a13      	ldr	r2, [pc, #76]	; (800061c <MX_GPIO_Init+0xc4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005d0:	a904      	add	r1, sp, #16
 80005d2:	4813      	ldr	r0, [pc, #76]	; (8000620 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 80005d4:	9204      	str	r2, [sp, #16]
 80005d6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d8:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005da:	f001 f8c7 	bl	800176c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 80005de:	22c0      	movs	r2, #192	; 0xc0
 80005e0:	2301      	movs	r3, #1
 80005e2:	2600      	movs	r6, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e4:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 80005e6:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005e8:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 80005ea:	9204      	str	r2, [sp, #16]
 80005ec:	9305      	str	r3, [sp, #20]
 80005ee:	9606      	str	r6, [sp, #24]
 80005f0:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f2:	f001 f8bb 	bl	800176c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 80005f6:	22e0      	movs	r2, #224	; 0xe0
 80005f8:	2301      	movs	r3, #1
 80005fa:	0052      	lsls	r2, r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	0020      	movs	r0, r4
 80005fe:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 8000600:	9204      	str	r2, [sp, #16]
 8000602:	9305      	str	r3, [sp, #20]
 8000604:	9606      	str	r6, [sp, #24]
 8000606:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000608:	f001 f8b0 	bl	800176c <HAL_GPIO_Init>

}
 800060c:	b00b      	add	sp, #44	; 0x2c
 800060e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000610:	40021000 	.word	0x40021000
 8000614:	50000800 	.word	0x50000800
 8000618:	0000e619 	.word	0x0000e619
 800061c:	000001ff 	.word	0x000001ff
 8000620:	50000400 	.word	0x50000400

08000624 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000624:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000626:	4b1e      	ldr	r3, [pc, #120]	; (80006a0 <MX_I2C2_Init+0x7c>)
 8000628:	4c1e      	ldr	r4, [pc, #120]	; (80006a4 <MX_I2C2_Init+0x80>)
 800062a:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x00100413;
 800062c:	4b1e      	ldr	r3, [pc, #120]	; (80006a8 <MX_I2C2_Init+0x84>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800062e:	0020      	movs	r0, r4
  hi2c2.Init.Timing = 0x00100413;
 8000630:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 200;
 8000632:	23c8      	movs	r3, #200	; 0xc8
 8000634:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000636:	3bc7      	subs	r3, #199	; 0xc7
 8000638:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800063e:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000640:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000642:	2380      	movs	r3, #128	; 0x80
 8000644:	031b      	lsls	r3, r3, #12
 8000646:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000648:	2380      	movs	r3, #128	; 0x80
 800064a:	029b      	lsls	r3, r3, #10
 800064c:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800064e:	f001 f983 	bl	8001958 <HAL_I2C_Init>
 8000652:	2800      	cmp	r0, #0
 8000654:	d110      	bne.n	8000678 <MX_I2C2_Init+0x54>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000656:	2100      	movs	r1, #0
 8000658:	0020      	movs	r0, r4
 800065a:	f001 fd25 	bl	80020a8 <HAL_I2CEx_ConfigAnalogFilter>
 800065e:	2800      	cmp	r0, #0
 8000660:	d112      	bne.n	8000688 <MX_I2C2_Init+0x64>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000662:	2100      	movs	r1, #0
 8000664:	0020      	movs	r0, r4
 8000666:	f001 fd47 	bl	80020f8 <HAL_I2CEx_ConfigDigitalFilter>
 800066a:	2800      	cmp	r0, #0
 800066c:	d114      	bne.n	8000698 <MX_I2C2_Init+0x74>
  {
    Error_Handler();
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800066e:	2080      	movs	r0, #128	; 0x80
 8000670:	0180      	lsls	r0, r0, #6
 8000672:	f001 fd67 	bl	8002144 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000676:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000678:	f000 f950 	bl	800091c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800067c:	2100      	movs	r1, #0
 800067e:	0020      	movs	r0, r4
 8000680:	f001 fd12 	bl	80020a8 <HAL_I2CEx_ConfigAnalogFilter>
 8000684:	2800      	cmp	r0, #0
 8000686:	d0ec      	beq.n	8000662 <MX_I2C2_Init+0x3e>
    Error_Handler();
 8000688:	f000 f948 	bl	800091c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800068c:	2100      	movs	r1, #0
 800068e:	0020      	movs	r0, r4
 8000690:	f001 fd32 	bl	80020f8 <HAL_I2CEx_ConfigDigitalFilter>
 8000694:	2800      	cmp	r0, #0
 8000696:	d0ea      	beq.n	800066e <MX_I2C2_Init+0x4a>
    Error_Handler();
 8000698:	f000 f940 	bl	800091c <Error_Handler>
 800069c:	e7e7      	b.n	800066e <MX_I2C2_Init+0x4a>
 800069e:	46c0      	nop			; (mov r8, r8)
 80006a0:	40005800 	.word	0x40005800
 80006a4:	200000f4 	.word	0x200000f4
 80006a8:	00100413 	.word	0x00100413

080006ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80006ac:	b510      	push	{r4, lr}
 80006ae:	0004      	movs	r4, r0
 80006b0:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006b2:	2214      	movs	r2, #20
 80006b4:	2100      	movs	r1, #0
 80006b6:	a802      	add	r0, sp, #8
 80006b8:	f003 fef2 	bl	80044a0 <memset>
  if(i2cHandle->Instance==I2C2)
 80006bc:	4b15      	ldr	r3, [pc, #84]	; (8000714 <HAL_I2C_MspInit+0x68>)
 80006be:	6822      	ldr	r2, [r4, #0]
 80006c0:	429a      	cmp	r2, r3
 80006c2:	d001      	beq.n	80006c8 <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006c4:	b008      	add	sp, #32
 80006c6:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006c8:	2302      	movs	r3, #2
 80006ca:	4c13      	ldr	r4, [pc, #76]	; (8000718 <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006cc:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ce:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d0:	4812      	ldr	r0, [pc, #72]	; (800071c <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	431a      	orrs	r2, r3
 80006d4:	62e2      	str	r2, [r4, #44]	; 0x2c
 80006d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80006d8:	4013      	ands	r3, r2
 80006da:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80006dc:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80006e0:	2312      	movs	r3, #18
 80006e2:	0112      	lsls	r2, r2, #4
 80006e4:	9202      	str	r2, [sp, #8]
 80006e6:	9303      	str	r3, [sp, #12]
 80006e8:	2201      	movs	r2, #1
 80006ea:	2303      	movs	r3, #3
 80006ec:	9204      	str	r2, [sp, #16]
 80006ee:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80006f0:	2306      	movs	r3, #6
 80006f2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f001 f83a 	bl	800176c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80006fc:	03db      	lsls	r3, r3, #15
 80006fe:	4313      	orrs	r3, r2
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000700:	2100      	movs	r1, #0
 8000702:	2200      	movs	r2, #0
 8000704:	2018      	movs	r0, #24
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000706:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000708:	f000 fcc8 	bl	800109c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 800070c:	2018      	movs	r0, #24
 800070e:	f000 fcf7 	bl	8001100 <HAL_NVIC_EnableIRQ>
}
 8000712:	e7d7      	b.n	80006c4 <HAL_I2C_MspInit+0x18>
 8000714:	40005800 	.word	0x40005800
 8000718:	40021000 	.word	0x40021000
 800071c:	50000400 	.word	0x50000400

08000720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000720:	b500      	push	{lr}
 8000722:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000724:	2224      	movs	r2, #36	; 0x24
 8000726:	2100      	movs	r1, #0
 8000728:	a80f      	add	r0, sp, #60	; 0x3c
 800072a:	f003 feb9 	bl	80044a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800072e:	2214      	movs	r2, #20
 8000730:	2100      	movs	r1, #0
 8000732:	4668      	mov	r0, sp
 8000734:	f003 feb4 	bl	80044a0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000738:	2220      	movs	r2, #32
 800073a:	2100      	movs	r1, #0
 800073c:	a806      	add	r0, sp, #24
 800073e:	f003 feaf 	bl	80044a0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000742:	491e      	ldr	r1, [pc, #120]	; (80007bc <SystemClock_Config+0x9c>)
 8000744:	4a1e      	ldr	r2, [pc, #120]	; (80007c0 <SystemClock_Config+0xa0>)
 8000746:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	a80e      	add	r0, sp, #56	; 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800074a:	401a      	ands	r2, r3
 800074c:	2380      	movs	r3, #128	; 0x80
 800074e:	011b      	lsls	r3, r3, #4
 8000750:	4313      	orrs	r3, r2
 8000752:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000754:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000756:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000758:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800075a:	3b21      	subs	r3, #33	; 0x21
 800075c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800075e:	9212      	str	r2, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000760:	9314      	str	r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000762:	2202      	movs	r2, #2
 8000764:	2300      	movs	r3, #0
 8000766:	9218      	str	r2, [sp, #96]	; 0x60
 8000768:	9319      	str	r3, [sp, #100]	; 0x64
 800076a:	2280      	movs	r2, #128	; 0x80
 800076c:	2380      	movs	r3, #128	; 0x80
 800076e:	02d2      	lsls	r2, r2, #11
 8000770:	03db      	lsls	r3, r3, #15
 8000772:	921a      	str	r2, [sp, #104]	; 0x68
 8000774:	931b      	str	r3, [sp, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000776:	f001 fd39 	bl	80021ec <HAL_RCC_OscConfig>
 800077a:	2800      	cmp	r0, #0
 800077c:	d001      	beq.n	8000782 <SystemClock_Config+0x62>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800077e:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000780:	e7fe      	b.n	8000780 <SystemClock_Config+0x60>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000782:	220f      	movs	r2, #15
 8000784:	2303      	movs	r3, #3
 8000786:	9200      	str	r2, [sp, #0]
 8000788:	9301      	str	r3, [sp, #4]
 800078a:	2200      	movs	r2, #0
 800078c:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000790:	2101      	movs	r1, #1
 8000792:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000794:	9202      	str	r2, [sp, #8]
 8000796:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000798:	f002 f820 	bl	80027dc <HAL_RCC_ClockConfig>
 800079c:	2800      	cmp	r0, #0
 800079e:	d001      	beq.n	80007a4 <SystemClock_Config+0x84>
 80007a0:	b672      	cpsid	i
  while (1)
 80007a2:	e7fe      	b.n	80007a2 <SystemClock_Config+0x82>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007a4:	2302      	movs	r3, #2
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007a6:	9009      	str	r0, [sp, #36]	; 0x24
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007a8:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007aa:	9306      	str	r3, [sp, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ac:	f002 f926 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 80007b0:	2800      	cmp	r0, #0
 80007b2:	d001      	beq.n	80007b8 <SystemClock_Config+0x98>
 80007b4:	b672      	cpsid	i
  while (1)
 80007b6:	e7fe      	b.n	80007b6 <SystemClock_Config+0x96>
}
 80007b8:	b01d      	add	sp, #116	; 0x74
 80007ba:	bd00      	pop	{pc}
 80007bc:	40007000 	.word	0x40007000
 80007c0:	ffffe7ff 	.word	0xffffe7ff

080007c4 <main>:
{
 80007c4:	b510      	push	{r4, lr}
  HAL_Init();
 80007c6:	f000 fae3 	bl	8000d90 <HAL_Init>
  SystemClock_Config();
 80007ca:	f7ff ffa9 	bl	8000720 <SystemClock_Config>
  MX_GPIO_Init();
 80007ce:	f7ff fec3 	bl	8000558 <MX_GPIO_Init>
  MX_I2C2_Init();
 80007d2:	f7ff ff27 	bl	8000624 <MX_I2C2_Init>
  MX_SPI1_Init();
 80007d6:	f000 f8a3 	bl	8000920 <MX_SPI1_Init>
  MX_ADC_Init();
 80007da:	f7ff fe5f 	bl	800049c <MX_ADC_Init>
  MX_USART2_UART_Init();
 80007de:	f000 fa35 	bl	8000c4c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80007e2:	f000 f933 	bl	8000a4c <MX_TIM6_Init>
  MX_TIM21_Init();
 80007e6:	f000 f961 	bl	8000aac <MX_TIM21_Init>
  MX_TIM22_Init();
 80007ea:	f000 f9a5 	bl	8000b38 <MX_TIM22_Init>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80007ee:	20a0      	movs	r0, #160	; 0xa0
 80007f0:	2201      	movs	r2, #1
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	05c0      	lsls	r0, r0, #23
 80007f6:	f001 f8a9 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80007fa:	20a0      	movs	r0, #160	; 0xa0
 80007fc:	2201      	movs	r2, #1
 80007fe:	2180      	movs	r1, #128	; 0x80
 8000800:	05c0      	lsls	r0, r0, #23
 8000802:	f001 f8a3 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000806:	2180      	movs	r1, #128	; 0x80
 8000808:	20a0      	movs	r0, #160	; 0xa0
 800080a:	2201      	movs	r2, #1
 800080c:	0049      	lsls	r1, r1, #1
 800080e:	05c0      	lsls	r0, r0, #23
 8000810:	f001 f89c 	bl	800194c <HAL_GPIO_WritePin>
 8000814:	2403      	movs	r4, #3
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000816:	20a0      	movs	r0, #160	; 0xa0
 8000818:	2200      	movs	r2, #0
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	05c0      	lsls	r0, r0, #23
 800081e:	f001 f895 	bl	800194c <HAL_GPIO_WritePin>
		  HAL_Delay(3);
 8000822:	2003      	movs	r0, #3
 8000824:	f000 fada 	bl	8000ddc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000828:	20a0      	movs	r0, #160	; 0xa0
 800082a:	2201      	movs	r2, #1
 800082c:	2180      	movs	r1, #128	; 0x80
 800082e:	05c0      	lsls	r0, r0, #23
 8000830:	f001 f88c 	bl	800194c <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 8000834:	3c01      	subs	r4, #1
 8000836:	2005      	movs	r0, #5
 8000838:	f000 fad0 	bl	8000ddc <HAL_Delay>
	  for(int i=0;i<3;i++)
 800083c:	2c00      	cmp	r4, #0
 800083e:	d1ea      	bne.n	8000816 <main+0x52>
	  HAL_Delay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f000 facb 	bl	8000ddc <HAL_Delay>
 8000846:	3403      	adds	r4, #3
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000848:	2180      	movs	r1, #128	; 0x80
 800084a:	20a0      	movs	r0, #160	; 0xa0
 800084c:	2200      	movs	r2, #0
 800084e:	0049      	lsls	r1, r1, #1
 8000850:	05c0      	lsls	r0, r0, #23
 8000852:	f001 f87b 	bl	800194c <HAL_GPIO_WritePin>
		  HAL_Delay(3);
 8000856:	2003      	movs	r0, #3
 8000858:	f000 fac0 	bl	8000ddc <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800085c:	2180      	movs	r1, #128	; 0x80
 800085e:	20a0      	movs	r0, #160	; 0xa0
 8000860:	2201      	movs	r2, #1
 8000862:	0049      	lsls	r1, r1, #1
 8000864:	05c0      	lsls	r0, r0, #23
 8000866:	f001 f871 	bl	800194c <HAL_GPIO_WritePin>
		  HAL_Delay(5);
 800086a:	3c01      	subs	r4, #1
 800086c:	2005      	movs	r0, #5
 800086e:	f000 fab5 	bl	8000ddc <HAL_Delay>
	  for(int i=0;i<3;i++)
 8000872:	2c00      	cmp	r4, #0
 8000874:	d1e8      	bne.n	8000848 <main+0x84>
	  HAL_Delay(10);
 8000876:	200a      	movs	r0, #10
 8000878:	f000 fab0 	bl	8000ddc <HAL_Delay>
 800087c:	3403      	adds	r4, #3
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800087e:	20a0      	movs	r0, #160	; 0xa0
 8000880:	2200      	movs	r2, #0
 8000882:	2140      	movs	r1, #64	; 0x40
 8000884:	05c0      	lsls	r0, r0, #23
 8000886:	f001 f861 	bl	800194c <HAL_GPIO_WritePin>
	  HAL_Delay(3);
 800088a:	2003      	movs	r0, #3
 800088c:	f000 faa6 	bl	8000ddc <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000890:	20a0      	movs	r0, #160	; 0xa0
 8000892:	2201      	movs	r2, #1
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	f001 f858 	bl	800194c <HAL_GPIO_WritePin>
	  HAL_Delay(5);
 800089c:	3c01      	subs	r4, #1
 800089e:	2005      	movs	r0, #5
 80008a0:	f000 fa9c 	bl	8000ddc <HAL_Delay>
  for(int i=0;i<3;i++)
 80008a4:	2c00      	cmp	r4, #0
 80008a6:	d1ea      	bne.n	800087e <main+0xba>
  HAL_Delay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f000 fa97 	bl	8000ddc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80008ae:	20a0      	movs	r0, #160	; 0xa0
 80008b0:	2200      	movs	r2, #0
 80008b2:	2140      	movs	r1, #64	; 0x40
 80008b4:	05c0      	lsls	r0, r0, #23
 80008b6:	f001 f849 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 80008ba:	20a0      	movs	r0, #160	; 0xa0
 80008bc:	2200      	movs	r2, #0
 80008be:	2180      	movs	r1, #128	; 0x80
 80008c0:	05c0      	lsls	r0, r0, #23
 80008c2:	f001 f843 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80008c6:	2180      	movs	r1, #128	; 0x80
 80008c8:	20a0      	movs	r0, #160	; 0xa0
 80008ca:	2200      	movs	r2, #0
 80008cc:	0049      	lsls	r1, r1, #1
 80008ce:	05c0      	lsls	r0, r0, #23
 80008d0:	f001 f83c 	bl	800194c <HAL_GPIO_WritePin>
  HAL_Delay(20);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f000 fa81 	bl	8000ddc <HAL_Delay>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 80008da:	20a0      	movs	r0, #160	; 0xa0
 80008dc:	2201      	movs	r2, #1
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	05c0      	lsls	r0, r0, #23
 80008e2:	f001 f833 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80008e6:	20a0      	movs	r0, #160	; 0xa0
 80008e8:	2201      	movs	r2, #1
 80008ea:	2180      	movs	r1, #128	; 0x80
 80008ec:	05c0      	lsls	r0, r0, #23
 80008ee:	f001 f82d 	bl	800194c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	20a0      	movs	r0, #160	; 0xa0
 80008f6:	2201      	movs	r2, #1
 80008f8:	0049      	lsls	r1, r1, #1
 80008fa:	05c0      	lsls	r0, r0, #23
 80008fc:	f001 f826 	bl	800194c <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8000900:	200a      	movs	r0, #10
 8000902:	f000 fa6b 	bl	8000ddc <HAL_Delay>
  module_system_init(&my_sys);
 8000906:	4c04      	ldr	r4, [pc, #16]	; (8000918 <main+0x154>)
 8000908:	0020      	movs	r0, r4
 800090a:	f003 fc5d 	bl	80041c8 <module_system_init>
	  state_machine(&my_sys);
 800090e:	0020      	movs	r0, r4
 8000910:	f003 fcc8 	bl	80042a4 <state_machine>
  while (1)
 8000914:	e7fb      	b.n	800090e <main+0x14a>
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	20000140 	.word	0x20000140

0800091c <Error_Handler>:
 800091c:	b672      	cpsid	i
  while (1)
 800091e:	e7fe      	b.n	800091e <Error_Handler+0x2>

08000920 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000920:	4810      	ldr	r0, [pc, #64]	; (8000964 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000922:	2202      	movs	r2, #2
  hspi1.Instance = SPI1;
 8000924:	4b10      	ldr	r3, [pc, #64]	; (8000968 <MX_SPI1_Init+0x48>)
{
 8000926:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8000928:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800092a:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800092c:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800092e:	3a01      	subs	r2, #1
 8000930:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000932:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000938:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800093a:	0092      	lsls	r2, r2, #2
 800093c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800093e:	3af1      	subs	r2, #241	; 0xf1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000940:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000942:	60c3      	str	r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000944:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000946:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000948:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800094a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800094c:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800094e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000950:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000952:	f002 f9b7 	bl	8002cc4 <HAL_SPI_Init>
 8000956:	2800      	cmp	r0, #0
 8000958:	d100      	bne.n	800095c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800095a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800095c:	f7ff ffde 	bl	800091c <Error_Handler>
}
 8000960:	e7fb      	b.n	800095a <MX_SPI1_Init+0x3a>
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	200001c4 	.word	0x200001c4
 8000968:	40013000 	.word	0x40013000

0800096c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800096c:	b510      	push	{r4, lr}
 800096e:	0004      	movs	r4, r0
 8000970:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	2214      	movs	r2, #20
 8000974:	2100      	movs	r1, #0
 8000976:	a802      	add	r0, sp, #8
 8000978:	f003 fd92 	bl	80044a0 <memset>
  if(spiHandle->Instance==SPI1)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_SPI_MspInit+0x5c>)
 800097e:	6822      	ldr	r2, [r4, #0]
 8000980:	429a      	cmp	r2, r3
 8000982:	d001      	beq.n	8000988 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000984:	b008      	add	sp, #32
 8000986:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000988:	2280      	movs	r2, #128	; 0x80
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <HAL_SPI_MspInit+0x60>)
 800098c:	0152      	lsls	r2, r2, #5
 800098e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000992:	430a      	orrs	r2, r1
 8000994:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000996:	2201      	movs	r2, #1
 8000998:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4311      	orrs	r1, r2
 800099e:	62d9      	str	r1, [r3, #44]	; 0x2c
 80009a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009a4:	401a      	ands	r2, r3
 80009a6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 80009a8:	22c1      	movs	r2, #193	; 0xc1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009aa:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 80009ac:	2302      	movs	r3, #2
 80009ae:	0152      	lsls	r2, r2, #5
 80009b0:	9202      	str	r2, [sp, #8]
 80009b2:	9303      	str	r3, [sp, #12]
 80009b4:	2200      	movs	r2, #0
 80009b6:	2303      	movs	r3, #3
 80009b8:	9204      	str	r2, [sp, #16]
 80009ba:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009bc:	2300      	movs	r3, #0
 80009be:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f000 fed4 	bl	800176c <HAL_GPIO_Init>
}
 80009c4:	e7de      	b.n	8000984 <HAL_SPI_MspInit+0x18>
 80009c6:	46c0      	nop			; (mov r8, r8)
 80009c8:	40013000 	.word	0x40013000
 80009cc:	40021000 	.word	0x40021000

080009d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009d0:	2101      	movs	r1, #1
 80009d2:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <HAL_MspInit+0x18>)
 80009d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009d6:	430a      	orrs	r2, r1
 80009d8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80009da:	2280      	movs	r2, #128	; 0x80
 80009dc:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80009de:	0552      	lsls	r2, r2, #21
 80009e0:	430a      	orrs	r2, r1
 80009e2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e4:	4770      	bx	lr
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	40021000 	.word	0x40021000

080009ec <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <NMI_Handler>
 80009ee:	46c0      	nop			; (mov r8, r8)

080009f0 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <HardFault_Handler>
 80009f2:	46c0      	nop			; (mov r8, r8)

080009f4 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009f4:	4770      	bx	lr
 80009f6:	46c0      	nop			; (mov r8, r8)

080009f8 <PendSV_Handler>:
 80009f8:	4770      	bx	lr
 80009fa:	46c0      	nop			; (mov r8, r8)

080009fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009fc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009fe:	f000 f9db 	bl	8000db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a02:	bd10      	pop	{r4, pc}

08000a04 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a04:	490c      	ldr	r1, [pc, #48]	; (8000a38 <_sbrk+0x34>)
 8000a06:	4a0d      	ldr	r2, [pc, #52]	; (8000a3c <_sbrk+0x38>)
{
 8000a08:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a0c:	490c      	ldr	r1, [pc, #48]	; (8000a40 <_sbrk+0x3c>)
{
 8000a0e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000a10:	6808      	ldr	r0, [r1, #0]
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d004      	beq.n	8000a20 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a16:	18c3      	adds	r3, r0, r3
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d806      	bhi.n	8000a2a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8000a1c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 8000a1e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000a20:	4808      	ldr	r0, [pc, #32]	; (8000a44 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8000a22:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000a24:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4293      	cmp	r3, r2
 8000a28:	d9f8      	bls.n	8000a1c <_sbrk+0x18>
    errno = ENOMEM;
 8000a2a:	f003 fd05 	bl	8004438 <__errno>
 8000a2e:	230c      	movs	r3, #12
 8000a30:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000a32:	2001      	movs	r0, #1
 8000a34:	4240      	negs	r0, r0
 8000a36:	e7f2      	b.n	8000a1e <_sbrk+0x1a>
 8000a38:	00000400 	.word	0x00000400
 8000a3c:	20002000 	.word	0x20002000
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	20000390 	.word	0x20000390

08000a48 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a48:	4770      	bx	lr
 8000a4a:	46c0      	nop			; (mov r8, r8)

08000a4c <MX_TIM6_Init>:
TIM_HandleTypeDef htim21;
TIM_HandleTypeDef htim22;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8000a4c:	b510      	push	{r4, lr}
 8000a4e:	b082      	sub	sp, #8

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a50:	2208      	movs	r2, #8
 8000a52:	2100      	movs	r1, #0
 8000a54:	4668      	mov	r0, sp
 8000a56:	f003 fd23 	bl	80044a0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000a5a:	4c11      	ldr	r4, [pc, #68]	; (8000aa0 <MX_TIM6_Init+0x54>)
 8000a5c:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_TIM6_Init+0x58>)
  htim6.Init.Prescaler = 31;
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim6.Init.Period = 65535;
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a5e:	0020      	movs	r0, r4
  htim6.Instance = TIM6;
 8000a60:	6023      	str	r3, [r4, #0]
  htim6.Init.Prescaler = 31;
 8000a62:	231f      	movs	r3, #31
 8000a64:	6063      	str	r3, [r4, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a66:	2300      	movs	r3, #0
 8000a68:	60a3      	str	r3, [r4, #8]
  htim6.Init.Period = 65535;
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	; (8000aa8 <MX_TIM6_Init+0x5c>)
 8000a6c:	60e3      	str	r3, [r4, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000a72:	f002 fc4b 	bl	800330c <HAL_TIM_Base_Init>
 8000a76:	2800      	cmp	r0, #0
 8000a78:	d10b      	bne.n	8000a92 <MX_TIM6_Init+0x46>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a7e:	4669      	mov	r1, sp
 8000a80:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a82:	9200      	str	r2, [sp, #0]
 8000a84:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000a86:	f002 fd2f 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	d104      	bne.n	8000a98 <MX_TIM6_Init+0x4c>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000a8e:	b002      	add	sp, #8
 8000a90:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000a92:	f7ff ff43 	bl	800091c <Error_Handler>
 8000a96:	e7f0      	b.n	8000a7a <MX_TIM6_Init+0x2e>
    Error_Handler();
 8000a98:	f7ff ff40 	bl	800091c <Error_Handler>
}
 8000a9c:	e7f7      	b.n	8000a8e <MX_TIM6_Init+0x42>
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	2000025c 	.word	0x2000025c
 8000aa4:	40001000 	.word	0x40001000
 8000aa8:	0000ffff 	.word	0x0000ffff

08000aac <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 8000aac:	b510      	push	{r4, lr}
 8000aae:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ab0:	2210      	movs	r2, #16
 8000ab2:	2100      	movs	r1, #0
 8000ab4:	a802      	add	r0, sp, #8
 8000ab6:	f003 fcf3 	bl	80044a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aba:	2208      	movs	r2, #8
 8000abc:	2100      	movs	r1, #0
 8000abe:	4668      	mov	r0, sp
 8000ac0:	f003 fcee 	bl	80044a0 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000ac4:	4c19      	ldr	r4, [pc, #100]	; (8000b2c <MX_TIM21_Init+0x80>)
 8000ac6:	4b1a      	ldr	r3, [pc, #104]	; (8000b30 <MX_TIM21_Init+0x84>)
  htim21.Init.Prescaler = 0;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 65535;
 8000ac8:	4a1a      	ldr	r2, [pc, #104]	; (8000b34 <MX_TIM21_Init+0x88>)
  htim21.Instance = TIM21;
 8000aca:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 0;
 8000acc:	2300      	movs	r3, #0
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000ace:	0020      	movs	r0, r4
  htim21.Init.Prescaler = 0;
 8000ad0:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad2:	60a3      	str	r3, [r4, #8]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ad4:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ad6:	3380      	adds	r3, #128	; 0x80
  htim21.Init.Period = 65535;
 8000ad8:	60e2      	str	r2, [r4, #12]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000ada:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000adc:	f002 fc16 	bl	800330c <HAL_TIM_Base_Init>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d11a      	bne.n	8000b1a <MX_TIM21_Init+0x6e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	0192      	lsls	r2, r2, #6
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	9303      	str	r3, [sp, #12]
 8000aee:	2200      	movs	r2, #0
 8000af0:	2300      	movs	r3, #0
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
  sClockSourceConfig.ClockFilter = 0;
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000af2:	0020      	movs	r0, r4
 8000af4:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000af6:	9204      	str	r2, [sp, #16]
 8000af8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000afa:	f002 fc4d 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	d111      	bne.n	8000b26 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2200      	movs	r2, #0
 8000b04:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000b06:	4669      	mov	r1, sp
 8000b08:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	9200      	str	r2, [sp, #0]
 8000b0c:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000b0e:	f002 fceb 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b12:	2800      	cmp	r0, #0
 8000b14:	d104      	bne.n	8000b20 <MX_TIM21_Init+0x74>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000b16:	b006      	add	sp, #24
 8000b18:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b1a:	f7ff feff 	bl	800091c <Error_Handler>
 8000b1e:	e7e1      	b.n	8000ae4 <MX_TIM21_Init+0x38>
    Error_Handler();
 8000b20:	f7ff fefc 	bl	800091c <Error_Handler>
}
 8000b24:	e7f7      	b.n	8000b16 <MX_TIM21_Init+0x6a>
    Error_Handler();
 8000b26:	f7ff fef9 	bl	800091c <Error_Handler>
 8000b2a:	e7ea      	b.n	8000b02 <MX_TIM21_Init+0x56>
 8000b2c:	2000029c 	.word	0x2000029c
 8000b30:	40010800 	.word	0x40010800
 8000b34:	0000ffff 	.word	0x0000ffff

08000b38 <MX_TIM22_Init>:
/* TIM22 init function */
void MX_TIM22_Init(void)
{
 8000b38:	b510      	push	{r4, lr}
 8000b3a:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3c:	2210      	movs	r2, #16
 8000b3e:	2100      	movs	r1, #0
 8000b40:	a802      	add	r0, sp, #8
 8000b42:	f003 fcad 	bl	80044a0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b46:	2208      	movs	r2, #8
 8000b48:	2100      	movs	r1, #0
 8000b4a:	4668      	mov	r0, sp
 8000b4c:	f003 fca8 	bl	80044a0 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 8000b50:	4c17      	ldr	r4, [pc, #92]	; (8000bb0 <MX_TIM22_Init+0x78>)
 8000b52:	4b18      	ldr	r3, [pc, #96]	; (8000bb4 <MX_TIM22_Init+0x7c>)
  htim22.Init.Prescaler = 31999;
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim22.Init.Period = 9999;
 8000b54:	4a18      	ldr	r2, [pc, #96]	; (8000bb8 <MX_TIM22_Init+0x80>)
  htim22.Instance = TIM22;
 8000b56:	6023      	str	r3, [r4, #0]
  htim22.Init.Prescaler = 31999;
 8000b58:	4b18      	ldr	r3, [pc, #96]	; (8000bbc <MX_TIM22_Init+0x84>)
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000b5a:	0020      	movs	r0, r4
  htim22.Init.Prescaler = 31999;
 8000b5c:	6063      	str	r3, [r4, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60a3      	str	r3, [r4, #8]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b62:	6123      	str	r3, [r4, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b64:	3380      	adds	r3, #128	; 0x80
  htim22.Init.Period = 9999;
 8000b66:	60e2      	str	r2, [r4, #12]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b68:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000b6a:	f002 fbcf 	bl	800330c <HAL_TIM_Base_Init>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	d114      	bne.n	8000b9c <MX_TIM22_Init+0x64>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b72:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000b74:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b76:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000b78:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b7a:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000b7c:	f002 fc0c 	bl	8003398 <HAL_TIM_ConfigClockSource>
 8000b80:	2800      	cmp	r0, #0
 8000b82:	d111      	bne.n	8000ba8 <MX_TIM22_Init+0x70>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b84:	2200      	movs	r2, #0
 8000b86:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000b88:	4669      	mov	r1, sp
 8000b8a:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b8c:	9200      	str	r2, [sp, #0]
 8000b8e:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000b90:	f002 fcaa 	bl	80034e8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b94:	2800      	cmp	r0, #0
 8000b96:	d104      	bne.n	8000ba2 <MX_TIM22_Init+0x6a>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000b98:	b006      	add	sp, #24
 8000b9a:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000b9c:	f7ff febe 	bl	800091c <Error_Handler>
 8000ba0:	e7e7      	b.n	8000b72 <MX_TIM22_Init+0x3a>
    Error_Handler();
 8000ba2:	f7ff febb 	bl	800091c <Error_Handler>
}
 8000ba6:	e7f7      	b.n	8000b98 <MX_TIM22_Init+0x60>
    Error_Handler();
 8000ba8:	f7ff feb8 	bl	800091c <Error_Handler>
 8000bac:	e7ea      	b.n	8000b84 <MX_TIM22_Init+0x4c>
 8000bae:	46c0      	nop			; (mov r8, r8)
 8000bb0:	2000021c 	.word	0x2000021c
 8000bb4:	40011400 	.word	0x40011400
 8000bb8:	0000270f 	.word	0x0000270f
 8000bbc:	00007cff 	.word	0x00007cff

08000bc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000bc0:	b510      	push	{r4, lr}
 8000bc2:	0004      	movs	r4, r0
 8000bc4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc6:	2214      	movs	r2, #20
 8000bc8:	2100      	movs	r1, #0
 8000bca:	a802      	add	r0, sp, #8
 8000bcc:	f003 fc68 	bl	80044a0 <memset>
  if(tim_baseHandle->Instance==TIM6)
 8000bd0:	6823      	ldr	r3, [r4, #0]
 8000bd2:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_TIM_Base_MspInit+0x7c>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d007      	beq.n	8000be8 <HAL_TIM_Base_MspInit+0x28>
    __HAL_RCC_TIM6_CLK_ENABLE();
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM21)
 8000bd8:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_TIM_Base_MspInit+0x80>)
 8000bda:	4293      	cmp	r3, r2
 8000bdc:	d010      	beq.n	8000c00 <HAL_TIM_Base_MspInit+0x40>

  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
  else if(tim_baseHandle->Instance==TIM22)
 8000bde:	4a19      	ldr	r2, [pc, #100]	; (8000c44 <HAL_TIM_Base_MspInit+0x84>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d007      	beq.n	8000bf4 <HAL_TIM_Base_MspInit+0x34>
    __HAL_RCC_TIM22_CLK_ENABLE();
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }
}
 8000be4:	b008      	add	sp, #32
 8000be6:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000be8:	2110      	movs	r1, #16
 8000bea:	4a17      	ldr	r2, [pc, #92]	; (8000c48 <HAL_TIM_Base_MspInit+0x88>)
 8000bec:	6b93      	ldr	r3, [r2, #56]	; 0x38
 8000bee:	430b      	orrs	r3, r1
 8000bf0:	6393      	str	r3, [r2, #56]	; 0x38
 8000bf2:	e7f7      	b.n	8000be4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	4a14      	ldr	r2, [pc, #80]	; (8000c48 <HAL_TIM_Base_MspInit+0x88>)
 8000bf8:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8000bfa:	430b      	orrs	r3, r1
 8000bfc:	6353      	str	r3, [r2, #52]	; 0x34
}
 8000bfe:	e7f1      	b.n	8000be4 <HAL_TIM_Base_MspInit+0x24>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000c00:	2104      	movs	r1, #4
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_TIM_Base_MspInit+0x88>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000c06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c08:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c0e:	2201      	movs	r2, #1
 8000c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000c12:	4311      	orrs	r1, r2
 8000c14:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	9201      	str	r2, [sp, #4]
 8000c1e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c20:	2202      	movs	r2, #2
 8000c22:	2302      	movs	r3, #2
 8000c24:	9202      	str	r2, [sp, #8]
 8000c26:	9303      	str	r3, [sp, #12]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	9204      	str	r2, [sp, #16]
 8000c2e:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000c30:	2305      	movs	r3, #5
 8000c32:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c34:	f000 fd9a 	bl	800176c <HAL_GPIO_Init>
 8000c38:	e7d4      	b.n	8000be4 <HAL_TIM_Base_MspInit+0x24>
 8000c3a:	46c0      	nop			; (mov r8, r8)
 8000c3c:	40001000 	.word	0x40001000
 8000c40:	40010800 	.word	0x40010800
 8000c44:	40011400 	.word	0x40011400
 8000c48:	40021000 	.word	0x40021000

08000c4c <MX_USART2_UART_Init>:
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c4c:	480e      	ldr	r0, [pc, #56]	; (8000c88 <MX_USART2_UART_Init+0x3c>)
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_USART2_UART_Init+0x40>)
{
 8000c50:	b510      	push	{r4, lr}
  huart2.Instance = USART2;
 8000c52:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8000c54:	23e1      	movs	r3, #225	; 0xe1
 8000c56:	025b      	lsls	r3, r3, #9
 8000c58:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c5e:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c60:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX;
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c62:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c66:	6203      	str	r3, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 8000c68:	3320      	adds	r3, #32
 8000c6a:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c6c:	2380      	movs	r3, #128	; 0x80
  huart2.Init.Mode = UART_MODE_TX;
 8000c6e:	2208      	movs	r2, #8
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c70:	019b      	lsls	r3, r3, #6
  huart2.Init.Mode = UART_MODE_TX;
 8000c72:	6142      	str	r2, [r0, #20]
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 8000c74:	63c3      	str	r3, [r0, #60]	; 0x3c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 8000c76:	f002 fd43 	bl	8003700 <HAL_HalfDuplex_Init>
 8000c7a:	2800      	cmp	r0, #0
 8000c7c:	d100      	bne.n	8000c80 <MX_USART2_UART_Init+0x34>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c7e:	bd10      	pop	{r4, pc}
    Error_Handler();
 8000c80:	f7ff fe4c 	bl	800091c <Error_Handler>
}
 8000c84:	e7fb      	b.n	8000c7e <MX_USART2_UART_Init+0x32>
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	200002dc 	.word	0x200002dc
 8000c8c:	40004400 	.word	0x40004400

08000c90 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c90:	b510      	push	{r4, lr}
 8000c92:	0004      	movs	r4, r0
 8000c94:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c96:	2214      	movs	r2, #20
 8000c98:	2100      	movs	r1, #0
 8000c9a:	a802      	add	r0, sp, #8
 8000c9c:	f003 fc00 	bl	80044a0 <memset>
  if(uartHandle->Instance==USART2)
 8000ca0:	4b11      	ldr	r3, [pc, #68]	; (8000ce8 <HAL_UART_MspInit+0x58>)
 8000ca2:	6822      	ldr	r2, [r4, #0]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d001      	beq.n	8000cac <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ca8:	b008      	add	sp, #32
 8000caa:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cac:	2280      	movs	r2, #128	; 0x80
 8000cae:	4b0f      	ldr	r3, [pc, #60]	; (8000cec <HAL_UART_MspInit+0x5c>)
 8000cb0:	0292      	lsls	r2, r2, #10
 8000cb2:	6b99      	ldr	r1, [r3, #56]	; 0x38
    HAL_GPIO_Init(tx2_tp_GPIO_Port, &GPIO_InitStruct);
 8000cb4:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cba:	2201      	movs	r2, #1
 8000cbc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(tx2_tp_GPIO_Port, &GPIO_InitStruct);
 8000cbe:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4311      	orrs	r1, r2
 8000cc2:	62d9      	str	r1, [r3, #44]	; 0x2c
 8000cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(tx2_tp_GPIO_Port, &GPIO_InitStruct);
 8000cc6:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc8:	401a      	ands	r2, r3
 8000cca:	9201      	str	r2, [sp, #4]
 8000ccc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = tx2_tp_Pin;
 8000cce:	2204      	movs	r2, #4
 8000cd0:	2312      	movs	r3, #18
 8000cd2:	9202      	str	r2, [sp, #8]
 8000cd4:	9303      	str	r3, [sp, #12]
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	2303      	movs	r3, #3
 8000cda:	9204      	str	r2, [sp, #16]
 8000cdc:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000cde:	2304      	movs	r3, #4
 8000ce0:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(tx2_tp_GPIO_Port, &GPIO_InitStruct);
 8000ce2:	f000 fd43 	bl	800176c <HAL_GPIO_Init>
}
 8000ce6:	e7df      	b.n	8000ca8 <HAL_UART_MspInit+0x18>
 8000ce8:	40004400 	.word	0x40004400
 8000cec:	40021000 	.word	0x40021000

08000cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cf0:	480d      	ldr	r0, [pc, #52]	; (8000d28 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cf2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cf6:	490e      	ldr	r1, [pc, #56]	; (8000d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cf8:	4a0e      	ldr	r2, [pc, #56]	; (8000d34 <LoopForever+0xe>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cfc:	e002      	b.n	8000d04 <LoopCopyDataInit>

08000cfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d02:	3304      	adds	r3, #4

08000d04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d08:	d3f9      	bcc.n	8000cfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0a:	4a0b      	ldr	r2, [pc, #44]	; (8000d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d0c:	4c0b      	ldr	r4, [pc, #44]	; (8000d3c <LoopForever+0x16>)
  movs r3, #0
 8000d0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d10:	e001      	b.n	8000d16 <LoopFillZerobss>

08000d12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d14:	3204      	adds	r2, #4

08000d16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d18:	d3fb      	bcc.n	8000d12 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000d1a:	f7ff fe95 	bl	8000a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f003 fb91 	bl	8004444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d22:	f7ff fd4f 	bl	80007c4 <main>

08000d26 <LoopForever>:

LoopForever:
    b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
   ldr   r0, =_estack
 8000d28:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d34:	080046b0 	.word	0x080046b0
  ldr r2, =_sbss
 8000d38:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d3c:	2000038c 	.word	0x2000038c

08000d40 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_COMP_IRQHandler>
	...

08000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d44:	b510      	push	{r4, lr}
 8000d46:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d48:	20fa      	movs	r0, #250	; 0xfa
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <HAL_InitTick+0x40>)
 8000d4c:	0080      	lsls	r0, r0, #2
 8000d4e:	7819      	ldrb	r1, [r3, #0]
 8000d50:	f7ff f9da 	bl	8000108 <__udivsi3>
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <HAL_InitTick+0x44>)
 8000d56:	0001      	movs	r1, r0
 8000d58:	6818      	ldr	r0, [r3, #0]
 8000d5a:	f7ff f9d5 	bl	8000108 <__udivsi3>
 8000d5e:	f000 f9db 	bl	8001118 <HAL_SYSTICK_Config>
 8000d62:	2800      	cmp	r0, #0
 8000d64:	d10c      	bne.n	8000d80 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 8000d66:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d68:	2c03      	cmp	r4, #3
 8000d6a:	d900      	bls.n	8000d6e <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000d6c:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d6e:	3802      	subs	r0, #2
 8000d70:	2200      	movs	r2, #0
 8000d72:	0021      	movs	r1, r4
 8000d74:	f000 f992 	bl	800109c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d78:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <HAL_InitTick+0x48>)
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 8000d7e:	e7f5      	b.n	8000d6c <HAL_InitTick+0x28>
    return HAL_ERROR;
 8000d80:	2001      	movs	r0, #1
 8000d82:	e7f3      	b.n	8000d6c <HAL_InitTick+0x28>
 8000d84:	20000004 	.word	0x20000004
 8000d88:	20000000 	.word	0x20000000
 8000d8c:	20000008 	.word	0x20000008

08000d90 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d90:	2140      	movs	r1, #64	; 0x40
 8000d92:	4a08      	ldr	r2, [pc, #32]	; (8000db4 <HAL_Init+0x24>)
{
 8000d94:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d96:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d98:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d9a:	430b      	orrs	r3, r1
 8000d9c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d9e:	f7ff ffd1 	bl	8000d44 <HAL_InitTick>
 8000da2:	1e04      	subs	r4, r0, #0
 8000da4:	d002      	beq.n	8000dac <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000da6:	2401      	movs	r4, #1
}
 8000da8:	0020      	movs	r0, r4
 8000daa:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000dac:	f7ff fe10 	bl	80009d0 <HAL_MspInit>
 8000db0:	e7fa      	b.n	8000da8 <HAL_Init+0x18>
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	40022000 	.word	0x40022000

08000db8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000db8:	4a03      	ldr	r2, [pc, #12]	; (8000dc8 <HAL_IncTick+0x10>)
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <HAL_IncTick+0x14>)
 8000dbc:	6811      	ldr	r1, [r2, #0]
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	185b      	adds	r3, r3, r1
 8000dc2:	6013      	str	r3, [r2, #0]
}
 8000dc4:	4770      	bx	lr
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	20000360 	.word	0x20000360
 8000dcc:	20000004 	.word	0x20000004

08000dd0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000dd0:	4b01      	ldr	r3, [pc, #4]	; (8000dd8 <HAL_GetTick+0x8>)
 8000dd2:	6818      	ldr	r0, [r3, #0]
}
 8000dd4:	4770      	bx	lr
 8000dd6:	46c0      	nop			; (mov r8, r8)
 8000dd8:	20000360 	.word	0x20000360

08000ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ddc:	b570      	push	{r4, r5, r6, lr}
 8000dde:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000de0:	f7ff fff6 	bl	8000dd0 <HAL_GetTick>
 8000de4:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000de6:	1c63      	adds	r3, r4, #1
 8000de8:	d002      	beq.n	8000df0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000dea:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <HAL_Delay+0x20>)
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000df0:	f7ff ffee 	bl	8000dd0 <HAL_GetTick>
 8000df4:	1b40      	subs	r0, r0, r5
 8000df6:	42a0      	cmp	r0, r4
 8000df8:	d3fa      	bcc.n	8000df0 <HAL_Delay+0x14>
  {
  }
}
 8000dfa:	bd70      	pop	{r4, r5, r6, pc}
 8000dfc:	20000004 	.word	0x20000004

08000e00 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e00:	b570      	push	{r4, r5, r6, lr}
 8000e02:	1e04      	subs	r4, r0, #0
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000e04:	d100      	bne.n	8000e08 <HAL_ADC_Init+0x8>
 8000e06:	e0aa      	b.n	8000f5e <HAL_ADC_Init+0x15e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000e08:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d100      	bne.n	8000e10 <HAL_ADC_Init+0x10>
 8000e0e:	e09c      	b.n	8000f4a <HAL_ADC_Init+0x14a>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e10:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000e12:	06db      	lsls	r3, r3, #27
 8000e14:	d42b      	bmi.n	8000e6e <HAL_ADC_Init+0x6e>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000e16:	2104      	movs	r1, #4
 8000e18:	0008      	movs	r0, r1
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	689a      	ldr	r2, [r3, #8]
 8000e1e:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000e20:	4211      	tst	r1, r2
 8000e22:	d124      	bne.n	8000e6e <HAL_ADC_Init+0x6e>
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000e24:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000e26:	4a61      	ldr	r2, [pc, #388]	; (8000fac <HAL_ADC_Init+0x1ac>)
 8000e28:	4011      	ands	r1, r2
 8000e2a:	3206      	adds	r2, #6
 8000e2c:	32ff      	adds	r2, #255	; 0xff
 8000e2e:	4311      	orrs	r1, r2
 8000e30:	6561      	str	r1, [r4, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e32:	6899      	ldr	r1, [r3, #8]
 8000e34:	3201      	adds	r2, #1
 8000e36:	400a      	ands	r2, r1
 8000e38:	2a01      	cmp	r2, #1
 8000e3a:	d100      	bne.n	8000e3e <HAL_ADC_Init+0x3e>
 8000e3c:	e091      	b.n	8000f62 <HAL_ADC_Init+0x162>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e3e:	2580      	movs	r5, #128	; 0x80
 8000e40:	6861      	ldr	r1, [r4, #4]
 8000e42:	05ed      	lsls	r5, r5, #23
 8000e44:	004a      	lsls	r2, r1, #1
 8000e46:	0852      	lsrs	r2, r2, #1
 8000e48:	42aa      	cmp	r2, r5
 8000e4a:	d019      	beq.n	8000e80 <HAL_ADC_Init+0x80>
 8000e4c:	2280      	movs	r2, #128	; 0x80
 8000e4e:	0612      	lsls	r2, r2, #24
 8000e50:	4291      	cmp	r1, r2
 8000e52:	d015      	beq.n	8000e80 <HAL_ADC_Init+0x80>
 8000e54:	691a      	ldr	r2, [r3, #16]
 8000e56:	4e56      	ldr	r6, [pc, #344]	; (8000fb0 <HAL_ADC_Init+0x1b0>)
 8000e58:	0092      	lsls	r2, r2, #2
 8000e5a:	0892      	lsrs	r2, r2, #2
 8000e5c:	611a      	str	r2, [r3, #16]
 8000e5e:	4a55      	ldr	r2, [pc, #340]	; (8000fb4 <HAL_ADC_Init+0x1b4>)
 8000e60:	6815      	ldr	r5, [r2, #0]
 8000e62:	4035      	ands	r5, r6
 8000e64:	6015      	str	r5, [r2, #0]
 8000e66:	6815      	ldr	r5, [r2, #0]
 8000e68:	4329      	orrs	r1, r5
 8000e6a:	6011      	str	r1, [r2, #0]
 8000e6c:	e00f      	b.n	8000e8e <HAL_ADC_Init+0x8e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e6e:	2210      	movs	r2, #16
 8000e70:	6d63      	ldr	r3, [r4, #84]	; 0x54
    return HAL_ERROR;
 8000e72:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e74:	4313      	orrs	r3, r2
 8000e76:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8000e78:	2200      	movs	r2, #0
 8000e7a:	2350      	movs	r3, #80	; 0x50
 8000e7c:	54e2      	strb	r2, [r4, r3]
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
}
 8000e7e:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000e80:	691a      	ldr	r2, [r3, #16]
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	0892      	lsrs	r2, r2, #2
 8000e86:	611a      	str	r2, [r3, #16]
 8000e88:	691a      	ldr	r2, [r3, #16]
 8000e8a:	4311      	orrs	r1, r2
 8000e8c:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8000e8e:	2118      	movs	r1, #24
 8000e90:	68da      	ldr	r2, [r3, #12]
 8000e92:	438a      	bics	r2, r1
 8000e94:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	68a1      	ldr	r1, [r4, #8]
 8000e9a:	430a      	orrs	r2, r1
 8000e9c:	60da      	str	r2, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8000e9e:	4a45      	ldr	r2, [pc, #276]	; (8000fb4 <HAL_ADC_Init+0x1b4>)
 8000ea0:	4d45      	ldr	r5, [pc, #276]	; (8000fb8 <HAL_ADC_Init+0x1b8>)
 8000ea2:	6811      	ldr	r1, [r2, #0]
 8000ea4:	4029      	ands	r1, r5
 8000ea6:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8000ea8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000eaa:	6815      	ldr	r5, [r2, #0]
 8000eac:	0649      	lsls	r1, r1, #25
 8000eae:	4329      	orrs	r1, r5
 8000eb0:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8000eb2:	2280      	movs	r2, #128	; 0x80
 8000eb4:	6899      	ldr	r1, [r3, #8]
 8000eb6:	0552      	lsls	r2, r2, #21
 8000eb8:	4211      	tst	r1, r2
 8000eba:	d04c      	beq.n	8000f56 <HAL_ADC_Init+0x156>
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ebc:	68da      	ldr	r2, [r3, #12]
 8000ebe:	493f      	ldr	r1, [pc, #252]	; (8000fbc <HAL_ADC_Init+0x1bc>)
 8000ec0:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000ec2:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8000ec4:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ec6:	68dd      	ldr	r5, [r3, #12]
 8000ec8:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8000eca:	2902      	cmp	r1, #2
 8000ecc:	d100      	bne.n	8000ed0 <HAL_ADC_Init+0xd0>
 8000ece:	2004      	movs	r0, #4
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ed0:	2120      	movs	r1, #32
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ed2:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ed4:	5c61      	ldrb	r1, [r4, r1]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ed6:	4332      	orrs	r2, r6
 8000ed8:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8000eda:	69a5      	ldr	r5, [r4, #24]
 8000edc:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ede:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8000ee0:	69e5      	ldr	r5, [r4, #28]
 8000ee2:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ee4:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000ee6:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ee8:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8000eea:	252c      	movs	r5, #44	; 0x2c
 8000eec:	5d65      	ldrb	r5, [r4, r5]
 8000eee:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ef0:	432a      	orrs	r2, r5
 8000ef2:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ef4:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8000ef6:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ef8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000efa:	30ff      	adds	r0, #255	; 0xff
 8000efc:	4282      	cmp	r2, r0
 8000efe:	d004      	beq.n	8000f0a <HAL_ADC_Init+0x10a>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8000f00:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8000f02:	68d8      	ldr	r0, [r3, #12]
 8000f04:	432a      	orrs	r2, r5
 8000f06:	4302      	orrs	r2, r0
 8000f08:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f0a:	2221      	movs	r2, #33	; 0x21
 8000f0c:	5ca2      	ldrb	r2, [r4, r2]
 8000f0e:	2a01      	cmp	r2, #1
 8000f10:	d03b      	beq.n	8000f8a <HAL_ADC_Init+0x18a>
  if (hadc->Init.OversamplingMode == ENABLE)
 8000f12:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8000f14:	2901      	cmp	r1, #1
 8000f16:	d028      	beq.n	8000f6a <HAL_ADC_Init+0x16a>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8000f18:	2201      	movs	r2, #1
 8000f1a:	6919      	ldr	r1, [r3, #16]
 8000f1c:	420a      	tst	r2, r1
 8000f1e:	d002      	beq.n	8000f26 <HAL_ADC_Init+0x126>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8000f20:	6919      	ldr	r1, [r3, #16]
 8000f22:	4391      	bics	r1, r2
 8000f24:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f26:	2107      	movs	r1, #7
 8000f28:	695a      	ldr	r2, [r3, #20]
  return HAL_OK;
 8000f2a:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8000f2c:	438a      	bics	r2, r1
 8000f2e:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8000f30:	695a      	ldr	r2, [r3, #20]
 8000f32:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8000f34:	430a      	orrs	r2, r1
 8000f36:	615a      	str	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8000f38:	2300      	movs	r3, #0
  ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8000f3c:	65a3      	str	r3, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8000f3e:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f40:	4393      	bics	r3, r2
 8000f42:	3a02      	subs	r2, #2
 8000f44:	4313      	orrs	r3, r2
 8000f46:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8000f48:	e799      	b.n	8000e7e <HAL_ADC_Init+0x7e>
    hadc->Lock = HAL_UNLOCKED;
 8000f4a:	2250      	movs	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8000f4c:	6583      	str	r3, [r0, #88]	; 0x58
    hadc->Lock = HAL_UNLOCKED;
 8000f4e:	5483      	strb	r3, [r0, r2]
    HAL_ADC_MspInit(hadc);
 8000f50:	f7ff faf2 	bl	8000538 <HAL_ADC_MspInit>
 8000f54:	e75c      	b.n	8000e10 <HAL_ADC_Init+0x10>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8000f56:	6899      	ldr	r1, [r3, #8]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e7ae      	b.n	8000ebc <HAL_ADC_Init+0xbc>
    return HAL_ERROR;
 8000f5e:	2001      	movs	r0, #1
 8000f60:	e78d      	b.n	8000e7e <HAL_ADC_Init+0x7e>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000f62:	6819      	ldr	r1, [r3, #0]
 8000f64:	420a      	tst	r2, r1
 8000f66:	d19a      	bne.n	8000e9e <HAL_ADC_Init+0x9e>
 8000f68:	e769      	b.n	8000e3e <HAL_ADC_Init+0x3e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f6a:	691a      	ldr	r2, [r3, #16]
 8000f6c:	4814      	ldr	r0, [pc, #80]	; (8000fc0 <HAL_ADC_Init+0x1c0>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f6e:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8000f70:	4002      	ands	r2, r0
 8000f72:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f74:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8000f76:	6918      	ldr	r0, [r3, #16]
 8000f78:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8000f7a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8000f7c:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8000f7e:	4302      	orrs	r2, r0
 8000f80:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8000f82:	691a      	ldr	r2, [r3, #16]
 8000f84:	4311      	orrs	r1, r2
 8000f86:	6119      	str	r1, [r3, #16]
 8000f88:	e7cd      	b.n	8000f26 <HAL_ADC_Init+0x126>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f8a:	2900      	cmp	r1, #0
 8000f8c:	d105      	bne.n	8000f9a <HAL_ADC_Init+0x19a>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8000f8e:	2280      	movs	r2, #128	; 0x80
 8000f90:	68d9      	ldr	r1, [r3, #12]
 8000f92:	0252      	lsls	r2, r2, #9
 8000f94:	430a      	orrs	r2, r1
 8000f96:	60da      	str	r2, [r3, #12]
 8000f98:	e7bb      	b.n	8000f12 <HAL_ADC_Init+0x112>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f9a:	2020      	movs	r0, #32
 8000f9c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8000f9e:	4301      	orrs	r1, r0
 8000fa0:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8000fa4:	430a      	orrs	r2, r1
 8000fa6:	65a2      	str	r2, [r4, #88]	; 0x58
 8000fa8:	e7b3      	b.n	8000f12 <HAL_ADC_Init+0x112>
 8000faa:	46c0      	nop			; (mov r8, r8)
 8000fac:	fffffefd 	.word	0xfffffefd
 8000fb0:	ffc3ffff 	.word	0xffc3ffff
 8000fb4:	40012708 	.word	0x40012708
 8000fb8:	fdffffff 	.word	0xfdffffff
 8000fbc:	fffe0219 	.word	0xfffe0219
 8000fc0:	fffffc03 	.word	0xfffffc03

08000fc4 <HAL_ADC_ConfigChannel>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	2350      	movs	r3, #80	; 0x50
{
 8000fc6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8000fc8:	5cc2      	ldrb	r2, [r0, r3]
{
 8000fca:	0004      	movs	r4, r0
 8000fcc:	b083      	sub	sp, #12
  __HAL_LOCK(hadc);
 8000fce:	2a01      	cmp	r2, #1
 8000fd0:	d055      	beq.n	800107e <HAL_ADC_ConfigChannel+0xba>
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	54c2      	strb	r2, [r0, r3]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8000fd6:	6802      	ldr	r2, [r0, #0]
 8000fd8:	6890      	ldr	r0, [r2, #8]
 8000fda:	0740      	lsls	r0, r0, #29
 8000fdc:	d42b      	bmi.n	8001036 <HAL_ADC_ConfigChannel+0x72>
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    return HAL_ERROR;
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8000fde:	4b29      	ldr	r3, [pc, #164]	; (8001084 <HAL_ADC_ConfigChannel+0xc0>)
 8000fe0:	6848      	ldr	r0, [r1, #4]
 8000fe2:	4298      	cmp	r0, r3
 8000fe4:	d02f      	beq.n	8001046 <HAL_ADC_ConfigChannel+0x82>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8000fe6:	680d      	ldr	r5, [r1, #0]
 8000fe8:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8000fea:	036b      	lsls	r3, r5, #13
 8000fec:	0b5b      	lsrs	r3, r3, #13
 8000fee:	4303      	orrs	r3, r0
 8000ff0:	6293      	str	r3, [r2, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8000ff2:	036b      	lsls	r3, r5, #13
 8000ff4:	d517      	bpl.n	8001026 <HAL_ADC_ConfigChannel+0x62>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	4a23      	ldr	r2, [pc, #140]	; (8001088 <HAL_ADC_ConfigChannel+0xc4>)
 8000ffa:	041b      	lsls	r3, r3, #16
 8000ffc:	6811      	ldr	r1, [r2, #0]
 8000ffe:	430b      	orrs	r3, r1
 8001000:	6013      	str	r3, [r2, #0]
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001002:	4b22      	ldr	r3, [pc, #136]	; (800108c <HAL_ADC_ConfigChannel+0xc8>)
 8001004:	4922      	ldr	r1, [pc, #136]	; (8001090 <HAL_ADC_ConfigChannel+0xcc>)
 8001006:	6818      	ldr	r0, [r3, #0]
 8001008:	f7ff f87e 	bl	8000108 <__udivsi3>
 800100c:	0083      	lsls	r3, r0, #2
 800100e:	181b      	adds	r3, r3, r0
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	9301      	str	r3, [sp, #4]

  while(waitLoopIndex != 0U)
 8001014:	9b01      	ldr	r3, [sp, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d005      	beq.n	8001026 <HAL_ADC_ConfigChannel+0x62>
  {
    waitLoopIndex--;
 800101a:	9b01      	ldr	r3, [sp, #4]
 800101c:	3b01      	subs	r3, #1
 800101e:	9301      	str	r3, [sp, #4]
  while(waitLoopIndex != 0U)
 8001020:	9b01      	ldr	r3, [sp, #4]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d1f9      	bne.n	800101a <HAL_ADC_ConfigChannel+0x56>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001026:	03ab      	lsls	r3, r5, #14
 8001028:	d422      	bmi.n	8001070 <HAL_ADC_ConfigChannel+0xac>
  __HAL_UNLOCK(hadc);
 800102a:	2350      	movs	r3, #80	; 0x50
 800102c:	2200      	movs	r2, #0
  return HAL_OK;
 800102e:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001030:	54e2      	strb	r2, [r4, r3]
}
 8001032:	b003      	add	sp, #12
 8001034:	bd30      	pop	{r4, r5, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001036:	2120      	movs	r1, #32
 8001038:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 800103a:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800103c:	430a      	orrs	r2, r1
 800103e:	6562      	str	r2, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8001040:	2200      	movs	r2, #0
 8001042:	54e2      	strb	r2, [r4, r3]
    return HAL_ERROR;
 8001044:	e7f5      	b.n	8001032 <HAL_ADC_ConfigChannel+0x6e>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8001046:	680b      	ldr	r3, [r1, #0]
 8001048:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800104a:	0359      	lsls	r1, r3, #13
 800104c:	0b49      	lsrs	r1, r1, #13
 800104e:	4388      	bics	r0, r1
 8001050:	6290      	str	r0, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001052:	035a      	lsls	r2, r3, #13
 8001054:	d504      	bpl.n	8001060 <HAL_ADC_ConfigChannel+0x9c>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8001056:	490c      	ldr	r1, [pc, #48]	; (8001088 <HAL_ADC_ConfigChannel+0xc4>)
 8001058:	480e      	ldr	r0, [pc, #56]	; (8001094 <HAL_ADC_ConfigChannel+0xd0>)
 800105a:	680a      	ldr	r2, [r1, #0]
 800105c:	4002      	ands	r2, r0
 800105e:	600a      	str	r2, [r1, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8001060:	039b      	lsls	r3, r3, #14
 8001062:	d5e2      	bpl.n	800102a <HAL_ADC_ConfigChannel+0x66>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_ADC_ConfigChannel+0xc4>)
 8001066:	490c      	ldr	r1, [pc, #48]	; (8001098 <HAL_ADC_ConfigChannel+0xd4>)
 8001068:	6813      	ldr	r3, [r2, #0]
 800106a:	400b      	ands	r3, r1
 800106c:	6013      	str	r3, [r2, #0]
 800106e:	e7dc      	b.n	800102a <HAL_ADC_ConfigChannel+0x66>
      ADC->CCR |= ADC_CCR_VREFEN;   
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <HAL_ADC_ConfigChannel+0xc4>)
 8001074:	03db      	lsls	r3, r3, #15
 8001076:	6811      	ldr	r1, [r2, #0]
 8001078:	430b      	orrs	r3, r1
 800107a:	6013      	str	r3, [r2, #0]
 800107c:	e7d5      	b.n	800102a <HAL_ADC_ConfigChannel+0x66>
  __HAL_LOCK(hadc);
 800107e:	2002      	movs	r0, #2
 8001080:	e7d7      	b.n	8001032 <HAL_ADC_ConfigChannel+0x6e>
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	00001001 	.word	0x00001001
 8001088:	40012708 	.word	0x40012708
 800108c:	20000000 	.word	0x20000000
 8001090:	000f4240 	.word	0x000f4240
 8001094:	ff7fffff 	.word	0xff7fffff
 8001098:	ffbfffff 	.word	0xffbfffff

0800109c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109c:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 800109e:	2800      	cmp	r0, #0
 80010a0:	db14      	blt.n	80010cc <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_NVIC_SetPriority+0x5c>)
 80010a4:	2203      	movs	r2, #3
 80010a6:	469c      	mov	ip, r3
 80010a8:	23ff      	movs	r3, #255	; 0xff
 80010aa:	0884      	lsrs	r4, r0, #2
 80010ac:	4010      	ands	r0, r2
 80010ae:	001a      	movs	r2, r3
 80010b0:	26c0      	movs	r6, #192	; 0xc0
 80010b2:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b4:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010b6:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010b8:	400b      	ands	r3, r1
 80010ba:	4083      	lsls	r3, r0
 80010bc:	00a4      	lsls	r4, r4, #2
 80010be:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c0:	00b6      	lsls	r6, r6, #2
 80010c2:	59a5      	ldr	r5, [r4, r6]
 80010c4:	4395      	bics	r5, r2
 80010c6:	432b      	orrs	r3, r5
 80010c8:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 80010ca:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010cc:	4a0b      	ldr	r2, [pc, #44]	; (80010fc <HAL_NVIC_SetPriority+0x60>)
 80010ce:	230f      	movs	r3, #15
 80010d0:	4694      	mov	ip, r2
 80010d2:	2203      	movs	r2, #3
 80010d4:	4003      	ands	r3, r0
 80010d6:	4010      	ands	r0, r2
 80010d8:	32fc      	adds	r2, #252	; 0xfc
 80010da:	0015      	movs	r5, r2
 80010dc:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010de:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e0:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010e2:	400a      	ands	r2, r1
 80010e4:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e6:	3b08      	subs	r3, #8
 80010e8:	089b      	lsrs	r3, r3, #2
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	4463      	add	r3, ip
 80010ee:	69dc      	ldr	r4, [r3, #28]
 80010f0:	43ac      	bics	r4, r5
 80010f2:	4322      	orrs	r2, r4
 80010f4:	61da      	str	r2, [r3, #28]
 80010f6:	e7e8      	b.n	80010ca <HAL_NVIC_SetPriority+0x2e>
 80010f8:	e000e100 	.word	0xe000e100
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001100:	2800      	cmp	r0, #0
 8001102:	db05      	blt.n	8001110 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001104:	231f      	movs	r3, #31
 8001106:	4018      	ands	r0, r3
 8001108:	3b1e      	subs	r3, #30
 800110a:	4083      	lsls	r3, r0
 800110c:	4a01      	ldr	r2, [pc, #4]	; (8001114 <HAL_NVIC_EnableIRQ+0x14>)
 800110e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001110:	4770      	bx	lr
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	e000e100 	.word	0xe000e100

08001118 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001118:	2280      	movs	r2, #128	; 0x80
 800111a:	1e43      	subs	r3, r0, #1
 800111c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800111e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001120:	4293      	cmp	r3, r2
 8001122:	d20e      	bcs.n	8001142 <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001124:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001126:	4a07      	ldr	r2, [pc, #28]	; (8001144 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001128:	4807      	ldr	r0, [pc, #28]	; (8001148 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800112a:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	6a03      	ldr	r3, [r0, #32]
 800112e:	0609      	lsls	r1, r1, #24
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	0a1b      	lsrs	r3, r3, #8
 8001134:	430b      	orrs	r3, r1
 8001136:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001138:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800113a:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800113c:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800113e:	3307      	adds	r3, #7
 8001140:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001142:	4770      	bx	lr
 8001144:	e000e010 	.word	0xe000e010
 8001148:	e000ed00 	.word	0xe000ed00

0800114c <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800114c:	2325      	movs	r3, #37	; 0x25
{
 800114e:	b570      	push	{r4, r5, r6, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001150:	5cc2      	ldrb	r2, [r0, r3]
 8001152:	2a02      	cmp	r2, #2
 8001154:	d003      	beq.n	800115e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001156:	3b21      	subs	r3, #33	; 0x21
 8001158:	63c3      	str	r3, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800115a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800115c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115e:	240e      	movs	r4, #14
 8001160:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001162:	6c45      	ldr	r5, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001164:	6811      	ldr	r1, [r2, #0]
 8001166:	43a1      	bics	r1, r4
 8001168:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800116a:	2101      	movs	r1, #1
 800116c:	6814      	ldr	r4, [r2, #0]
 800116e:	438c      	bics	r4, r1
 8001170:	6014      	str	r4, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001172:	221c      	movs	r2, #28
 8001174:	402a      	ands	r2, r5
 8001176:	000d      	movs	r5, r1
 8001178:	4095      	lsls	r5, r2
 800117a:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_UNLOCK(hdma);
 800117c:	2200      	movs	r2, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800117e:	6065      	str	r5, [r4, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001180:	54c1      	strb	r1, [r0, r3]
    __HAL_UNLOCK(hdma);
 8001182:	2324      	movs	r3, #36	; 0x24
 8001184:	54c2      	strb	r2, [r0, r3]
    if(hdma->XferAbortCallback != NULL)
 8001186:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001188:	2b00      	cmp	r3, #0
 800118a:	d002      	beq.n	8001192 <HAL_DMA_Abort_IT+0x46>
      hdma->XferAbortCallback(hdma);
 800118c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800118e:	2000      	movs	r0, #0
 8001190:	e7e4      	b.n	800115c <HAL_DMA_Abort_IT+0x10>
 8001192:	2000      	movs	r0, #0
 8001194:	e7e2      	b.n	800115c <HAL_DMA_Abort_IT+0x10>
 8001196:	46c0      	nop			; (mov r8, r8)

08001198 <HAL_DMA_GetState>:
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
  /* Return DMA handle state */
  return hdma->State;
 8001198:	2325      	movs	r3, #37	; 0x25
 800119a:	5cc0      	ldrb	r0, [r0, r3]
 800119c:	b2c0      	uxtb	r0, r0
}
 800119e:	4770      	bx	lr

080011a0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80011a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011a2:	46de      	mov	lr, fp
 80011a4:	4657      	mov	r7, sl
 80011a6:	464e      	mov	r6, r9
 80011a8:	4645      	mov	r5, r8
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011aa:	4be9      	ldr	r3, [pc, #932]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 80011ac:	2480      	movs	r4, #128	; 0x80
 80011ae:	699a      	ldr	r2, [r3, #24]
{
 80011b0:	b5e0      	push	{r5, r6, r7, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011b2:	0013      	movs	r3, r2
 80011b4:	0064      	lsls	r4, r4, #1
{
 80011b6:	b0b5      	sub	sp, #212	; 0xd4
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80011b8:	4023      	ands	r3, r4
 80011ba:	4222      	tst	r2, r4
 80011bc:	d100      	bne.n	80011c0 <FLASH_SetErrorCode+0x20>
 80011be:	e135      	b.n	800142c <FLASH_SetErrorCode+0x28c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80011c0:	2102      	movs	r1, #2
 80011c2:	4ae4      	ldr	r2, [pc, #912]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 80011c4:	2584      	movs	r5, #132	; 0x84
 80011c6:	6953      	ldr	r3, [r2, #20]
 80011c8:	4fe3      	ldr	r7, [pc, #908]	; (8001558 <FLASH_SetErrorCode+0x3b8>)
 80011ca:	430b      	orrs	r3, r1
 80011cc:	6153      	str	r3, [r2, #20]
 80011ce:	4be3      	ldr	r3, [pc, #908]	; (800155c <FLASH_SetErrorCode+0x3bc>)
 80011d0:	311f      	adds	r1, #31
 80011d2:	9333      	str	r3, [sp, #204]	; 0xcc
 80011d4:	4be2      	ldr	r3, [pc, #904]	; (8001560 <FLASH_SetErrorCode+0x3c0>)
 80011d6:	4ee3      	ldr	r6, [pc, #908]	; (8001564 <FLASH_SetErrorCode+0x3c4>)
 80011d8:	9332      	str	r3, [sp, #200]	; 0xc8
 80011da:	4be3      	ldr	r3, [pc, #908]	; (8001568 <FLASH_SetErrorCode+0x3c8>)
 80011dc:	48e3      	ldr	r0, [pc, #908]	; (800156c <FLASH_SetErrorCode+0x3cc>)
 80011de:	9331      	str	r3, [sp, #196]	; 0xc4
 80011e0:	4be3      	ldr	r3, [pc, #908]	; (8001570 <FLASH_SetErrorCode+0x3d0>)
 80011e2:	4ae4      	ldr	r2, [pc, #912]	; (8001574 <FLASH_SetErrorCode+0x3d4>)
 80011e4:	9330      	str	r3, [sp, #192]	; 0xc0
 80011e6:	4be4      	ldr	r3, [pc, #912]	; (8001578 <FLASH_SetErrorCode+0x3d8>)
 80011e8:	31ff      	adds	r1, #255	; 0xff
 80011ea:	932f      	str	r3, [sp, #188]	; 0xbc
 80011ec:	23f2      	movs	r3, #242	; 0xf2
 80011ee:	011b      	lsls	r3, r3, #4
 80011f0:	932e      	str	r3, [sp, #184]	; 0xb8
 80011f2:	23bc      	movs	r3, #188	; 0xbc
 80011f4:	019b      	lsls	r3, r3, #6
 80011f6:	932d      	str	r3, [sp, #180]	; 0xb4
 80011f8:	4be0      	ldr	r3, [pc, #896]	; (800157c <FLASH_SetErrorCode+0x3dc>)
 80011fa:	01ad      	lsls	r5, r5, #6
 80011fc:	932c      	str	r3, [sp, #176]	; 0xb0
 80011fe:	4be0      	ldr	r3, [pc, #896]	; (8001580 <FLASH_SetErrorCode+0x3e0>)
 8001200:	932b      	str	r3, [sp, #172]	; 0xac
 8001202:	4be0      	ldr	r3, [pc, #896]	; (8001584 <FLASH_SetErrorCode+0x3e4>)
 8001204:	932a      	str	r3, [sp, #168]	; 0xa8
 8001206:	4be0      	ldr	r3, [pc, #896]	; (8001588 <FLASH_SetErrorCode+0x3e8>)
 8001208:	9329      	str	r3, [sp, #164]	; 0xa4
 800120a:	4be0      	ldr	r3, [pc, #896]	; (800158c <FLASH_SetErrorCode+0x3ec>)
 800120c:	9328      	str	r3, [sp, #160]	; 0xa0
 800120e:	23e4      	movs	r3, #228	; 0xe4
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	9327      	str	r3, [sp, #156]	; 0x9c
 8001214:	239c      	movs	r3, #156	; 0x9c
 8001216:	019b      	lsls	r3, r3, #6
 8001218:	9326      	str	r3, [sp, #152]	; 0x98
 800121a:	23f0      	movs	r3, #240	; 0xf0
 800121c:	011b      	lsls	r3, r3, #4
 800121e:	9325      	str	r3, [sp, #148]	; 0x94
 8001220:	4bdb      	ldr	r3, [pc, #876]	; (8001590 <FLASH_SetErrorCode+0x3f0>)
 8001222:	9324      	str	r3, [sp, #144]	; 0x90
 8001224:	4bdb      	ldr	r3, [pc, #876]	; (8001594 <FLASH_SetErrorCode+0x3f4>)
 8001226:	9323      	str	r3, [sp, #140]	; 0x8c
 8001228:	4bdb      	ldr	r3, [pc, #876]	; (8001598 <FLASH_SetErrorCode+0x3f8>)
 800122a:	9322      	str	r3, [sp, #136]	; 0x88
 800122c:	4bdb      	ldr	r3, [pc, #876]	; (800159c <FLASH_SetErrorCode+0x3fc>)
 800122e:	9321      	str	r3, [sp, #132]	; 0x84
 8001230:	4bdb      	ldr	r3, [pc, #876]	; (80015a0 <FLASH_SetErrorCode+0x400>)
 8001232:	9320      	str	r3, [sp, #128]	; 0x80
 8001234:	23b2      	movs	r3, #178	; 0xb2
 8001236:	011b      	lsls	r3, r3, #4
 8001238:	931f      	str	r3, [sp, #124]	; 0x7c
 800123a:	23ac      	movs	r3, #172	; 0xac
 800123c:	019b      	lsls	r3, r3, #6
 800123e:	931e      	str	r3, [sp, #120]	; 0x78
 8001240:	4bd8      	ldr	r3, [pc, #864]	; (80015a4 <FLASH_SetErrorCode+0x404>)
 8001242:	931d      	str	r3, [sp, #116]	; 0x74
 8001244:	4bd8      	ldr	r3, [pc, #864]	; (80015a8 <FLASH_SetErrorCode+0x408>)
 8001246:	931c      	str	r3, [sp, #112]	; 0x70
 8001248:	4bd8      	ldr	r3, [pc, #864]	; (80015ac <FLASH_SetErrorCode+0x40c>)
 800124a:	931b      	str	r3, [sp, #108]	; 0x6c
 800124c:	4bd8      	ldr	r3, [pc, #864]	; (80015b0 <FLASH_SetErrorCode+0x410>)
 800124e:	931a      	str	r3, [sp, #104]	; 0x68
 8001250:	4bd8      	ldr	r3, [pc, #864]	; (80015b4 <FLASH_SetErrorCode+0x414>)
 8001252:	9319      	str	r3, [sp, #100]	; 0x64
 8001254:	23c8      	movs	r3, #200	; 0xc8
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	9318      	str	r3, [sp, #96]	; 0x60
 800125a:	238c      	movs	r3, #140	; 0x8c
 800125c:	019b      	lsls	r3, r3, #6
 800125e:	9317      	str	r3, [sp, #92]	; 0x5c
 8001260:	23b0      	movs	r3, #176	; 0xb0
 8001262:	011b      	lsls	r3, r3, #4
 8001264:	9316      	str	r3, [sp, #88]	; 0x58
 8001266:	23e0      	movs	r3, #224	; 0xe0
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	9315      	str	r3, [sp, #84]	; 0x54
 800126c:	4bd2      	ldr	r3, [pc, #840]	; (80015b8 <FLASH_SetErrorCode+0x418>)
 800126e:	9313      	str	r3, [sp, #76]	; 0x4c
 8001270:	4bd2      	ldr	r3, [pc, #840]	; (80015bc <FLASH_SetErrorCode+0x41c>)
 8001272:	9312      	str	r3, [sp, #72]	; 0x48
 8001274:	4bd2      	ldr	r3, [pc, #840]	; (80015c0 <FLASH_SetErrorCode+0x420>)
 8001276:	9311      	str	r3, [sp, #68]	; 0x44
 8001278:	4bd2      	ldr	r3, [pc, #840]	; (80015c4 <FLASH_SetErrorCode+0x424>)
 800127a:	9310      	str	r3, [sp, #64]	; 0x40
 800127c:	4bd2      	ldr	r3, [pc, #840]	; (80015c8 <FLASH_SetErrorCode+0x428>)
 800127e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001280:	23d2      	movs	r3, #210	; 0xd2
 8001282:	011b      	lsls	r3, r3, #4
 8001284:	930e      	str	r3, [sp, #56]	; 0x38
 8001286:	23b4      	movs	r3, #180	; 0xb4
 8001288:	019b      	lsls	r3, r3, #6
 800128a:	930d      	str	r3, [sp, #52]	; 0x34
 800128c:	4bcf      	ldr	r3, [pc, #828]	; (80015cc <FLASH_SetErrorCode+0x42c>)
 800128e:	930c      	str	r3, [sp, #48]	; 0x30
 8001290:	4bcf      	ldr	r3, [pc, #828]	; (80015d0 <FLASH_SetErrorCode+0x430>)
 8001292:	930b      	str	r3, [sp, #44]	; 0x2c
 8001294:	4bcf      	ldr	r3, [pc, #828]	; (80015d4 <FLASH_SetErrorCode+0x434>)
 8001296:	930a      	str	r3, [sp, #40]	; 0x28
 8001298:	4bcf      	ldr	r3, [pc, #828]	; (80015d8 <FLASH_SetErrorCode+0x438>)
 800129a:	9309      	str	r3, [sp, #36]	; 0x24
 800129c:	4bcf      	ldr	r3, [pc, #828]	; (80015dc <FLASH_SetErrorCode+0x43c>)
 800129e:	9308      	str	r3, [sp, #32]
 80012a0:	23a4      	movs	r3, #164	; 0xa4
 80012a2:	00db      	lsls	r3, r3, #3
 80012a4:	9307      	str	r3, [sp, #28]
 80012a6:	2394      	movs	r3, #148	; 0x94
 80012a8:	019b      	lsls	r3, r3, #6
 80012aa:	9306      	str	r3, [sp, #24]
 80012ac:	23d0      	movs	r3, #208	; 0xd0
 80012ae:	011b      	lsls	r3, r3, #4
 80012b0:	9305      	str	r3, [sp, #20]
 80012b2:	4bcb      	ldr	r3, [pc, #812]	; (80015e0 <FLASH_SetErrorCode+0x440>)
 80012b4:	9303      	str	r3, [sp, #12]
 80012b6:	4bcb      	ldr	r3, [pc, #812]	; (80015e4 <FLASH_SetErrorCode+0x444>)
 80012b8:	9302      	str	r3, [sp, #8]
 80012ba:	4bcb      	ldr	r3, [pc, #812]	; (80015e8 <FLASH_SetErrorCode+0x448>)
 80012bc:	9301      	str	r3, [sp, #4]
 80012be:	4bcb      	ldr	r3, [pc, #812]	; (80015ec <FLASH_SetErrorCode+0x44c>)
 80012c0:	9300      	str	r3, [sp, #0]
 80012c2:	4bcb      	ldr	r3, [pc, #812]	; (80015f0 <FLASH_SetErrorCode+0x450>)
 80012c4:	469b      	mov	fp, r3
 80012c6:	2392      	movs	r3, #146	; 0x92
 80012c8:	011b      	lsls	r3, r3, #4
 80012ca:	469a      	mov	sl, r3
 80012cc:	23a4      	movs	r3, #164	; 0xa4
 80012ce:	019b      	lsls	r3, r3, #6
 80012d0:	4699      	mov	r9, r3
 80012d2:	4bc8      	ldr	r3, [pc, #800]	; (80015f4 <FLASH_SetErrorCode+0x454>)
 80012d4:	469c      	mov	ip, r3
 80012d6:	2390      	movs	r3, #144	; 0x90
 80012d8:	011b      	lsls	r3, r3, #4
 80012da:	4698      	mov	r8, r3
 80012dc:	23a0      	movs	r3, #160	; 0xa0
 80012de:	00db      	lsls	r3, r3, #3
 80012e0:	9304      	str	r3, [sp, #16]
 80012e2:	23c0      	movs	r3, #192	; 0xc0
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	9314      	str	r3, [sp, #80]	; 0x50
    flags |= FLASH_FLAG_WRPERR;
 80012e8:	0023      	movs	r3, r4
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 80012ea:	4c99      	ldr	r4, [pc, #612]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 80012ec:	69a4      	ldr	r4, [r4, #24]
 80012ee:	05a4      	lsls	r4, r4, #22
 80012f0:	d53d      	bpl.n	800136e <FLASH_SetErrorCode+0x1ce>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80012f2:	2101      	movs	r1, #1
 80012f4:	4a97      	ldr	r2, [pc, #604]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 80012f6:	6953      	ldr	r3, [r2, #20]
 80012f8:	430b      	orrs	r3, r1
 80012fa:	6153      	str	r3, [r2, #20]
 80012fc:	9b33      	ldr	r3, [sp, #204]	; 0xcc
 80012fe:	9313      	str	r3, [sp, #76]	; 0x4c
 8001300:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001302:	9312      	str	r3, [sp, #72]	; 0x48
 8001304:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 8001306:	9311      	str	r3, [sp, #68]	; 0x44
 8001308:	9b30      	ldr	r3, [sp, #192]	; 0xc0
 800130a:	9310      	str	r3, [sp, #64]	; 0x40
 800130c:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 800130e:	930f      	str	r3, [sp, #60]	; 0x3c
 8001310:	9b2e      	ldr	r3, [sp, #184]	; 0xb8
 8001312:	930e      	str	r3, [sp, #56]	; 0x38
 8001314:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8001316:	930d      	str	r3, [sp, #52]	; 0x34
 8001318:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 800131a:	930c      	str	r3, [sp, #48]	; 0x30
 800131c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800131e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001320:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
 8001322:	930a      	str	r3, [sp, #40]	; 0x28
 8001324:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8001326:	9309      	str	r3, [sp, #36]	; 0x24
 8001328:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800132a:	9308      	str	r3, [sp, #32]
 800132c:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 800132e:	9307      	str	r3, [sp, #28]
 8001330:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8001332:	9306      	str	r3, [sp, #24]
 8001334:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001336:	9305      	str	r3, [sp, #20]
 8001338:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800133a:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 800133c:	9303      	str	r3, [sp, #12]
 800133e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001340:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8001342:	9302      	str	r3, [sp, #8]
 8001344:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001346:	981a      	ldr	r0, [sp, #104]	; 0x68
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800134c:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	9b20      	ldr	r3, [sp, #128]	; 0x80
 8001352:	9918      	ldr	r1, [sp, #96]	; 0x60
 8001354:	469b      	mov	fp, r3
 8001356:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001358:	9d17      	ldr	r5, [sp, #92]	; 0x5c
 800135a:	469a      	mov	sl, r3
 800135c:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800135e:	4699      	mov	r9, r3
 8001360:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001362:	469c      	mov	ip, r3
 8001364:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001366:	4698      	mov	r8, r3
 8001368:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800136a:	9304      	str	r3, [sp, #16]
    flags |= FLASH_FLAG_PGAERR;
 800136c:	9b14      	ldr	r3, [sp, #80]	; 0x50
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800136e:	4c78      	ldr	r4, [pc, #480]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 8001370:	69a4      	ldr	r4, [r4, #24]
 8001372:	0564      	lsls	r4, r4, #21
 8001374:	d51d      	bpl.n	80013b2 <FLASH_SetErrorCode+0x212>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001376:	2108      	movs	r1, #8
 8001378:	4a76      	ldr	r2, [pc, #472]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 800137a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
 800137c:	6953      	ldr	r3, [r2, #20]
 800137e:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8001380:	430b      	orrs	r3, r1
 8001382:	6153      	str	r3, [r2, #20]
 8001384:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001386:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001388:	9303      	str	r3, [sp, #12]
 800138a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800138c:	9a08      	ldr	r2, [sp, #32]
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001392:	9907      	ldr	r1, [sp, #28]
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001398:	9d06      	ldr	r5, [sp, #24]
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800139e:	469b      	mov	fp, r3
 80013a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80013a2:	469a      	mov	sl, r3
 80013a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80013a6:	4699      	mov	r9, r3
 80013a8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013aa:	469c      	mov	ip, r3
 80013ac:	9b05      	ldr	r3, [sp, #20]
 80013ae:	4698      	mov	r8, r3
    flags |= FLASH_FLAG_SIZERR;
 80013b0:	9b04      	ldr	r3, [sp, #16]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80013b2:	4c67      	ldr	r4, [pc, #412]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 80013b4:	69a4      	ldr	r4, [r4, #24]
 80013b6:	0524      	lsls	r4, r4, #20
 80013b8:	d50d      	bpl.n	80013d6 <FLASH_SetErrorCode+0x236>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013ba:	2104      	movs	r1, #4
 80013bc:	4a65      	ldr	r2, [pc, #404]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 80013be:	464d      	mov	r5, r9
 80013c0:	6953      	ldr	r3, [r2, #20]
 80013c2:	9f02      	ldr	r7, [sp, #8]
 80013c4:	430b      	orrs	r3, r1
 80013c6:	6153      	str	r3, [r2, #20]
 80013c8:	9b03      	ldr	r3, [sp, #12]
 80013ca:	465a      	mov	r2, fp
 80013cc:	469c      	mov	ip, r3
 80013ce:	4651      	mov	r1, sl
    flags |= FLASH_FLAG_OPTVERR;
 80013d0:	4643      	mov	r3, r8
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80013d2:	9e01      	ldr	r6, [sp, #4]
 80013d4:	9800      	ldr	r0, [sp, #0]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80013d6:	4c5e      	ldr	r4, [pc, #376]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 80013d8:	69a4      	ldr	r4, [r4, #24]
 80013da:	04a4      	lsls	r4, r4, #18
 80013dc:	d508      	bpl.n	80013f0 <FLASH_SetErrorCode+0x250>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80013de:	2110      	movs	r1, #16
 80013e0:	4a5c      	ldr	r2, [pc, #368]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 80013e2:	4660      	mov	r0, ip
 80013e4:	6953      	ldr	r3, [r2, #20]
 80013e6:	430b      	orrs	r3, r1
 80013e8:	6153      	str	r3, [r2, #20]
 80013ea:	0031      	movs	r1, r6
 80013ec:	003a      	movs	r2, r7
    flags |= FLASH_FLAG_RDERR;
 80013ee:	002b      	movs	r3, r5
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80013f0:	4c57      	ldr	r4, [pc, #348]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 80013f2:	69a4      	ldr	r4, [r4, #24]
 80013f4:	03a4      	lsls	r4, r4, #14
 80013f6:	d506      	bpl.n	8001406 <FLASH_SetErrorCode+0x266>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80013f8:	2420      	movs	r4, #32
 80013fa:	4a56      	ldr	r2, [pc, #344]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 80013fc:	6953      	ldr	r3, [r2, #20]
 80013fe:	4323      	orrs	r3, r4
 8001400:	6153      	str	r3, [r2, #20]
 8001402:	0002      	movs	r2, r0
    flags |= HAL_FLASH_ERROR_FWWERR;
 8001404:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 8001406:	4952      	ldr	r1, [pc, #328]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 8001408:	6989      	ldr	r1, [r1, #24]
 800140a:	03c9      	lsls	r1, r1, #15
 800140c:	d505      	bpl.n	800141a <FLASH_SetErrorCode+0x27a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800140e:	2040      	movs	r0, #64	; 0x40
 8001410:	4950      	ldr	r1, [pc, #320]	; (8001554 <FLASH_SetErrorCode+0x3b4>)
 8001412:	694b      	ldr	r3, [r1, #20]
 8001414:	4303      	orrs	r3, r0
 8001416:	614b      	str	r3, [r1, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 8001418:	0013      	movs	r3, r2
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800141a:	4a4d      	ldr	r2, [pc, #308]	; (8001550 <FLASH_SetErrorCode+0x3b0>)
 800141c:	6193      	str	r3, [r2, #24]
}  
 800141e:	b035      	add	sp, #212	; 0xd4
 8001420:	bcf0      	pop	{r4, r5, r6, r7}
 8001422:	46bb      	mov	fp, r7
 8001424:	46b2      	mov	sl, r6
 8001426:	46a9      	mov	r9, r5
 8001428:	46a0      	mov	r8, r4
 800142a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800142c:	4a72      	ldr	r2, [pc, #456]	; (80015f8 <FLASH_SetErrorCode+0x458>)
 800142e:	2480      	movs	r4, #128	; 0x80
 8001430:	9233      	str	r2, [sp, #204]	; 0xcc
 8001432:	3a20      	subs	r2, #32
 8001434:	9232      	str	r2, [sp, #200]	; 0xc8
 8001436:	4a71      	ldr	r2, [pc, #452]	; (80015fc <FLASH_SetErrorCode+0x45c>)
 8001438:	0124      	lsls	r4, r4, #4
 800143a:	9231      	str	r2, [sp, #196]	; 0xc4
 800143c:	4a70      	ldr	r2, [pc, #448]	; (8001600 <FLASH_SetErrorCode+0x460>)
 800143e:	46a0      	mov	r8, r4
 8001440:	9230      	str	r2, [sp, #192]	; 0xc0
 8001442:	3a20      	subs	r2, #32
 8001444:	922f      	str	r2, [sp, #188]	; 0xbc
 8001446:	22e2      	movs	r2, #226	; 0xe2
 8001448:	0112      	lsls	r2, r2, #4
 800144a:	922e      	str	r2, [sp, #184]	; 0xb8
 800144c:	22b8      	movs	r2, #184	; 0xb8
 800144e:	0192      	lsls	r2, r2, #6
 8001450:	922d      	str	r2, [sp, #180]	; 0xb4
 8001452:	4a6c      	ldr	r2, [pc, #432]	; (8001604 <FLASH_SetErrorCode+0x464>)
 8001454:	2480      	movs	r4, #128	; 0x80
 8001456:	922c      	str	r2, [sp, #176]	; 0xb0
 8001458:	3a20      	subs	r2, #32
 800145a:	922b      	str	r2, [sp, #172]	; 0xac
 800145c:	4a6a      	ldr	r2, [pc, #424]	; (8001608 <FLASH_SetErrorCode+0x468>)
 800145e:	00e4      	lsls	r4, r4, #3
 8001460:	922a      	str	r2, [sp, #168]	; 0xa8
 8001462:	4a6a      	ldr	r2, [pc, #424]	; (800160c <FLASH_SetErrorCode+0x46c>)
 8001464:	2790      	movs	r7, #144	; 0x90
 8001466:	9229      	str	r2, [sp, #164]	; 0xa4
 8001468:	3a20      	subs	r2, #32
 800146a:	9228      	str	r2, [sp, #160]	; 0xa0
 800146c:	22c4      	movs	r2, #196	; 0xc4
 800146e:	00d2      	lsls	r2, r2, #3
 8001470:	9227      	str	r2, [sp, #156]	; 0x9c
 8001472:	2298      	movs	r2, #152	; 0x98
 8001474:	0192      	lsls	r2, r2, #6
 8001476:	9226      	str	r2, [sp, #152]	; 0x98
 8001478:	22e0      	movs	r2, #224	; 0xe0
 800147a:	0112      	lsls	r2, r2, #4
 800147c:	9225      	str	r2, [sp, #148]	; 0x94
 800147e:	4a64      	ldr	r2, [pc, #400]	; (8001610 <FLASH_SetErrorCode+0x470>)
 8001480:	2580      	movs	r5, #128	; 0x80
 8001482:	9224      	str	r2, [sp, #144]	; 0x90
 8001484:	3a20      	subs	r2, #32
 8001486:	9223      	str	r2, [sp, #140]	; 0x8c
 8001488:	4a62      	ldr	r2, [pc, #392]	; (8001614 <FLASH_SetErrorCode+0x474>)
 800148a:	2120      	movs	r1, #32
 800148c:	9222      	str	r2, [sp, #136]	; 0x88
 800148e:	4a62      	ldr	r2, [pc, #392]	; (8001618 <FLASH_SetErrorCode+0x478>)
 8001490:	4e62      	ldr	r6, [pc, #392]	; (800161c <FLASH_SetErrorCode+0x47c>)
 8001492:	9221      	str	r2, [sp, #132]	; 0x84
 8001494:	3a20      	subs	r2, #32
 8001496:	9220      	str	r2, [sp, #128]	; 0x80
 8001498:	22a2      	movs	r2, #162	; 0xa2
 800149a:	0112      	lsls	r2, r2, #4
 800149c:	921f      	str	r2, [sp, #124]	; 0x7c
 800149e:	22a8      	movs	r2, #168	; 0xa8
 80014a0:	0192      	lsls	r2, r2, #6
 80014a2:	921e      	str	r2, [sp, #120]	; 0x78
 80014a4:	4a5e      	ldr	r2, [pc, #376]	; (8001620 <FLASH_SetErrorCode+0x480>)
 80014a6:	485f      	ldr	r0, [pc, #380]	; (8001624 <FLASH_SetErrorCode+0x484>)
 80014a8:	921d      	str	r2, [sp, #116]	; 0x74
 80014aa:	3a20      	subs	r2, #32
 80014ac:	921c      	str	r2, [sp, #112]	; 0x70
 80014ae:	4a5e      	ldr	r2, [pc, #376]	; (8001628 <FLASH_SetErrorCode+0x488>)
 80014b0:	027f      	lsls	r7, r7, #9
 80014b2:	921b      	str	r2, [sp, #108]	; 0x6c
 80014b4:	4a5d      	ldr	r2, [pc, #372]	; (800162c <FLASH_SetErrorCode+0x48c>)
 80014b6:	01ad      	lsls	r5, r5, #6
 80014b8:	921a      	str	r2, [sp, #104]	; 0x68
 80014ba:	3a20      	subs	r2, #32
 80014bc:	9219      	str	r2, [sp, #100]	; 0x64
 80014be:	2288      	movs	r2, #136	; 0x88
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	9218      	str	r2, [sp, #96]	; 0x60
 80014c4:	2288      	movs	r2, #136	; 0x88
 80014c6:	0192      	lsls	r2, r2, #6
 80014c8:	9217      	str	r2, [sp, #92]	; 0x5c
 80014ca:	22a0      	movs	r2, #160	; 0xa0
 80014cc:	0112      	lsls	r2, r2, #4
 80014ce:	9216      	str	r2, [sp, #88]	; 0x58
 80014d0:	22c0      	movs	r2, #192	; 0xc0
 80014d2:	00d2      	lsls	r2, r2, #3
 80014d4:	9215      	str	r2, [sp, #84]	; 0x54
 80014d6:	4a56      	ldr	r2, [pc, #344]	; (8001630 <FLASH_SetErrorCode+0x490>)
 80014d8:	9213      	str	r2, [sp, #76]	; 0x4c
 80014da:	3a20      	subs	r2, #32
 80014dc:	9212      	str	r2, [sp, #72]	; 0x48
 80014de:	4a55      	ldr	r2, [pc, #340]	; (8001634 <FLASH_SetErrorCode+0x494>)
 80014e0:	9404      	str	r4, [sp, #16]
 80014e2:	9211      	str	r2, [sp, #68]	; 0x44
 80014e4:	4a54      	ldr	r2, [pc, #336]	; (8001638 <FLASH_SetErrorCode+0x498>)
 80014e6:	2480      	movs	r4, #128	; 0x80
 80014e8:	9210      	str	r2, [sp, #64]	; 0x40
 80014ea:	3a20      	subs	r2, #32
 80014ec:	920f      	str	r2, [sp, #60]	; 0x3c
 80014ee:	22c2      	movs	r2, #194	; 0xc2
 80014f0:	0112      	lsls	r2, r2, #4
 80014f2:	920e      	str	r2, [sp, #56]	; 0x38
 80014f4:	22b0      	movs	r2, #176	; 0xb0
 80014f6:	0192      	lsls	r2, r2, #6
 80014f8:	920d      	str	r2, [sp, #52]	; 0x34
 80014fa:	4a50      	ldr	r2, [pc, #320]	; (800163c <FLASH_SetErrorCode+0x49c>)
 80014fc:	00a4      	lsls	r4, r4, #2
 80014fe:	920c      	str	r2, [sp, #48]	; 0x30
 8001500:	3a20      	subs	r2, #32
 8001502:	920b      	str	r2, [sp, #44]	; 0x2c
 8001504:	4a4e      	ldr	r2, [pc, #312]	; (8001640 <FLASH_SetErrorCode+0x4a0>)
 8001506:	9414      	str	r4, [sp, #80]	; 0x50
 8001508:	920a      	str	r2, [sp, #40]	; 0x28
 800150a:	4a4e      	ldr	r2, [pc, #312]	; (8001644 <FLASH_SetErrorCode+0x4a4>)
 800150c:	9209      	str	r2, [sp, #36]	; 0x24
 800150e:	3a20      	subs	r2, #32
 8001510:	9208      	str	r2, [sp, #32]
 8001512:	2284      	movs	r2, #132	; 0x84
 8001514:	00d2      	lsls	r2, r2, #3
 8001516:	9207      	str	r2, [sp, #28]
 8001518:	2290      	movs	r2, #144	; 0x90
 800151a:	0192      	lsls	r2, r2, #6
 800151c:	9206      	str	r2, [sp, #24]
 800151e:	22c0      	movs	r2, #192	; 0xc0
 8001520:	0112      	lsls	r2, r2, #4
 8001522:	9205      	str	r2, [sp, #20]
 8001524:	4a48      	ldr	r2, [pc, #288]	; (8001648 <FLASH_SetErrorCode+0x4a8>)
 8001526:	9203      	str	r2, [sp, #12]
 8001528:	3a20      	subs	r2, #32
 800152a:	9202      	str	r2, [sp, #8]
 800152c:	4a47      	ldr	r2, [pc, #284]	; (800164c <FLASH_SetErrorCode+0x4ac>)
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	4a47      	ldr	r2, [pc, #284]	; (8001650 <FLASH_SetErrorCode+0x4b0>)
 8001532:	9200      	str	r2, [sp, #0]
 8001534:	3a20      	subs	r2, #32
 8001536:	4693      	mov	fp, r2
 8001538:	2282      	movs	r2, #130	; 0x82
 800153a:	0112      	lsls	r2, r2, #4
 800153c:	4692      	mov	sl, r2
 800153e:	22a0      	movs	r2, #160	; 0xa0
 8001540:	0192      	lsls	r2, r2, #6
 8001542:	4691      	mov	r9, r2
 8001544:	4a43      	ldr	r2, [pc, #268]	; (8001654 <FLASH_SetErrorCode+0x4b4>)
 8001546:	4694      	mov	ip, r2
 8001548:	2280      	movs	r2, #128	; 0x80
 800154a:	0252      	lsls	r2, r2, #9
 800154c:	e6cd      	b.n	80012ea <FLASH_SetErrorCode+0x14a>
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40022000 	.word	0x40022000
 8001554:	20000364 	.word	0x20000364
 8001558:	00012100 	.word	0x00012100
 800155c:	00012f20 	.word	0x00012f20
 8001560:	00012f00 	.word	0x00012f00
 8001564:	00002120 	.word	0x00002120
 8001568:	00002f20 	.word	0x00002f20
 800156c:	00010120 	.word	0x00010120
 8001570:	00010f20 	.word	0x00010f20
 8001574:	00010100 	.word	0x00010100
 8001578:	00010f00 	.word	0x00010f00
 800157c:	00012720 	.word	0x00012720
 8001580:	00012700 	.word	0x00012700
 8001584:	00002720 	.word	0x00002720
 8001588:	00010720 	.word	0x00010720
 800158c:	00010700 	.word	0x00010700
 8001590:	00012b20 	.word	0x00012b20
 8001594:	00012b00 	.word	0x00012b00
 8001598:	00002b20 	.word	0x00002b20
 800159c:	00010b20 	.word	0x00010b20
 80015a0:	00010b00 	.word	0x00010b00
 80015a4:	00012320 	.word	0x00012320
 80015a8:	00012300 	.word	0x00012300
 80015ac:	00002320 	.word	0x00002320
 80015b0:	00010320 	.word	0x00010320
 80015b4:	00010300 	.word	0x00010300
 80015b8:	00012d20 	.word	0x00012d20
 80015bc:	00012d00 	.word	0x00012d00
 80015c0:	00002d20 	.word	0x00002d20
 80015c4:	00010d20 	.word	0x00010d20
 80015c8:	00010d00 	.word	0x00010d00
 80015cc:	00012520 	.word	0x00012520
 80015d0:	00012500 	.word	0x00012500
 80015d4:	00002520 	.word	0x00002520
 80015d8:	00010520 	.word	0x00010520
 80015dc:	00010500 	.word	0x00010500
 80015e0:	00012920 	.word	0x00012920
 80015e4:	00012900 	.word	0x00012900
 80015e8:	00002920 	.word	0x00002920
 80015ec:	00010920 	.word	0x00010920
 80015f0:	00010900 	.word	0x00010900
 80015f4:	00012120 	.word	0x00012120
 80015f8:	00012e20 	.word	0x00012e20
 80015fc:	00002e20 	.word	0x00002e20
 8001600:	00010e20 	.word	0x00010e20
 8001604:	00012620 	.word	0x00012620
 8001608:	00002620 	.word	0x00002620
 800160c:	00010620 	.word	0x00010620
 8001610:	00012a20 	.word	0x00012a20
 8001614:	00002a20 	.word	0x00002a20
 8001618:	00010a20 	.word	0x00010a20
 800161c:	00002020 	.word	0x00002020
 8001620:	00012220 	.word	0x00012220
 8001624:	00010020 	.word	0x00010020
 8001628:	00002220 	.word	0x00002220
 800162c:	00010220 	.word	0x00010220
 8001630:	00012c20 	.word	0x00012c20
 8001634:	00002c20 	.word	0x00002c20
 8001638:	00010c20 	.word	0x00010c20
 800163c:	00012420 	.word	0x00012420
 8001640:	00002420 	.word	0x00002420
 8001644:	00010420 	.word	0x00010420
 8001648:	00012820 	.word	0x00012820
 800164c:	00002820 	.word	0x00002820
 8001650:	00010820 	.word	0x00010820
 8001654:	00012020 	.word	0x00012020

08001658 <FLASH_WaitForLastOperation>:
{
 8001658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800165a:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff fbb8 	bl	8000dd0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001660:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 8001662:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001664:	4f1a      	ldr	r7, [pc, #104]	; (80016d0 <FLASH_WaitForLastOperation+0x78>)
 8001666:	1c63      	adds	r3, r4, #1
 8001668:	d124      	bne.n	80016b4 <FLASH_WaitForLastOperation+0x5c>
 800166a:	2201      	movs	r2, #1
 800166c:	4918      	ldr	r1, [pc, #96]	; (80016d0 <FLASH_WaitForLastOperation+0x78>)
 800166e:	698b      	ldr	r3, [r1, #24]
 8001670:	421a      	tst	r2, r3
 8001672:	d1fc      	bne.n	800166e <FLASH_WaitForLastOperation+0x16>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001674:	2202      	movs	r2, #2
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <FLASH_WaitForLastOperation+0x78>)
 8001678:	6999      	ldr	r1, [r3, #24]
 800167a:	420a      	tst	r2, r1
 800167c:	d126      	bne.n	80016cc <FLASH_WaitForLastOperation+0x74>
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800167e:	4b14      	ldr	r3, [pc, #80]	; (80016d0 <FLASH_WaitForLastOperation+0x78>)
 8001680:	699a      	ldr	r2, [r3, #24]
 8001682:	05d2      	lsls	r2, r2, #23
 8001684:	d412      	bmi.n	80016ac <FLASH_WaitForLastOperation+0x54>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8001686:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8001688:	0592      	lsls	r2, r2, #22
 800168a:	d40f      	bmi.n	80016ac <FLASH_WaitForLastOperation+0x54>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800168c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800168e:	0552      	lsls	r2, r2, #21
 8001690:	d40c      	bmi.n	80016ac <FLASH_WaitForLastOperation+0x54>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8001692:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8001694:	0512      	lsls	r2, r2, #20
 8001696:	d409      	bmi.n	80016ac <FLASH_WaitForLastOperation+0x54>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 8001698:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800169a:	0492      	lsls	r2, r2, #18
 800169c:	d406      	bmi.n	80016ac <FLASH_WaitForLastOperation+0x54>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800169e:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 80016a0:	0392      	lsls	r2, r2, #14
 80016a2:	d403      	bmi.n	80016ac <FLASH_WaitForLastOperation+0x54>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 80016a4:	699b      	ldr	r3, [r3, #24]
  return HAL_OK;
 80016a6:	2000      	movs	r0, #0
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 80016a8:	03db      	lsls	r3, r3, #15
 80016aa:	d502      	bpl.n	80016b2 <FLASH_WaitForLastOperation+0x5a>
    FLASH_SetErrorCode();
 80016ac:	f7ff fd78 	bl	80011a0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80016b0:	2001      	movs	r0, #1
}
 80016b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	421e      	tst	r6, r3
 80016b8:	d0dc      	beq.n	8001674 <FLASH_WaitForLastOperation+0x1c>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80016ba:	2c00      	cmp	r4, #0
 80016bc:	d004      	beq.n	80016c8 <FLASH_WaitForLastOperation+0x70>
 80016be:	f7ff fb87 	bl	8000dd0 <HAL_GetTick>
 80016c2:	1b40      	subs	r0, r0, r5
 80016c4:	42a0      	cmp	r0, r4
 80016c6:	d9ce      	bls.n	8001666 <FLASH_WaitForLastOperation+0xe>
        return HAL_TIMEOUT;
 80016c8:	2003      	movs	r0, #3
 80016ca:	e7f2      	b.n	80016b2 <FLASH_WaitForLastOperation+0x5a>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80016cc:	619a      	str	r2, [r3, #24]
 80016ce:	e7d6      	b.n	800167e <FLASH_WaitForLastOperation+0x26>
 80016d0:	40022000 	.word	0x40022000

080016d4 <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80016d4:	2201      	movs	r2, #1
 80016d6:	4b08      	ldr	r3, [pc, #32]	; (80016f8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80016d8:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80016da:	6859      	ldr	r1, [r3, #4]
 80016dc:	420a      	tst	r2, r1
 80016de:	d00a      	beq.n	80016f6 <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80016e0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80016e4:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 80016e6:	4805      	ldr	r0, [pc, #20]	; (80016fc <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 80016e8:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80016ec:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80016ee:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80016f2:	6858      	ldr	r0, [r3, #4]
 80016f4:	4010      	ands	r0, r2
}
 80016f6:	4770      	bx	lr
 80016f8:	40022000 	.word	0x40022000
 80016fc:	89abcdef 	.word	0x89abcdef
 8001700:	02030405 	.word	0x02030405

08001704 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001704:	2101      	movs	r1, #1
 8001706:	4a03      	ldr	r2, [pc, #12]	; (8001714 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 8001708:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800170a:	6853      	ldr	r3, [r2, #4]
 800170c:	430b      	orrs	r3, r1
 800170e:	6053      	str	r3, [r2, #4]
}
 8001710:	4770      	bx	lr
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	40022000 	.word	0x40022000

08001718 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800171a:	4c12      	ldr	r4, [pc, #72]	; (8001764 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 800171c:	0005      	movs	r5, r0
  __HAL_LOCK(&pFlash);
 800171e:	7c23      	ldrb	r3, [r4, #16]
{
 8001720:	000f      	movs	r7, r1
 8001722:	0016      	movs	r6, r2
  __HAL_LOCK(&pFlash);
 8001724:	2b01      	cmp	r3, #1
 8001726:	d012      	beq.n	800174e <HAL_FLASHEx_DATAEEPROM_Program+0x36>
 8001728:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800172a:	480f      	ldr	r0, [pc, #60]	; (8001768 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800172c:	7423      	strb	r3, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800172e:	f7ff ff93 	bl	8001658 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8001732:	2800      	cmp	r0, #0
 8001734:	d108      	bne.n	8001748 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001736:	6160      	str	r0, [r4, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001738:	2d02      	cmp	r5, #2
 800173a:	d00d      	beq.n	8001758 <HAL_FLASHEx_DATAEEPROM_Program+0x40>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800173c:	2d01      	cmp	r5, #1
 800173e:	d008      	beq.n	8001752 <HAL_FLASHEx_DATAEEPROM_Program+0x3a>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001740:	2d00      	cmp	r5, #0
 8001742:	d10b      	bne.n	800175c <HAL_FLASHEx_DATAEEPROM_Program+0x44>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8001744:	b2f6      	uxtb	r6, r6
 8001746:	703e      	strb	r6, [r7, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001748:	2300      	movs	r3, #0
 800174a:	7423      	strb	r3, [r4, #16]

  return status;
}
 800174c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800174e:	2002      	movs	r0, #2
 8001750:	e7fc      	b.n	800174c <HAL_FLASHEx_DATAEEPROM_Program+0x34>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8001752:	b2b6      	uxth	r6, r6
 8001754:	803e      	strh	r6, [r7, #0]
 8001756:	e7f7      	b.n	8001748 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
      *(__IO uint32_t *)Address = Data;
 8001758:	603e      	str	r6, [r7, #0]
 800175a:	e7f5      	b.n	8001748 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 800175e:	f7ff ff7b 	bl	8001658 <FLASH_WaitForLastOperation>
 8001762:	e7f1      	b.n	8001748 <HAL_FLASHEx_DATAEEPROM_Program+0x30>
 8001764:	20000364 	.word	0x20000364
 8001768:	0000c350 	.word	0x0000c350

0800176c <HAL_GPIO_Init>:
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800176c:	680b      	ldr	r3, [r1, #0]
{
 800176e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001770:	464e      	mov	r6, r9
  while (((GPIO_Init->Pin) >> position) != 0)
 8001772:	4699      	mov	r9, r3
{
 8001774:	46de      	mov	lr, fp
 8001776:	4657      	mov	r7, sl
 8001778:	4645      	mov	r5, r8
  while (((GPIO_Init->Pin) >> position) != 0)
 800177a:	464a      	mov	r2, r9
{
 800177c:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00U;
 800177e:	2300      	movs	r3, #0
{
 8001780:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8001782:	2a00      	cmp	r2, #0
 8001784:	d07a      	beq.n	800187c <HAL_GPIO_Init+0x110>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001786:	2201      	movs	r2, #1
 8001788:	4692      	mov	sl, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178a:	4a69      	ldr	r2, [pc, #420]	; (8001930 <HAL_GPIO_Init+0x1c4>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800178c:	46c8      	mov	r8, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800178e:	4693      	mov	fp, r2
        temp = EXTI->IMR;
 8001790:	4f68      	ldr	r7, [pc, #416]	; (8001934 <HAL_GPIO_Init+0x1c8>)
 8001792:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001794:	4652      	mov	r2, sl
 8001796:	4644      	mov	r4, r8
 8001798:	409a      	lsls	r2, r3
 800179a:	4014      	ands	r4, r2
 800179c:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 800179e:	4644      	mov	r4, r8
 80017a0:	4214      	tst	r4, r2
 80017a2:	d067      	beq.n	8001874 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80017a4:	9901      	ldr	r1, [sp, #4]
 80017a6:	6849      	ldr	r1, [r1, #4]
 80017a8:	000e      	movs	r6, r1
 80017aa:	4689      	mov	r9, r1
 80017ac:	2110      	movs	r1, #16
 80017ae:	438e      	bics	r6, r1
 80017b0:	1e74      	subs	r4, r6, #1
 80017b2:	2c01      	cmp	r4, #1
 80017b4:	d969      	bls.n	800188a <HAL_GPIO_Init+0x11e>
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017b6:	2503      	movs	r5, #3
 80017b8:	005c      	lsls	r4, r3, #1
 80017ba:	40a5      	lsls	r5, r4
      temp = GPIOx->PUPDR;
 80017bc:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017be:	43e9      	mvns	r1, r5
 80017c0:	43aa      	bics	r2, r5
 80017c2:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c4:	9a01      	ldr	r2, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017c6:	9103      	str	r1, [sp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017c8:	6892      	ldr	r2, [r2, #8]
 80017ca:	40a2      	lsls	r2, r4
 80017cc:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80017ce:	60c2      	str	r2, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d0:	4649      	mov	r1, r9
 80017d2:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 80017d4:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d6:	400e      	ands	r6, r1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017d8:	9d03      	ldr	r5, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017da:	40a6      	lsls	r6, r4
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017dc:	2180      	movs	r1, #128	; 0x80
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017de:	4015      	ands	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e0:	464a      	mov	r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017e2:	432e      	orrs	r6, r5
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e4:	0549      	lsls	r1, r1, #21
      GPIOx->MODER = temp;
 80017e6:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017e8:	420a      	tst	r2, r1
 80017ea:	d043      	beq.n	8001874 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ec:	465a      	mov	r2, fp
 80017ee:	4651      	mov	r1, sl
 80017f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017f2:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017f4:	430a      	orrs	r2, r1
 80017f6:	4659      	mov	r1, fp
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017f8:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	634a      	str	r2, [r1, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 80017fc:	494e      	ldr	r1, [pc, #312]	; (8001938 <HAL_GPIO_Init+0x1cc>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 80017fe:	401d      	ands	r5, r3
 8001800:	468c      	mov	ip, r1
 8001802:	00ad      	lsls	r5, r5, #2
 8001804:	40ae      	lsls	r6, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001806:	21a0      	movs	r1, #160	; 0xa0
        temp = SYSCFG->EXTICR[position >> 2U];
 8001808:	089a      	lsrs	r2, r3, #2
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4462      	add	r2, ip
 800180e:	6894      	ldr	r4, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001810:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001812:	43b4      	bics	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001814:	4288      	cmp	r0, r1
 8001816:	d012      	beq.n	800183e <HAL_GPIO_Init+0xd2>
 8001818:	4e48      	ldr	r6, [pc, #288]	; (800193c <HAL_GPIO_Init+0x1d0>)
 800181a:	42b0      	cmp	r0, r6
 800181c:	d100      	bne.n	8001820 <HAL_GPIO_Init+0xb4>
 800181e:	e07b      	b.n	8001918 <HAL_GPIO_Init+0x1ac>
 8001820:	4e47      	ldr	r6, [pc, #284]	; (8001940 <HAL_GPIO_Init+0x1d4>)
 8001822:	42b0      	cmp	r0, r6
 8001824:	d100      	bne.n	8001828 <HAL_GPIO_Init+0xbc>
 8001826:	e07b      	b.n	8001920 <HAL_GPIO_Init+0x1b4>
 8001828:	4e46      	ldr	r6, [pc, #280]	; (8001944 <HAL_GPIO_Init+0x1d8>)
 800182a:	42b0      	cmp	r0, r6
 800182c:	d100      	bne.n	8001830 <HAL_GPIO_Init+0xc4>
 800182e:	e06f      	b.n	8001910 <HAL_GPIO_Init+0x1a4>
 8001830:	4e45      	ldr	r6, [pc, #276]	; (8001948 <HAL_GPIO_Init+0x1dc>)
 8001832:	42b0      	cmp	r0, r6
 8001834:	d100      	bne.n	8001838 <HAL_GPIO_Init+0xcc>
 8001836:	e077      	b.n	8001928 <HAL_GPIO_Init+0x1bc>
 8001838:	2606      	movs	r6, #6
 800183a:	40ae      	lsls	r6, r5
 800183c:	4334      	orrs	r4, r6
        temp &= ~((uint32_t)iocurrent);
 800183e:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001840:	6094      	str	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001842:	43cd      	mvns	r5, r1
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001844:	4649      	mov	r1, r9
        temp = EXTI->IMR;
 8001846:	683a      	ldr	r2, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001848:	03c9      	lsls	r1, r1, #15
 800184a:	d45e      	bmi.n	800190a <HAL_GPIO_Init+0x19e>
        temp &= ~((uint32_t)iocurrent);
 800184c:	402a      	ands	r2, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184e:	4649      	mov	r1, r9
        EXTI->IMR = temp;
 8001850:	603a      	str	r2, [r7, #0]
        temp = EXTI->EMR;
 8001852:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001854:	0389      	lsls	r1, r1, #14
 8001856:	d455      	bmi.n	8001904 <HAL_GPIO_Init+0x198>
        temp &= ~((uint32_t)iocurrent);
 8001858:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 800185a:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800185c:	464a      	mov	r2, r9
        temp = EXTI->RTSR;
 800185e:	68bc      	ldr	r4, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001860:	02d2      	lsls	r2, r2, #11
 8001862:	d44c      	bmi.n	80018fe <HAL_GPIO_Init+0x192>
        temp &= ~((uint32_t)iocurrent);
 8001864:	402c      	ands	r4, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001866:	4649      	mov	r1, r9
        EXTI->RTSR = temp;
 8001868:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 800186a:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800186c:	0289      	lsls	r1, r1, #10
 800186e:	d441      	bmi.n	80018f4 <HAL_GPIO_Init+0x188>
        temp &= ~((uint32_t)iocurrent);
 8001870:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8001872:	60fa      	str	r2, [r7, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001874:	4642      	mov	r2, r8
      }
    }
    position++;
 8001876:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8001878:	40da      	lsrs	r2, r3
 800187a:	d18b      	bne.n	8001794 <HAL_GPIO_Init+0x28>
  }
}
 800187c:	b005      	add	sp, #20
 800187e:	bcf0      	pop	{r4, r5, r6, r7}
 8001880:	46bb      	mov	fp, r7
 8001882:	46b2      	mov	sl, r6
 8001884:	46a9      	mov	r9, r5
 8001886:	46a0      	mov	r8, r4
 8001888:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800188a:	2103      	movs	r1, #3
 800188c:	005c      	lsls	r4, r3, #1
 800188e:	40a1      	lsls	r1, r4
 8001890:	468c      	mov	ip, r1
 8001892:	43c9      	mvns	r1, r1
 8001894:	9103      	str	r1, [sp, #12]
 8001896:	4661      	mov	r1, ip
        temp = GPIOx->OSPEEDR;
 8001898:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800189a:	438d      	bics	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 800189c:	9901      	ldr	r1, [sp, #4]
 800189e:	68c9      	ldr	r1, [r1, #12]
 80018a0:	40a1      	lsls	r1, r4
 80018a2:	430d      	orrs	r5, r1
        GPIOx->OSPEEDR = temp;
 80018a4:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 80018a6:	6845      	ldr	r5, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018a8:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80018aa:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80018ac:	464a      	mov	r2, r9
 80018ae:	0912      	lsrs	r2, r2, #4
 80018b0:	400a      	ands	r2, r1
 80018b2:	409a      	lsls	r2, r3
 80018b4:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 80018b6:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b8:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 80018ba:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018bc:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018be:	4395      	bics	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c0:	688a      	ldr	r2, [r1, #8]
 80018c2:	40a2      	lsls	r2, r4
 80018c4:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 80018c6:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018c8:	2e02      	cmp	r6, #2
 80018ca:	d000      	beq.n	80018ce <HAL_GPIO_Init+0x162>
 80018cc:	e780      	b.n	80017d0 <HAL_GPIO_Init+0x64>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018ce:	2507      	movs	r5, #7
 80018d0:	401d      	ands	r5, r3
 80018d2:	00ad      	lsls	r5, r5, #2
 80018d4:	360d      	adds	r6, #13
 80018d6:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 80018d8:	08da      	lsrs	r2, r3, #3
 80018da:	0092      	lsls	r2, r2, #2
 80018dc:	1882      	adds	r2, r0, r2
 80018de:	6a11      	ldr	r1, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80018e0:	43b1      	bics	r1, r6
 80018e2:	468c      	mov	ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80018e4:	9901      	ldr	r1, [sp, #4]
 80018e6:	6909      	ldr	r1, [r1, #16]
 80018e8:	40a9      	lsls	r1, r5
 80018ea:	000d      	movs	r5, r1
 80018ec:	4661      	mov	r1, ip
 80018ee:	430d      	orrs	r5, r1
        GPIOx->AFR[position >> 3U] = temp;
 80018f0:	6215      	str	r5, [r2, #32]
 80018f2:	e76d      	b.n	80017d0 <HAL_GPIO_Init+0x64>
          temp |= iocurrent;
 80018f4:	9902      	ldr	r1, [sp, #8]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	000a      	movs	r2, r1
        EXTI->FTSR = temp;
 80018fa:	60fa      	str	r2, [r7, #12]
 80018fc:	e7ba      	b.n	8001874 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 80018fe:	9a02      	ldr	r2, [sp, #8]
 8001900:	4314      	orrs	r4, r2
 8001902:	e7b0      	b.n	8001866 <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 8001904:	9902      	ldr	r1, [sp, #8]
 8001906:	430a      	orrs	r2, r1
 8001908:	e7a7      	b.n	800185a <HAL_GPIO_Init+0xee>
          temp |= iocurrent;
 800190a:	9902      	ldr	r1, [sp, #8]
 800190c:	430a      	orrs	r2, r1
 800190e:	e79e      	b.n	800184e <HAL_GPIO_Init+0xe2>
 8001910:	2103      	movs	r1, #3
 8001912:	40a9      	lsls	r1, r5
 8001914:	430c      	orrs	r4, r1
 8001916:	e792      	b.n	800183e <HAL_GPIO_Init+0xd2>
 8001918:	4651      	mov	r1, sl
 800191a:	40a9      	lsls	r1, r5
 800191c:	430c      	orrs	r4, r1
 800191e:	e78e      	b.n	800183e <HAL_GPIO_Init+0xd2>
 8001920:	2602      	movs	r6, #2
 8001922:	40ae      	lsls	r6, r5
 8001924:	4334      	orrs	r4, r6
 8001926:	e78a      	b.n	800183e <HAL_GPIO_Init+0xd2>
 8001928:	2605      	movs	r6, #5
 800192a:	40ae      	lsls	r6, r5
 800192c:	4334      	orrs	r4, r6
 800192e:	e786      	b.n	800183e <HAL_GPIO_Init+0xd2>
 8001930:	40021000 	.word	0x40021000
 8001934:	40010400 	.word	0x40010400
 8001938:	40010000 	.word	0x40010000
 800193c:	50000400 	.word	0x50000400
 8001940:	50000800 	.word	0x50000800
 8001944:	50000c00 	.word	0x50000c00
 8001948:	50001c00 	.word	0x50001c00

0800194c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800194c:	2a00      	cmp	r2, #0
 800194e:	d001      	beq.n	8001954 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001950:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001952:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8001954:	6281      	str	r1, [r0, #40]	; 0x28
}
 8001956:	e7fc      	b.n	8001952 <HAL_GPIO_WritePin+0x6>

08001958 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001958:	b510      	push	{r4, lr}
 800195a:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800195c:	d04d      	beq.n	80019fa <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800195e:	2341      	movs	r3, #65	; 0x41
 8001960:	5cc3      	ldrb	r3, [r0, r3]
 8001962:	b2da      	uxtb	r2, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d043      	beq.n	80019f0 <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001968:	2341      	movs	r3, #65	; 0x41
 800196a:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800196c:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800196e:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	438a      	bics	r2, r1
 8001976:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001978:	6861      	ldr	r1, [r4, #4]
 800197a:	4a21      	ldr	r2, [pc, #132]	; (8001a00 <HAL_I2C_Init+0xa8>)
 800197c:	400a      	ands	r2, r1
 800197e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	4920      	ldr	r1, [pc, #128]	; (8001a04 <HAL_I2C_Init+0xac>)
 8001984:	400a      	ands	r2, r1
 8001986:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001988:	68e2      	ldr	r2, [r4, #12]
 800198a:	2a01      	cmp	r2, #1
 800198c:	d02a      	beq.n	80019e4 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800198e:	2184      	movs	r1, #132	; 0x84
 8001990:	68a0      	ldr	r0, [r4, #8]
 8001992:	0209      	lsls	r1, r1, #8
 8001994:	4301      	orrs	r1, r0
 8001996:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001998:	2a02      	cmp	r2, #2
 800199a:	d102      	bne.n	80019a2 <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800199c:	2280      	movs	r2, #128	; 0x80
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019a2:	6859      	ldr	r1, [r3, #4]
 80019a4:	4a18      	ldr	r2, [pc, #96]	; (8001a08 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 80019a6:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80019a8:	430a      	orrs	r2, r1
 80019aa:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80019ac:	68da      	ldr	r2, [r3, #12]
 80019ae:	4915      	ldr	r1, [pc, #84]	; (8001a04 <HAL_I2C_Init+0xac>)
 80019b0:	400a      	ands	r2, r1
 80019b2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80019b4:	6961      	ldr	r1, [r4, #20]
 80019b6:	6922      	ldr	r2, [r4, #16]
 80019b8:	430a      	orrs	r2, r1
 80019ba:	69a1      	ldr	r1, [r4, #24]
 80019bc:	0209      	lsls	r1, r1, #8
 80019be:	430a      	orrs	r2, r1
 80019c0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019c2:	6a21      	ldr	r1, [r4, #32]
 80019c4:	69e2      	ldr	r2, [r4, #28]
 80019c6:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 80019c8:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80019ca:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d2:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80019d4:	2241      	movs	r2, #65	; 0x41
 80019d6:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019d8:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80019da:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019dc:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 80019de:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e0:	54a3      	strb	r3, [r4, r2]
}
 80019e2:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	68a1      	ldr	r1, [r4, #8]
 80019e8:	0212      	lsls	r2, r2, #8
 80019ea:	430a      	orrs	r2, r1
 80019ec:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80019ee:	e7d8      	b.n	80019a2 <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 80019f0:	3340      	adds	r3, #64	; 0x40
 80019f2:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 80019f4:	f7fe fe5a 	bl	80006ac <HAL_I2C_MspInit>
 80019f8:	e7b6      	b.n	8001968 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 80019fa:	2001      	movs	r0, #1
 80019fc:	e7f1      	b.n	80019e2 <HAL_I2C_Init+0x8a>
 80019fe:	46c0      	nop			; (mov r8, r8)
 8001a00:	f0ffffff 	.word	0xf0ffffff
 8001a04:	ffff7fff 	.word	0xffff7fff
 8001a08:	02008000 	.word	0x02008000

08001a0c <HAL_I2C_Slave_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8001a0c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a0e:	2441      	movs	r4, #65	; 0x41
 8001a10:	5d03      	ldrb	r3, [r0, r4]
 8001a12:	b2de      	uxtb	r6, r3
 8001a14:	2b20      	cmp	r3, #32
 8001a16:	d11d      	bne.n	8001a54 <HAL_I2C_Slave_Receive_IT+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a18:	2540      	movs	r5, #64	; 0x40
 8001a1a:	5d43      	ldrb	r3, [r0, r5]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d019      	beq.n	8001a54 <HAL_I2C_Slave_Receive_IT+0x48>

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001a20:	2322      	movs	r3, #34	; 0x22
 8001a22:	5503      	strb	r3, [r0, r4]
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8001a24:	3320      	adds	r3, #32
 8001a26:	54c6      	strb	r6, [r0, r3]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a28:	2600      	movs	r6, #0

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001a2a:	6804      	ldr	r4, [r0, #0]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001a2c:	6446      	str	r6, [r0, #68]	; 0x44
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8001a2e:	6863      	ldr	r3, [r4, #4]
 8001a30:	4f09      	ldr	r7, [pc, #36]	; (8001a58 <HAL_I2C_Slave_Receive_IT+0x4c>)
 8001a32:	403b      	ands	r3, r7
 8001a34:	6063      	str	r3, [r4, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
    hi2c->XferCount   = Size;
 8001a36:	8542      	strh	r2, [r0, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a38:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8001a3a:	22fc      	movs	r2, #252	; 0xfc
    hi2c->XferSize    = hi2c->XferCount;
 8001a3c:	8503      	strh	r3, [r0, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a3e:	4b07      	ldr	r3, [pc, #28]	; (8001a5c <HAL_I2C_Slave_Receive_IT+0x50>)
    hi2c->pBuffPtr    = pData;
 8001a40:	6241      	str	r1, [r0, #36]	; 0x24
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a42:	62c3      	str	r3, [r0, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_I2C_Slave_Receive_IT+0x54>)
 8001a46:	6343      	str	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hi2c);
 8001a48:	5546      	strb	r6, [r0, r5]
    return HAL_OK;
 8001a4a:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	6023      	str	r3, [r4, #0]
}
 8001a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8001a54:	2002      	movs	r0, #2
 8001a56:	e7fc      	b.n	8001a52 <HAL_I2C_Slave_Receive_IT+0x46>
 8001a58:	ffff7fff 	.word	0xffff7fff
 8001a5c:	ffff0000 	.word	0xffff0000
 8001a60:	08001ee1 	.word	0x08001ee1

08001a64 <HAL_I2C_SlaveTxCpltCallback>:
 8001a64:	4770      	bx	lr
 8001a66:	46c0      	nop			; (mov r8, r8)

08001a68 <HAL_I2C_SlaveRxCpltCallback>:
 8001a68:	4770      	bx	lr
 8001a6a:	46c0      	nop			; (mov r8, r8)

08001a6c <I2C_ITSlaveSeqCplt>:
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a6c:	2142      	movs	r1, #66	; 0x42
{
 8001a6e:	b510      	push	{r4, lr}
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a70:	2400      	movs	r4, #0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001a72:	6803      	ldr	r3, [r0, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a76:	5444      	strb	r4, [r0, r1]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001a78:	3941      	subs	r1, #65	; 0x41
 8001a7a:	0454      	lsls	r4, r2, #17
 8001a7c:	d50b      	bpl.n	8001a96 <I2C_ITSlaveSeqCplt+0x2a>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4920      	ldr	r1, [pc, #128]	; (8001b04 <I2C_ITSlaveSeqCplt+0x98>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001a86:	2241      	movs	r2, #65	; 0x41
 8001a88:	5c81      	ldrb	r1, [r0, r2]
 8001a8a:	2929      	cmp	r1, #41	; 0x29
 8001a8c:	d00e      	beq.n	8001aac <I2C_ITSlaveSeqCplt+0x40>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8001a8e:	5c81      	ldrb	r1, [r0, r2]
 8001a90:	292a      	cmp	r1, #42	; 0x2a
 8001a92:	d021      	beq.n	8001ad8 <I2C_ITSlaveSeqCplt+0x6c>
}
 8001a94:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001a96:	0bd2      	lsrs	r2, r2, #15
 8001a98:	4211      	tst	r1, r2
 8001a9a:	d0f4      	beq.n	8001a86 <I2C_ITSlaveSeqCplt+0x1a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	491a      	ldr	r1, [pc, #104]	; (8001b08 <I2C_ITSlaveSeqCplt+0x9c>)
 8001aa0:	400a      	ands	r2, r1
 8001aa2:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8001aa4:	2241      	movs	r2, #65	; 0x41
 8001aa6:	5c81      	ldrb	r1, [r0, r2]
 8001aa8:	2929      	cmp	r1, #41	; 0x29
 8001aaa:	d1f0      	bne.n	8001a8e <I2C_ITSlaveSeqCplt+0x22>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001aac:	2421      	movs	r4, #33	; 0x21
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001aae:	3901      	subs	r1, #1
 8001ab0:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001ab2:	6304      	str	r4, [r0, #48]	; 0x30
  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ab4:	5c82      	ldrb	r2, [r0, r2]
 8001ab6:	4011      	ands	r1, r2
 8001ab8:	3928      	subs	r1, #40	; 0x28
 8001aba:	424a      	negs	r2, r1
 8001abc:	4151      	adcs	r1, r2
 8001abe:	22b0      	movs	r2, #176	; 0xb0
 8001ac0:	4249      	negs	r1, r1
 8001ac2:	4011      	ands	r1, r2
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001ac4:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ac6:	39f3      	subs	r1, #243	; 0xf3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001ac8:	4011      	ands	r1, r2
 8001aca:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001acc:	2200      	movs	r2, #0
 8001ace:	2340      	movs	r3, #64	; 0x40
 8001ad0:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001ad2:	f7ff ffc7 	bl	8001a64 <HAL_I2C_SlaveTxCpltCallback>
 8001ad6:	e7dd      	b.n	8001a94 <I2C_ITSlaveSeqCplt+0x28>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ad8:	2422      	movs	r4, #34	; 0x22
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001ada:	3902      	subs	r1, #2
 8001adc:	5481      	strb	r1, [r0, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001ade:	6304      	str	r4, [r0, #48]	; 0x30
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001ae0:	5c82      	ldrb	r2, [r0, r2]
 8001ae2:	4011      	ands	r1, r2
 8001ae4:	3928      	subs	r1, #40	; 0x28
 8001ae6:	424a      	negs	r2, r1
 8001ae8:	4151      	adcs	r1, r2
 8001aea:	22b0      	movs	r2, #176	; 0xb0
 8001aec:	4249      	negs	r1, r1
 8001aee:	4011      	ands	r1, r2
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001af0:	681a      	ldr	r2, [r3, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001af2:	39f5      	subs	r1, #245	; 0xf5
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001af4:	4011      	ands	r1, r2
 8001af6:	6019      	str	r1, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8001af8:	2200      	movs	r2, #0
 8001afa:	2340      	movs	r3, #64	; 0x40
 8001afc:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001afe:	f7ff ffb3 	bl	8001a68 <HAL_I2C_SlaveRxCpltCallback>
}
 8001b02:	e7c7      	b.n	8001a94 <I2C_ITSlaveSeqCplt+0x28>
 8001b04:	ffffbfff 	.word	0xffffbfff
 8001b08:	ffff7fff 	.word	0xffff7fff

08001b0c <HAL_I2C_AddrCallback>:
}
 8001b0c:	4770      	bx	lr
 8001b0e:	46c0      	nop			; (mov r8, r8)

08001b10 <I2C_ITAddrCplt.isra.0.part.0>:
    transferdirection = I2C_GET_DIR(hi2c);
 8001b10:	6803      	ldr	r3, [r0, #0]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001b12:	b5f0      	push	{r4, r5, r6, r7, lr}
    transferdirection = I2C_GET_DIR(hi2c);
 8001b14:	6999      	ldr	r1, [r3, #24]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b16:	699c      	ldr	r4, [r3, #24]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001b18:	46c6      	mov	lr, r8
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b1a:	0c24      	lsrs	r4, r4, #16
 8001b1c:	0022      	movs	r2, r4
 8001b1e:	25fe      	movs	r5, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b20:	68c6      	ldr	r6, [r0, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8001b22:	03c9      	lsls	r1, r1, #15
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001b24:	689c      	ldr	r4, [r3, #8]
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
 8001b26:	b500      	push	{lr}
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8001b28:	68df      	ldr	r7, [r3, #12]
    transferdirection = I2C_GET_DIR(hi2c);
 8001b2a:	0fc9      	lsrs	r1, r1, #31
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8001b2c:	402a      	ands	r2, r5
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001b2e:	2e02      	cmp	r6, #2
 8001b30:	d113      	bne.n	8001b5a <I2C_ITAddrCplt.isra.0.part.0+0x4a>
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8001b32:	05a4      	lsls	r4, r4, #22
 8001b34:	0da6      	lsrs	r6, r4, #22
 8001b36:	46b4      	mov	ip, r6
      if ((slaveaddrcode & SlaveAddr_MSK) == ((ownadd1code >> SlaveAddr_SHIFT) & SlaveAddr_MSK))
 8001b38:	2606      	movs	r6, #6
 8001b3a:	0f64      	lsrs	r4, r4, #29
 8001b3c:	4054      	eors	r4, r2
 8001b3e:	0032      	movs	r2, r6
 8001b40:	4022      	ands	r2, r4
 8001b42:	4690      	mov	r8, r2
 8001b44:	4226      	tst	r6, r4
 8001b46:	d112      	bne.n	8001b6e <I2C_ITAddrCplt.isra.0.part.0+0x5e>
        hi2c->AddrEventCount++;
 8001b48:	6c84      	ldr	r4, [r0, #72]	; 0x48
 8001b4a:	3401      	adds	r4, #1
 8001b4c:	6484      	str	r4, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8001b4e:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8001b50:	2a02      	cmp	r2, #2
 8001b52:	d018      	beq.n	8001b86 <I2C_ITAddrCplt.isra.0.part.0+0x76>
}
 8001b54:	bc80      	pop	{r7}
 8001b56:	46b8      	mov	r8, r7
 8001b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001b5a:	25b8      	movs	r5, #184	; 0xb8
 8001b5c:	681c      	ldr	r4, [r3, #0]
 8001b5e:	43ac      	bics	r4, r5
 8001b60:	601c      	str	r4, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8001b62:	2340      	movs	r3, #64	; 0x40
 8001b64:	2400      	movs	r4, #0
 8001b66:	54c4      	strb	r4, [r0, r3]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b68:	f7ff ffd0 	bl	8001b0c <HAL_I2C_AddrCallback>
}
 8001b6c:	e7f2      	b.n	8001b54 <I2C_ITAddrCplt.isra.0.part.0+0x44>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001b6e:	24b8      	movs	r4, #184	; 0xb8
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	43a2      	bics	r2, r4
 8001b74:	601a      	str	r2, [r3, #0]
        __HAL_UNLOCK(hi2c);
 8001b76:	2340      	movs	r3, #64	; 0x40
 8001b78:	2200      	movs	r2, #0
 8001b7a:	54c2      	strb	r2, [r0, r3]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b7c:	002a      	movs	r2, r5
 8001b7e:	403a      	ands	r2, r7
 8001b80:	f7ff ffc4 	bl	8001b0c <HAL_I2C_AddrCallback>
 8001b84:	e7e6      	b.n	8001b54 <I2C_ITAddrCplt.isra.0.part.0+0x44>
          hi2c->AddrEventCount = 0U;
 8001b86:	4642      	mov	r2, r8
 8001b88:	6482      	str	r2, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001b8a:	2208      	movs	r2, #8
 8001b8c:	61da      	str	r2, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8001b8e:	4642      	mov	r2, r8
 8001b90:	2340      	movs	r3, #64	; 0x40
 8001b92:	54c2      	strb	r2, [r0, r3]
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8001b94:	4662      	mov	r2, ip
 8001b96:	f7ff ffb9 	bl	8001b0c <HAL_I2C_AddrCallback>
 8001b9a:	e7db      	b.n	8001b54 <I2C_ITAddrCplt.isra.0.part.0+0x44>

08001b9c <HAL_I2C_ListenCpltCallback>:
 8001b9c:	4770      	bx	lr
 8001b9e:	46c0      	nop			; (mov r8, r8)

08001ba0 <HAL_I2C_ErrorCallback>:
 8001ba0:	4770      	bx	lr
 8001ba2:	46c0      	nop			; (mov r8, r8)

08001ba4 <HAL_I2C_AbortCpltCallback>:
 8001ba4:	4770      	bx	lr
 8001ba6:	46c0      	nop			; (mov r8, r8)

08001ba8 <I2C_DMAAbort>:
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8001ba8:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8001baa:	b510      	push	{r4, lr}
  if (hi2c->hdmatx != NULL)
 8001bac:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <I2C_DMAAbort+0xe>
    hi2c->hdmatx->XferAbortCallback = NULL;
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 8001bb6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <I2C_DMAAbort+0x18>
    hi2c->hdmarx->XferAbortCallback = NULL;
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001bc0:	2341      	movs	r3, #65	; 0x41
 8001bc2:	5cc2      	ldrb	r2, [r0, r3]
 8001bc4:	2a60      	cmp	r2, #96	; 0x60
 8001bc6:	d006      	beq.n	8001bd6 <I2C_DMAAbort+0x2e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bc8:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8001bca:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bcc:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001bce:	5483      	strb	r3, [r0, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001bd0:	f7ff ffe6 	bl	8001ba0 <HAL_I2C_ErrorCallback>
}
 8001bd4:	bd10      	pop	{r4, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8001bd6:	3a40      	subs	r2, #64	; 0x40
 8001bd8:	54c2      	strb	r2, [r0, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bda:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8001bdc:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001bde:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001be0:	5483      	strb	r3, [r0, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001be2:	f7ff ffdf 	bl	8001ba4 <HAL_I2C_AbortCpltCallback>
}
 8001be6:	e7f5      	b.n	8001bd4 <I2C_DMAAbort+0x2c>

08001be8 <I2C_ITError>:
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001be8:	2241      	movs	r2, #65	; 0x41
{
 8001bea:	b570      	push	{r4, r5, r6, lr}
 8001bec:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001bee:	5c83      	ldrb	r3, [r0, r2]
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8001bf0:	2500      	movs	r5, #0
 8001bf2:	2042      	movs	r0, #66	; 0x42
 8001bf4:	5425      	strb	r5, [r4, r0]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001bf6:	4845      	ldr	r0, [pc, #276]	; (8001d0c <I2C_ITError+0x124>)
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001bf8:	3b28      	subs	r3, #40	; 0x28
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8001bfa:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8001bfc:	8565      	strh	r5, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8001bfe:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001c00:	4308      	orrs	r0, r1
 8001c02:	6460      	str	r0, [r4, #68]	; 0x44
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d834      	bhi.n	8001c72 <I2C_ITError+0x8a>
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c08:	2028      	movs	r0, #40	; 0x28
 8001c0a:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c0c:	5ca2      	ldrb	r2, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c0e:	4003      	ands	r3, r0
 8001c10:	3b28      	subs	r3, #40	; 0x28
 8001c12:	4259      	negs	r1, r3
 8001c14:	414b      	adcs	r3, r1
 8001c16:	21b0      	movs	r1, #176	; 0xb0
 8001c18:	425b      	negs	r3, r3
 8001c1a:	400b      	ands	r3, r1
 8001c1c:	3bf7      	subs	r3, #247	; 0xf7
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c1e:	4010      	ands	r0, r2
 8001c20:	2828      	cmp	r0, #40	; 0x28
 8001c22:	d001      	beq.n	8001c28 <I2C_ITError+0x40>
 8001c24:	23f7      	movs	r3, #247	; 0xf7
 8001c26:	425b      	negs	r3, r3
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001c28:	6821      	ldr	r1, [r4, #0]
 8001c2a:	680a      	ldr	r2, [r1, #0]
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	600b      	str	r3, [r1, #0]
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8001c30:	2228      	movs	r2, #40	; 0x28
 8001c32:	2341      	movs	r3, #65	; 0x41
 8001c34:	54e2      	strb	r2, [r4, r3]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8001c36:	4b36      	ldr	r3, [pc, #216]	; (8001d10 <I2C_ITError+0x128>)
 8001c38:	6363      	str	r3, [r4, #52]	; 0x34
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001c3a:	6ba0      	ldr	r0, [r4, #56]	; 0x38
  tmppreviousstate = hi2c->PreviousState;
 8001c3c:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8001c3e:	2800      	cmp	r0, #0
 8001c40:	d004      	beq.n	8001c4c <I2C_ITError+0x64>
 8001c42:	001a      	movs	r2, r3
 8001c44:	2510      	movs	r5, #16
 8001c46:	3a11      	subs	r2, #17
 8001c48:	43aa      	bics	r2, r5
 8001c4a:	d021      	beq.n	8001c90 <I2C_ITError+0xa8>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8001c4c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001c4e:	2800      	cmp	r0, #0
 8001c50:	d003      	beq.n	8001c5a <I2C_ITError+0x72>
 8001c52:	2210      	movs	r2, #16
 8001c54:	3b12      	subs	r3, #18
 8001c56:	4393      	bics	r3, r2
 8001c58:	d02f      	beq.n	8001cba <I2C_ITError+0xd2>
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8001c5a:	2341      	movs	r3, #65	; 0x41
 8001c5c:	5ce2      	ldrb	r2, [r4, r3]
 8001c5e:	2a60      	cmp	r2, #96	; 0x60
 8001c60:	d049      	beq.n	8001cf6 <I2C_ITError+0x10e>
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c62:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8001c64:	2240      	movs	r2, #64	; 0x40
    hi2c->PreviousState = I2C_STATE_NONE;
 8001c66:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_ErrorCallback(hi2c);
 8001c68:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001c6a:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8001c6c:	f7ff ff98 	bl	8001ba0 <HAL_I2C_ErrorCallback>
}
 8001c70:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001c72:	20fe      	movs	r0, #254	; 0xfe
 8001c74:	6821      	ldr	r1, [r4, #0]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c76:	5ca3      	ldrb	r3, [r4, r2]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001c78:	5ca3      	ldrb	r3, [r4, r2]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001c7a:	680b      	ldr	r3, [r1, #0]
 8001c7c:	4383      	bics	r3, r0
 8001c7e:	600b      	str	r3, [r1, #0]
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8001c80:	5ca3      	ldrb	r3, [r4, r2]
 8001c82:	2b60      	cmp	r3, #96	; 0x60
 8001c84:	d001      	beq.n	8001c8a <I2C_ITError+0xa2>
      hi2c->State         = HAL_I2C_STATE_READY;
 8001c86:	2320      	movs	r3, #32
 8001c88:	54a3      	strb	r3, [r4, r2]
    hi2c->XferISR       = NULL;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	6363      	str	r3, [r4, #52]	; 0x34
 8001c8e:	e7d4      	b.n	8001c3a <I2C_ITError+0x52>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8001c90:	680b      	ldr	r3, [r1, #0]
 8001c92:	045b      	lsls	r3, r3, #17
 8001c94:	d42a      	bmi.n	8001cec <I2C_ITError+0x104>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8001c96:	f7ff fa7f 	bl	8001198 <HAL_DMA_GetState>
 8001c9a:	2801      	cmp	r0, #1
 8001c9c:	d0dd      	beq.n	8001c5a <I2C_ITError+0x72>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001c9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <I2C_ITError+0x12c>)
      __HAL_UNLOCK(hi2c);
 8001ca2:	2200      	movs	r2, #0
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8001ca4:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001ca6:	2340      	movs	r3, #64	; 0x40
 8001ca8:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8001caa:	f7ff fa4f 	bl	800114c <HAL_DMA_Abort_IT>
 8001cae:	2800      	cmp	r0, #0
 8001cb0:	d0de      	beq.n	8001c70 <I2C_ITError+0x88>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8001cb2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001cb4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001cb6:	4798      	blx	r3
 8001cb8:	e7da      	b.n	8001c70 <I2C_ITError+0x88>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8001cba:	680b      	ldr	r3, [r1, #0]
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	d503      	bpl.n	8001cc8 <I2C_ITError+0xe0>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001cc0:	680b      	ldr	r3, [r1, #0]
 8001cc2:	4a15      	ldr	r2, [pc, #84]	; (8001d18 <I2C_ITError+0x130>)
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	600b      	str	r3, [r1, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8001cc8:	f7ff fa66 	bl	8001198 <HAL_DMA_GetState>
 8001ccc:	2801      	cmp	r0, #1
 8001cce:	d0c4      	beq.n	8001c5a <I2C_ITError+0x72>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001cd0:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <I2C_ITError+0x12c>)
      __HAL_UNLOCK(hi2c);
 8001cd4:	2200      	movs	r2, #0
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8001cd6:	6383      	str	r3, [r0, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8001cd8:	2340      	movs	r3, #64	; 0x40
 8001cda:	54e2      	strb	r2, [r4, r3]
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8001cdc:	f7ff fa36 	bl	800114c <HAL_DMA_Abort_IT>
 8001ce0:	2800      	cmp	r0, #0
 8001ce2:	d0c5      	beq.n	8001c70 <I2C_ITError+0x88>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8001ce4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8001ce6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8001ce8:	4798      	blx	r3
 8001cea:	e7c1      	b.n	8001c70 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001cec:	680b      	ldr	r3, [r1, #0]
 8001cee:	4a0b      	ldr	r2, [pc, #44]	; (8001d1c <I2C_ITError+0x134>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
 8001cf4:	e7cf      	b.n	8001c96 <I2C_ITError+0xae>
    hi2c->State = HAL_I2C_STATE_READY;
 8001cf6:	3a40      	subs	r2, #64	; 0x40
 8001cf8:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cfa:	2300      	movs	r3, #0
    __HAL_UNLOCK(hi2c);
 8001cfc:	3220      	adds	r2, #32
    hi2c->PreviousState = I2C_STATE_NONE;
 8001cfe:	6323      	str	r3, [r4, #48]	; 0x30
    HAL_I2C_AbortCpltCallback(hi2c);
 8001d00:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001d02:	54a3      	strb	r3, [r4, r2]
    HAL_I2C_AbortCpltCallback(hi2c);
 8001d04:	f7ff ff4e 	bl	8001ba4 <HAL_I2C_AbortCpltCallback>
}
 8001d08:	e7b2      	b.n	8001c70 <I2C_ITError+0x88>
 8001d0a:	46c0      	nop			; (mov r8, r8)
 8001d0c:	ffff0000 	.word	0xffff0000
 8001d10:	08001ee1 	.word	0x08001ee1
 8001d14:	08001ba9 	.word	0x08001ba9
 8001d18:	ffff7fff 	.word	0xffff7fff
 8001d1c:	ffffbfff 	.word	0xffffbfff

08001d20 <I2C_ITSlaveCplt>:
{
 8001d20:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d22:	6803      	ldr	r3, [r0, #0]
{
 8001d24:	0004      	movs	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d26:	2041      	movs	r0, #65	; 0x41
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d28:	2620      	movs	r6, #32
{
 8001d2a:	46c6      	mov	lr, r8
 8001d2c:	000d      	movs	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8001d2e:	6819      	ldr	r1, [r3, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8001d30:	5c22      	ldrb	r2, [r4, r0]
{
 8001d32:	b500      	push	{lr}
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001d34:	61de      	str	r6, [r3, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001d36:	3e18      	subs	r6, #24
 8001d38:	43b2      	bics	r2, r6
 8001d3a:	2a21      	cmp	r2, #33	; 0x21
 8001d3c:	d057      	beq.n	8001dee <I2C_ITSlaveCplt+0xce>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8001d3e:	2a22      	cmp	r2, #34	; 0x22
 8001d40:	d100      	bne.n	8001d44 <I2C_ITSlaveCplt+0x24>
 8001d42:	e07d      	b.n	8001e40 <I2C_ITSlaveCplt+0x120>
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8001d44:	2280      	movs	r2, #128	; 0x80
 8001d46:	6858      	ldr	r0, [r3, #4]
 8001d48:	0212      	lsls	r2, r2, #8
 8001d4a:	4302      	orrs	r2, r0
 8001d4c:	605a      	str	r2, [r3, #4]
  I2C_RESET_CR2(hi2c);
 8001d4e:	685a      	ldr	r2, [r3, #4]
 8001d50:	485f      	ldr	r0, [pc, #380]	; (8001ed0 <I2C_ITSlaveCplt+0x1b0>)
 8001d52:	4002      	ands	r2, r0
 8001d54:	605a      	str	r2, [r3, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001d56:	699a      	ldr	r2, [r3, #24]
 8001d58:	0792      	lsls	r2, r2, #30
 8001d5a:	d501      	bpl.n	8001d60 <I2C_ITSlaveCplt+0x40>
    hi2c->Instance->TXDR = 0x00U;
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001d60:	2201      	movs	r2, #1
 8001d62:	6998      	ldr	r0, [r3, #24]
 8001d64:	4202      	tst	r2, r0
 8001d66:	d102      	bne.n	8001d6e <I2C_ITSlaveCplt+0x4e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001d68:	6998      	ldr	r0, [r3, #24]
 8001d6a:	4302      	orrs	r2, r0
 8001d6c:	619a      	str	r2, [r3, #24]
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8001d6e:	2201      	movs	r2, #1
 8001d70:	0448      	lsls	r0, r1, #17
 8001d72:	d543      	bpl.n	8001dfc <I2C_ITSlaveCplt+0xdc>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	4957      	ldr	r1, [pc, #348]	; (8001ed4 <I2C_ITSlaveCplt+0x1b4>)
 8001d78:	400a      	ands	r2, r1
 8001d7a:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmatx != NULL)
 8001d7c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	d003      	beq.n	8001d8a <I2C_ITSlaveCplt+0x6a>
      hi2c->XferCount = (uint16_t)__HAL_DMA_GET_COUNTER(hi2c->hdmarx);
 8001d82:	6812      	ldr	r2, [r2, #0]
 8001d84:	6852      	ldr	r2, [r2, #4]
 8001d86:	b292      	uxth	r2, r2
 8001d88:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8001d8a:	076a      	lsls	r2, r5, #29
 8001d8c:	d50a      	bpl.n	8001da4 <I2C_ITSlaveCplt+0x84>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d8e:	2204      	movs	r2, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8001d92:	4395      	bics	r5, r2
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001d94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001d96:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001d9a:	3301      	adds	r3, #1
 8001d9c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001d9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d146      	bne.n	8001e32 <I2C_ITSlaveCplt+0x112>
  if (hi2c->XferCount != 0U)
 8001da4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <I2C_ITSlaveCplt+0x92>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001daa:	2204      	movs	r2, #4
 8001dac:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001dae:	4313      	orrs	r3, r2
 8001db0:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db2:	2600      	movs	r6, #0
 8001db4:	2742      	movs	r7, #66	; 0x42
 8001db6:	55e6      	strb	r6, [r4, r7]
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001db8:	6c63      	ldr	r3, [r4, #68]	; 0x44
  hi2c->XferISR = NULL;
 8001dba:	6366      	str	r6, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001dbc:	4698      	mov	r8, r3
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d145      	bne.n	8001e4e <I2C_ITSlaveCplt+0x12e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8001dc2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001dc4:	4d44      	ldr	r5, [pc, #272]	; (8001ed8 <I2C_ITSlaveCplt+0x1b8>)
 8001dc6:	42ab      	cmp	r3, r5
 8001dc8:	d123      	bne.n	8001e12 <I2C_ITSlaveCplt+0xf2>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001dca:	2341      	movs	r3, #65	; 0x41
 8001dcc:	5ce2      	ldrb	r2, [r4, r3]
 8001dce:	2a22      	cmp	r2, #34	; 0x22
 8001dd0:	d100      	bne.n	8001dd4 <I2C_ITSlaveCplt+0xb4>
 8001dd2:	e072      	b.n	8001eba <I2C_ITSlaveCplt+0x19a>
    hi2c->State = HAL_I2C_STATE_READY;
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001dd8:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 8001dda:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ddc:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001dde:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001de0:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001de2:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8001de4:	f7ff fe3e 	bl	8001a64 <HAL_I2C_SlaveTxCpltCallback>
}
 8001de8:	bc80      	pop	{r7}
 8001dea:	46b8      	mov	r8, r7
 8001dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001dee:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	36f2      	adds	r6, #242	; 0xf2
 8001df4:	43b0      	bics	r0, r6
 8001df6:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8001df8:	6322      	str	r2, [r4, #48]	; 0x30
 8001dfa:	e7a3      	b.n	8001d44 <I2C_ITSlaveCplt+0x24>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8001dfc:	0bc9      	lsrs	r1, r1, #15
 8001dfe:	420a      	tst	r2, r1
 8001e00:	d0c3      	beq.n	8001d8a <I2C_ITSlaveCplt+0x6a>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4935      	ldr	r1, [pc, #212]	; (8001edc <I2C_ITSlaveCplt+0x1bc>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	601a      	str	r2, [r3, #0]
    if (hi2c->hdmarx != NULL)
 8001e0a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8001e0c:	2a00      	cmp	r2, #0
 8001e0e:	d1b8      	bne.n	8001d82 <I2C_ITSlaveCplt+0x62>
 8001e10:	e7bb      	b.n	8001d8a <I2C_ITSlaveCplt+0x6a>
    I2C_ITSlaveSeqCplt(hi2c);
 8001e12:	0020      	movs	r0, r4
 8001e14:	f7ff fe2a 	bl	8001a6c <I2C_ITSlaveSeqCplt>
    hi2c->State = HAL_I2C_STATE_READY;
 8001e18:	2341      	movs	r3, #65	; 0x41
 8001e1a:	2220      	movs	r2, #32
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e1c:	62e5      	str	r5, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8001e1e:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e20:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 8001e22:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 8001e24:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001e26:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e28:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001e2a:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_ListenCpltCallback(hi2c);
 8001e2c:	f7ff feb6 	bl	8001b9c <HAL_I2C_ListenCpltCallback>
 8001e30:	e7da      	b.n	8001de8 <I2C_ITSlaveCplt+0xc8>
      hi2c->XferSize--;
 8001e32:	3b01      	subs	r3, #1
 8001e34:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e36:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e38:	3b01      	subs	r3, #1
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8001e3e:	e7b1      	b.n	8001da4 <I2C_ITSlaveCplt+0x84>
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001e40:	26fc      	movs	r6, #252	; 0xfc
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e42:	5c20      	ldrb	r0, [r4, r0]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	43b0      	bics	r0, r6
 8001e48:	6018      	str	r0, [r3, #0]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8001e4a:	6322      	str	r2, [r4, #48]	; 0x30
 8001e4c:	e77a      	b.n	8001d44 <I2C_ITSlaveCplt+0x24>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8001e4e:	0020      	movs	r0, r4
 8001e50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e52:	f7ff fec9 	bl	8001be8 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8001e56:	2341      	movs	r3, #65	; 0x41
 8001e58:	5ce2      	ldrb	r2, [r4, r3]
 8001e5a:	2a28      	cmp	r2, #40	; 0x28
 8001e5c:	d1c4      	bne.n	8001de8 <I2C_ITSlaveCplt+0xc8>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <I2C_ITSlaveCplt+0x1b8>)
 8001e60:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 8001e62:	2220      	movs	r2, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e64:	6326      	str	r6, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8001e66:	54e2      	strb	r2, [r4, r3]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e68:	55e6      	strb	r6, [r4, r7]
  hi2c->XferISR = NULL;
 8001e6a:	6366      	str	r6, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8001e6c:	076b      	lsls	r3, r5, #29
 8001e6e:	d513      	bpl.n	8001e98 <I2C_ITSlaveCplt+0x178>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e70:	6823      	ldr	r3, [r4, #0]
 8001e72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8001e78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8001e7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d009      	beq.n	8001e98 <I2C_ITSlaveCplt+0x178>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e84:	2204      	movs	r2, #4
      hi2c->XferSize--;
 8001e86:	3b01      	subs	r3, #1
 8001e88:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001e8a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e92:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001e94:	4313      	orrs	r3, r2
 8001e96:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e98:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001e9a:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e9c:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8001e9e:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001ea0:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 8001ea2:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	438a      	bics	r2, r1
 8001ea8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001eaa:	2210      	movs	r2, #16
 8001eac:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001eae:	2340      	movs	r3, #64	; 0x40
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8001eb4:	f7ff fe72 	bl	8001b9c <HAL_I2C_ListenCpltCallback>
}
 8001eb8:	e796      	b.n	8001de8 <I2C_ITSlaveCplt+0xc8>
    hi2c->State = HAL_I2C_STATE_READY;
 8001eba:	3a02      	subs	r2, #2
 8001ebc:	54e2      	strb	r2, [r4, r3]
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ebe:	4643      	mov	r3, r8
    __HAL_UNLOCK(hi2c);
 8001ec0:	4642      	mov	r2, r8
    hi2c->PreviousState = I2C_STATE_NONE;
 8001ec2:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8001ec4:	2340      	movs	r3, #64	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001ec6:	0020      	movs	r0, r4
    __HAL_UNLOCK(hi2c);
 8001ec8:	54e2      	strb	r2, [r4, r3]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8001eca:	f7ff fdcd 	bl	8001a68 <HAL_I2C_SlaveRxCpltCallback>
 8001ece:	e78b      	b.n	8001de8 <I2C_ITSlaveCplt+0xc8>
 8001ed0:	fe00e800 	.word	0xfe00e800
 8001ed4:	ffffbfff 	.word	0xffffbfff
 8001ed8:	ffff0000 	.word	0xffff0000
 8001edc:	ffff7fff 	.word	0xffff7fff

08001ee0 <I2C_Slave_ISR_IT>:
{
 8001ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ee2:	0016      	movs	r6, r2
  __HAL_LOCK(hi2c);
 8001ee4:	2240      	movs	r2, #64	; 0x40
 8001ee6:	5c83      	ldrb	r3, [r0, r2]
{
 8001ee8:	0004      	movs	r4, r0
 8001eea:	000d      	movs	r5, r1
  uint32_t tmpoptions = hi2c->XferOptions;
 8001eec:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d100      	bne.n	8001ef4 <I2C_Slave_ISR_IT+0x14>
 8001ef2:	e081      	b.n	8001ff8 <I2C_Slave_ISR_IT+0x118>
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	5483      	strb	r3, [r0, r2]
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8001ef8:	094a      	lsrs	r2, r1, #5
 8001efa:	4213      	tst	r3, r2
 8001efc:	d003      	beq.n	8001f06 <I2C_Slave_ISR_IT+0x26>
 8001efe:	0972      	lsrs	r2, r6, #5
 8001f00:	4213      	tst	r3, r2
 8001f02:	d000      	beq.n	8001f06 <I2C_Slave_ISR_IT+0x26>
 8001f04:	e063      	b.n	8001fce <I2C_Slave_ISR_IT+0xee>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001f06:	2301      	movs	r3, #1
 8001f08:	06ea      	lsls	r2, r5, #27
 8001f0a:	d518      	bpl.n	8001f3e <I2C_Slave_ISR_IT+0x5e>
 8001f0c:	0932      	lsrs	r2, r6, #4
 8001f0e:	4213      	tst	r3, r2
 8001f10:	d015      	beq.n	8001f3e <I2C_Slave_ISR_IT+0x5e>
    if (hi2c->XferCount == 0U)
 8001f12:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8001f14:	b291      	uxth	r1, r2
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	d15f      	bne.n	8001fda <I2C_Slave_ISR_IT+0xfa>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8001f1a:	3241      	adds	r2, #65	; 0x41
 8001f1c:	5ca0      	ldrb	r0, [r4, r2]
 8001f1e:	2828      	cmp	r0, #40	; 0x28
 8001f20:	d100      	bne.n	8001f24 <I2C_Slave_ISR_IT+0x44>
 8001f22:	e073      	b.n	800200c <I2C_Slave_ISR_IT+0x12c>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8001f24:	2341      	movs	r3, #65	; 0x41
 8001f26:	5ce3      	ldrb	r3, [r4, r3]
 8001f28:	2b29      	cmp	r3, #41	; 0x29
 8001f2a:	d100      	bne.n	8001f2e <I2C_Slave_ISR_IT+0x4e>
 8001f2c:	e0a3      	b.n	8002076 <I2C_Slave_ISR_IT+0x196>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2e:	2210      	movs	r2, #16
 8001f30:	6823      	ldr	r3, [r4, #0]
 8001f32:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8001f34:	2340      	movs	r3, #64	; 0x40
 8001f36:	2200      	movs	r2, #0
  return HAL_OK;
 8001f38:	2000      	movs	r0, #0
  __HAL_UNLOCK(hi2c);
 8001f3a:	54e2      	strb	r2, [r4, r3]
}
 8001f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f3e:	2301      	movs	r3, #1
 8001f40:	076a      	lsls	r2, r5, #29
 8001f42:	d40f      	bmi.n	8001f64 <I2C_Slave_ISR_IT+0x84>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f44:	2301      	movs	r3, #1
 8001f46:	072a      	lsls	r2, r5, #28
 8001f48:	d52a      	bpl.n	8001fa0 <I2C_Slave_ISR_IT+0xc0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8001f4a:	08f2      	lsrs	r2, r6, #3
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8001f4c:	4213      	tst	r3, r2
 8001f4e:	d027      	beq.n	8001fa0 <I2C_Slave_ISR_IT+0xc0>
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001f50:	3340      	adds	r3, #64	; 0x40
 8001f52:	5ce2      	ldrb	r2, [r4, r3]
 8001f54:	3b19      	subs	r3, #25
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b28      	cmp	r3, #40	; 0x28
 8001f5a:	d053      	beq.n	8002004 <I2C_Slave_ISR_IT+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8001f5c:	2208      	movs	r2, #8
 8001f5e:	6823      	ldr	r3, [r4, #0]
 8001f60:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8001f62:	e7e7      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8001f64:	08b2      	lsrs	r2, r6, #2
 8001f66:	4213      	tst	r3, r2
 8001f68:	d0ec      	beq.n	8001f44 <I2C_Slave_ISR_IT+0x64>
    if (hi2c->XferCount > 0U)
 8001f6a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00d      	beq.n	8001f8c <I2C_Slave_ISR_IT+0xac>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f70:	6823      	ldr	r3, [r4, #0]
 8001f72:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001f74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f76:	7013      	strb	r3, [r2, #0]
      hi2c->pBuffPtr++;
 8001f78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8001f7e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001f80:	3b01      	subs	r3, #1
 8001f82:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8001f84:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f86:	3b01      	subs	r3, #1
 8001f88:	b29b      	uxth	r3, r3
 8001f8a:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 8001f8c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d1d0      	bne.n	8001f34 <I2C_Slave_ISR_IT+0x54>
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <I2C_Slave_ISR_IT+0x1c0>)
 8001f94:	429f      	cmp	r7, r3
 8001f96:	d0cd      	beq.n	8001f34 <I2C_Slave_ISR_IT+0x54>
        I2C_ITSlaveSeqCplt(hi2c);
 8001f98:	0020      	movs	r0, r4
 8001f9a:	f7ff fd67 	bl	8001a6c <I2C_ITSlaveSeqCplt>
 8001f9e:	e7c9      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	07aa      	lsls	r2, r5, #30
 8001fa4:	d5c6      	bpl.n	8001f34 <I2C_Slave_ISR_IT+0x54>
 8001fa6:	0876      	lsrs	r6, r6, #1
 8001fa8:	4233      	tst	r3, r6
 8001faa:	d0c3      	beq.n	8001f34 <I2C_Slave_ISR_IT+0x54>
    if (hi2c->XferCount > 0U)
 8001fac:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d024      	beq.n	8001ffc <I2C_Slave_ISR_IT+0x11c>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001fb4:	6822      	ldr	r2, [r4, #0]
 8001fb6:	7819      	ldrb	r1, [r3, #0]
      hi2c->pBuffPtr++;
 8001fb8:	3301      	adds	r3, #1
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001fba:	6291      	str	r1, [r2, #40]	; 0x28
      hi2c->pBuffPtr++;
 8001fbc:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8001fbe:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b29b      	uxth	r3, r3
 8001fc4:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8001fc6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8001fc8:	3b01      	subs	r3, #1
 8001fca:	8523      	strh	r3, [r4, #40]	; 0x28
 8001fcc:	e7b2      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8001fce:	f7ff fea7 	bl	8001d20 <I2C_ITSlaveCplt>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	06ea      	lsls	r2, r5, #27
 8001fd6:	d5b2      	bpl.n	8001f3e <I2C_Slave_ISR_IT+0x5e>
 8001fd8:	e798      	b.n	8001f0c <I2C_Slave_ISR_IT+0x2c>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fda:	2210      	movs	r2, #16
 8001fdc:	6823      	ldr	r3, [r4, #0]
 8001fde:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001fe0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001fe2:	3a0c      	subs	r2, #12
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8001fe8:	4b2e      	ldr	r3, [pc, #184]	; (80020a4 <I2C_Slave_ISR_IT+0x1c4>)
 8001fea:	421f      	tst	r7, r3
 8001fec:	d1a2      	bne.n	8001f34 <I2C_Slave_ISR_IT+0x54>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8001fee:	0020      	movs	r0, r4
 8001ff0:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001ff2:	f7ff fdf9 	bl	8001be8 <I2C_ITError>
 8001ff6:	e79d      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
  __HAL_LOCK(hi2c);
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	e79f      	b.n	8001f3c <I2C_Slave_ISR_IT+0x5c>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8001ffc:	4b29      	ldr	r3, [pc, #164]	; (80020a4 <I2C_Slave_ISR_IT+0x1c4>)
 8001ffe:	421f      	tst	r7, r3
 8002000:	d0ca      	beq.n	8001f98 <I2C_Slave_ISR_IT+0xb8>
 8002002:	e797      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
 8002004:	0020      	movs	r0, r4
 8002006:	f7ff fd83 	bl	8001b10 <I2C_ITAddrCplt.isra.0.part.0>
 800200a:	e793      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800200c:	2080      	movs	r0, #128	; 0x80
 800200e:	0480      	lsls	r0, r0, #18
 8002010:	4287      	cmp	r7, r0
 8002012:	d000      	beq.n	8002016 <I2C_Slave_ISR_IT+0x136>
 8002014:	e786      	b.n	8001f24 <I2C_Slave_ISR_IT+0x44>
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002016:	4822      	ldr	r0, [pc, #136]	; (80020a0 <I2C_Slave_ISR_IT+0x1c0>)
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002018:	08ad      	lsrs	r5, r5, #2
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800201a:	62e0      	str	r0, [r4, #44]	; 0x2c
  hi2c->State = HAL_I2C_STATE_READY;
 800201c:	2020      	movs	r0, #32
  hi2c->PreviousState = I2C_STATE_NONE;
 800201e:	6321      	str	r1, [r4, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002020:	54a0      	strb	r0, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002022:	3201      	adds	r2, #1
 8002024:	54a1      	strb	r1, [r4, r2]
  hi2c->XferISR = NULL;
 8002026:	6361      	str	r1, [r4, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002028:	422b      	tst	r3, r5
 800202a:	d013      	beq.n	8002054 <I2C_Slave_ISR_IT+0x174>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800202c:	6823      	ldr	r3, [r4, #0]
 800202e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	7013      	strb	r3, [r2, #0]
    hi2c->pBuffPtr++;
 8002034:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002036:	3301      	adds	r3, #1
 8002038:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 800203a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800203c:	2b00      	cmp	r3, #0
 800203e:	d009      	beq.n	8002054 <I2C_Slave_ISR_IT+0x174>
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002040:	2204      	movs	r2, #4
      hi2c->XferSize--;
 8002042:	3b01      	subs	r3, #1
 8002044:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8002046:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8002048:	3b01      	subs	r3, #1
 800204a:	b29b      	uxth	r3, r3
 800204c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800204e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002050:	4313      	orrs	r3, r2
 8002052:	6463      	str	r3, [r4, #68]	; 0x44
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002054:	2341      	movs	r3, #65	; 0x41
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002056:	21fe      	movs	r1, #254	; 0xfe
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8002058:	5ce2      	ldrb	r2, [r4, r3]
    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800205a:	5ce3      	ldrb	r3, [r4, r3]
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800205c:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_ListenCpltCallback(hi2c);
 800205e:	0020      	movs	r0, r4
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	438a      	bics	r2, r1
 8002064:	601a      	str	r2, [r3, #0]
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002066:	2210      	movs	r2, #16
 8002068:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800206a:	2340      	movs	r3, #64	; 0x40
 800206c:	2200      	movs	r2, #0
 800206e:	54e2      	strb	r2, [r4, r3]
  HAL_I2C_ListenCpltCallback(hi2c);
 8002070:	f7ff fd94 	bl	8001b9c <HAL_I2C_ListenCpltCallback>
}
 8002074:	e75e      	b.n	8001f34 <I2C_Slave_ISR_IT+0x54>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002076:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <I2C_Slave_ISR_IT+0x1c0>)
 8002078:	429f      	cmp	r7, r3
 800207a:	d100      	bne.n	800207e <I2C_Slave_ISR_IT+0x19e>
 800207c:	e757      	b.n	8001f2e <I2C_Slave_ISR_IT+0x4e>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800207e:	2210      	movs	r2, #16
 8002080:	6823      	ldr	r3, [r4, #0]
 8002082:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002084:	699a      	ldr	r2, [r3, #24]
 8002086:	0792      	lsls	r2, r2, #30
 8002088:	d501      	bpl.n	800208e <I2C_Slave_ISR_IT+0x1ae>
    hi2c->Instance->TXDR = 0x00U;
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800208e:	2201      	movs	r2, #1
 8002090:	6999      	ldr	r1, [r3, #24]
 8002092:	420a      	tst	r2, r1
 8002094:	d000      	beq.n	8002098 <I2C_Slave_ISR_IT+0x1b8>
 8002096:	e77f      	b.n	8001f98 <I2C_Slave_ISR_IT+0xb8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002098:	6999      	ldr	r1, [r3, #24]
 800209a:	430a      	orrs	r2, r1
 800209c:	619a      	str	r2, [r3, #24]
 800209e:	e77b      	b.n	8001f98 <I2C_Slave_ISR_IT+0xb8>
 80020a0:	ffff0000 	.word	0xffff0000
 80020a4:	feffffff 	.word	0xfeffffff

080020a8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80020a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020aa:	2541      	movs	r5, #65	; 0x41
 80020ac:	5d43      	ldrb	r3, [r0, r5]
{
 80020ae:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80020b0:	b2de      	uxtb	r6, r3
 80020b2:	2b20      	cmp	r3, #32
 80020b4:	d11b      	bne.n	80020ee <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020b6:	2740      	movs	r7, #64	; 0x40
 80020b8:	5dc3      	ldrb	r3, [r0, r7]
 80020ba:	2b01      	cmp	r3, #1
 80020bc:	d017      	beq.n	80020ee <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020be:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c0:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 80020c2:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020c4:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 80020c6:	6803      	ldr	r3, [r0, #0]
 80020c8:	681c      	ldr	r4, [r3, #0]
 80020ca:	438c      	bics	r4, r1
 80020cc:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80020ce:	681c      	ldr	r4, [r3, #0]
 80020d0:	4908      	ldr	r1, [pc, #32]	; (80020f4 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 80020d2:	400c      	ands	r4, r1
 80020d4:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80020d6:	6819      	ldr	r1, [r3, #0]
 80020d8:	4311      	orrs	r1, r2
 80020da:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80020dc:	4661      	mov	r1, ip
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	430a      	orrs	r2, r1
 80020e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80020e4:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 80020e8:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 80020ea:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 80020ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 80020ee:	2002      	movs	r0, #2
 80020f0:	e7fc      	b.n	80020ec <HAL_I2CEx_ConfigAnalogFilter+0x44>
 80020f2:	46c0      	nop			; (mov r8, r8)
 80020f4:	ffffefff 	.word	0xffffefff

080020f8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020f8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020fa:	2541      	movs	r5, #65	; 0x41
 80020fc:	5d43      	ldrb	r3, [r0, r5]
 80020fe:	b2de      	uxtb	r6, r3
 8002100:	2b20      	cmp	r3, #32
 8002102:	d11a      	bne.n	800213a <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002104:	2740      	movs	r7, #64	; 0x40
 8002106:	5dc3      	ldrb	r3, [r0, r7]
 8002108:	2b01      	cmp	r3, #1
 800210a:	d016      	beq.n	800213a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 800210c:	2324      	movs	r3, #36	; 0x24
 800210e:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002110:	3b23      	subs	r3, #35	; 0x23
 8002112:	469c      	mov	ip, r3
 8002114:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002116:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8002118:	6822      	ldr	r2, [r4, #0]
 800211a:	439a      	bics	r2, r3
 800211c:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 800211e:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002120:	4b07      	ldr	r3, [pc, #28]	; (8002140 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8002122:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8002124:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8002126:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8002128:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 800212a:	6823      	ldr	r3, [r4, #0]
 800212c:	4313      	orrs	r3, r2
 800212e:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002130:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8002132:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8002134:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8002136:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8002138:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 800213a:	2002      	movs	r0, #2
 800213c:	e7fc      	b.n	8002138 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 800213e:	46c0      	nop			; (mov r8, r8)
 8002140:	fffff0ff 	.word	0xfffff0ff

08002144 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002144:	2301      	movs	r3, #1
 8002146:	4904      	ldr	r1, [pc, #16]	; (8002158 <HAL_I2CEx_EnableFastModePlus+0x14>)
 8002148:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 800214a:	431a      	orrs	r2, r3
 800214c:	634a      	str	r2, [r1, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 800214e:	4a03      	ldr	r2, [pc, #12]	; (800215c <HAL_I2CEx_EnableFastModePlus+0x18>)
 8002150:	6853      	ldr	r3, [r2, #4]
 8002152:	4303      	orrs	r3, r0
 8002154:	6053      	str	r3, [r2, #4]
}
 8002156:	4770      	bx	lr
 8002158:	40021000 	.word	0x40021000
 800215c:	40010000 	.word	0x40010000

08002160 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002160:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8002162:	491c      	ldr	r1, [pc, #112]	; (80021d4 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8002164:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8002166:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8002168:	4013      	ands	r3, r2
 800216a:	2b08      	cmp	r3, #8
 800216c:	d00b      	beq.n	8002186 <HAL_RCC_GetSysClockFreq+0x26>
 800216e:	2b0c      	cmp	r3, #12
 8002170:	d014      	beq.n	800219c <HAL_RCC_GetSysClockFreq+0x3c>
 8002172:	2b04      	cmp	r3, #4
 8002174:	d009      	beq.n	800218a <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002176:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002178:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800217a:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800217c:	041b      	lsls	r3, r3, #16
 800217e:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002180:	3301      	adds	r3, #1
 8002182:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8002184:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8002186:	4814      	ldr	r0, [pc, #80]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x78>)
 8002188:	e7fc      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800218a:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 800218c:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800218e:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8002190:	17c0      	asrs	r0, r0, #31
 8002192:	4018      	ands	r0, r3
 8002194:	4b12      	ldr	r3, [pc, #72]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x80>)
 8002196:	469c      	mov	ip, r3
 8002198:	4460      	add	r0, ip
 800219a:	e7f3      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800219c:	0293      	lsls	r3, r2, #10
 800219e:	4811      	ldr	r0, [pc, #68]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x84>)
 80021a0:	0f1b      	lsrs	r3, r3, #28
 80021a2:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021a4:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a6:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80021a8:	0f92      	lsrs	r2, r2, #30
 80021aa:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021ac:	03db      	lsls	r3, r3, #15
 80021ae:	d40c      	bmi.n	80021ca <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80021b0:	680b      	ldr	r3, [r1, #0]
 80021b2:	06db      	lsls	r3, r3, #27
 80021b4:	d50b      	bpl.n	80021ce <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 80021b6:	4a0c      	ldr	r2, [pc, #48]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021b8:	2300      	movs	r3, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	f7fe f850 	bl	8000260 <__aeabi_lmul>
 80021c0:	0022      	movs	r2, r4
 80021c2:	2300      	movs	r3, #0
 80021c4:	f7fe f82c 	bl	8000220 <__aeabi_uldivmod>
 80021c8:	e7dc      	b.n	8002184 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021ca:	4a03      	ldr	r2, [pc, #12]	; (80021d8 <HAL_RCC_GetSysClockFreq+0x78>)
 80021cc:	e7f4      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80021ce:	4a04      	ldr	r2, [pc, #16]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x80>)
 80021d0:	e7f2      	b.n	80021b8 <HAL_RCC_GetSysClockFreq+0x58>
 80021d2:	46c0      	nop			; (mov r8, r8)
 80021d4:	40021000 	.word	0x40021000
 80021d8:	007a1200 	.word	0x007a1200
 80021dc:	ff48e500 	.word	0xff48e500
 80021e0:	00f42400 	.word	0x00f42400
 80021e4:	080045e4 	.word	0x080045e4
 80021e8:	003d0900 	.word	0x003d0900

080021ec <HAL_RCC_OscConfig>:
{
 80021ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021ee:	46d6      	mov	lr, sl
 80021f0:	464f      	mov	r7, r9
 80021f2:	4646      	mov	r6, r8
 80021f4:	b5c0      	push	{r6, r7, lr}
 80021f6:	0004      	movs	r4, r0
 80021f8:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 80021fa:	2800      	cmp	r0, #0
 80021fc:	d100      	bne.n	8002200 <HAL_RCC_OscConfig+0x14>
 80021fe:	e146      	b.n	800248e <HAL_RCC_OscConfig+0x2a2>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002200:	4bc8      	ldr	r3, [pc, #800]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 8002202:	250c      	movs	r5, #12
 8002204:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002206:	68de      	ldr	r6, [r3, #12]
 8002208:	2380      	movs	r3, #128	; 0x80
 800220a:	025b      	lsls	r3, r3, #9
 800220c:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800220e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002210:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002212:	07da      	lsls	r2, r3, #31
 8002214:	d533      	bpl.n	800227e <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002216:	2d08      	cmp	r5, #8
 8002218:	d100      	bne.n	800221c <HAL_RCC_OscConfig+0x30>
 800221a:	e12f      	b.n	800247c <HAL_RCC_OscConfig+0x290>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800221c:	2d0c      	cmp	r5, #12
 800221e:	d100      	bne.n	8002222 <HAL_RCC_OscConfig+0x36>
 8002220:	e129      	b.n	8002476 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	2080      	movs	r0, #128	; 0x80
 8002224:	6861      	ldr	r1, [r4, #4]
 8002226:	0240      	lsls	r0, r0, #9
 8002228:	4281      	cmp	r1, r0
 800222a:	d100      	bne.n	800222e <HAL_RCC_OscConfig+0x42>
 800222c:	e161      	b.n	80024f2 <HAL_RCC_OscConfig+0x306>
 800222e:	22a0      	movs	r2, #160	; 0xa0
 8002230:	02d2      	lsls	r2, r2, #11
 8002232:	4291      	cmp	r1, r2
 8002234:	d100      	bne.n	8002238 <HAL_RCC_OscConfig+0x4c>
 8002236:	e245      	b.n	80026c4 <HAL_RCC_OscConfig+0x4d8>
 8002238:	4fba      	ldr	r7, [pc, #744]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 800223a:	4bbb      	ldr	r3, [pc, #748]	; (8002528 <HAL_RCC_OscConfig+0x33c>)
 800223c:	683a      	ldr	r2, [r7, #0]
 800223e:	401a      	ands	r2, r3
 8002240:	603a      	str	r2, [r7, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	4ab9      	ldr	r2, [pc, #740]	; (800252c <HAL_RCC_OscConfig+0x340>)
 8002246:	4003      	ands	r3, r0
 8002248:	9301      	str	r3, [sp, #4]
 800224a:	9b01      	ldr	r3, [sp, #4]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	4013      	ands	r3, r2
 8002250:	603b      	str	r3, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002252:	2900      	cmp	r1, #0
 8002254:	d000      	beq.n	8002258 <HAL_RCC_OscConfig+0x6c>
 8002256:	e150      	b.n	80024fa <HAL_RCC_OscConfig+0x30e>
        tickstart = HAL_GetTick();
 8002258:	f7fe fdba 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800225c:	2380      	movs	r3, #128	; 0x80
 800225e:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8002260:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002262:	4699      	mov	r9, r3
 8002264:	e006      	b.n	8002274 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002266:	f7fe fdb3 	bl	8000dd0 <HAL_GetTick>
 800226a:	4643      	mov	r3, r8
 800226c:	1ac0      	subs	r0, r0, r3
 800226e:	2864      	cmp	r0, #100	; 0x64
 8002270:	d900      	bls.n	8002274 <HAL_RCC_OscConfig+0x88>
 8002272:	e1cc      	b.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002274:	464a      	mov	r2, r9
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	4213      	tst	r3, r2
 800227a:	d1f4      	bne.n	8002266 <HAL_RCC_OscConfig+0x7a>
 800227c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800227e:	079a      	lsls	r2, r3, #30
 8002280:	d527      	bpl.n	80022d2 <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 8002282:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002284:	2d04      	cmp	r5, #4
 8002286:	d100      	bne.n	800228a <HAL_RCC_OscConfig+0x9e>
 8002288:	e16b      	b.n	8002562 <HAL_RCC_OscConfig+0x376>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800228a:	2d0c      	cmp	r5, #12
 800228c:	d100      	bne.n	8002290 <HAL_RCC_OscConfig+0xa4>
 800228e:	e165      	b.n	800255c <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002290:	4ea4      	ldr	r6, [pc, #656]	; (8002524 <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 8002292:	2b00      	cmp	r3, #0
 8002294:	d100      	bne.n	8002298 <HAL_RCC_OscConfig+0xac>
 8002296:	e1d1      	b.n	800263c <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002298:	2109      	movs	r1, #9
 800229a:	6832      	ldr	r2, [r6, #0]
 800229c:	438a      	bics	r2, r1
 800229e:	4313      	orrs	r3, r2
 80022a0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80022a2:	f7fe fd95 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022a6:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 80022a8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022aa:	4698      	mov	r8, r3
 80022ac:	e005      	b.n	80022ba <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80022ae:	f7fe fd8f 	bl	8000dd0 <HAL_GetTick>
 80022b2:	1bc0      	subs	r0, r0, r7
 80022b4:	2802      	cmp	r0, #2
 80022b6:	d900      	bls.n	80022ba <HAL_RCC_OscConfig+0xce>
 80022b8:	e1a9      	b.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022ba:	4642      	mov	r2, r8
 80022bc:	6833      	ldr	r3, [r6, #0]
 80022be:	421a      	tst	r2, r3
 80022c0:	d0f5      	beq.n	80022ae <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022c2:	6872      	ldr	r2, [r6, #4]
 80022c4:	6923      	ldr	r3, [r4, #16]
 80022c6:	499a      	ldr	r1, [pc, #616]	; (8002530 <HAL_RCC_OscConfig+0x344>)
 80022c8:	021b      	lsls	r3, r3, #8
 80022ca:	400a      	ands	r2, r1
 80022cc:	4313      	orrs	r3, r2
 80022ce:	6073      	str	r3, [r6, #4]
 80022d0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80022d2:	06da      	lsls	r2, r3, #27
 80022d4:	d52b      	bpl.n	800232e <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d6:	2d00      	cmp	r5, #0
 80022d8:	d100      	bne.n	80022dc <HAL_RCC_OscConfig+0xf0>
 80022da:	e0df      	b.n	800249c <HAL_RCC_OscConfig+0x2b0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022dc:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 80022de:	4e91      	ldr	r6, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d100      	bne.n	80022e6 <HAL_RCC_OscConfig+0xfa>
 80022e4:	e1bf      	b.n	8002666 <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_MSI_ENABLE();
 80022e6:	2380      	movs	r3, #128	; 0x80
 80022e8:	6832      	ldr	r2, [r6, #0]
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4313      	orrs	r3, r2
 80022ee:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80022f0:	f7fe fd6e 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022f4:	2380      	movs	r3, #128	; 0x80
 80022f6:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80022f8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022fa:	4698      	mov	r8, r3
 80022fc:	e005      	b.n	800230a <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022fe:	f7fe fd67 	bl	8000dd0 <HAL_GetTick>
 8002302:	1bc0      	subs	r0, r0, r7
 8002304:	2802      	cmp	r0, #2
 8002306:	d900      	bls.n	800230a <HAL_RCC_OscConfig+0x11e>
 8002308:	e181      	b.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800230a:	4642      	mov	r2, r8
 800230c:	6833      	ldr	r3, [r6, #0]
 800230e:	4213      	tst	r3, r2
 8002310:	d0f5      	beq.n	80022fe <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002312:	6873      	ldr	r3, [r6, #4]
 8002314:	4a87      	ldr	r2, [pc, #540]	; (8002534 <HAL_RCC_OscConfig+0x348>)
 8002316:	4013      	ands	r3, r2
 8002318:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800231a:	4313      	orrs	r3, r2
 800231c:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800231e:	6872      	ldr	r2, [r6, #4]
 8002320:	6a23      	ldr	r3, [r4, #32]
 8002322:	0212      	lsls	r2, r2, #8
 8002324:	061b      	lsls	r3, r3, #24
 8002326:	0a12      	lsrs	r2, r2, #8
 8002328:	4313      	orrs	r3, r2
 800232a:	6073      	str	r3, [r6, #4]
 800232c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	071a      	lsls	r2, r3, #28
 8002330:	d519      	bpl.n	8002366 <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002332:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8002334:	4e7b      	ldr	r6, [pc, #492]	; (8002524 <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002336:	2b00      	cmp	r3, #0
 8002338:	d100      	bne.n	800233c <HAL_RCC_OscConfig+0x150>
 800233a:	e16a      	b.n	8002612 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_LSI_ENABLE();
 800233c:	2201      	movs	r2, #1
 800233e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002340:	4313      	orrs	r3, r2
 8002342:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8002344:	f7fe fd44 	bl	8000dd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002348:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800234a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800234c:	4698      	mov	r8, r3
 800234e:	e005      	b.n	800235c <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002350:	f7fe fd3e 	bl	8000dd0 <HAL_GetTick>
 8002354:	1bc0      	subs	r0, r0, r7
 8002356:	2802      	cmp	r0, #2
 8002358:	d900      	bls.n	800235c <HAL_RCC_OscConfig+0x170>
 800235a:	e158      	b.n	800260e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800235c:	4642      	mov	r2, r8
 800235e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002360:	421a      	tst	r2, r3
 8002362:	d0f5      	beq.n	8002350 <HAL_RCC_OscConfig+0x164>
 8002364:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	075a      	lsls	r2, r3, #29
 8002368:	d543      	bpl.n	80023f2 <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800236c:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800236e:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 8002370:	055b      	lsls	r3, r3, #21
 8002372:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8002374:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002376:	4219      	tst	r1, r3
 8002378:	d104      	bne.n	8002384 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 800237a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800237c:	430b      	orrs	r3, r1
 800237e:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 8002380:	2301      	movs	r3, #1
 8002382:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	2780      	movs	r7, #128	; 0x80
 8002386:	4e6c      	ldr	r6, [pc, #432]	; (8002538 <HAL_RCC_OscConfig+0x34c>)
 8002388:	007f      	lsls	r7, r7, #1
 800238a:	6833      	ldr	r3, [r6, #0]
 800238c:	423b      	tst	r3, r7
 800238e:	d100      	bne.n	8002392 <HAL_RCC_OscConfig+0x1a6>
 8002390:	e12d      	b.n	80025ee <HAL_RCC_OscConfig+0x402>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002392:	2280      	movs	r2, #128	; 0x80
 8002394:	68a3      	ldr	r3, [r4, #8]
 8002396:	0052      	lsls	r2, r2, #1
 8002398:	4293      	cmp	r3, r2
 800239a:	d100      	bne.n	800239e <HAL_RCC_OscConfig+0x1b2>
 800239c:	e1d7      	b.n	800274e <HAL_RCC_OscConfig+0x562>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d100      	bne.n	80023a4 <HAL_RCC_OscConfig+0x1b8>
 80023a2:	e108      	b.n	80025b6 <HAL_RCC_OscConfig+0x3ca>
 80023a4:	21a0      	movs	r1, #160	; 0xa0
 80023a6:	00c9      	lsls	r1, r1, #3
 80023a8:	428b      	cmp	r3, r1
 80023aa:	d100      	bne.n	80023ae <HAL_RCC_OscConfig+0x1c2>
 80023ac:	e1f1      	b.n	8002792 <HAL_RCC_OscConfig+0x5a6>
 80023ae:	4b5d      	ldr	r3, [pc, #372]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 80023b0:	4962      	ldr	r1, [pc, #392]	; (800253c <HAL_RCC_OscConfig+0x350>)
 80023b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023b4:	400a      	ands	r2, r1
 80023b6:	651a      	str	r2, [r3, #80]	; 0x50
 80023b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023ba:	4961      	ldr	r1, [pc, #388]	; (8002540 <HAL_RCC_OscConfig+0x354>)
 80023bc:	400a      	ands	r2, r1
 80023be:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 80023c0:	f7fe fd06 	bl	8000dd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023c4:	2780      	movs	r7, #128	; 0x80
 80023c6:	4b57      	ldr	r3, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 80023c8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ca:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	4b5d      	ldr	r3, [pc, #372]	; (8002544 <HAL_RCC_OscConfig+0x358>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ce:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d0:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023d2:	e005      	b.n	80023e0 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fcfc 	bl	8000dd0 <HAL_GetTick>
 80023d8:	1b80      	subs	r0, r0, r6
 80023da:	4548      	cmp	r0, r9
 80023dc:	d900      	bls.n	80023e0 <HAL_RCC_OscConfig+0x1f4>
 80023de:	e116      	b.n	800260e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023e0:	4643      	mov	r3, r8
 80023e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e4:	423b      	tst	r3, r7
 80023e6:	d0f5      	beq.n	80023d4 <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 80023e8:	4653      	mov	r3, sl
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d100      	bne.n	80023f0 <HAL_RCC_OscConfig+0x204>
 80023ee:	e173      	b.n	80026d8 <HAL_RCC_OscConfig+0x4ec>
 80023f0:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80023f2:	069b      	lsls	r3, r3, #26
 80023f4:	d520      	bpl.n	8002438 <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023f6:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 80023f8:	4e4a      	ldr	r6, [pc, #296]	; (8002524 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d100      	bne.n	8002400 <HAL_RCC_OscConfig+0x214>
 80023fe:	e148      	b.n	8002692 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_HSI48_ENABLE();
 8002400:	2101      	movs	r1, #1
 8002402:	68b2      	ldr	r2, [r6, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002404:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 8002406:	430a      	orrs	r2, r1
 8002408:	60b2      	str	r2, [r6, #8]
 800240a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800240c:	4a4e      	ldr	r2, [pc, #312]	; (8002548 <HAL_RCC_OscConfig+0x35c>)
 800240e:	430b      	orrs	r3, r1
 8002410:	6373      	str	r3, [r6, #52]	; 0x34
 8002412:	2380      	movs	r3, #128	; 0x80
 8002414:	6a11      	ldr	r1, [r2, #32]
 8002416:	019b      	lsls	r3, r3, #6
 8002418:	430b      	orrs	r3, r1
 800241a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800241c:	f7fe fcd8 	bl	8000dd0 <HAL_GetTick>
 8002420:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002422:	e006      	b.n	8002432 <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002424:	f7fe fcd4 	bl	8000dd0 <HAL_GetTick>
 8002428:	4643      	mov	r3, r8
 800242a:	1ac0      	subs	r0, r0, r3
 800242c:	2802      	cmp	r0, #2
 800242e:	d900      	bls.n	8002432 <HAL_RCC_OscConfig+0x246>
 8002430:	e0ed      	b.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002432:	68b3      	ldr	r3, [r6, #8]
 8002434:	421f      	tst	r7, r3
 8002436:	d0f5      	beq.n	8002424 <HAL_RCC_OscConfig+0x238>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002438:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d019      	beq.n	8002472 <HAL_RCC_OscConfig+0x286>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800243e:	2d0c      	cmp	r5, #12
 8002440:	d100      	bne.n	8002444 <HAL_RCC_OscConfig+0x258>
 8002442:	e189      	b.n	8002758 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002444:	2b02      	cmp	r3, #2
 8002446:	d100      	bne.n	800244a <HAL_RCC_OscConfig+0x25e>
 8002448:	e14d      	b.n	80026e6 <HAL_RCC_OscConfig+0x4fa>
        __HAL_RCC_PLL_DISABLE();
 800244a:	4c36      	ldr	r4, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 800244c:	4a3f      	ldr	r2, [pc, #252]	; (800254c <HAL_RCC_OscConfig+0x360>)
 800244e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002450:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8002452:	4013      	ands	r3, r2
 8002454:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8002456:	f7fe fcbb 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800245a:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800245c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800245e:	e005      	b.n	800246c <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002460:	f7fe fcb6 	bl	8000dd0 <HAL_GetTick>
 8002464:	1b40      	subs	r0, r0, r5
 8002466:	2802      	cmp	r0, #2
 8002468:	d900      	bls.n	800246c <HAL_RCC_OscConfig+0x280>
 800246a:	e0d0      	b.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800246c:	6823      	ldr	r3, [r4, #0]
 800246e:	4233      	tst	r3, r6
 8002470:	d1f6      	bne.n	8002460 <HAL_RCC_OscConfig+0x274>
  return HAL_OK;
 8002472:	2000      	movs	r0, #0
 8002474:	e00c      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002476:	2e00      	cmp	r6, #0
 8002478:	d100      	bne.n	800247c <HAL_RCC_OscConfig+0x290>
 800247a:	e6d2      	b.n	8002222 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800247c:	4a29      	ldr	r2, [pc, #164]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	0392      	lsls	r2, r2, #14
 8002482:	d400      	bmi.n	8002486 <HAL_RCC_OscConfig+0x29a>
 8002484:	e6fb      	b.n	800227e <HAL_RCC_OscConfig+0x92>
 8002486:	6862      	ldr	r2, [r4, #4]
 8002488:	2a00      	cmp	r2, #0
 800248a:	d000      	beq.n	800248e <HAL_RCC_OscConfig+0x2a2>
 800248c:	e6f7      	b.n	800227e <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 800248e:	2001      	movs	r0, #1
}
 8002490:	b002      	add	sp, #8
 8002492:	bce0      	pop	{r5, r6, r7}
 8002494:	46ba      	mov	sl, r7
 8002496:	46b1      	mov	r9, r6
 8002498:	46a8      	mov	r8, r5
 800249a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	059b      	lsls	r3, r3, #22
 80024a2:	d502      	bpl.n	80024aa <HAL_RCC_OscConfig+0x2be>
 80024a4:	69e3      	ldr	r3, [r4, #28]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d0f1      	beq.n	800248e <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024aa:	4a1e      	ldr	r2, [pc, #120]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 80024ac:	4821      	ldr	r0, [pc, #132]	; (8002534 <HAL_RCC_OscConfig+0x348>)
 80024ae:	6851      	ldr	r1, [r2, #4]
 80024b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80024b2:	4001      	ands	r1, r0
 80024b4:	4319      	orrs	r1, r3
 80024b6:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024b8:	6850      	ldr	r0, [r2, #4]
 80024ba:	6a21      	ldr	r1, [r4, #32]
 80024bc:	0200      	lsls	r0, r0, #8
 80024be:	0a00      	lsrs	r0, r0, #8
 80024c0:	0609      	lsls	r1, r1, #24
 80024c2:	4301      	orrs	r1, r0
 80024c4:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024c6:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024c8:	2280      	movs	r2, #128	; 0x80
 80024ca:	0b5b      	lsrs	r3, r3, #13
 80024cc:	3301      	adds	r3, #1
 80024ce:	0212      	lsls	r2, r2, #8
 80024d0:	409a      	lsls	r2, r3
 80024d2:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80024d4:	060a      	lsls	r2, r1, #24
 80024d6:	491e      	ldr	r1, [pc, #120]	; (8002550 <HAL_RCC_OscConfig+0x364>)
 80024d8:	0f12      	lsrs	r2, r2, #28
 80024da:	5c8a      	ldrb	r2, [r1, r2]
 80024dc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <HAL_RCC_OscConfig+0x368>)
 80024e0:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <HAL_RCC_OscConfig+0x36c>)
 80024e4:	6818      	ldr	r0, [r3, #0]
 80024e6:	f7fe fc2d 	bl	8000d44 <HAL_InitTick>
        if(status != HAL_OK)
 80024ea:	2800      	cmp	r0, #0
 80024ec:	d1d0      	bne.n	8002490 <HAL_RCC_OscConfig+0x2a4>
 80024ee:	6823      	ldr	r3, [r4, #0]
 80024f0:	e71d      	b.n	800232e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024f2:	4a0c      	ldr	r2, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x338>)
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	430b      	orrs	r3, r1
 80024f8:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80024fa:	f7fe fc69 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80024fe:	4b09      	ldr	r3, [pc, #36]	; (8002524 <HAL_RCC_OscConfig+0x338>)
        tickstart = HAL_GetTick();
 8002500:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002502:	4699      	mov	r9, r3
 8002504:	2380      	movs	r3, #128	; 0x80
 8002506:	029b      	lsls	r3, r3, #10
 8002508:	4698      	mov	r8, r3
 800250a:	e004      	b.n	8002516 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800250c:	f7fe fc60 	bl	8000dd0 <HAL_GetTick>
 8002510:	1bc0      	subs	r0, r0, r7
 8002512:	2864      	cmp	r0, #100	; 0x64
 8002514:	d87b      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002516:	464b      	mov	r3, r9
 8002518:	4642      	mov	r2, r8
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4213      	tst	r3, r2
 800251e:	d0f5      	beq.n	800250c <HAL_RCC_OscConfig+0x320>
 8002520:	6823      	ldr	r3, [r4, #0]
 8002522:	e6ac      	b.n	800227e <HAL_RCC_OscConfig+0x92>
 8002524:	40021000 	.word	0x40021000
 8002528:	fffeffff 	.word	0xfffeffff
 800252c:	fffbffff 	.word	0xfffbffff
 8002530:	ffffe0ff 	.word	0xffffe0ff
 8002534:	ffff1fff 	.word	0xffff1fff
 8002538:	40007000 	.word	0x40007000
 800253c:	fffffeff 	.word	0xfffffeff
 8002540:	fffffbff 	.word	0xfffffbff
 8002544:	00001388 	.word	0x00001388
 8002548:	40010000 	.word	0x40010000
 800254c:	feffffff 	.word	0xfeffffff
 8002550:	080045cc 	.word	0x080045cc
 8002554:	20000000 	.word	0x20000000
 8002558:	20000008 	.word	0x20000008
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800255c:	2e00      	cmp	r6, #0
 800255e:	d000      	beq.n	8002562 <HAL_RCC_OscConfig+0x376>
 8002560:	e696      	b.n	8002290 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8002562:	4a91      	ldr	r2, [pc, #580]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 8002564:	6812      	ldr	r2, [r2, #0]
 8002566:	0752      	lsls	r2, r2, #29
 8002568:	d502      	bpl.n	8002570 <HAL_RCC_OscConfig+0x384>
 800256a:	2b00      	cmp	r3, #0
 800256c:	d100      	bne.n	8002570 <HAL_RCC_OscConfig+0x384>
 800256e:	e78e      	b.n	800248e <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4e8d      	ldr	r6, [pc, #564]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 8002572:	6922      	ldr	r2, [r4, #16]
 8002574:	6871      	ldr	r1, [r6, #4]
 8002576:	488d      	ldr	r0, [pc, #564]	; (80027ac <HAL_RCC_OscConfig+0x5c0>)
 8002578:	0212      	lsls	r2, r2, #8
 800257a:	4001      	ands	r1, r0
 800257c:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800257e:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002580:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8002582:	6832      	ldr	r2, [r6, #0]
 8002584:	438a      	bics	r2, r1
 8002586:	4313      	orrs	r3, r2
 8002588:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258a:	f7ff fde9 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 800258e:	68f3      	ldr	r3, [r6, #12]
 8002590:	4a87      	ldr	r2, [pc, #540]	; (80027b0 <HAL_RCC_OscConfig+0x5c4>)
 8002592:	061b      	lsls	r3, r3, #24
 8002594:	0f1b      	lsrs	r3, r3, #28
 8002596:	5cd3      	ldrb	r3, [r2, r3]
 8002598:	40d8      	lsrs	r0, r3
 800259a:	4b86      	ldr	r3, [pc, #536]	; (80027b4 <HAL_RCC_OscConfig+0x5c8>)
 800259c:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 800259e:	4b86      	ldr	r3, [pc, #536]	; (80027b8 <HAL_RCC_OscConfig+0x5cc>)
 80025a0:	6818      	ldr	r0, [r3, #0]
 80025a2:	f7fe fbcf 	bl	8000d44 <HAL_InitTick>
      if(status != HAL_OK)
 80025a6:	2800      	cmp	r0, #0
 80025a8:	d000      	beq.n	80025ac <HAL_RCC_OscConfig+0x3c0>
 80025aa:	e771      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
 80025ac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80025ae:	06da      	lsls	r2, r3, #27
 80025b0:	d400      	bmi.n	80025b4 <HAL_RCC_OscConfig+0x3c8>
 80025b2:	e6bc      	b.n	800232e <HAL_RCC_OscConfig+0x142>
 80025b4:	e68f      	b.n	80022d6 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025b6:	4e7c      	ldr	r6, [pc, #496]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 80025b8:	4a80      	ldr	r2, [pc, #512]	; (80027bc <HAL_RCC_OscConfig+0x5d0>)
 80025ba:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80025bc:	4013      	ands	r3, r2
 80025be:	6533      	str	r3, [r6, #80]	; 0x50
 80025c0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80025c2:	4a7f      	ldr	r2, [pc, #508]	; (80027c0 <HAL_RCC_OscConfig+0x5d4>)
 80025c4:	4013      	ands	r3, r2
 80025c6:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 80025c8:	f7fe fc02 	bl	8000dd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025cc:	2380      	movs	r3, #128	; 0x80
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	4b7c      	ldr	r3, [pc, #496]	; (80027c4 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 80025d4:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025d6:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025d8:	e004      	b.n	80025e4 <HAL_RCC_OscConfig+0x3f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025da:	f7fe fbf9 	bl	8000dd0 <HAL_GetTick>
 80025de:	1bc0      	subs	r0, r0, r7
 80025e0:	4548      	cmp	r0, r9
 80025e2:	d814      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80025e4:	4642      	mov	r2, r8
 80025e6:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80025e8:	4213      	tst	r3, r2
 80025ea:	d1f6      	bne.n	80025da <HAL_RCC_OscConfig+0x3ee>
 80025ec:	e6fc      	b.n	80023e8 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ee:	6833      	ldr	r3, [r6, #0]
 80025f0:	433b      	orrs	r3, r7
 80025f2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80025f4:	f7fe fbec 	bl	8000dd0 <HAL_GetTick>
 80025f8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025fa:	6833      	ldr	r3, [r6, #0]
 80025fc:	423b      	tst	r3, r7
 80025fe:	d000      	beq.n	8002602 <HAL_RCC_OscConfig+0x416>
 8002600:	e6c7      	b.n	8002392 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002602:	f7fe fbe5 	bl	8000dd0 <HAL_GetTick>
 8002606:	4643      	mov	r3, r8
 8002608:	1ac0      	subs	r0, r0, r3
 800260a:	2864      	cmp	r0, #100	; 0x64
 800260c:	d9f5      	bls.n	80025fa <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 800260e:	2003      	movs	r0, #3
 8002610:	e73e      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_LSI_DISABLE();
 8002612:	2201      	movs	r2, #1
 8002614:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002616:	4393      	bics	r3, r2
 8002618:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 800261a:	f7fe fbd9 	bl	8000dd0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800261e:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8002620:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002622:	4698      	mov	r8, r3
 8002624:	e004      	b.n	8002630 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002626:	f7fe fbd3 	bl	8000dd0 <HAL_GetTick>
 800262a:	1bc0      	subs	r0, r0, r7
 800262c:	2802      	cmp	r0, #2
 800262e:	d8ee      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002630:	4642      	mov	r2, r8
 8002632:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002634:	421a      	tst	r2, r3
 8002636:	d1f6      	bne.n	8002626 <HAL_RCC_OscConfig+0x43a>
 8002638:	6823      	ldr	r3, [r4, #0]
 800263a:	e694      	b.n	8002366 <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 800263c:	2201      	movs	r2, #1
 800263e:	6833      	ldr	r3, [r6, #0]
 8002640:	4393      	bics	r3, r2
 8002642:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8002644:	f7fe fbc4 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002648:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 800264a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800264c:	4698      	mov	r8, r3
 800264e:	e004      	b.n	800265a <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002650:	f7fe fbbe 	bl	8000dd0 <HAL_GetTick>
 8002654:	1bc0      	subs	r0, r0, r7
 8002656:	2802      	cmp	r0, #2
 8002658:	d8d9      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800265a:	4642      	mov	r2, r8
 800265c:	6833      	ldr	r3, [r6, #0]
 800265e:	421a      	tst	r2, r3
 8002660:	d1f6      	bne.n	8002650 <HAL_RCC_OscConfig+0x464>
 8002662:	6823      	ldr	r3, [r4, #0]
 8002664:	e7a3      	b.n	80025ae <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_MSI_DISABLE();
 8002666:	6833      	ldr	r3, [r6, #0]
 8002668:	4a54      	ldr	r2, [pc, #336]	; (80027bc <HAL_RCC_OscConfig+0x5d0>)
 800266a:	4013      	ands	r3, r2
 800266c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800266e:	f7fe fbaf 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002672:	2380      	movs	r3, #128	; 0x80
 8002674:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8002676:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002678:	4698      	mov	r8, r3
 800267a:	e004      	b.n	8002686 <HAL_RCC_OscConfig+0x49a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800267c:	f7fe fba8 	bl	8000dd0 <HAL_GetTick>
 8002680:	1bc0      	subs	r0, r0, r7
 8002682:	2802      	cmp	r0, #2
 8002684:	d8c3      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002686:	4642      	mov	r2, r8
 8002688:	6833      	ldr	r3, [r6, #0]
 800268a:	4213      	tst	r3, r2
 800268c:	d1f6      	bne.n	800267c <HAL_RCC_OscConfig+0x490>
 800268e:	6823      	ldr	r3, [r4, #0]
 8002690:	e64d      	b.n	800232e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 8002692:	2201      	movs	r2, #1
 8002694:	68b3      	ldr	r3, [r6, #8]
 8002696:	494c      	ldr	r1, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x5dc>)
 8002698:	4393      	bics	r3, r2
 800269a:	4a4c      	ldr	r2, [pc, #304]	; (80027cc <HAL_RCC_OscConfig+0x5e0>)
 800269c:	60b3      	str	r3, [r6, #8]
 800269e:	6a13      	ldr	r3, [r2, #32]
 80026a0:	400b      	ands	r3, r1
 80026a2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80026a4:	f7fe fb94 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026a8:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80026aa:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ac:	4698      	mov	r8, r3
 80026ae:	e004      	b.n	80026ba <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b0:	f7fe fb8e 	bl	8000dd0 <HAL_GetTick>
 80026b4:	1bc0      	subs	r0, r0, r7
 80026b6:	2802      	cmp	r0, #2
 80026b8:	d8a9      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80026ba:	4642      	mov	r2, r8
 80026bc:	68b3      	ldr	r3, [r6, #8]
 80026be:	421a      	tst	r2, r3
 80026c0:	d1f6      	bne.n	80026b0 <HAL_RCC_OscConfig+0x4c4>
 80026c2:	e6b9      	b.n	8002438 <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	4a38      	ldr	r2, [pc, #224]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 80026c8:	02db      	lsls	r3, r3, #11
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	430b      	orrs	r3, r1
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	6813      	ldr	r3, [r2, #0]
 80026d2:	4303      	orrs	r3, r0
 80026d4:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d6:	e710      	b.n	80024fa <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80026d8:	4a33      	ldr	r2, [pc, #204]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 80026da:	493d      	ldr	r1, [pc, #244]	; (80027d0 <HAL_RCC_OscConfig+0x5e4>)
 80026dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
 80026de:	400b      	ands	r3, r1
 80026e0:	6393      	str	r3, [r2, #56]	; 0x38
 80026e2:	6823      	ldr	r3, [r4, #0]
 80026e4:	e685      	b.n	80023f2 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 80026e6:	4d30      	ldr	r5, [pc, #192]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 80026e8:	4a3a      	ldr	r2, [pc, #232]	; (80027d4 <HAL_RCC_OscConfig+0x5e8>)
 80026ea:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026ec:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80026ee:	4013      	ands	r3, r2
 80026f0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80026f2:	f7fe fb6d 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026f6:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 80026f8:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80026fa:	e004      	b.n	8002706 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fb68 	bl	8000dd0 <HAL_GetTick>
 8002700:	1b80      	subs	r0, r0, r6
 8002702:	2802      	cmp	r0, #2
 8002704:	d883      	bhi.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002706:	682b      	ldr	r3, [r5, #0]
 8002708:	423b      	tst	r3, r7
 800270a:	d1f7      	bne.n	80026fc <HAL_RCC_OscConfig+0x510>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800270e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8002710:	68ea      	ldr	r2, [r5, #12]
 8002712:	430b      	orrs	r3, r1
 8002714:	4930      	ldr	r1, [pc, #192]	; (80027d8 <HAL_RCC_OscConfig+0x5ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002716:	4e24      	ldr	r6, [pc, #144]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002718:	400a      	ands	r2, r1
 800271a:	4313      	orrs	r3, r2
 800271c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800271e:	4313      	orrs	r3, r2
 8002720:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	682a      	ldr	r2, [r5, #0]
 8002726:	045b      	lsls	r3, r3, #17
 8002728:	4313      	orrs	r3, r2
 800272a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800272c:	f7fe fb50 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002730:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8002732:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002734:	04ad      	lsls	r5, r5, #18
 8002736:	e005      	b.n	8002744 <HAL_RCC_OscConfig+0x558>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002738:	f7fe fb4a 	bl	8000dd0 <HAL_GetTick>
 800273c:	1b00      	subs	r0, r0, r4
 800273e:	2802      	cmp	r0, #2
 8002740:	d900      	bls.n	8002744 <HAL_RCC_OscConfig+0x558>
 8002742:	e764      	b.n	800260e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002744:	6833      	ldr	r3, [r6, #0]
 8002746:	422b      	tst	r3, r5
 8002748:	d0f6      	beq.n	8002738 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 800274a:	2000      	movs	r0, #0
 800274c:	e6a0      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800274e:	4a16      	ldr	r2, [pc, #88]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 8002750:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8002752:	430b      	orrs	r3, r1
 8002754:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002756:	e633      	b.n	80023c0 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002758:	2b01      	cmp	r3, #1
 800275a:	d100      	bne.n	800275e <HAL_RCC_OscConfig+0x572>
 800275c:	e697      	b.n	800248e <HAL_RCC_OscConfig+0x2a2>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800275e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8002760:	4b11      	ldr	r3, [pc, #68]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002762:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 8002764:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002766:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8002768:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276a:	401a      	ands	r2, r3
 800276c:	428a      	cmp	r2, r1
 800276e:	d000      	beq.n	8002772 <HAL_RCC_OscConfig+0x586>
 8002770:	e68e      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002772:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002774:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002776:	0392      	lsls	r2, r2, #14
 8002778:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277a:	428a      	cmp	r2, r1
 800277c:	d000      	beq.n	8002780 <HAL_RCC_OscConfig+0x594>
 800277e:	e687      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002780:	20c0      	movs	r0, #192	; 0xc0
 8002782:	0400      	lsls	r0, r0, #16
 8002784:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002786:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8002788:	1a18      	subs	r0, r3, r0
 800278a:	1e43      	subs	r3, r0, #1
 800278c:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 800278e:	b2c0      	uxtb	r0, r0
 8002790:	e67e      	b.n	8002490 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002792:	4b05      	ldr	r3, [pc, #20]	; (80027a8 <HAL_RCC_OscConfig+0x5bc>)
 8002794:	3901      	subs	r1, #1
 8002796:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8002798:	39ff      	subs	r1, #255	; 0xff
 800279a:	4301      	orrs	r1, r0
 800279c:	6519      	str	r1, [r3, #80]	; 0x50
 800279e:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027a0:	430a      	orrs	r2, r1
 80027a2:	651a      	str	r2, [r3, #80]	; 0x50
 80027a4:	e60c      	b.n	80023c0 <HAL_RCC_OscConfig+0x1d4>
 80027a6:	46c0      	nop			; (mov r8, r8)
 80027a8:	40021000 	.word	0x40021000
 80027ac:	ffffe0ff 	.word	0xffffe0ff
 80027b0:	080045cc 	.word	0x080045cc
 80027b4:	20000000 	.word	0x20000000
 80027b8:	20000008 	.word	0x20000008
 80027bc:	fffffeff 	.word	0xfffffeff
 80027c0:	fffffbff 	.word	0xfffffbff
 80027c4:	00001388 	.word	0x00001388
 80027c8:	ffffdfff 	.word	0xffffdfff
 80027cc:	40010000 	.word	0x40010000
 80027d0:	efffffff 	.word	0xefffffff
 80027d4:	feffffff 	.word	0xfeffffff
 80027d8:	ff02ffff 	.word	0xff02ffff

080027dc <HAL_RCC_ClockConfig>:
{
 80027dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80027de:	46ce      	mov	lr, r9
 80027e0:	4647      	mov	r7, r8
 80027e2:	0005      	movs	r5, r0
 80027e4:	000c      	movs	r4, r1
 80027e6:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 80027e8:	2800      	cmp	r0, #0
 80027ea:	d066      	beq.n	80028ba <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027ec:	2201      	movs	r2, #1
 80027ee:	4e6b      	ldr	r6, [pc, #428]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 80027f0:	6833      	ldr	r3, [r6, #0]
 80027f2:	4013      	ands	r3, r2
 80027f4:	428b      	cmp	r3, r1
 80027f6:	d362      	bcc.n	80028be <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f8:	682b      	ldr	r3, [r5, #0]
 80027fa:	079a      	lsls	r2, r3, #30
 80027fc:	d506      	bpl.n	800280c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027fe:	20f0      	movs	r0, #240	; 0xf0
 8002800:	4967      	ldr	r1, [pc, #412]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002802:	68ca      	ldr	r2, [r1, #12]
 8002804:	4382      	bics	r2, r0
 8002806:	68a8      	ldr	r0, [r5, #8]
 8002808:	4302      	orrs	r2, r0
 800280a:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800280c:	07db      	lsls	r3, r3, #31
 800280e:	d52d      	bpl.n	800286c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002810:	4b63      	ldr	r3, [pc, #396]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002812:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002814:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002816:	2a02      	cmp	r2, #2
 8002818:	d04d      	beq.n	80028b6 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800281a:	2a03      	cmp	r2, #3
 800281c:	d100      	bne.n	8002820 <HAL_RCC_ClockConfig+0x44>
 800281e:	e06f      	b.n	8002900 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002820:	2a01      	cmp	r2, #1
 8002822:	d100      	bne.n	8002826 <HAL_RCC_ClockConfig+0x4a>
 8002824:	e0a4      	b.n	8002970 <HAL_RCC_ClockConfig+0x194>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002826:	059b      	lsls	r3, r3, #22
 8002828:	d547      	bpl.n	80028ba <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282a:	2103      	movs	r1, #3
 800282c:	4e5c      	ldr	r6, [pc, #368]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800282e:	68f3      	ldr	r3, [r6, #12]
 8002830:	438b      	bics	r3, r1
 8002832:	4313      	orrs	r3, r2
 8002834:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8002836:	f7fe facb 	bl	8000dd0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800283c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283e:	2b02      	cmp	r3, #2
 8002840:	d100      	bne.n	8002844 <HAL_RCC_ClockConfig+0x68>
 8002842:	e075      	b.n	8002930 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002844:	2b03      	cmp	r3, #3
 8002846:	d100      	bne.n	800284a <HAL_RCC_ClockConfig+0x6e>
 8002848:	e082      	b.n	8002950 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800284a:	2b01      	cmp	r3, #1
 800284c:	d100      	bne.n	8002850 <HAL_RCC_ClockConfig+0x74>
 800284e:	e094      	b.n	800297a <HAL_RCC_ClockConfig+0x19e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002850:	230c      	movs	r3, #12
 8002852:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002854:	4b53      	ldr	r3, [pc, #332]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	4699      	mov	r9, r3
 8002858:	e004      	b.n	8002864 <HAL_RCC_ClockConfig+0x88>
 800285a:	f7fe fab9 	bl	8000dd0 <HAL_GetTick>
 800285e:	1bc0      	subs	r0, r0, r7
 8002860:	4548      	cmp	r0, r9
 8002862:	d842      	bhi.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002864:	4642      	mov	r2, r8
 8002866:	68f3      	ldr	r3, [r6, #12]
 8002868:	421a      	tst	r2, r3
 800286a:	d1f6      	bne.n	800285a <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800286c:	2201      	movs	r2, #1
 800286e:	4e4b      	ldr	r6, [pc, #300]	; (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002870:	6833      	ldr	r3, [r6, #0]
 8002872:	4013      	ands	r3, r2
 8002874:	42a3      	cmp	r3, r4
 8002876:	d847      	bhi.n	8002908 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	075a      	lsls	r2, r3, #29
 800287c:	d506      	bpl.n	800288c <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287e:	4948      	ldr	r1, [pc, #288]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002880:	4849      	ldr	r0, [pc, #292]	; (80029a8 <HAL_RCC_ClockConfig+0x1cc>)
 8002882:	68ca      	ldr	r2, [r1, #12]
 8002884:	4002      	ands	r2, r0
 8002886:	68e8      	ldr	r0, [r5, #12]
 8002888:	4302      	orrs	r2, r0
 800288a:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288c:	071b      	lsls	r3, r3, #28
 800288e:	d42e      	bmi.n	80028ee <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002890:	f7ff fc66 	bl	8002160 <HAL_RCC_GetSysClockFreq>
 8002894:	4b42      	ldr	r3, [pc, #264]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 8002896:	4a45      	ldr	r2, [pc, #276]	; (80029ac <HAL_RCC_ClockConfig+0x1d0>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	061b      	lsls	r3, r3, #24
 800289c:	0f1b      	lsrs	r3, r3, #28
 800289e:	5cd3      	ldrb	r3, [r2, r3]
 80028a0:	40d8      	lsrs	r0, r3
 80028a2:	4b43      	ldr	r3, [pc, #268]	; (80029b0 <HAL_RCC_ClockConfig+0x1d4>)
 80028a4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_ClockConfig+0x1d8>)
 80028a8:	6818      	ldr	r0, [r3, #0]
 80028aa:	f7fe fa4b 	bl	8000d44 <HAL_InitTick>
}
 80028ae:	bcc0      	pop	{r6, r7}
 80028b0:	46b9      	mov	r9, r7
 80028b2:	46b0      	mov	r8, r6
 80028b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80028b6:	039b      	lsls	r3, r3, #14
 80028b8:	d4b7      	bmi.n	800282a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80028ba:	2001      	movs	r0, #1
 80028bc:	e7f7      	b.n	80028ae <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028be:	6833      	ldr	r3, [r6, #0]
 80028c0:	4393      	bics	r3, r2
 80028c2:	430b      	orrs	r3, r1
 80028c4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80028c6:	f7fe fa83 	bl	8000dd0 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ca:	2301      	movs	r3, #1
 80028cc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028ce:	4b35      	ldr	r3, [pc, #212]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 80028d0:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d2:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d4:	4642      	mov	r2, r8
 80028d6:	6833      	ldr	r3, [r6, #0]
 80028d8:	4013      	ands	r3, r2
 80028da:	42a3      	cmp	r3, r4
 80028dc:	d100      	bne.n	80028e0 <HAL_RCC_ClockConfig+0x104>
 80028de:	e78b      	b.n	80027f8 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028e0:	f7fe fa76 	bl	8000dd0 <HAL_GetTick>
 80028e4:	1bc0      	subs	r0, r0, r7
 80028e6:	4548      	cmp	r0, r9
 80028e8:	d9f4      	bls.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 80028ea:	2003      	movs	r0, #3
 80028ec:	e7df      	b.n	80028ae <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ee:	492c      	ldr	r1, [pc, #176]	; (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 80028f0:	692b      	ldr	r3, [r5, #16]
 80028f2:	68ca      	ldr	r2, [r1, #12]
 80028f4:	4830      	ldr	r0, [pc, #192]	; (80029b8 <HAL_RCC_ClockConfig+0x1dc>)
 80028f6:	00db      	lsls	r3, r3, #3
 80028f8:	4002      	ands	r2, r0
 80028fa:	4313      	orrs	r3, r2
 80028fc:	60cb      	str	r3, [r1, #12]
 80028fe:	e7c7      	b.n	8002890 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002900:	019b      	lsls	r3, r3, #6
 8002902:	d492      	bmi.n	800282a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8002904:	2001      	movs	r0, #1
 8002906:	e7d2      	b.n	80028ae <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002908:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800290a:	0034      	movs	r4, r6
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290c:	4393      	bics	r3, r2
 800290e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002910:	f7fe fa5e 	bl	8000dd0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002914:	4b23      	ldr	r3, [pc, #140]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 8002916:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002918:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800291a:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	421e      	tst	r6, r3
 8002920:	d0aa      	beq.n	8002878 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002922:	f7fe fa55 	bl	8000dd0 <HAL_GetTick>
 8002926:	1bc0      	subs	r0, r0, r7
 8002928:	4540      	cmp	r0, r8
 800292a:	d9f7      	bls.n	800291c <HAL_RCC_ClockConfig+0x140>
        return HAL_TIMEOUT;
 800292c:	2003      	movs	r0, #3
 800292e:	e7be      	b.n	80028ae <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002930:	330a      	adds	r3, #10
 8002932:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	4b1b      	ldr	r3, [pc, #108]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	4699      	mov	r9, r3
 8002938:	e004      	b.n	8002944 <HAL_RCC_ClockConfig+0x168>
 800293a:	f7fe fa49 	bl	8000dd0 <HAL_GetTick>
 800293e:	1bc0      	subs	r0, r0, r7
 8002940:	4548      	cmp	r0, r9
 8002942:	d8d2      	bhi.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002944:	4642      	mov	r2, r8
 8002946:	68f3      	ldr	r3, [r6, #12]
 8002948:	4013      	ands	r3, r2
 800294a:	2b08      	cmp	r3, #8
 800294c:	d1f5      	bne.n	800293a <HAL_RCC_ClockConfig+0x15e>
 800294e:	e78d      	b.n	800286c <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002950:	3309      	adds	r3, #9
 8002952:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	4699      	mov	r9, r3
 8002958:	e004      	b.n	8002964 <HAL_RCC_ClockConfig+0x188>
 800295a:	f7fe fa39 	bl	8000dd0 <HAL_GetTick>
 800295e:	1bc0      	subs	r0, r0, r7
 8002960:	4548      	cmp	r0, r9
 8002962:	d8c2      	bhi.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002964:	4642      	mov	r2, r8
 8002966:	68f3      	ldr	r3, [r6, #12]
 8002968:	4013      	ands	r3, r2
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d1f5      	bne.n	800295a <HAL_RCC_ClockConfig+0x17e>
 800296e:	e77d      	b.n	800286c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002970:	075b      	lsls	r3, r3, #29
 8002972:	d500      	bpl.n	8002976 <HAL_RCC_ClockConfig+0x19a>
 8002974:	e759      	b.n	800282a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8002976:	2001      	movs	r0, #1
 8002978:	e799      	b.n	80028ae <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800297a:	330b      	adds	r3, #11
 800297c:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297e:	4b09      	ldr	r3, [pc, #36]	; (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	4699      	mov	r9, r3
 8002982:	e004      	b.n	800298e <HAL_RCC_ClockConfig+0x1b2>
 8002984:	f7fe fa24 	bl	8000dd0 <HAL_GetTick>
 8002988:	1bc0      	subs	r0, r0, r7
 800298a:	4548      	cmp	r0, r9
 800298c:	d8ad      	bhi.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800298e:	4642      	mov	r2, r8
 8002990:	68f3      	ldr	r3, [r6, #12]
 8002992:	4013      	ands	r3, r2
 8002994:	2b04      	cmp	r3, #4
 8002996:	d1f5      	bne.n	8002984 <HAL_RCC_ClockConfig+0x1a8>
 8002998:	e768      	b.n	800286c <HAL_RCC_ClockConfig+0x90>
 800299a:	46c0      	nop			; (mov r8, r8)
 800299c:	40022000 	.word	0x40022000
 80029a0:	40021000 	.word	0x40021000
 80029a4:	00001388 	.word	0x00001388
 80029a8:	fffff8ff 	.word	0xfffff8ff
 80029ac:	080045cc 	.word	0x080045cc
 80029b0:	20000000 	.word	0x20000000
 80029b4:	20000008 	.word	0x20000008
 80029b8:	ffffc7ff 	.word	0xffffc7ff

080029bc <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80029be:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	055b      	lsls	r3, r3, #21
 80029c4:	0f5b      	lsrs	r3, r3, #29
 80029c6:	5cd3      	ldrb	r3, [r2, r3]
 80029c8:	4a03      	ldr	r2, [pc, #12]	; (80029d8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029ca:	6810      	ldr	r0, [r2, #0]
 80029cc:	40d8      	lsrs	r0, r3
}
 80029ce:	4770      	bx	lr
 80029d0:	40021000 	.word	0x40021000
 80029d4:	080045dc 	.word	0x080045dc
 80029d8:	20000000 	.word	0x20000000

080029dc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029dc:	4b04      	ldr	r3, [pc, #16]	; (80029f0 <HAL_RCC_GetPCLK2Freq+0x14>)
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <HAL_RCC_GetPCLK2Freq+0x18>)
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	049b      	lsls	r3, r3, #18
 80029e4:	0f5b      	lsrs	r3, r3, #29
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	4a03      	ldr	r2, [pc, #12]	; (80029f8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029ea:	6810      	ldr	r0, [r2, #0]
 80029ec:	40d8      	lsrs	r0, r3
}
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	080045dc 	.word	0x080045dc
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029fe:	46ce      	mov	lr, r9
 8002a00:	4647      	mov	r7, r8

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a02:	6803      	ldr	r3, [r0, #0]
{
 8002a04:	0004      	movs	r4, r0
 8002a06:	b580      	push	{r7, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a08:	069a      	lsls	r2, r3, #26
 8002a0a:	d52d      	bpl.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x6c>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	4a6f      	ldr	r2, [pc, #444]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a10:	055b      	lsls	r3, r3, #21
 8002a12:	6b91      	ldr	r1, [r2, #56]	; 0x38
  FlagStatus       pwrclkchanged = RESET;
 8002a14:	2700      	movs	r7, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a16:	4219      	tst	r1, r3
 8002a18:	d061      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0xe2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	2680      	movs	r6, #128	; 0x80
 8002a1c:	4d6c      	ldr	r5, [pc, #432]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002a1e:	0076      	lsls	r6, r6, #1
 8002a20:	682b      	ldr	r3, [r5, #0]
 8002a22:	4233      	tst	r3, r6
 8002a24:	d065      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xf6>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a26:	6865      	ldr	r5, [r4, #4]
 8002a28:	22c0      	movs	r2, #192	; 0xc0
 8002a2a:	0028      	movs	r0, r5
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a2c:	4967      	ldr	r1, [pc, #412]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a2e:	0392      	lsls	r2, r2, #14
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a30:	680b      	ldr	r3, [r1, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a32:	4010      	ands	r0, r2
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8002a34:	4013      	ands	r3, r2
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8002a36:	4298      	cmp	r0, r3
 8002a38:	d100      	bne.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x40>
 8002a3a:	e0a1      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x184>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8002a3c:	23c0      	movs	r3, #192	; 0xc0
 8002a3e:	002a      	movs	r2, r5
 8002a40:	029b      	lsls	r3, r3, #10
 8002a42:	401a      	ands	r2, r3
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d066      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x11a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002a48:	6d08      	ldr	r0, [r1, #80]	; 0x50
 8002a4a:	0001      	movs	r1, r0
 8002a4c:	4019      	ands	r1, r3

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002a4e:	4218      	tst	r0, r3
 8002a50:	d169      	bne.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a52:	6823      	ldr	r3, [r4, #0]
 8002a54:	485d      	ldr	r0, [pc, #372]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a56:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	6502      	str	r2, [r0, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a5c:	2f01      	cmp	r7, #1
 8002a5e:	d103      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a60:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002a62:	495c      	ldr	r1, [pc, #368]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002a64:	400a      	ands	r2, r1
 8002a66:	6382      	str	r2, [r0, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a68:	07da      	lsls	r2, r3, #31
 8002a6a:	d506      	bpl.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a6c:	2003      	movs	r0, #3
 8002a6e:	4957      	ldr	r1, [pc, #348]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a70:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002a72:	4382      	bics	r2, r0
 8002a74:	68a0      	ldr	r0, [r4, #8]
 8002a76:	4302      	orrs	r2, r0
 8002a78:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a7a:	079a      	lsls	r2, r3, #30
 8002a7c:	d506      	bpl.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0x90>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a7e:	200c      	movs	r0, #12
 8002a80:	4952      	ldr	r1, [pc, #328]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a82:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002a84:	4382      	bics	r2, r0
 8002a86:	68e0      	ldr	r0, [r4, #12]
 8002a88:	4302      	orrs	r2, r0
 8002a8a:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002a8c:	075a      	lsls	r2, r3, #29
 8002a8e:	d506      	bpl.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002a90:	494e      	ldr	r1, [pc, #312]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	4851      	ldr	r0, [pc, #324]	; (8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8002a94:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002a96:	4002      	ands	r2, r0
 8002a98:	6920      	ldr	r0, [r4, #16]
 8002a9a:	4302      	orrs	r2, r0
 8002a9c:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a9e:	071a      	lsls	r2, r3, #28
 8002aa0:	d506      	bpl.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002aa2:	494a      	ldr	r1, [pc, #296]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aa4:	484d      	ldr	r0, [pc, #308]	; (8002bdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8002aa6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002aa8:	4002      	ands	r2, r0
 8002aaa:	6960      	ldr	r0, [r4, #20]
 8002aac:	4302      	orrs	r2, r0
 8002aae:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002ab0:	065a      	lsls	r2, r3, #25
 8002ab2:	d506      	bpl.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab4:	4945      	ldr	r1, [pc, #276]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ab6:	484a      	ldr	r0, [pc, #296]	; (8002be0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8002ab8:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8002aba:	4002      	ands	r2, r0
 8002abc:	69e0      	ldr	r0, [r4, #28]
 8002abe:	4302      	orrs	r2, r0
 8002ac0:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8002ac2:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ac4:	061b      	lsls	r3, r3, #24
 8002ac6:	d506      	bpl.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xda>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8002ac8:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002aca:	4946      	ldr	r1, [pc, #280]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8002acc:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8002ace:	400b      	ands	r3, r1
 8002ad0:	69a1      	ldr	r1, [r4, #24]
 8002ad2:	430b      	orrs	r3, r1
 8002ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
}
 8002ad6:	bcc0      	pop	{r6, r7}
 8002ad8:	46b9      	mov	r9, r7
 8002ada:	46b0      	mov	r8, r6
 8002adc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ade:	2680      	movs	r6, #128	; 0x80
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae0:	6b91      	ldr	r1, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae2:	4d3b      	ldr	r5, [pc, #236]	; (8002bd0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ae4:	430b      	orrs	r3, r1
 8002ae6:	6393      	str	r3, [r2, #56]	; 0x38
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	682b      	ldr	r3, [r5, #0]
 8002aea:	0076      	lsls	r6, r6, #1
      pwrclkchanged = SET;
 8002aec:	3701      	adds	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aee:	4233      	tst	r3, r6
 8002af0:	d199      	bne.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2a>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	682b      	ldr	r3, [r5, #0]
 8002af4:	4333      	orrs	r3, r6
 8002af6:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002af8:	f7fe f96a 	bl	8000dd0 <HAL_GetTick>
 8002afc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afe:	682b      	ldr	r3, [r5, #0]
 8002b00:	4233      	tst	r3, r6
 8002b02:	d000      	beq.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 8002b04:	e78f      	b.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x2a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b06:	f7fe f963 	bl	8000dd0 <HAL_GetTick>
 8002b0a:	4643      	mov	r3, r8
 8002b0c:	1ac0      	subs	r0, r0, r3
 8002b0e:	2864      	cmp	r0, #100	; 0x64
 8002b10:	d9f5      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0x102>
          return HAL_TIMEOUT;
 8002b12:	2003      	movs	r0, #3
 8002b14:	e7df      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xda>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002b16:	680b      	ldr	r3, [r1, #0]
 8002b18:	039b      	lsls	r3, r3, #14
 8002b1a:	d454      	bmi.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b1c:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8002b1e:	0019      	movs	r1, r3
 8002b20:	4011      	ands	r1, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b22:	4213      	tst	r3, r2
 8002b24:	d04d      	beq.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0x1c6>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b26:	6823      	ldr	r3, [r4, #0]
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b28:	4291      	cmp	r1, r2
 8002b2a:	d018      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x162>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002b2c:	0699      	lsls	r1, r3, #26
 8002b2e:	d516      	bpl.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x162>
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b30:	4e26      	ldr	r6, [pc, #152]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	6d31      	ldr	r1, [r6, #80]	; 0x50
 8002b34:	468c      	mov	ip, r1
 8002b36:	4660      	mov	r0, ip
 8002b38:	492b      	ldr	r1, [pc, #172]	; (8002be8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8002b3a:	4001      	ands	r1, r0
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b3c:	6d30      	ldr	r0, [r6, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8002b3e:	4689      	mov	r9, r1
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b40:	4680      	mov	r8, r0
 8002b42:	2080      	movs	r0, #128	; 0x80
 8002b44:	4641      	mov	r1, r8
 8002b46:	0300      	lsls	r0, r0, #12
 8002b48:	4308      	orrs	r0, r1
 8002b4a:	6530      	str	r0, [r6, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4c:	6d30      	ldr	r0, [r6, #80]	; 0x50
 8002b4e:	4927      	ldr	r1, [pc, #156]	; (8002bec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8002b50:	4008      	ands	r0, r1
      RCC->CSR = temp_reg;
 8002b52:	4649      	mov	r1, r9
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b54:	6530      	str	r0, [r6, #80]	; 0x50
      RCC->CSR = temp_reg;
 8002b56:	6531      	str	r1, [r6, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002b58:	4661      	mov	r1, ip
 8002b5a:	05c9      	lsls	r1, r1, #23
 8002b5c:	d419      	bmi.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x196>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b5e:	21c0      	movs	r1, #192	; 0xc0
 8002b60:	0289      	lsls	r1, r1, #10
 8002b62:	428a      	cmp	r2, r1
 8002b64:	d000      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002b66:	e775      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x58>
 8002b68:	20c0      	movs	r0, #192	; 0xc0
 8002b6a:	0380      	lsls	r0, r0, #14
 8002b6c:	4028      	ands	r0, r5
 8002b6e:	4917      	ldr	r1, [pc, #92]	; (8002bcc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b70:	4d1f      	ldr	r5, [pc, #124]	; (8002bf0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8002b72:	680a      	ldr	r2, [r1, #0]
 8002b74:	402a      	ands	r2, r5
 8002b76:	4302      	orrs	r2, r0
 8002b78:	600a      	str	r2, [r1, #0]
 8002b7a:	22c0      	movs	r2, #192	; 0xc0
 8002b7c:	0292      	lsls	r2, r2, #10
 8002b7e:	e769      	b.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x58>
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8002b80:	6d0b      	ldr	r3, [r1, #80]	; 0x50
 8002b82:	22c0      	movs	r2, #192	; 0xc0
 8002b84:	0019      	movs	r1, r3
 8002b86:	0292      	lsls	r2, r2, #10
 8002b88:	4011      	ands	r1, r2
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8002b8a:	4213      	tst	r3, r2
 8002b8c:	d016      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8002b8e:	402a      	ands	r2, r5
 8002b90:	e7c9      	b.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        tickstart = HAL_GetTick();
 8002b92:	f7fe f91d 	bl	8000dd0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b96:	2380      	movs	r3, #128	; 0x80
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4698      	mov	r8, r3
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b9c:	4b15      	ldr	r3, [pc, #84]	; (8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
        tickstart = HAL_GetTick();
 8002b9e:	0005      	movs	r5, r0
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba0:	4699      	mov	r9, r3
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ba2:	e004      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ba4:	f7fe f914 	bl	8000dd0 <HAL_GetTick>
 8002ba8:	1b40      	subs	r0, r0, r5
 8002baa:	4548      	cmp	r0, r9
 8002bac:	d8b1      	bhi.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002bae:	4642      	mov	r2, r8
 8002bb0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8002bb2:	4213      	tst	r3, r2
 8002bb4:	d0f6      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002bb6:	22c0      	movs	r2, #192	; 0xc0
 8002bb8:	6865      	ldr	r5, [r4, #4]
 8002bba:	0292      	lsls	r2, r2, #10
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	402a      	ands	r2, r5
 8002bc0:	e7cd      	b.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x162>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	e7d3      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x172>
          return HAL_ERROR;
 8002bc6:	2001      	movs	r0, #1
 8002bc8:	e785      	b.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002bca:	46c0      	nop			; (mov r8, r8)
 8002bcc:	40021000 	.word	0x40021000
 8002bd0:	40007000 	.word	0x40007000
 8002bd4:	efffffff 	.word	0xefffffff
 8002bd8:	fffff3ff 	.word	0xfffff3ff
 8002bdc:	ffffcfff 	.word	0xffffcfff
 8002be0:	fbffffff 	.word	0xfbffffff
 8002be4:	fff3ffff 	.word	0xfff3ffff
 8002be8:	fffcffff 	.word	0xfffcffff
 8002bec:	fff7ffff 	.word	0xfff7ffff
 8002bf0:	ffcfffff 	.word	0xffcfffff
 8002bf4:	00001388 	.word	0x00001388

08002bf8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bfa:	46c6      	mov	lr, r8
 8002bfc:	b500      	push	{lr}
 8002bfe:	001d      	movs	r5, r3
 8002c00:	0016      	movs	r6, r2
 8002c02:	b082      	sub	sp, #8
 8002c04:	000c      	movs	r4, r1
 8002c06:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002c08:	f7fe f8e2 	bl	8000dd0 <HAL_GetTick>
 8002c0c:	19ad      	adds	r5, r5, r6
 8002c0e:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8002c10:	f7fe f8de 	bl	8000dd0 <HAL_GetTick>
 8002c14:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002c16:	4b29      	ldr	r3, [pc, #164]	; (8002cbc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc4>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	015b      	lsls	r3, r3, #5
 8002c1c:	0d1b      	lsrs	r3, r3, #20
 8002c1e:	436b      	muls	r3, r5
 8002c20:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c22:	6839      	ldr	r1, [r7, #0]
 8002c24:	1c73      	adds	r3, r6, #1
 8002c26:	d108      	bne.n	8002c3a <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 8002c28:	688b      	ldr	r3, [r1, #8]
 8002c2a:	4023      	ands	r3, r4
 8002c2c:	42a3      	cmp	r3, r4
 8002c2e:	d0fb      	beq.n	8002c28 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8002c30:	2000      	movs	r0, #0
}
 8002c32:	b002      	add	sp, #8
 8002c34:	bc80      	pop	{r7}
 8002c36:	46b8      	mov	r8, r7
 8002c38:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c3a:	688b      	ldr	r3, [r1, #8]
 8002c3c:	4023      	ands	r3, r4
 8002c3e:	429c      	cmp	r4, r3
 8002c40:	d1f6      	bne.n	8002c30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c42:	f7fe f8c5 	bl	8000dd0 <HAL_GetTick>
 8002c46:	4643      	mov	r3, r8
 8002c48:	1ac0      	subs	r0, r0, r3
 8002c4a:	42a8      	cmp	r0, r5
 8002c4c:	d208      	bcs.n	8002c60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8002c4e:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002c50:	1e5a      	subs	r2, r3, #1
 8002c52:	4193      	sbcs	r3, r2
 8002c54:	425b      	negs	r3, r3
 8002c56:	401d      	ands	r5, r3
      count--;
 8002c58:	9b01      	ldr	r3, [sp, #4]
 8002c5a:	3b01      	subs	r3, #1
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	e7e0      	b.n	8002c22 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c60:	21e0      	movs	r1, #224	; 0xe0
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685a      	ldr	r2, [r3, #4]
 8002c66:	438a      	bics	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c6a:	2282      	movs	r2, #130	; 0x82
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	0052      	lsls	r2, r2, #1
 8002c70:	4291      	cmp	r1, r2
 8002c72:	d014      	beq.n	8002c9e <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c74:	2180      	movs	r1, #128	; 0x80
 8002c76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c78:	0189      	lsls	r1, r1, #6
 8002c7a:	428a      	cmp	r2, r1
 8002c7c:	d007      	beq.n	8002c8e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        hspi->State = HAL_SPI_STATE_READY;
 8002c7e:	2351      	movs	r3, #81	; 0x51
 8002c80:	2201      	movs	r2, #1
 8002c82:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8002c84:	2200      	movs	r2, #0
 8002c86:	3b01      	subs	r3, #1
 8002c88:	2003      	movs	r0, #3
 8002c8a:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8002c8c:	e7d1      	b.n	8002c32 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8002c8e:	6819      	ldr	r1, [r3, #0]
 8002c90:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc8>)
 8002c92:	4001      	ands	r1, r0
 8002c94:	6019      	str	r1, [r3, #0]
 8002c96:	6819      	ldr	r1, [r3, #0]
 8002c98:	430a      	orrs	r2, r1
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	e7ef      	b.n	8002c7e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	68ba      	ldr	r2, [r7, #8]
 8002ca2:	0209      	lsls	r1, r1, #8
 8002ca4:	428a      	cmp	r2, r1
 8002ca6:	d003      	beq.n	8002cb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ca8:	2180      	movs	r1, #128	; 0x80
 8002caa:	00c9      	lsls	r1, r1, #3
 8002cac:	428a      	cmp	r2, r1
 8002cae:	d1e1      	bne.n	8002c74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          __HAL_SPI_DISABLE(hspi);
 8002cb0:	2140      	movs	r1, #64	; 0x40
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	438a      	bics	r2, r1
 8002cb6:	601a      	str	r2, [r3, #0]
 8002cb8:	e7dc      	b.n	8002c74 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
 8002cba:	46c0      	nop			; (mov r8, r8)
 8002cbc:	20000000 	.word	0x20000000
 8002cc0:	ffffdfff 	.word	0xffffdfff

08002cc4 <HAL_SPI_Init>:
{
 8002cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cc6:	46ce      	mov	lr, r9
 8002cc8:	4647      	mov	r7, r8
 8002cca:	0004      	movs	r4, r0
 8002ccc:	b580      	push	{r7, lr}
  if (hspi == NULL)
 8002cce:	2800      	cmp	r0, #0
 8002cd0:	d06a      	beq.n	8002da8 <HAL_SPI_Init+0xe4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8002cd4:	2800      	cmp	r0, #0
 8002cd6:	d04f      	beq.n	8002d78 <HAL_SPI_Init+0xb4>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cdc:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002ce2:	3351      	adds	r3, #81	; 0x51
 8002ce4:	5ce3      	ldrb	r3, [r4, r3]
 8002ce6:	2600      	movs	r6, #0
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d052      	beq.n	8002d92 <HAL_SPI_Init+0xce>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cec:	2351      	movs	r3, #81	; 0x51
 8002cee:	4698      	mov	r8, r3
 8002cf0:	4642      	mov	r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cf2:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cf4:	3b4f      	subs	r3, #79	; 0x4f
 8002cf6:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 8002cf8:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cfa:	6865      	ldr	r5, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 8002cfc:	6811      	ldr	r1, [r2, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002cfe:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 8002d00:	333e      	adds	r3, #62	; 0x3e
 8002d02:	4399      	bics	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d04:	33c4      	adds	r3, #196	; 0xc4
 8002d06:	402b      	ands	r3, r5
 8002d08:	68a5      	ldr	r5, [r4, #8]
 8002d0a:	023f      	lsls	r7, r7, #8
 8002d0c:	402f      	ands	r7, r5
 8002d0e:	433b      	orrs	r3, r7
 8002d10:	2780      	movs	r7, #128	; 0x80
 8002d12:	68e5      	ldr	r5, [r4, #12]
 8002d14:	013f      	lsls	r7, r7, #4
 8002d16:	402f      	ands	r7, r5
 8002d18:	433b      	orrs	r3, r7
 8002d1a:	4667      	mov	r7, ip
 8002d1c:	6925      	ldr	r5, [r4, #16]
  __HAL_SPI_DISABLE(hspi);
 8002d1e:	6011      	str	r1, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d20:	402f      	ands	r7, r5
 8002d22:	2501      	movs	r5, #1
 8002d24:	46a9      	mov	r9, r5
 8002d26:	433b      	orrs	r3, r7
 8002d28:	464f      	mov	r7, r9
 8002d2a:	6965      	ldr	r5, [r4, #20]
 8002d2c:	69a1      	ldr	r1, [r4, #24]
 8002d2e:	403d      	ands	r5, r7
 8002d30:	432b      	orrs	r3, r5
 8002d32:	2580      	movs	r5, #128	; 0x80
 8002d34:	00ad      	lsls	r5, r5, #2
 8002d36:	400d      	ands	r5, r1
 8002d38:	432b      	orrs	r3, r5
 8002d3a:	2538      	movs	r5, #56	; 0x38
 8002d3c:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d3e:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d40:	403d      	ands	r5, r7
 8002d42:	432b      	orrs	r3, r5
 8002d44:	2580      	movs	r5, #128	; 0x80
 8002d46:	6a27      	ldr	r7, [r4, #32]
 8002d48:	403d      	ands	r5, r7
 8002d4a:	432b      	orrs	r3, r5
 8002d4c:	4333      	orrs	r3, r6
 8002d4e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d50:	2304      	movs	r3, #4
 8002d52:	4019      	ands	r1, r3
 8002d54:	330c      	adds	r3, #12
 8002d56:	4018      	ands	r0, r3
 8002d58:	4308      	orrs	r0, r1
 8002d5a:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d5c:	69d3      	ldr	r3, [r2, #28]
 8002d5e:	4913      	ldr	r1, [pc, #76]	; (8002dac <HAL_SPI_Init+0xe8>)
  return HAL_OK;
 8002d60:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002d62:	400b      	ands	r3, r1
 8002d64:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d66:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002d68:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d6a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002d6c:	4643      	mov	r3, r8
 8002d6e:	54e2      	strb	r2, [r4, r3]
}
 8002d70:	bcc0      	pop	{r6, r7}
 8002d72:	46b9      	mov	r9, r7
 8002d74:	46b0      	mov	r8, r6
 8002d76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d78:	2382      	movs	r3, #130	; 0x82
 8002d7a:	6862      	ldr	r2, [r4, #4]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d0ad      	beq.n	8002cde <HAL_SPI_Init+0x1a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d82:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d84:	61e0      	str	r0, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d86:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d88:	3351      	adds	r3, #81	; 0x51
 8002d8a:	5ce3      	ldrb	r3, [r4, r3]
 8002d8c:	2600      	movs	r6, #0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1ac      	bne.n	8002cec <HAL_SPI_Init+0x28>
    hspi->Lock = HAL_UNLOCKED;
 8002d92:	3350      	adds	r3, #80	; 0x50
 8002d94:	54e6      	strb	r6, [r4, r3]
    HAL_SPI_MspInit(hspi);
 8002d96:	2680      	movs	r6, #128	; 0x80
 8002d98:	0020      	movs	r0, r4
 8002d9a:	f7fd fde7 	bl	800096c <HAL_SPI_MspInit>
 8002d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002da0:	01b6      	lsls	r6, r6, #6
 8002da2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8002da4:	401e      	ands	r6, r3
 8002da6:	e7a1      	b.n	8002cec <HAL_SPI_Init+0x28>
    return HAL_ERROR;
 8002da8:	2001      	movs	r0, #1
 8002daa:	e7e1      	b.n	8002d70 <HAL_SPI_Init+0xac>
 8002dac:	fffff7ff 	.word	0xfffff7ff

08002db0 <HAL_SPI_Transmit>:
{
 8002db0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002db2:	4647      	mov	r7, r8
 8002db4:	46ce      	mov	lr, r9
 8002db6:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8002db8:	2350      	movs	r3, #80	; 0x50
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8002dbe:	5cc2      	ldrb	r2, [r0, r3]
{
 8002dc0:	0004      	movs	r4, r0
 8002dc2:	000f      	movs	r7, r1
 8002dc4:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 8002dc6:	2a01      	cmp	r2, #1
 8002dc8:	d100      	bne.n	8002dcc <HAL_SPI_Transmit+0x1c>
 8002dca:	e085      	b.n	8002ed8 <HAL_SPI_Transmit+0x128>
 8002dcc:	2201      	movs	r2, #1
 8002dce:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8002dd0:	f7fd fffe 	bl	8000dd0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002dd4:	2251      	movs	r2, #81	; 0x51
 8002dd6:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 8002dd8:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002dda:	b2d8      	uxtb	r0, r3
 8002ddc:	2b01      	cmp	r3, #1
 8002dde:	d00b      	beq.n	8002df8 <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 8002de0:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 8002de2:	2351      	movs	r3, #81	; 0x51
 8002de4:	2201      	movs	r2, #1
 8002de6:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8002de8:	2200      	movs	r2, #0
 8002dea:	3b01      	subs	r3, #1
 8002dec:	54e2      	strb	r2, [r4, r3]
}
 8002dee:	b003      	add	sp, #12
 8002df0:	bcc0      	pop	{r6, r7}
 8002df2:	46b9      	mov	r9, r7
 8002df4:	46b0      	mov	r8, r6
 8002df6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 8002df8:	2f00      	cmp	r7, #0
 8002dfa:	d0f2      	beq.n	8002de2 <HAL_SPI_Transmit+0x32>
 8002dfc:	4643      	mov	r3, r8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0ef      	beq.n	8002de2 <HAL_SPI_Transmit+0x32>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e02:	2303      	movs	r3, #3
 8002e04:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e06:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 8002e08:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e0a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e0c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002e0e:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8002e10:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002e12:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e14:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002e16:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e18:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 8002e1a:	86a2      	strh	r2, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e1c:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e1e:	6327      	str	r7, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e20:	021b      	lsls	r3, r3, #8
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d05a      	beq.n	8002edc <HAL_SPI_Transmit+0x12c>
 8002e26:	6822      	ldr	r2, [r4, #0]
 8002e28:	0013      	movs	r3, r2
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e2a:	2140      	movs	r1, #64	; 0x40
 8002e2c:	6810      	ldr	r0, [r2, #0]
 8002e2e:	4201      	tst	r1, r0
 8002e30:	d102      	bne.n	8002e38 <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8002e32:	6810      	ldr	r0, [r2, #0]
 8002e34:	4301      	orrs	r1, r0
 8002e36:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002e38:	2180      	movs	r1, #128	; 0x80
 8002e3a:	68e0      	ldr	r0, [r4, #12]
 8002e3c:	0109      	lsls	r1, r1, #4
 8002e3e:	4288      	cmp	r0, r1
 8002e40:	d100      	bne.n	8002e44 <HAL_SPI_Transmit+0x94>
 8002e42:	e07f      	b.n	8002f44 <HAL_SPI_Transmit+0x194>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e44:	6863      	ldr	r3, [r4, #4]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d06c      	beq.n	8002f24 <HAL_SPI_Transmit+0x174>
 8002e4a:	4643      	mov	r3, r8
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d069      	beq.n	8002f24 <HAL_SPI_Transmit+0x174>
    while (hspi->TxXferCount > 0U)
 8002e50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d013      	beq.n	8002e7e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e56:	2702      	movs	r7, #2
 8002e58:	1c6b      	adds	r3, r5, #1
 8002e5a:	d158      	bne.n	8002f0e <HAL_SPI_Transmit+0x15e>
 8002e5c:	6823      	ldr	r3, [r4, #0]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	4217      	tst	r7, r2
 8002e62:	d069      	beq.n	8002f38 <HAL_SPI_Transmit+0x188>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e64:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002e66:	7812      	ldrb	r2, [r2, #0]
 8002e68:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e6a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002e70:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8002e72:	3a01      	subs	r2, #1
 8002e74:	b292      	uxth	r2, r2
 8002e76:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002e78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d1ee      	bne.n	8002e5c <HAL_SPI_Transmit+0xac>
 8002e7e:	6863      	ldr	r3, [r4, #4]
 8002e80:	4699      	mov	r9, r3
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e82:	4b5c      	ldr	r3, [pc, #368]	; (8002ff4 <HAL_SPI_Transmit+0x244>)
 8002e84:	495c      	ldr	r1, [pc, #368]	; (8002ff8 <HAL_SPI_Transmit+0x248>)
 8002e86:	6818      	ldr	r0, [r3, #0]
 8002e88:	f7fd f93e 	bl	8000108 <__udivsi3>
 8002e8c:	0002      	movs	r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e8e:	2382      	movs	r3, #130	; 0x82
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e90:	0140      	lsls	r0, r0, #5
 8002e92:	1a80      	subs	r0, r0, r2
 8002e94:	0080      	lsls	r0, r0, #2
 8002e96:	1880      	adds	r0, r0, r2
 8002e98:	00c0      	lsls	r0, r0, #3
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002e9a:	2280      	movs	r2, #128	; 0x80
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002e9c:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	4599      	cmp	r9, r3
 8002ea2:	d107      	bne.n	8002eb4 <HAL_SPI_Transmit+0x104>
 8002ea4:	e097      	b.n	8002fd6 <HAL_SPI_Transmit+0x226>
      count--;
 8002ea6:	9b01      	ldr	r3, [sp, #4]
 8002ea8:	3b01      	subs	r3, #1
 8002eaa:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002eac:	6823      	ldr	r3, [r4, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	421a      	tst	r2, r3
 8002eb2:	d002      	beq.n	8002eba <HAL_SPI_Transmit+0x10a>
      if (count == 0U)
 8002eb4:	9b01      	ldr	r3, [sp, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d1f5      	bne.n	8002ea6 <HAL_SPI_Transmit+0xf6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002eba:	68a3      	ldr	r3, [r4, #8]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d106      	bne.n	8002ece <HAL_SPI_Transmit+0x11e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	6823      	ldr	r3, [r4, #0]
 8002ec4:	68da      	ldr	r2, [r3, #12]
 8002ec6:	9200      	str	r2, [sp, #0]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ece:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002ed0:	1e43      	subs	r3, r0, #1
 8002ed2:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8002ed4:	b2c0      	uxtb	r0, r0
error:
 8002ed6:	e784      	b.n	8002de2 <HAL_SPI_Transmit+0x32>
  __HAL_LOCK(hspi);
 8002ed8:	2002      	movs	r0, #2
 8002eda:	e788      	b.n	8002dee <HAL_SPI_Transmit+0x3e>
    __HAL_SPI_DISABLE(hspi);
 8002edc:	2040      	movs	r0, #64	; 0x40
 8002ede:	6822      	ldr	r2, [r4, #0]
 8002ee0:	6811      	ldr	r1, [r2, #0]
 8002ee2:	0013      	movs	r3, r2
 8002ee4:	4381      	bics	r1, r0
 8002ee6:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002ee8:	2180      	movs	r1, #128	; 0x80
 8002eea:	6810      	ldr	r0, [r2, #0]
 8002eec:	01c9      	lsls	r1, r1, #7
 8002eee:	4301      	orrs	r1, r0
 8002ef0:	6011      	str	r1, [r2, #0]
 8002ef2:	e79a      	b.n	8002e2a <HAL_SPI_Transmit+0x7a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ef4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ef6:	7812      	ldrb	r2, [r2, #0]
 8002ef8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002efa:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002efc:	3301      	adds	r3, #1
 8002efe:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002f00:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f02:	3b01      	subs	r3, #1
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002f08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0b7      	beq.n	8002e7e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f0e:	6823      	ldr	r3, [r4, #0]
 8002f10:	689a      	ldr	r2, [r3, #8]
 8002f12:	4217      	tst	r7, r2
 8002f14:	d1ee      	bne.n	8002ef4 <HAL_SPI_Transmit+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f16:	f7fd ff5b 	bl	8000dd0 <HAL_GetTick>
 8002f1a:	1b80      	subs	r0, r0, r6
 8002f1c:	42a8      	cmp	r0, r5
 8002f1e:	d3f3      	bcc.n	8002f08 <HAL_SPI_Transmit+0x158>
          errorcode = HAL_TIMEOUT;
 8002f20:	2003      	movs	r0, #3
 8002f22:	e75e      	b.n	8002de2 <HAL_SPI_Transmit+0x32>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002f24:	783b      	ldrb	r3, [r7, #0]
 8002f26:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f28:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f2a:	3301      	adds	r3, #1
 8002f2c:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002f2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	86e3      	strh	r3, [r4, #54]	; 0x36
 8002f36:	e78b      	b.n	8002e50 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f38:	f7fd ff4a 	bl	8000dd0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8002f3c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d18c      	bne.n	8002e5c <HAL_SPI_Transmit+0xac>
 8002f42:	e79c      	b.n	8002e7e <HAL_SPI_Transmit+0xce>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f44:	6861      	ldr	r1, [r4, #4]
 8002f46:	4689      	mov	r9, r1
 8002f48:	2900      	cmp	r1, #0
 8002f4a:	d140      	bne.n	8002fce <HAL_SPI_Transmit+0x21e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f4c:	8839      	ldrh	r1, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f4e:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f50:	60d1      	str	r1, [r2, #12]
      hspi->TxXferCount--;
 8002f52:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f54:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8002f56:	3901      	subs	r1, #1
 8002f58:	b289      	uxth	r1, r1
 8002f5a:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002f5c:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	d08f      	beq.n	8002e82 <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f62:	2702      	movs	r7, #2
 8002f64:	1c69      	adds	r1, r5, #1
 8002f66:	d128      	bne.n	8002fba <HAL_SPI_Transmit+0x20a>
 8002f68:	6893      	ldr	r3, [r2, #8]
 8002f6a:	421f      	tst	r7, r3
 8002f6c:	d00f      	beq.n	8002f8e <HAL_SPI_Transmit+0x1de>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f6e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002f70:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f72:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f74:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f76:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002f78:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f7a:	3b01      	subs	r3, #1
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002f80:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d100      	bne.n	8002f88 <HAL_SPI_Transmit+0x1d8>
 8002f86:	e77a      	b.n	8002e7e <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f88:	6893      	ldr	r3, [r2, #8]
 8002f8a:	421f      	tst	r7, r3
 8002f8c:	d1ef      	bne.n	8002f6e <HAL_SPI_Transmit+0x1be>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8e:	f7fd ff1f 	bl	8000dd0 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8002f92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d100      	bne.n	8002f9a <HAL_SPI_Transmit+0x1ea>
 8002f98:	e771      	b.n	8002e7e <HAL_SPI_Transmit+0xce>
 8002f9a:	6822      	ldr	r2, [r4, #0]
 8002f9c:	e7e4      	b.n	8002f68 <HAL_SPI_Transmit+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f9e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002fa0:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa2:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa4:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8002fa6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fa8:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8002faa:	3b01      	subs	r3, #1
 8002fac:	b29b      	uxth	r3, r3
 8002fae:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8002fb0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d100      	bne.n	8002fb8 <HAL_SPI_Transmit+0x208>
 8002fb6:	e762      	b.n	8002e7e <HAL_SPI_Transmit+0xce>
 8002fb8:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	4217      	tst	r7, r2
 8002fbe:	d1ee      	bne.n	8002f9e <HAL_SPI_Transmit+0x1ee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc0:	f7fd ff06 	bl	8000dd0 <HAL_GetTick>
 8002fc4:	1b80      	subs	r0, r0, r6
 8002fc6:	42a8      	cmp	r0, r5
 8002fc8:	d3f2      	bcc.n	8002fb0 <HAL_SPI_Transmit+0x200>
          errorcode = HAL_TIMEOUT;
 8002fca:	2003      	movs	r0, #3
 8002fcc:	e709      	b.n	8002de2 <HAL_SPI_Transmit+0x32>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fce:	4641      	mov	r1, r8
 8002fd0:	2901      	cmp	r1, #1
 8002fd2:	d1c3      	bne.n	8002f5c <HAL_SPI_Transmit+0x1ac>
 8002fd4:	e7ba      	b.n	8002f4c <HAL_SPI_Transmit+0x19c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002fd6:	0033      	movs	r3, r6
 8002fd8:	002a      	movs	r2, r5
 8002fda:	2180      	movs	r1, #128	; 0x80
 8002fdc:	0020      	movs	r0, r4
 8002fde:	f7ff fe0b 	bl	8002bf8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002fe2:	2800      	cmp	r0, #0
 8002fe4:	d100      	bne.n	8002fe8 <HAL_SPI_Transmit+0x238>
 8002fe6:	e768      	b.n	8002eba <HAL_SPI_Transmit+0x10a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002fe8:	2220      	movs	r2, #32
 8002fea:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002fec:	4313      	orrs	r3, r2
 8002fee:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff0:	6562      	str	r2, [r4, #84]	; 0x54
 8002ff2:	e762      	b.n	8002eba <HAL_SPI_Transmit+0x10a>
 8002ff4:	20000000 	.word	0x20000000
 8002ff8:	016e3600 	.word	0x016e3600

08002ffc <HAL_SPI_TransmitReceive>:
{
 8002ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ffe:	46c6      	mov	lr, r8
 8003000:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8003002:	2350      	movs	r3, #80	; 0x50
{
 8003004:	b500      	push	{lr}
 8003006:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8003008:	5cc2      	ldrb	r2, [r0, r3]
{
 800300a:	0004      	movs	r4, r0
 800300c:	000e      	movs	r6, r1
 800300e:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8003010:	2a01      	cmp	r2, #1
 8003012:	d100      	bne.n	8003016 <HAL_SPI_TransmitReceive+0x1a>
 8003014:	e0ac      	b.n	8003170 <HAL_SPI_TransmitReceive+0x174>
 8003016:	2201      	movs	r2, #1
 8003018:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 800301a:	f7fd fed9 	bl	8000dd0 <HAL_GetTick>
  tmp_state           = hspi->State;
 800301e:	2351      	movs	r3, #81	; 0x51
 8003020:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8003022:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8003024:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8003026:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003028:	2b01      	cmp	r3, #1
 800302a:	d013      	beq.n	8003054 <HAL_SPI_TransmitReceive+0x58>
 800302c:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 800302e:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	429a      	cmp	r2, r3
 8003034:	d009      	beq.n	800304a <HAL_SPI_TransmitReceive+0x4e>
  hspi->State = HAL_SPI_STATE_READY;
 8003036:	2351      	movs	r3, #81	; 0x51
 8003038:	2201      	movs	r2, #1
 800303a:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 800303c:	2200      	movs	r2, #0
 800303e:	3b01      	subs	r3, #1
 8003040:	54e2      	strb	r2, [r4, r3]
}
 8003042:	b002      	add	sp, #8
 8003044:	bc80      	pop	{r7}
 8003046:	46b8      	mov	r8, r7
 8003048:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800304a:	68a3      	ldr	r3, [r4, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1f2      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x3a>
 8003050:	2904      	cmp	r1, #4
 8003052:	d1f0      	bne.n	8003036 <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003054:	2e00      	cmp	r6, #0
 8003056:	d100      	bne.n	800305a <HAL_SPI_TransmitReceive+0x5e>
 8003058:	e08c      	b.n	8003174 <HAL_SPI_TransmitReceive+0x178>
 800305a:	2f00      	cmp	r7, #0
 800305c:	d100      	bne.n	8003060 <HAL_SPI_TransmitReceive+0x64>
 800305e:	e089      	b.n	8003174 <HAL_SPI_TransmitReceive+0x178>
 8003060:	2d00      	cmp	r5, #0
 8003062:	d100      	bne.n	8003066 <HAL_SPI_TransmitReceive+0x6a>
 8003064:	e086      	b.n	8003174 <HAL_SPI_TransmitReceive+0x178>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003066:	2351      	movs	r3, #81	; 0x51
 8003068:	5ce1      	ldrb	r1, [r4, r3]
 800306a:	2904      	cmp	r1, #4
 800306c:	d001      	beq.n	8003072 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800306e:	2105      	movs	r1, #5
 8003070:	54e1      	strb	r1, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003072:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003074:	2140      	movs	r1, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003076:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8003078:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 800307a:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800307c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800307e:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003080:	86e5      	strh	r5, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003082:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003084:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003086:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003088:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800308a:	86a5      	strh	r5, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800308c:	4201      	tst	r1, r0
 800308e:	d102      	bne.n	8003096 <HAL_SPI_TransmitReceive+0x9a>
    __HAL_SPI_ENABLE(hspi);
 8003090:	6818      	ldr	r0, [r3, #0]
 8003092:	4301      	orrs	r1, r0
 8003094:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003096:	2180      	movs	r1, #128	; 0x80
 8003098:	68e0      	ldr	r0, [r4, #12]
 800309a:	0109      	lsls	r1, r1, #4
 800309c:	4288      	cmp	r0, r1
 800309e:	d100      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0xa6>
 80030a0:	e0de      	b.n	8003260 <HAL_SPI_TransmitReceive+0x264>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030a2:	2a00      	cmp	r2, #0
 80030a4:	d100      	bne.n	80030a8 <HAL_SPI_TransmitReceive+0xac>
 80030a6:	e0d1      	b.n	800324c <HAL_SPI_TransmitReceive+0x250>
 80030a8:	2d01      	cmp	r5, #1
 80030aa:	d100      	bne.n	80030ae <HAL_SPI_TransmitReceive+0xb2>
 80030ac:	e0ce      	b.n	800324c <HAL_SPI_TransmitReceive+0x250>
 80030ae:	9b08      	ldr	r3, [sp, #32]
        txallowed = 1U;
 80030b0:	2701      	movs	r7, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030b2:	2602      	movs	r6, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030b4:	2501      	movs	r5, #1
 80030b6:	3301      	adds	r3, #1
 80030b8:	d02a      	beq.n	8003110 <HAL_SPI_TransmitReceive+0x114>
 80030ba:	e085      	b.n	80031c8 <HAL_SPI_TransmitReceive+0x1cc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030bc:	6823      	ldr	r3, [r4, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	4216      	tst	r6, r2
 80030c2:	d010      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0xea>
 80030c4:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80030c6:	2a00      	cmp	r2, #0
 80030c8:	d00d      	beq.n	80030e6 <HAL_SPI_TransmitReceive+0xea>
 80030ca:	2f01      	cmp	r7, #1
 80030cc:	d10b      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0xea>
        txallowed = 0U;
 80030ce:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030d0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80030d2:	7812      	ldrb	r2, [r2, #0]
 80030d4:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80030d6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80030d8:	3301      	adds	r3, #1
 80030da:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80030dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 80030e4:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030e6:	0029      	movs	r1, r5
 80030e8:	689a      	ldr	r2, [r3, #8]
 80030ea:	4011      	ands	r1, r2
 80030ec:	4215      	tst	r5, r2
 80030ee:	d00d      	beq.n	800310c <HAL_SPI_TransmitReceive+0x110>
 80030f0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80030f2:	2a00      	cmp	r2, #0
 80030f4:	d00a      	beq.n	800310c <HAL_SPI_TransmitReceive+0x110>
        txallowed = 1U;
 80030f6:	000f      	movs	r7, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80030f8:	68db      	ldr	r3, [r3, #12]
 80030fa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80030fc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 80030fe:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003100:	3301      	adds	r3, #1
 8003102:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003104:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003106:	3b01      	subs	r3, #1
 8003108:	b29b      	uxth	r3, r3
 800310a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800310c:	f7fd fe60 	bl	8000dd0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003110:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1d2      	bne.n	80030bc <HAL_SPI_TransmitReceive+0xc0>
 8003116:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003118:	2b00      	cmp	r3, #0
 800311a:	d1cf      	bne.n	80030bc <HAL_SPI_TransmitReceive+0xc0>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800311c:	4b79      	ldr	r3, [pc, #484]	; (8003304 <HAL_SPI_TransmitReceive+0x308>)
 800311e:	497a      	ldr	r1, [pc, #488]	; (8003308 <HAL_SPI_TransmitReceive+0x30c>)
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	f7fc fff1 	bl	8000108 <__udivsi3>
 8003126:	0002      	movs	r2, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003128:	2382      	movs	r3, #130	; 0x82
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800312a:	0140      	lsls	r0, r0, #5
 800312c:	1a80      	subs	r0, r0, r2
 800312e:	0080      	lsls	r0, r0, #2
 8003130:	1880      	adds	r0, r0, r2
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003132:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003134:	00c0      	lsls	r0, r0, #3
 8003136:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	429a      	cmp	r2, r3
 800313c:	d100      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x144>
 800313e:	e0d1      	b.n	80032e4 <HAL_SPI_TransmitReceive+0x2e8>
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003140:	2280      	movs	r2, #128	; 0x80
 8003142:	e006      	b.n	8003152 <HAL_SPI_TransmitReceive+0x156>
      count--;
 8003144:	9b01      	ldr	r3, [sp, #4]
 8003146:	3b01      	subs	r3, #1
 8003148:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	421a      	tst	r2, r3
 8003150:	d002      	beq.n	8003158 <HAL_SPI_TransmitReceive+0x15c>
      if (count == 0U)
 8003152:	9b01      	ldr	r3, [sp, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1f5      	bne.n	8003144 <HAL_SPI_TransmitReceive+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003158:	68a3      	ldr	r3, [r4, #8]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_SPI_TransmitReceive+0x170>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	68da      	ldr	r2, [r3, #12]
 8003164:	9200      	str	r2, [sp, #0]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	9b00      	ldr	r3, [sp, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800316c:	2000      	movs	r0, #0
 800316e:	e762      	b.n	8003036 <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8003170:	2002      	movs	r0, #2
 8003172:	e766      	b.n	8003042 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_ERROR;
 8003174:	2001      	movs	r0, #1
 8003176:	e75e      	b.n	8003036 <HAL_SPI_TransmitReceive+0x3a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003178:	2f01      	cmp	r7, #1
 800317a:	d10b      	bne.n	8003194 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 800317c:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800317e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8003184:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003186:	3301      	adds	r3, #1
 8003188:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800318a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800318c:	3b01      	subs	r3, #1
 800318e:	b29b      	uxth	r3, r3
 8003190:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8003192:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003194:	0029      	movs	r1, r5
 8003196:	689a      	ldr	r2, [r3, #8]
 8003198:	4011      	ands	r1, r2
 800319a:	4215      	tst	r5, r2
 800319c:	d00d      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x1be>
 800319e:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80031a0:	2a00      	cmp	r2, #0
 80031a2:	d00a      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 80031a4:	000f      	movs	r7, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80031aa:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 80031ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80031ae:	3301      	adds	r3, #1
 80031b0:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80031b2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031b4:	3b01      	subs	r3, #1
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80031ba:	f7fd fe09 	bl	8000dd0 <HAL_GetTick>
 80031be:	4643      	mov	r3, r8
 80031c0:	1ac0      	subs	r0, r0, r3
 80031c2:	9b08      	ldr	r3, [sp, #32]
 80031c4:	4298      	cmp	r0, r3
 80031c6:	d23f      	bcs.n	8003248 <HAL_SPI_TransmitReceive+0x24c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031c8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d102      	bne.n	80031d4 <HAL_SPI_TransmitReceive+0x1d8>
 80031ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d0a3      	beq.n	800311c <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031d4:	6823      	ldr	r3, [r4, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	4216      	tst	r6, r2
 80031da:	d0db      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x198>
 80031dc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80031de:	2a00      	cmp	r2, #0
 80031e0:	d0d8      	beq.n	8003194 <HAL_SPI_TransmitReceive+0x198>
 80031e2:	e7c9      	b.n	8003178 <HAL_SPI_TransmitReceive+0x17c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d102      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x1f4>
 80031ea:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d095      	beq.n	800311c <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f0:	6823      	ldr	r3, [r4, #0]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	4216      	tst	r6, r2
 80031f6:	d00e      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x21a>
 80031f8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80031fa:	2a00      	cmp	r2, #0
 80031fc:	d00b      	beq.n	8003216 <HAL_SPI_TransmitReceive+0x21a>
 80031fe:	2f01      	cmp	r7, #1
 8003200:	d109      	bne.n	8003216 <HAL_SPI_TransmitReceive+0x21a>
        txallowed = 0U;
 8003202:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003204:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003206:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003208:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320a:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800320c:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800320e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8003210:	3a01      	subs	r2, #1
 8003212:	b292      	uxth	r2, r2
 8003214:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003216:	0029      	movs	r1, r5
 8003218:	689a      	ldr	r2, [r3, #8]
 800321a:	4011      	ands	r1, r2
 800321c:	4215      	tst	r5, r2
 800321e:	d00c      	beq.n	800323a <HAL_SPI_TransmitReceive+0x23e>
 8003220:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8003222:	2a00      	cmp	r2, #0
 8003224:	d009      	beq.n	800323a <HAL_SPI_TransmitReceive+0x23e>
        txallowed = 1U;
 8003226:	000f      	movs	r7, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800322c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800322e:	3302      	adds	r3, #2
 8003230:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003232:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003234:	3b01      	subs	r3, #1
 8003236:	b29b      	uxth	r3, r3
 8003238:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800323a:	f7fd fdc9 	bl	8000dd0 <HAL_GetTick>
 800323e:	4643      	mov	r3, r8
 8003240:	1ac0      	subs	r0, r0, r3
 8003242:	9b08      	ldr	r3, [sp, #32]
 8003244:	4298      	cmp	r0, r3
 8003246:	d3cd      	bcc.n	80031e4 <HAL_SPI_TransmitReceive+0x1e8>
        errorcode = HAL_TIMEOUT;
 8003248:	2003      	movs	r0, #3
 800324a:	e6f4      	b.n	8003036 <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800324c:	7832      	ldrb	r2, [r6, #0]
 800324e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003250:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003252:	3301      	adds	r3, #1
 8003254:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003256:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003258:	3b01      	subs	r3, #1
 800325a:	b29b      	uxth	r3, r3
 800325c:	86e3      	strh	r3, [r4, #54]	; 0x36
 800325e:	e726      	b.n	80030ae <HAL_SPI_TransmitReceive+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003260:	2a00      	cmp	r2, #0
 8003262:	d13c      	bne.n	80032de <HAL_SPI_TransmitReceive+0x2e2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003264:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003266:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003268:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800326a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800326c:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 800326e:	3b01      	subs	r3, #1
 8003270:	b29b      	uxth	r3, r3
 8003272:	86e3      	strh	r3, [r4, #54]	; 0x36
 8003274:	9b08      	ldr	r3, [sp, #32]
{
 8003276:	2701      	movs	r7, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003278:	2602      	movs	r6, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800327a:	2501      	movs	r5, #1
 800327c:	3301      	adds	r3, #1
 800327e:	d027      	beq.n	80032d0 <HAL_SPI_TransmitReceive+0x2d4>
 8003280:	e7b0      	b.n	80031e4 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003282:	6823      	ldr	r3, [r4, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	4216      	tst	r6, r2
 8003288:	d00e      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x2ac>
 800328a:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 800328c:	2a00      	cmp	r2, #0
 800328e:	d00b      	beq.n	80032a8 <HAL_SPI_TransmitReceive+0x2ac>
 8003290:	2f01      	cmp	r7, #1
 8003292:	d109      	bne.n	80032a8 <HAL_SPI_TransmitReceive+0x2ac>
        txallowed = 0U;
 8003294:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003296:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003298:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800329a:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800329c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800329e:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80032a0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80032a2:	3a01      	subs	r2, #1
 80032a4:	b292      	uxth	r2, r2
 80032a6:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80032a8:	0029      	movs	r1, r5
 80032aa:	689a      	ldr	r2, [r3, #8]
 80032ac:	4011      	ands	r1, r2
 80032ae:	4215      	tst	r5, r2
 80032b0:	d00c      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x2d0>
 80032b2:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80032b4:	2a00      	cmp	r2, #0
 80032b6:	d009      	beq.n	80032cc <HAL_SPI_TransmitReceive+0x2d0>
        txallowed = 1U;
 80032b8:	000f      	movs	r7, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032ba:	68da      	ldr	r2, [r3, #12]
 80032bc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032c0:	3302      	adds	r3, #2
 80032c2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80032c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032cc:	f7fd fd80 	bl	8000dd0 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032d0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1d5      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x286>
 80032d6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1d2      	bne.n	8003282 <HAL_SPI_TransmitReceive+0x286>
 80032dc:	e71e      	b.n	800311c <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032de:	2d01      	cmp	r5, #1
 80032e0:	d1c8      	bne.n	8003274 <HAL_SPI_TransmitReceive+0x278>
 80032e2:	e7bf      	b.n	8003264 <HAL_SPI_TransmitReceive+0x268>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032e4:	4643      	mov	r3, r8
 80032e6:	2180      	movs	r1, #128	; 0x80
 80032e8:	0020      	movs	r0, r4
 80032ea:	9a08      	ldr	r2, [sp, #32]
 80032ec:	f7ff fc84 	bl	8002bf8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 80032f0:	2800      	cmp	r0, #0
 80032f2:	d100      	bne.n	80032f6 <HAL_SPI_TransmitReceive+0x2fa>
 80032f4:	e730      	b.n	8003158 <HAL_SPI_TransmitReceive+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f6:	2220      	movs	r2, #32
 80032f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 80032fa:	2001      	movs	r0, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032fc:	4313      	orrs	r3, r2
 80032fe:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003300:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8003302:	e698      	b.n	8003036 <HAL_SPI_TransmitReceive+0x3a>
 8003304:	20000000 	.word	0x20000000
 8003308:	016e3600 	.word	0x016e3600

0800330c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800330c:	b510      	push	{r4, lr}
 800330e:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003310:	d039      	beq.n	8003386 <HAL_TIM_Base_Init+0x7a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003312:	2339      	movs	r3, #57	; 0x39
 8003314:	5cc3      	ldrb	r3, [r0, r3]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02f      	beq.n	800337c <HAL_TIM_Base_Init+0x70>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	2339      	movs	r3, #57	; 0x39
 800331e:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003320:	2180      	movs	r1, #128	; 0x80
  htim->State = HAL_TIM_STATE_BUSY;
 8003322:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003324:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003326:	05c9      	lsls	r1, r1, #23
  tmpcr1 = TIMx->CR1;
 8003328:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800332a:	428a      	cmp	r2, r1
 800332c:	d005      	beq.n	800333a <HAL_TIM_Base_Init+0x2e>
 800332e:	4917      	ldr	r1, [pc, #92]	; (800338c <HAL_TIM_Base_Init+0x80>)
 8003330:	428a      	cmp	r2, r1
 8003332:	d002      	beq.n	800333a <HAL_TIM_Base_Init+0x2e>
 8003334:	4916      	ldr	r1, [pc, #88]	; (8003390 <HAL_TIM_Base_Init+0x84>)
 8003336:	428a      	cmp	r2, r1
 8003338:	d107      	bne.n	800334a <HAL_TIM_Base_Init+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800333a:	2170      	movs	r1, #112	; 0x70
 800333c:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 800333e:	68a1      	ldr	r1, [r4, #8]
 8003340:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003342:	4914      	ldr	r1, [pc, #80]	; (8003394 <HAL_TIM_Base_Init+0x88>)
 8003344:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003346:	6921      	ldr	r1, [r4, #16]
 8003348:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800334a:	2180      	movs	r1, #128	; 0x80
 800334c:	438b      	bics	r3, r1
 800334e:	6961      	ldr	r1, [r4, #20]
  return HAL_OK;
 8003350:	2000      	movs	r0, #0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003352:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8003354:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003356:	68e3      	ldr	r3, [r4, #12]
 8003358:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800335a:	6863      	ldr	r3, [r4, #4]
 800335c:	6293      	str	r3, [r2, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800335e:	2301      	movs	r3, #1
 8003360:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003362:	223e      	movs	r2, #62	; 0x3e
 8003364:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003366:	3a04      	subs	r2, #4
 8003368:	54a3      	strb	r3, [r4, r2]
 800336a:	3201      	adds	r2, #1
 800336c:	54a3      	strb	r3, [r4, r2]
 800336e:	3201      	adds	r2, #1
 8003370:	54a3      	strb	r3, [r4, r2]
 8003372:	3201      	adds	r2, #1
 8003374:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8003376:	3a04      	subs	r2, #4
 8003378:	54a3      	strb	r3, [r4, r2]
}
 800337a:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 800337c:	3338      	adds	r3, #56	; 0x38
 800337e:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8003380:	f7fd fc1e 	bl	8000bc0 <HAL_TIM_Base_MspInit>
 8003384:	e7ca      	b.n	800331c <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8003386:	2001      	movs	r0, #1
 8003388:	e7f7      	b.n	800337a <HAL_TIM_Base_Init+0x6e>
 800338a:	46c0      	nop			; (mov r8, r8)
 800338c:	40010800 	.word	0x40010800
 8003390:	40011400 	.word	0x40011400
 8003394:	fffffcff 	.word	0xfffffcff

08003398 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8003398:	2338      	movs	r3, #56	; 0x38
{
 800339a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800339c:	5cc2      	ldrb	r2, [r0, r3]
 800339e:	2a01      	cmp	r2, #1
 80033a0:	d100      	bne.n	80033a4 <HAL_TIM_ConfigClockSource+0xc>
 80033a2:	e070      	b.n	8003486 <HAL_TIM_ConfigClockSource+0xee>
 80033a4:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80033a6:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 80033a8:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 80033aa:	3301      	adds	r3, #1
 80033ac:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 80033ae:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b0:	4d4a      	ldr	r5, [pc, #296]	; (80034dc <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 80033b2:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033b4:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 80033b6:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 80033b8:	680b      	ldr	r3, [r1, #0]
 80033ba:	2b60      	cmp	r3, #96	; 0x60
 80033bc:	d065      	beq.n	800348a <HAL_TIM_ConfigClockSource+0xf2>
 80033be:	d82f      	bhi.n	8003420 <HAL_TIM_ConfigClockSource+0x88>
 80033c0:	2b40      	cmp	r3, #64	; 0x40
 80033c2:	d049      	beq.n	8003458 <HAL_TIM_ConfigClockSource+0xc0>
 80033c4:	d91f      	bls.n	8003406 <HAL_TIM_ConfigClockSource+0x6e>
 80033c6:	2b50      	cmp	r3, #80	; 0x50
 80033c8:	d115      	bne.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80033ca:	684d      	ldr	r5, [r1, #4]
 80033cc:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80033ce:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d0:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033d2:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80033d4:	43a6      	bics	r6, r4
 80033d6:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033d8:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80033da:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80033dc:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80033de:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80033e0:	240a      	movs	r4, #10
 80033e2:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 80033e4:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80033e6:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 80033e8:	6211      	str	r1, [r2, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ea:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80033ec:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80033ee:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033f0:	3919      	subs	r1, #25
 80033f2:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f4:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 80033f6:	2339      	movs	r3, #57	; 0x39
 80033f8:	2201      	movs	r2, #1
 80033fa:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 80033fc:	2200      	movs	r2, #0
 80033fe:	3b01      	subs	r3, #1
 8003400:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8003402:	2000      	movs	r0, #0
}
 8003404:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8003406:	2b20      	cmp	r3, #32
 8003408:	d002      	beq.n	8003410 <HAL_TIM_ConfigClockSource+0x78>
 800340a:	d920      	bls.n	800344e <HAL_TIM_ConfigClockSource+0xb6>
 800340c:	2b30      	cmp	r3, #48	; 0x30
 800340e:	d1f2      	bne.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr &= ~TIM_SMCR_TS;
 8003410:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8003412:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003414:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003416:	430b      	orrs	r3, r1
 8003418:	2107      	movs	r1, #7
 800341a:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800341c:	6093      	str	r3, [r2, #8]
}
 800341e:	e7ea      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8003420:	2b70      	cmp	r3, #112	; 0x70
 8003422:	d04b      	beq.n	80034bc <HAL_TIM_ConfigClockSource+0x124>
 8003424:	2480      	movs	r4, #128	; 0x80
 8003426:	01a4      	lsls	r4, r4, #6
 8003428:	42a3      	cmp	r3, r4
 800342a:	d1e4      	bne.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800342c:	6893      	ldr	r3, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800342e:	4c2c      	ldr	r4, [pc, #176]	; (80034e0 <HAL_TIM_ConfigClockSource+0x148>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003430:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003432:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003434:	688b      	ldr	r3, [r1, #8]
 8003436:	68c9      	ldr	r1, [r1, #12]
 8003438:	432b      	orrs	r3, r5
 800343a:	0209      	lsls	r1, r1, #8
 800343c:	430b      	orrs	r3, r1
 800343e:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003440:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003442:	2380      	movs	r3, #128	; 0x80
 8003444:	6891      	ldr	r1, [r2, #8]
 8003446:	01db      	lsls	r3, r3, #7
 8003448:	430b      	orrs	r3, r1
 800344a:	6093      	str	r3, [r2, #8]
      break;
 800344c:	e7d3      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 800344e:	2110      	movs	r1, #16
 8003450:	001c      	movs	r4, r3
 8003452:	438c      	bics	r4, r1
 8003454:	d1cf      	bne.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
 8003456:	e7db      	b.n	8003410 <HAL_TIM_ConfigClockSource+0x78>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003458:	684d      	ldr	r5, [r1, #4]
 800345a:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 800345c:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800345e:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003460:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003462:	43a6      	bics	r6, r4
 8003464:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003466:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8003468:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800346a:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800346c:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800346e:	240a      	movs	r4, #10
 8003470:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8003472:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8003474:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8003476:	6211      	str	r1, [r2, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8003478:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 800347a:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800347c:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800347e:	3929      	subs	r1, #41	; 0x29
 8003480:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8003482:	6093      	str	r3, [r2, #8]
}
 8003484:	e7b7      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 8003486:	2002      	movs	r0, #2
 8003488:	e7bc      	b.n	8003404 <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800348a:	2510      	movs	r5, #16
 800348c:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800348e:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003490:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003492:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003494:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003496:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003498:	4e12      	ldr	r6, [pc, #72]	; (80034e4 <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349a:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800349c:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800349e:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a0:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 80034a2:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80034a4:	6191      	str	r1, [r2, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 80034a6:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80034a8:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 80034ae:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 80034b0:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80034b2:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034b4:	3909      	subs	r1, #9
 80034b6:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 80034b8:	6093      	str	r3, [r2, #8]
}
 80034ba:	e79c      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr = TIMx->SMCR;
 80034bc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034be:	4c08      	ldr	r4, [pc, #32]	; (80034e0 <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c0:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034c2:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034c4:	688b      	ldr	r3, [r1, #8]
 80034c6:	68c9      	ldr	r1, [r1, #12]
 80034c8:	432b      	orrs	r3, r5
 80034ca:	0209      	lsls	r1, r1, #8
 80034cc:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034ce:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80034d0:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 80034d2:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 80034d4:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80034d6:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 80034d8:	6093      	str	r3, [r2, #8]
      break;
 80034da:	e78c      	b.n	80033f6 <HAL_TIM_ConfigClockSource+0x5e>
 80034dc:	ffff0088 	.word	0xffff0088
 80034e0:	ffff00ff 	.word	0xffff00ff
 80034e4:	ffff0fff 	.word	0xffff0fff

080034e8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80034e8:	2338      	movs	r3, #56	; 0x38
{
 80034ea:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80034ec:	5cc3      	ldrb	r3, [r0, r3]
 80034ee:	2b01      	cmp	r3, #1
 80034f0:	d021      	beq.n	8003536 <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034f2:	2339      	movs	r3, #57	; 0x39
 80034f4:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80034f6:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 80034fa:	6803      	ldr	r3, [r0, #0]
 80034fc:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 80034fe:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8003500:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003502:	680d      	ldr	r5, [r1, #0]
 8003504:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003506:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	05d2      	lsls	r2, r2, #23
 800350c:	4293      	cmp	r3, r2
 800350e:	d005      	beq.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003510:	4a0a      	ldr	r2, [pc, #40]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 8003512:	4293      	cmp	r3, r2
 8003514:	d002      	beq.n	800351c <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8003516:	4a0a      	ldr	r2, [pc, #40]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d104      	bne.n	8003526 <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003520:	684a      	ldr	r2, [r1, #4]
 8003522:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003524:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003526:	2339      	movs	r3, #57	; 0x39
 8003528:	2201      	movs	r2, #1
 800352a:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 800352c:	2200      	movs	r2, #0
 800352e:	3b01      	subs	r3, #1
 8003530:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 8003532:	2000      	movs	r0, #0
}
 8003534:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8003536:	2002      	movs	r0, #2
 8003538:	e7fc      	b.n	8003534 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800353a:	46c0      	nop			; (mov r8, r8)
 800353c:	40010800 	.word	0x40010800
 8003540:	40011400 	.word	0x40011400

08003544 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003544:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8003546:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003548:	07da      	lsls	r2, r3, #31
 800354a:	d506      	bpl.n	800355a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800354c:	6801      	ldr	r1, [r0, #0]
 800354e:	4c28      	ldr	r4, [pc, #160]	; (80035f0 <UART_AdvFeatureConfig+0xac>)
 8003550:	684a      	ldr	r2, [r1, #4]
 8003552:	4022      	ands	r2, r4
 8003554:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8003556:	4322      	orrs	r2, r4
 8003558:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800355a:	079a      	lsls	r2, r3, #30
 800355c:	d506      	bpl.n	800356c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800355e:	6801      	ldr	r1, [r0, #0]
 8003560:	4c24      	ldr	r4, [pc, #144]	; (80035f4 <UART_AdvFeatureConfig+0xb0>)
 8003562:	684a      	ldr	r2, [r1, #4]
 8003564:	4022      	ands	r2, r4
 8003566:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8003568:	4322      	orrs	r2, r4
 800356a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800356c:	075a      	lsls	r2, r3, #29
 800356e:	d506      	bpl.n	800357e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003570:	6801      	ldr	r1, [r0, #0]
 8003572:	4c21      	ldr	r4, [pc, #132]	; (80035f8 <UART_AdvFeatureConfig+0xb4>)
 8003574:	684a      	ldr	r2, [r1, #4]
 8003576:	4022      	ands	r2, r4
 8003578:	6b04      	ldr	r4, [r0, #48]	; 0x30
 800357a:	4322      	orrs	r2, r4
 800357c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800357e:	071a      	lsls	r2, r3, #28
 8003580:	d506      	bpl.n	8003590 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003582:	6801      	ldr	r1, [r0, #0]
 8003584:	4c1d      	ldr	r4, [pc, #116]	; (80035fc <UART_AdvFeatureConfig+0xb8>)
 8003586:	684a      	ldr	r2, [r1, #4]
 8003588:	4022      	ands	r2, r4
 800358a:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800358c:	4322      	orrs	r2, r4
 800358e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003590:	06da      	lsls	r2, r3, #27
 8003592:	d506      	bpl.n	80035a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003594:	6801      	ldr	r1, [r0, #0]
 8003596:	4c1a      	ldr	r4, [pc, #104]	; (8003600 <UART_AdvFeatureConfig+0xbc>)
 8003598:	688a      	ldr	r2, [r1, #8]
 800359a:	4022      	ands	r2, r4
 800359c:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800359e:	4322      	orrs	r2, r4
 80035a0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035a2:	069a      	lsls	r2, r3, #26
 80035a4:	d506      	bpl.n	80035b4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035a6:	6801      	ldr	r1, [r0, #0]
 80035a8:	4c16      	ldr	r4, [pc, #88]	; (8003604 <UART_AdvFeatureConfig+0xc0>)
 80035aa:	688a      	ldr	r2, [r1, #8]
 80035ac:	4022      	ands	r2, r4
 80035ae:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80035b0:	4322      	orrs	r2, r4
 80035b2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80035b4:	065a      	lsls	r2, r3, #25
 80035b6:	d50a      	bpl.n	80035ce <UART_AdvFeatureConfig+0x8a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80035b8:	6801      	ldr	r1, [r0, #0]
 80035ba:	4d13      	ldr	r5, [pc, #76]	; (8003608 <UART_AdvFeatureConfig+0xc4>)
 80035bc:	684a      	ldr	r2, [r1, #4]
 80035be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80035c0:	402a      	ands	r2, r5
 80035c2:	4322      	orrs	r2, r4
 80035c4:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	0352      	lsls	r2, r2, #13
 80035ca:	4294      	cmp	r4, r2
 80035cc:	d009      	beq.n	80035e2 <UART_AdvFeatureConfig+0x9e>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ce:	061b      	lsls	r3, r3, #24
 80035d0:	d506      	bpl.n	80035e0 <UART_AdvFeatureConfig+0x9c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d2:	6802      	ldr	r2, [r0, #0]
 80035d4:	490d      	ldr	r1, [pc, #52]	; (800360c <UART_AdvFeatureConfig+0xc8>)
 80035d6:	6853      	ldr	r3, [r2, #4]
 80035d8:	400b      	ands	r3, r1
 80035da:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80035dc:	430b      	orrs	r3, r1
 80035de:	6053      	str	r3, [r2, #4]
  }
}
 80035e0:	bd30      	pop	{r4, r5, pc}
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035e2:	684a      	ldr	r2, [r1, #4]
 80035e4:	4c0a      	ldr	r4, [pc, #40]	; (8003610 <UART_AdvFeatureConfig+0xcc>)
 80035e6:	4022      	ands	r2, r4
 80035e8:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80035ea:	4322      	orrs	r2, r4
 80035ec:	604a      	str	r2, [r1, #4]
 80035ee:	e7ee      	b.n	80035ce <UART_AdvFeatureConfig+0x8a>
 80035f0:	fffdffff 	.word	0xfffdffff
 80035f4:	fffeffff 	.word	0xfffeffff
 80035f8:	fffbffff 	.word	0xfffbffff
 80035fc:	ffff7fff 	.word	0xffff7fff
 8003600:	ffffefff 	.word	0xffffefff
 8003604:	ffffdfff 	.word	0xffffdfff
 8003608:	ffefffff 	.word	0xffefffff
 800360c:	fff7ffff 	.word	0xfff7ffff
 8003610:	ff9fffff 	.word	0xff9fffff

08003614 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003614:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003616:	2380      	movs	r3, #128	; 0x80
 8003618:	2200      	movs	r2, #0
{
 800361a:	46c6      	mov	lr, r8
 800361c:	0004      	movs	r4, r0
 800361e:	b500      	push	{lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003620:	50c2      	str	r2, [r0, r3]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003622:	f7fd fbd5 	bl	8000dd0 <HAL_GetTick>

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003626:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8003628:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	0712      	lsls	r2, r2, #28
 800362e:	d40d      	bmi.n	800364c <UART_CheckIdleState+0x38>
      return HAL_TIMEOUT;
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	0752      	lsls	r2, r2, #29
 8003634:	d433      	bmi.n	800369e <UART_CheckIdleState+0x8a>
      return HAL_TIMEOUT;
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003636:	2320      	movs	r3, #32
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;

  __HAL_UNLOCK(huart);
 8003638:	2274      	movs	r2, #116	; 0x74
  huart->gState = HAL_UART_STATE_READY;
 800363a:	67a3      	str	r3, [r4, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800363c:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	2300      	movs	r3, #0

  return HAL_OK;
 8003640:	2000      	movs	r0, #0
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003642:	6623      	str	r3, [r4, #96]	; 0x60
  __HAL_UNLOCK(huart);
 8003644:	54a3      	strb	r3, [r4, r2]
}
 8003646:	bc80      	pop	{r7}
 8003648:	46b8      	mov	r8, r7
 800364a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	0292      	lsls	r2, r2, #10
 8003650:	d4ee      	bmi.n	8003630 <UART_CheckIdleState+0x1c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003652:	2380      	movs	r3, #128	; 0x80
        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003654:	2680      	movs	r6, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	049b      	lsls	r3, r3, #18
 8003658:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800365a:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800365c:	0136      	lsls	r6, r6, #4
 800365e:	e007      	b.n	8003670 <UART_CheckIdleState+0x5c>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003660:	4217      	tst	r7, r2
 8003662:	d002      	beq.n	800366a <UART_CheckIdleState+0x56>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003664:	69da      	ldr	r2, [r3, #28]
 8003666:	4232      	tst	r2, r6
 8003668:	d133      	bne.n	80036d2 <UART_CheckIdleState+0xbe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800366a:	69da      	ldr	r2, [r3, #28]
 800366c:	0292      	lsls	r2, r2, #10
 800366e:	d4df      	bmi.n	8003630 <UART_CheckIdleState+0x1c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003670:	f7fd fbae 	bl	8000dd0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003674:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003676:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003678:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800367a:	4540      	cmp	r0, r8
 800367c:	d3f0      	bcc.n	8003660 <UART_CheckIdleState+0x4c>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800367e:	491f      	ldr	r1, [pc, #124]	; (80036fc <UART_CheckIdleState+0xe8>)
      return HAL_TIMEOUT;
 8003680:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003682:	400a      	ands	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003686:	689a      	ldr	r2, [r3, #8]
 8003688:	31a3      	adds	r1, #163	; 0xa3
 800368a:	31ff      	adds	r1, #255	; 0xff
 800368c:	438a      	bics	r2, r1
 800368e:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8003690:	2320      	movs	r3, #32
        __HAL_UNLOCK(huart);
 8003692:	2200      	movs	r2, #0
        huart->gState = HAL_UART_STATE_READY;
 8003694:	67a3      	str	r3, [r4, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003696:	67e3      	str	r3, [r4, #124]	; 0x7c
        __HAL_UNLOCK(huart);
 8003698:	3354      	adds	r3, #84	; 0x54
 800369a:	54e2      	strb	r2, [r4, r3]
        return HAL_TIMEOUT;
 800369c:	e7d3      	b.n	8003646 <UART_CheckIdleState+0x32>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	69db      	ldr	r3, [r3, #28]
 80036a0:	025b      	lsls	r3, r3, #9
 80036a2:	d4c8      	bmi.n	8003636 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a4:	2380      	movs	r3, #128	; 0x80
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036a6:	2680      	movs	r6, #128	; 0x80
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036a8:	049b      	lsls	r3, r3, #18
 80036aa:	4698      	mov	r8, r3
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036ac:	2704      	movs	r7, #4
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036ae:	0136      	lsls	r6, r6, #4
 80036b0:	e007      	b.n	80036c2 <UART_CheckIdleState+0xae>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80036b2:	4217      	tst	r7, r2
 80036b4:	d002      	beq.n	80036bc <UART_CheckIdleState+0xa8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036b6:	69da      	ldr	r2, [r3, #28]
 80036b8:	4232      	tst	r2, r6
 80036ba:	d10a      	bne.n	80036d2 <UART_CheckIdleState+0xbe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036bc:	69db      	ldr	r3, [r3, #28]
 80036be:	025b      	lsls	r3, r3, #9
 80036c0:	d4b9      	bmi.n	8003636 <UART_CheckIdleState+0x22>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c2:	f7fd fb85 	bl	8000dd0 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036c6:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	1b40      	subs	r0, r0, r5
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ca:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036cc:	4540      	cmp	r0, r8
 80036ce:	d3f0      	bcc.n	80036b2 <UART_CheckIdleState+0x9e>
 80036d0:	e7d5      	b.n	800367e <UART_CheckIdleState+0x6a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036d2:	621e      	str	r6, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4909      	ldr	r1, [pc, #36]	; (80036fc <UART_CheckIdleState+0xe8>)
      return HAL_TIMEOUT;
 80036d8:	2003      	movs	r0, #3
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	689a      	ldr	r2, [r3, #8]
 80036e0:	31a3      	adds	r1, #163	; 0xa3
 80036e2:	31ff      	adds	r1, #255	; 0xff
 80036e4:	438a      	bics	r2, r1
 80036e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80036e8:	2320      	movs	r3, #32
          huart->RxState = HAL_UART_STATE_READY;
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036ea:	2280      	movs	r2, #128	; 0x80
          huart->gState = HAL_UART_STATE_READY;
 80036ec:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80036ee:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80036f0:	50a3      	str	r3, [r4, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036f2:	2200      	movs	r2, #0
 80036f4:	3354      	adds	r3, #84	; 0x54
 80036f6:	54e2      	strb	r2, [r4, r3]

          return HAL_TIMEOUT;
 80036f8:	e7a5      	b.n	8003646 <UART_CheckIdleState+0x32>
 80036fa:	46c0      	nop			; (mov r8, r8)
 80036fc:	fffffe5f 	.word	0xfffffe5f

08003700 <HAL_HalfDuplex_Init>:
{
 8003700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003702:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003704:	d100      	bne.n	8003708 <HAL_HalfDuplex_Init+0x8>
 8003706:	e0fd      	b.n	8003904 <HAL_HalfDuplex_Init+0x204>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003708:	6f83      	ldr	r3, [r0, #120]	; 0x78
 800370a:	2b00      	cmp	r3, #0
 800370c:	d044      	beq.n	8003798 <HAL_HalfDuplex_Init+0x98>
  huart->gState = HAL_UART_STATE_BUSY;
 800370e:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003710:	2101      	movs	r1, #1
  huart->gState = HAL_UART_STATE_BUSY;
 8003712:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UART_DISABLE(huart);
 8003714:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003716:	6925      	ldr	r5, [r4, #16]
  __HAL_UART_DISABLE(huart);
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	438a      	bics	r2, r1
 800371c:	601a      	str	r2, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800371e:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003720:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003722:	432a      	orrs	r2, r5
 8003724:	6965      	ldr	r5, [r4, #20]
 8003726:	69e1      	ldr	r1, [r4, #28]
 8003728:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372a:	4d8f      	ldr	r5, [pc, #572]	; (8003968 <HAL_HalfDuplex_Init+0x268>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800372e:	4028      	ands	r0, r5
 8003730:	4302      	orrs	r2, r0
 8003732:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003734:	685a      	ldr	r2, [r3, #4]
 8003736:	488d      	ldr	r0, [pc, #564]	; (800396c <HAL_HalfDuplex_Init+0x26c>)
 8003738:	4002      	ands	r2, r0
 800373a:	68e0      	ldr	r0, [r4, #12]
 800373c:	4302      	orrs	r2, r0
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800373e:	488c      	ldr	r0, [pc, #560]	; (8003970 <HAL_HalfDuplex_Init+0x270>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003740:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003742:	69a2      	ldr	r2, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003744:	4283      	cmp	r3, r0
 8003746:	d02c      	beq.n	80037a2 <HAL_HalfDuplex_Init+0xa2>
    tmpreg |= huart->Init.OneBitSampling;
 8003748:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374a:	6898      	ldr	r0, [r3, #8]
    tmpreg |= huart->Init.OneBitSampling;
 800374c:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800374e:	4d89      	ldr	r5, [pc, #548]	; (8003974 <HAL_HalfDuplex_Init+0x274>)
 8003750:	4028      	ands	r0, r5
 8003752:	4302      	orrs	r2, r0
 8003754:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003756:	4a88      	ldr	r2, [pc, #544]	; (8003978 <HAL_HalfDuplex_Init+0x278>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d008      	beq.n	800376e <HAL_HalfDuplex_Init+0x6e>
 800375c:	4a87      	ldr	r2, [pc, #540]	; (800397c <HAL_HalfDuplex_Init+0x27c>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d100      	bne.n	8003764 <HAL_HalfDuplex_Init+0x64>
 8003762:	e0d1      	b.n	8003908 <HAL_HalfDuplex_Init+0x208>
  huart->RxISR = NULL;
 8003764:	2300      	movs	r3, #0
    return HAL_ERROR;
 8003766:	2001      	movs	r0, #1
  huart->RxISR = NULL;
 8003768:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800376a:	66a3      	str	r3, [r4, #104]	; 0x68
}
 800376c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 800376e:	4b84      	ldr	r3, [pc, #528]	; (8003980 <HAL_HalfDuplex_Init+0x280>)
 8003770:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003772:	2303      	movs	r3, #3
 8003774:	4013      	ands	r3, r2
 8003776:	3b01      	subs	r3, #1
 8003778:	2b02      	cmp	r3, #2
 800377a:	d900      	bls.n	800377e <HAL_HalfDuplex_Init+0x7e>
 800377c:	e08a      	b.n	8003894 <HAL_HalfDuplex_Init+0x194>
 800377e:	4a81      	ldr	r2, [pc, #516]	; (8003984 <HAL_HalfDuplex_Init+0x284>)
 8003780:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	0212      	lsls	r2, r2, #8
 8003786:	4291      	cmp	r1, r2
 8003788:	d100      	bne.n	800378c <HAL_HalfDuplex_Init+0x8c>
 800378a:	e09a      	b.n	80038c2 <HAL_HalfDuplex_Init+0x1c2>
    switch (clocksource)
 800378c:	2b08      	cmp	r3, #8
 800378e:	d8e9      	bhi.n	8003764 <HAL_HalfDuplex_Init+0x64>
 8003790:	4a7d      	ldr	r2, [pc, #500]	; (8003988 <HAL_HalfDuplex_Init+0x288>)
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	58d3      	ldr	r3, [r2, r3]
 8003796:	469f      	mov	pc, r3
    huart->Lock = HAL_UNLOCKED;
 8003798:	2274      	movs	r2, #116	; 0x74
 800379a:	5483      	strb	r3, [r0, r2]
    HAL_UART_MspInit(huart);
 800379c:	f7fd fa78 	bl	8000c90 <HAL_UART_MspInit>
 80037a0:	e7b5      	b.n	800370e <HAL_HalfDuplex_Init+0xe>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037a2:	6899      	ldr	r1, [r3, #8]
 80037a4:	4873      	ldr	r0, [pc, #460]	; (8003974 <HAL_HalfDuplex_Init+0x274>)
 80037a6:	4001      	ands	r1, r0
 80037a8:	430a      	orrs	r2, r1
 80037aa:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ac:	22c0      	movs	r2, #192	; 0xc0
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	4873      	ldr	r0, [pc, #460]	; (8003980 <HAL_HalfDuplex_Init+0x280>)
 80037b2:	0112      	lsls	r2, r2, #4
 80037b4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80037b6:	0109      	lsls	r1, r1, #4
 80037b8:	4013      	ands	r3, r2
 80037ba:	428b      	cmp	r3, r1
 80037bc:	d100      	bne.n	80037c0 <HAL_HalfDuplex_Init+0xc0>
 80037be:	e0c6      	b.n	800394e <HAL_HalfDuplex_Init+0x24e>
 80037c0:	d80b      	bhi.n	80037da <HAL_HalfDuplex_Init+0xda>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d100      	bne.n	80037c8 <HAL_HalfDuplex_Init+0xc8>
 80037c6:	e0bf      	b.n	8003948 <HAL_HalfDuplex_Init+0x248>
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	00d2      	lsls	r2, r2, #3
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d1c9      	bne.n	8003764 <HAL_HalfDuplex_Init+0x64>
        pclk = HAL_RCC_GetSysClockFreq();
 80037d0:	f7fe fcc6 	bl	8002160 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80037d4:	2800      	cmp	r0, #0
 80037d6:	d053      	beq.n	8003880 <HAL_HalfDuplex_Init+0x180>
 80037d8:	e003      	b.n	80037e2 <HAL_HalfDuplex_Init+0xe2>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037da:	4293      	cmp	r3, r2
 80037dc:	d1c2      	bne.n	8003764 <HAL_HalfDuplex_Init+0x64>
 80037de:	2080      	movs	r0, #128	; 0x80
 80037e0:	0200      	lsls	r0, r0, #8
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037e2:	6865      	ldr	r5, [r4, #4]
 80037e4:	006b      	lsls	r3, r5, #1
 80037e6:	195b      	adds	r3, r3, r5
 80037e8:	4283      	cmp	r3, r0
 80037ea:	d8bb      	bhi.n	8003764 <HAL_HalfDuplex_Init+0x64>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037ec:	032b      	lsls	r3, r5, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037ee:	4298      	cmp	r0, r3
 80037f0:	d8b8      	bhi.n	8003764 <HAL_HalfDuplex_Init+0x64>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037f2:	2700      	movs	r7, #0
 80037f4:	0e03      	lsrs	r3, r0, #24
 80037f6:	0202      	lsls	r2, r0, #8
 80037f8:	086e      	lsrs	r6, r5, #1
 80037fa:	1992      	adds	r2, r2, r6
 80037fc:	417b      	adcs	r3, r7
 80037fe:	0010      	movs	r0, r2
 8003800:	0019      	movs	r1, r3
 8003802:	002a      	movs	r2, r5
 8003804:	2300      	movs	r3, #0
 8003806:	f7fc fd0b 	bl	8000220 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800380a:	4b60      	ldr	r3, [pc, #384]	; (800398c <HAL_HalfDuplex_Init+0x28c>)
 800380c:	18c2      	adds	r2, r0, r3
 800380e:	4b60      	ldr	r3, [pc, #384]	; (8003990 <HAL_HalfDuplex_Init+0x290>)
 8003810:	429a      	cmp	r2, r3
 8003812:	d8a7      	bhi.n	8003764 <HAL_HalfDuplex_Init+0x64>
          huart->Instance->BRR = usartdiv;
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003818:	6667      	str	r7, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 800381a:	66a7      	str	r7, [r4, #104]	; 0x68
  return ret;
 800381c:	e014      	b.n	8003848 <HAL_HalfDuplex_Init+0x148>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381e:	2080      	movs	r0, #128	; 0x80
 8003820:	0200      	lsls	r0, r0, #8
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003822:	6863      	ldr	r3, [r4, #4]
 8003824:	6861      	ldr	r1, [r4, #4]
 8003826:	085b      	lsrs	r3, r3, #1
 8003828:	1818      	adds	r0, r3, r0
 800382a:	f7fc fc6d 	bl	8000108 <__udivsi3>
 800382e:	0400      	lsls	r0, r0, #16
 8003830:	0c00      	lsrs	r0, r0, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003832:	0002      	movs	r2, r0
 8003834:	4b57      	ldr	r3, [pc, #348]	; (8003994 <HAL_HalfDuplex_Init+0x294>)
 8003836:	3a10      	subs	r2, #16
 8003838:	429a      	cmp	r2, r3
 800383a:	d900      	bls.n	800383e <HAL_HalfDuplex_Init+0x13e>
 800383c:	e792      	b.n	8003764 <HAL_HalfDuplex_Init+0x64>
        huart->Instance->BRR = usartdiv;
 800383e:	6823      	ldr	r3, [r4, #0]
 8003840:	60d8      	str	r0, [r3, #12]
  huart->RxISR = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003846:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003848:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d11e      	bne.n	800388c <HAL_HalfDuplex_Init+0x18c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800384e:	6823      	ldr	r3, [r4, #0]
 8003850:	4951      	ldr	r1, [pc, #324]	; (8003998 <HAL_HalfDuplex_Init+0x298>)
 8003852:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8003854:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8003858:	2122      	movs	r1, #34	; 0x22
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800385a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 800385c:	689a      	ldr	r2, [r3, #8]
 800385e:	438a      	bics	r2, r1
 8003860:	609a      	str	r2, [r3, #8]
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8003862:	689a      	ldr	r2, [r3, #8]
 8003864:	391a      	subs	r1, #26
 8003866:	430a      	orrs	r2, r1
 8003868:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	3907      	subs	r1, #7
 800386e:	430a      	orrs	r2, r1
 8003870:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8003872:	f7ff fecf 	bl	8003614 <UART_CheckIdleState>
 8003876:	e779      	b.n	800376c <HAL_HalfDuplex_Init+0x6c>
        pclk = HAL_RCC_GetSysClockFreq();
 8003878:	f7fe fc72 	bl	8002160 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800387c:	2800      	cmp	r0, #0
 800387e:	d1d0      	bne.n	8003822 <HAL_HalfDuplex_Init+0x122>
  huart->RxISR = NULL;
 8003880:	2300      	movs	r3, #0
 8003882:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003884:	66a3      	str	r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d0e0      	beq.n	800384e <HAL_HalfDuplex_Init+0x14e>
    UART_AdvFeatureConfig(huart);
 800388c:	0020      	movs	r0, r4
 800388e:	f7ff fe59 	bl	8003544 <UART_AdvFeatureConfig>
 8003892:	e7dc      	b.n	800384e <HAL_HalfDuplex_Init+0x14e>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003894:	2380      	movs	r3, #128	; 0x80
 8003896:	021b      	lsls	r3, r3, #8
 8003898:	4299      	cmp	r1, r3
 800389a:	d052      	beq.n	8003942 <HAL_HalfDuplex_Init+0x242>
        pclk = HAL_RCC_GetPCLK2Freq();
 800389c:	f7ff f89e 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
        break;
 80038a0:	e7ec      	b.n	800387c <HAL_HalfDuplex_Init+0x17c>
        pclk = HAL_RCC_GetPCLK1Freq();
 80038a2:	f7ff f88b 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
        break;
 80038a6:	e7e9      	b.n	800387c <HAL_HalfDuplex_Init+0x17c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038a8:	2010      	movs	r0, #16
 80038aa:	4b35      	ldr	r3, [pc, #212]	; (8003980 <HAL_HalfDuplex_Init+0x280>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80038b0:	4243      	negs	r3, r0
 80038b2:	4158      	adcs	r0, r3
 80038b4:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_HalfDuplex_Init+0x29c>)
 80038b6:	4240      	negs	r0, r0
 80038b8:	4018      	ands	r0, r3
 80038ba:	4b39      	ldr	r3, [pc, #228]	; (80039a0 <HAL_HalfDuplex_Init+0x2a0>)
 80038bc:	469c      	mov	ip, r3
 80038be:	4460      	add	r0, ip
 80038c0:	e7af      	b.n	8003822 <HAL_HalfDuplex_Init+0x122>
    switch (clocksource)
 80038c2:	2b08      	cmp	r3, #8
 80038c4:	d900      	bls.n	80038c8 <HAL_HalfDuplex_Init+0x1c8>
 80038c6:	e74d      	b.n	8003764 <HAL_HalfDuplex_Init+0x64>
 80038c8:	4a36      	ldr	r2, [pc, #216]	; (80039a4 <HAL_HalfDuplex_Init+0x2a4>)
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	58d3      	ldr	r3, [r2, r3]
 80038ce:	469f      	mov	pc, r3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038d0:	2080      	movs	r0, #128	; 0x80
 80038d2:	0240      	lsls	r0, r0, #9
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038d4:	6863      	ldr	r3, [r4, #4]
 80038d6:	6861      	ldr	r1, [r4, #4]
 80038d8:	085b      	lsrs	r3, r3, #1
 80038da:	1818      	adds	r0, r3, r0
 80038dc:	f7fc fc14 	bl	8000108 <__udivsi3>
 80038e0:	0403      	lsls	r3, r0, #16
 80038e2:	0c1a      	lsrs	r2, r3, #16
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038e4:	492b      	ldr	r1, [pc, #172]	; (8003994 <HAL_HalfDuplex_Init+0x294>)
 80038e6:	3a10      	subs	r2, #16
 80038e8:	428a      	cmp	r2, r1
 80038ea:	d900      	bls.n	80038ee <HAL_HalfDuplex_Init+0x1ee>
 80038ec:	e73a      	b.n	8003764 <HAL_HalfDuplex_Init+0x64>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038ee:	4a2e      	ldr	r2, [pc, #184]	; (80039a8 <HAL_HalfDuplex_Init+0x2a8>)
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f0:	031b      	lsls	r3, r3, #12
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038f2:	4010      	ands	r0, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f4:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 80038f6:	4318      	orrs	r0, r3
  huart->RxISR = NULL;
 80038f8:	2300      	movs	r3, #0
        huart->Instance->BRR = brrtemp;
 80038fa:	6822      	ldr	r2, [r4, #0]
 80038fc:	60d0      	str	r0, [r2, #12]
  huart->RxISR = NULL;
 80038fe:	6663      	str	r3, [r4, #100]	; 0x64
  huart->TxISR = NULL;
 8003900:	66a3      	str	r3, [r4, #104]	; 0x68
  return ret;
 8003902:	e7a1      	b.n	8003848 <HAL_HalfDuplex_Init+0x148>
    return HAL_ERROR;
 8003904:	2001      	movs	r0, #1
 8003906:	e731      	b.n	800376c <HAL_HalfDuplex_Init+0x6c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <HAL_HalfDuplex_Init+0x280>)
 800390a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800390c:	230c      	movs	r3, #12
 800390e:	4013      	ands	r3, r2
 8003910:	4a26      	ldr	r2, [pc, #152]	; (80039ac <HAL_HalfDuplex_Init+0x2ac>)
 8003912:	5cd3      	ldrb	r3, [r2, r3]
  if (UART_INSTANCE_LOWPOWER(huart))
 8003914:	e735      	b.n	8003782 <HAL_HalfDuplex_Init+0x82>
        pclk = HAL_RCC_GetSysClockFreq();
 8003916:	f7fe fc23 	bl	8002160 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 800391a:	2800      	cmp	r0, #0
 800391c:	d0b0      	beq.n	8003880 <HAL_HalfDuplex_Init+0x180>
 800391e:	0040      	lsls	r0, r0, #1
 8003920:	e7d8      	b.n	80038d4 <HAL_HalfDuplex_Init+0x1d4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003922:	2010      	movs	r0, #16
 8003924:	4b16      	ldr	r3, [pc, #88]	; (8003980 <HAL_HalfDuplex_Init+0x280>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4018      	ands	r0, r3
 800392a:	4243      	negs	r3, r0
 800392c:	4158      	adcs	r0, r3
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_HalfDuplex_Init+0x2b0>)
 8003930:	4240      	negs	r0, r0
 8003932:	4018      	ands	r0, r3
 8003934:	4b1f      	ldr	r3, [pc, #124]	; (80039b4 <HAL_HalfDuplex_Init+0x2b4>)
 8003936:	469c      	mov	ip, r3
 8003938:	4460      	add	r0, ip
 800393a:	e7cb      	b.n	80038d4 <HAL_HalfDuplex_Init+0x1d4>
        pclk = HAL_RCC_GetPCLK1Freq();
 800393c:	f7ff f83e 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
        break;
 8003940:	e7eb      	b.n	800391a <HAL_HalfDuplex_Init+0x21a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003942:	f7ff f84b 	bl	80029dc <HAL_RCC_GetPCLK2Freq>
        break;
 8003946:	e7e8      	b.n	800391a <HAL_HalfDuplex_Init+0x21a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003948:	f7ff f838 	bl	80029bc <HAL_RCC_GetPCLK1Freq>
        break;
 800394c:	e742      	b.n	80037d4 <HAL_HalfDuplex_Init+0xd4>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800394e:	6803      	ldr	r3, [r0, #0]
 8003950:	2010      	movs	r0, #16
 8003952:	4018      	ands	r0, r3
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8003954:	4243      	negs	r3, r0
 8003956:	4158      	adcs	r0, r3
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <HAL_HalfDuplex_Init+0x29c>)
 800395a:	4240      	negs	r0, r0
 800395c:	4018      	ands	r0, r3
 800395e:	4b10      	ldr	r3, [pc, #64]	; (80039a0 <HAL_HalfDuplex_Init+0x2a0>)
 8003960:	469c      	mov	ip, r3
 8003962:	4460      	add	r0, ip
 8003964:	e73d      	b.n	80037e2 <HAL_HalfDuplex_Init+0xe2>
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	efff69f3 	.word	0xefff69f3
 800396c:	ffffcfff 	.word	0xffffcfff
 8003970:	40004800 	.word	0x40004800
 8003974:	fffff4ff 	.word	0xfffff4ff
 8003978:	40013800 	.word	0x40013800
 800397c:	40004400 	.word	0x40004400
 8003980:	40021000 	.word	0x40021000
 8003984:	08004638 	.word	0x08004638
 8003988:	080045f0 	.word	0x080045f0
 800398c:	fffffd00 	.word	0xfffffd00
 8003990:	000ffcff 	.word	0x000ffcff
 8003994:	0000ffef 	.word	0x0000ffef
 8003998:	ffffb7ff 	.word	0xffffb7ff
 800399c:	00b71b00 	.word	0x00b71b00
 80039a0:	003d0900 	.word	0x003d0900
 80039a4:	08004614 	.word	0x08004614
 80039a8:	0000fff0 	.word	0x0000fff0
 80039ac:	0800463c 	.word	0x0800463c
 80039b0:	016e3600 	.word	0x016e3600
 80039b4:	007a1200 	.word	0x007a1200

080039b8 <internal_bus_create>:
#include "Bus.h"

InternalBus_t * internal_bus_create(GPIO_TypeDef *bus_line,uint16_t bus_pins,GPIO_TypeDef *cl_bus,uint16_t cl_pin,GPIO_TypeDef *ak_bus,uint16_t ak_pin)
{
 80039b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039ba:	4657      	mov	r7, sl
 80039bc:	464e      	mov	r6, r9
 80039be:	4645      	mov	r5, r8
 80039c0:	46de      	mov	lr, fp
 80039c2:	b5e0      	push	{r5, r6, r7, lr}
 80039c4:	b087      	sub	sp, #28
 80039c6:	001e      	movs	r6, r3
 80039c8:	9301      	str	r3, [sp, #4]
 80039ca:	ab10      	add	r3, sp, #64	; 0x40
 80039cc:	4680      	mov	r8, r0
 80039ce:	cb01      	ldmia	r3!, {r0}
 80039d0:	4689      	mov	r9, r1
 80039d2:	881c      	ldrh	r4, [r3, #0]
 80039d4:	4682      	mov	sl, r0
	InternalBus_t * thisInternalBus = (InternalBus_t *) malloc(sizeof(InternalBus_t));
 80039d6:	203c      	movs	r0, #60	; 0x3c
{
 80039d8:	0017      	movs	r7, r2
 80039da:	9100      	str	r1, [sp, #0]
 80039dc:	9205      	str	r2, [sp, #20]
 80039de:	9402      	str	r4, [sp, #8]
	InternalBus_t * thisInternalBus = (InternalBus_t *) malloc(sizeof(InternalBus_t));
 80039e0:	f000 fd54 	bl	800448c <malloc>
	if(thisInternalBus != NULL)
 80039e4:	2800      	cmp	r0, #0
 80039e6:	d100      	bne.n	80039ea <internal_bus_create+0x32>
 80039e8:	e09e      	b.n	8003b28 <internal_bus_create+0x170>
	{
		//assign desired value for clock pin and other bus  so this bus will now which pins assigned for clock ack and bus line it self
		//everything else in this lib should use this data for other settings
		thisInternalBus->bus = bus_line;
 80039ea:	4645      	mov	r5, r8
		thisInternalBus->bus_mask = bus_pins;
 80039ec:	4649      	mov	r1, r9
		thisInternalBus->BUS_BUSMASK32 = 0;
 80039ee:	2200      	movs	r2, #0
 80039f0:	2300      	movs	r3, #0
		thisInternalBus->bus = bus_line;
 80039f2:	6005      	str	r5, [r0, #0]
		thisInternalBus->bus_mask = bus_pins;
 80039f4:	8081      	strh	r1, [r0, #4]
		thisInternalBus->bus_clk_mask = cl_pin;
		thisInternalBus->BUS_CLKMASK32 = 0;
		thisInternalBus->BUS_CLKMODER = 0;
		thisInternalBus->BUS_CLKOSPEEDR = 0;

		thisInternalBus->bus_ack = ak_bus;
 80039f6:	4655      	mov	r5, sl
		thisInternalBus->BUS_BUSOSPEEDR = 0;
 80039f8:	2100      	movs	r1, #0
		thisInternalBus->BUS_BUSMASK32 = 0;
 80039fa:	6082      	str	r2, [r0, #8]
 80039fc:	60c3      	str	r3, [r0, #12]
		thisInternalBus->bus_ack_mask = ak_pin;
		thisInternalBus->BUS_ACKMASK32 = 0;
 80039fe:	6302      	str	r2, [r0, #48]	; 0x30
 8003a00:	6343      	str	r3, [r0, #52]	; 0x34
		thisInternalBus->BUS_BUSOSPEEDR = 0;
 8003a02:	6101      	str	r1, [r0, #16]
		thisInternalBus->BUS_ACKMODER = 0;
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 8003a04:	2300      	movs	r3, #0
		thisInternalBus->BUS_CLKMASK32 = 0;
 8003a06:	61c1      	str	r1, [r0, #28]
		thisInternalBus->BUS_CLKMODER = 0;
 8003a08:	6201      	str	r1, [r0, #32]
		thisInternalBus->BUS_CLKOSPEEDR = 0;
 8003a0a:	6241      	str	r1, [r0, #36]	; 0x24
		thisInternalBus->bus_ack = ak_bus;
 8003a0c:	6285      	str	r5, [r0, #40]	; 0x28
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 8003a0e:	6381      	str	r1, [r0, #56]	; 0x38
 8003a10:	2500      	movs	r5, #0
		uint32_t pinShifter = 0;
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
		{
			if (bus_pins & (1 << pinShifter))
			{
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8003a12:	9103      	str	r1, [sp, #12]
 8003a14:	4641      	mov	r1, r8
		thisInternalBus->bus_clk = cl_bus;
 8003a16:	6147      	str	r7, [r0, #20]
		thisInternalBus->bus_clk_mask = cl_pin;
 8003a18:	8306      	strh	r6, [r0, #24]
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 8003a1a:	469c      	mov	ip, r3
 8003a1c:	2700      	movs	r7, #0
 8003a1e:	2600      	movs	r6, #0
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8003a20:	46a8      	mov	r8, r5
 8003a22:	4689      	mov	r9, r1
		thisInternalBus->bus_ack_mask = ak_pin;
 8003a24:	8584      	strh	r4, [r0, #44]	; 0x2c
			if (bus_pins & (1 << pinShifter))
 8003a26:	3201      	adds	r2, #1
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8003a28:	9304      	str	r3, [sp, #16]
			if (bus_pins & (1 << pinShifter))
 8003a2a:	9c00      	ldr	r4, [sp, #0]
 8003a2c:	411c      	asrs	r4, r3
 8003a2e:	4222      	tst	r2, r4
 8003a30:	d012      	beq.n	8003a58 <internal_bus_create+0xa0>
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8003a32:	2103      	movs	r1, #3
 8003a34:	005c      	lsls	r4, r3, #1
 8003a36:	40a1      	lsls	r1, r4
 8003a38:	9d03      	ldr	r5, [sp, #12]
 8003a3a:	468b      	mov	fp, r1
 8003a3c:	430d      	orrs	r5, r1
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 8003a3e:	0011      	movs	r1, r2
 8003a40:	40a1      	lsls	r1, r4
 8003a42:	000c      	movs	r4, r1
 8003a44:	68c1      	ldr	r1, [r0, #12]
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8003a46:	9503      	str	r5, [sp, #12]
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 8003a48:	430c      	orrs	r4, r1
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 8003a4a:	4659      	mov	r1, fp
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 8003a4c:	60c4      	str	r4, [r0, #12]
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 8003a4e:	9c04      	ldr	r4, [sp, #16]
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8003a50:	6085      	str	r5, [r0, #8]
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 8003a52:	430c      	orrs	r4, r1
 8003a54:	9404      	str	r4, [sp, #16]
 8003a56:	6104      	str	r4, [r0, #16]
			}
			if (cl_pin & (1 << pinShifter))
 8003a58:	9c01      	ldr	r4, [sp, #4]
 8003a5a:	411c      	asrs	r4, r3
 8003a5c:	4222      	tst	r2, r4
 8003a5e:	d00e      	beq.n	8003a7e <internal_bus_create+0xc6>
			{
				thisInternalBus->BUS_CLKMASK32  |= (0b11 << (pinShifter * 2));
 8003a60:	2103      	movs	r1, #3
 8003a62:	005c      	lsls	r4, r3, #1
 8003a64:	40a1      	lsls	r1, r4
 8003a66:	468b      	mov	fp, r1
 8003a68:	430e      	orrs	r6, r1
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 8003a6a:	0011      	movs	r1, r2
 8003a6c:	40a1      	lsls	r1, r4
 8003a6e:	000c      	movs	r4, r1
 8003a70:	6a01      	ldr	r1, [r0, #32]
				thisInternalBus->BUS_CLKMASK32  |= (0b11 << (pinShifter * 2));
 8003a72:	61c6      	str	r6, [r0, #28]
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 8003a74:	430c      	orrs	r4, r1
				thisInternalBus->BUS_CLKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003a76:	4659      	mov	r1, fp
 8003a78:	430f      	orrs	r7, r1
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 8003a7a:	6204      	str	r4, [r0, #32]
				thisInternalBus->BUS_CLKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003a7c:	6247      	str	r7, [r0, #36]	; 0x24
			}
			if (ak_pin & (1 << pinShifter))
 8003a7e:	9c02      	ldr	r4, [sp, #8]
 8003a80:	411c      	asrs	r4, r3
 8003a82:	4222      	tst	r2, r4
 8003a84:	d012      	beq.n	8003aac <internal_bus_create+0xf4>
			{
				thisInternalBus->BUS_ACKMASK32  |= (0b11 << (pinShifter * 2));
 8003a86:	2103      	movs	r1, #3
 8003a88:	005c      	lsls	r4, r3, #1
 8003a8a:	40a1      	lsls	r1, r4
 8003a8c:	468b      	mov	fp, r1
 8003a8e:	4641      	mov	r1, r8
 8003a90:	465d      	mov	r5, fp
 8003a92:	4329      	orrs	r1, r5
 8003a94:	4688      	mov	r8, r1
 8003a96:	6301      	str	r1, [r0, #48]	; 0x30
				thisInternalBus->BUS_ACKMODER   |= (0b01 << (pinShifter * 2));
 8003a98:	0011      	movs	r1, r2
 8003a9a:	40a1      	lsls	r1, r4
 8003a9c:	000c      	movs	r4, r1
 8003a9e:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8003aa0:	430c      	orrs	r4, r1
				thisInternalBus->BUS_ACKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003aa2:	4661      	mov	r1, ip
 8003aa4:	4329      	orrs	r1, r5
 8003aa6:	468c      	mov	ip, r1
				thisInternalBus->BUS_ACKMODER   |= (0b01 << (pinShifter * 2));
 8003aa8:	6344      	str	r4, [r0, #52]	; 0x34
				thisInternalBus->BUS_ACKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003aaa:	6381      	str	r1, [r0, #56]	; 0x38
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
 8003aac:	3301      	adds	r3, #1
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d1bb      	bne.n	8003a2a <internal_bus_create+0x72>
 8003ab2:	464b      	mov	r3, r9
 8003ab4:	9903      	ldr	r1, [sp, #12]
			}
		}

		uint32_t temp = 0;
		//Set main bus output speed to very high
		temp = thisInternalBus->bus->OSPEEDR;
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	9a04      	ldr	r2, [sp, #16]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003aba:	438b      	bics	r3, r1
		temp |= thisInternalBus->BUS_BUSOSPEEDR;
 8003abc:	4313      	orrs	r3, r2
		thisInternalBus->bus->OSPEEDR = temp;
 8003abe:	464a      	mov	r2, r9
 8003ac0:	6093      	str	r3, [r2, #8]
		//Set main bus output type to output push-pull
		temp = thisInternalBus->bus->OTYPER;
 8003ac2:	6853      	ldr	r3, [r2, #4]
		temp &= ~thisInternalBus->bus_mask;
 8003ac4:	9c00      	ldr	r4, [sp, #0]
 8003ac6:	4645      	mov	r5, r8
 8003ac8:	43a3      	bics	r3, r4
		thisInternalBus->bus->OTYPER = temp;
 8003aca:	6053      	str	r3, [r2, #4]
		//Set main bus pullup/down resistors to none
		temp = thisInternalBus->bus->PUPDR;
 8003acc:	68d3      	ldr	r3, [r2, #12]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003ace:	438b      	bics	r3, r1
		thisInternalBus->bus->PUPDR = temp;
 8003ad0:	60d3      	str	r3, [r2, #12]

		//Set Clock line, output speed to very high
		temp = thisInternalBus->bus_clk->OSPEEDR;
 8003ad2:	9a05      	ldr	r2, [sp, #20]
 8003ad4:	6893      	ldr	r3, [r2, #8]
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003ad6:	43b3      	bics	r3, r6
		temp |= thisInternalBus->BUS_CLKOSPEEDR;
 8003ad8:	433b      	orrs	r3, r7
		thisInternalBus->bus_clk->OSPEEDR = temp;
 8003ada:	6093      	str	r3, [r2, #8]
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_clk->OTYPER;
 8003adc:	6853      	ldr	r3, [r2, #4]
		temp &= ~thisInternalBus->bus_clk_mask;
 8003ade:	9f01      	ldr	r7, [sp, #4]
 8003ae0:	43bb      	bics	r3, r7
		thisInternalBus->bus_clk->OTYPER = temp;
 8003ae2:	6053      	str	r3, [r2, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_clk->PUPDR;
 8003ae4:	68d3      	ldr	r3, [r2, #12]
		thisInternalBus->bus_clk->PUPDR = temp;

		//Set Ack line, output speed to very high
		temp = thisInternalBus->bus_ack->OSPEEDR;
		temp &= ~thisInternalBus->BUS_ACKMASK32;
		temp |= thisInternalBus->BUS_ACKOSPEEDR;
 8003ae6:	4667      	mov	r7, ip
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003ae8:	43b3      	bics	r3, r6
		thisInternalBus->bus_clk->PUPDR = temp;
 8003aea:	60d3      	str	r3, [r2, #12]
		temp = thisInternalBus->bus_ack->OSPEEDR;
 8003aec:	4653      	mov	r3, sl
 8003aee:	689b      	ldr	r3, [r3, #8]
		thisInternalBus->bus_ack->OSPEEDR = temp;
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_ack->OTYPER;
		temp &= ~thisInternalBus->bus_ack_mask;
		thisInternalBus->bus_ack->OTYPER = temp;
 8003af0:	4652      	mov	r2, sl
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003af2:	43ab      	bics	r3, r5
		temp |= thisInternalBus->BUS_ACKOSPEEDR;
 8003af4:	433b      	orrs	r3, r7
		thisInternalBus->bus_ack->OSPEEDR = temp;
 8003af6:	4657      	mov	r7, sl
 8003af8:	60bb      	str	r3, [r7, #8]
		temp = thisInternalBus->bus_ack->OTYPER;
 8003afa:	687b      	ldr	r3, [r7, #4]
		temp &= ~thisInternalBus->bus_ack_mask;
 8003afc:	9f02      	ldr	r7, [sp, #8]
 8003afe:	43bb      	bics	r3, r7
		thisInternalBus->bus_ack->OTYPER = temp;
 8003b00:	6053      	str	r3, [r2, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_ack->PUPDR;
 8003b02:	68d3      	ldr	r3, [r2, #12]
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003b04:	43ab      	bics	r3, r5
		thisInternalBus->bus_ack->PUPDR = temp;
 8003b06:	60d3      	str	r3, [r2, #12]

inline void internal_bus_release(InternalBus_t *thisInternalBus)
{
	uint32_t temp = 0;
	//Set all bus pins to low and send complete
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 8003b08:	464b      	mov	r3, r9
 8003b0a:	629c      	str	r4, [r3, #40]	; 0x28
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 8003b0c:	6297      	str	r7, [r2, #40]	; 0x28

	//Set Bus pins to input
	temp = thisInternalBus->bus->MODER;
	temp &= ~thisInternalBus->BUS_BUSMASK32;
	thisInternalBus->bus->MODER = temp;
 8003b0e:	464a      	mov	r2, r9
	temp = thisInternalBus->bus->MODER;
 8003b10:	681b      	ldr	r3, [r3, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003b12:	438b      	bics	r3, r1
	thisInternalBus->bus->MODER = temp;
 8003b14:	6013      	str	r3, [r2, #0]

	//Set clock pin to input
	temp = thisInternalBus->bus_clk->MODER;
 8003b16:	9a05      	ldr	r2, [sp, #20]
 8003b18:	6813      	ldr	r3, [r2, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003b1a:	43b3      	bics	r3, r6
	thisInternalBus->bus_clk->MODER = temp;
 8003b1c:	6013      	str	r3, [r2, #0]

	//Set ack pins to input
	temp = thisInternalBus->bus_ack->MODER;
 8003b1e:	4653      	mov	r3, sl
	temp &= ~thisInternalBus->BUS_ACKMASK32;
	thisInternalBus->bus_ack->MODER = temp;
 8003b20:	4652      	mov	r2, sl
	temp = thisInternalBus->bus_ack->MODER;
 8003b22:	681b      	ldr	r3, [r3, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003b24:	43ab      	bics	r3, r5
	thisInternalBus->bus_ack->MODER = temp;
 8003b26:	6013      	str	r3, [r2, #0]
}
 8003b28:	b007      	add	sp, #28
 8003b2a:	bcf0      	pop	{r4, r5, r6, r7}
 8003b2c:	46bb      	mov	fp, r7
 8003b2e:	46b2      	mov	sl, r6
 8003b30:	46a9      	mov	r9, r5
 8003b32:	46a0      	mov	r8, r4
 8003b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b36:	46c0      	nop			; (mov r8, r8)

08003b38 <internal_bus_write_data_frame>:
{
 8003b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b3a:	4657      	mov	r7, sl
 8003b3c:	464e      	mov	r6, r9
 8003b3e:	4645      	mov	r5, r8
 8003b40:	46de      	mov	lr, fp
 8003b42:	b5e0      	push	{r5, r6, r7, lr}
 8003b44:	0005      	movs	r5, r0
	temp = thisInternalBus->bus->MODER;
 8003b46:	6807      	ldr	r7, [r0, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003b48:	6880      	ldr	r0, [r0, #8]
	temp = thisInternalBus->bus->MODER;
 8003b4a:	683b      	ldr	r3, [r7, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003b4c:	43c4      	mvns	r4, r0
 8003b4e:	4383      	bics	r3, r0
	temp |= thisInternalBus->BUS_BUSMODER;
 8003b50:	68e8      	ldr	r0, [r5, #12]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003b52:	46a3      	mov	fp, r4
	temp |= thisInternalBus->BUS_BUSMODER;
 8003b54:	4303      	orrs	r3, r0
	temp = thisInternalBus->bus_clk->MODER;
 8003b56:	696c      	ldr	r4, [r5, #20]
	thisInternalBus->bus->MODER = temp;
 8003b58:	603b      	str	r3, [r7, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003b5a:	69e8      	ldr	r0, [r5, #28]
	temp = thisInternalBus->bus_clk->MODER;
 8003b5c:	6823      	ldr	r3, [r4, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003b5e:	43c6      	mvns	r6, r0
 8003b60:	4383      	bics	r3, r0
	temp |= thisInternalBus->BUS_CLKMODER;
 8003b62:	6a28      	ldr	r0, [r5, #32]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003b64:	46b2      	mov	sl, r6
	temp |= thisInternalBus->BUS_CLKMODER;
 8003b66:	4303      	orrs	r3, r0
	thisInternalBus->bus_clk->MODER = temp;
 8003b68:	6023      	str	r3, [r4, #0]
	temp = thisInternalBus->bus_ack->MODER;
 8003b6a:	6aab      	ldr	r3, [r5, #40]	; 0x28
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003b6c:	6b28      	ldr	r0, [r5, #48]	; 0x30
	temp = thisInternalBus->bus_ack->MODER;
 8003b6e:	469c      	mov	ip, r3
 8003b70:	681b      	ldr	r3, [r3, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003b72:	43c6      	mvns	r6, r0
 8003b74:	4383      	bics	r3, r0
	temp |= thisInternalBus->BUS_ACKMODER;
 8003b76:	6b68      	ldr	r0, [r5, #52]	; 0x34
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003b78:	46b1      	mov	r9, r6
	temp |= thisInternalBus->BUS_ACKMODER;
 8003b7a:	4303      	orrs	r3, r0
	thisInternalBus->bus_ack->MODER = temp;
 8003b7c:	4660      	mov	r0, ip
 8003b7e:	6003      	str	r3, [r0, #0]
	thisInternalBus->bus_ack->BSRR = (uint32_t) thisInternalBus->bus_ack_mask;
 8003b80:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8003b82:	4698      	mov	r8, r3
 8003b84:	4663      	mov	r3, ip
 8003b86:	4640      	mov	r0, r8
 8003b88:	6198      	str	r0, [r3, #24]
	while(buffer_len--)
 8003b8a:	1e50      	subs	r0, r2, #1
 8003b8c:	b2c0      	uxtb	r0, r0
 8003b8e:	2a00      	cmp	r2, #0
 8003b90:	d027      	beq.n	8003be2 <internal_bus_write_data_frame+0xaa>
		thisInternalBus->bus_clk->BSRR = (uint32_t) thisInternalBus->bus_clk_mask;
 8003b92:	8b2e      	ldrh	r6, [r5, #24]
		thisInternalBus->bus->BSRR = (uint32_t) ((thisInternalBus->bus_mask & buffer[buffer_len])  | ((thisInternalBus->bus_mask & ~buffer[buffer_len])  << 16));
 8003b94:	88ad      	ldrh	r5, [r5, #4]
 8003b96:	1808      	adds	r0, r1, r0
 8003b98:	002b      	movs	r3, r5
		thisInternalBus->bus_clk->BSRR = (uint32_t) thisInternalBus->bus_clk_mask;
 8003b9a:	61a6      	str	r6, [r4, #24]
		thisInternalBus->bus->BSRR = (uint32_t) ((thisInternalBus->bus_mask & buffer[buffer_len])  | ((thisInternalBus->bus_mask & ~buffer[buffer_len])  << 16));
 8003b9c:	7802      	ldrb	r2, [r0, #0]
 8003b9e:	4393      	bics	r3, r2
 8003ba0:	041b      	lsls	r3, r3, #16
 8003ba2:	402a      	ands	r2, r5
 8003ba4:	431a      	orrs	r2, r3
 8003ba6:	61ba      	str	r2, [r7, #24]
		thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8003ba8:	0003      	movs	r3, r0
 8003baa:	62a6      	str	r6, [r4, #40]	; 0x28
	while(buffer_len--)
 8003bac:	3801      	subs	r0, #1
 8003bae:	4299      	cmp	r1, r3
 8003bb0:	d1f2      	bne.n	8003b98 <internal_bus_write_data_frame+0x60>
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 8003bb2:	4642      	mov	r2, r8
 8003bb4:	4663      	mov	r3, ip
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 8003bb6:	62bd      	str	r5, [r7, #40]	; 0x28
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 8003bb8:	629a      	str	r2, [r3, #40]	; 0x28
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003bba:	465a      	mov	r2, fp
	temp = thisInternalBus->bus->MODER;
 8003bbc:	683b      	ldr	r3, [r7, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003bbe:	4013      	ands	r3, r2
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003bc0:	4652      	mov	r2, sl
	thisInternalBus->bus->MODER = temp;
 8003bc2:	603b      	str	r3, [r7, #0]
	temp = thisInternalBus->bus_clk->MODER;
 8003bc4:	6823      	ldr	r3, [r4, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003bc6:	4013      	ands	r3, r2
	thisInternalBus->bus_clk->MODER = temp;
 8003bc8:	6023      	str	r3, [r4, #0]
	temp = thisInternalBus->bus_ack->MODER;
 8003bca:	4663      	mov	r3, ip
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003bcc:	464a      	mov	r2, r9
	temp = thisInternalBus->bus_ack->MODER;
 8003bce:	681b      	ldr	r3, [r3, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003bd0:	4013      	ands	r3, r2
	thisInternalBus->bus_ack->MODER = temp;
 8003bd2:	4662      	mov	r2, ip
 8003bd4:	6013      	str	r3, [r2, #0]
}
 8003bd6:	bcf0      	pop	{r4, r5, r6, r7}
 8003bd8:	46bb      	mov	fp, r7
 8003bda:	46b2      	mov	sl, r6
 8003bdc:	46a9      	mov	r9, r5
 8003bde:	46a0      	mov	r8, r4
 8003be0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003be2:	88ad      	ldrh	r5, [r5, #4]
 8003be4:	e7e5      	b.n	8003bb2 <internal_bus_write_data_frame+0x7a>
 8003be6:	46c0      	nop			; (mov r8, r8)

08003be8 <EEPROM_save>:
// TODO we need uint8_t EEPROM_save(unsigned char *file_name, uint8_t *buffer, uint8_t how_many_byte_write)
uint8_t EEPROM_save(uint32_t file_name, uint8_t *buffer, uint8_t buffer_size)
{
	uint8_t result = 0;
	//before anything else first check if the address you are trying to write to is in fact within the EEPROM memory map
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003be8:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <EEPROM_save+0x38>)
{
 8003bea:	b570      	push	{r4, r5, r6, lr}
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003bec:	18c2      	adds	r2, r0, r3
 8003bee:	2380      	movs	r3, #128	; 0x80
{
 8003bf0:	0004      	movs	r4, r0
 8003bf2:	000d      	movs	r5, r1
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	429a      	cmp	r2, r3
 8003bf8:	d301      	bcc.n	8003bfe <EEPROM_save+0x16>
					result =1;
				}
				//we already unlocked the EEPROM memory no matter if we succes to write or not we need to relock
				if( HAL_OK != HAL_FLASHEx_DATAEEPROM_Lock())
				{
					result =0;  //if we can not relock again it is a problem no matter if we succes to write
 8003bfa:	2000      	movs	r0, #0
			}
		}
	}
	//Lock the EEPROM afterwards to protect it from accidental memory writes
	return(result);
}
 8003bfc:	bd70      	pop	{r4, r5, r6, pc}
		if ( HAL_OK == HAL_FLASHEx_DATAEEPROM_Unlock() )
 8003bfe:	f7fd fd69 	bl	80016d4 <HAL_FLASHEx_DATAEEPROM_Unlock>
 8003c02:	2800      	cmp	r0, #0
 8003c04:	d1f9      	bne.n	8003bfa <EEPROM_save+0x12>
				if( HAL_OK == HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (uint32_t) file_name, (uint32_t) buffer[0]) )
 8003c06:	0021      	movs	r1, r4
 8003c08:	782a      	ldrb	r2, [r5, #0]
 8003c0a:	f7fd fd85 	bl	8001718 <HAL_FLASHEx_DATAEEPROM_Program>
 8003c0e:	0004      	movs	r4, r0
				if( HAL_OK != HAL_FLASHEx_DATAEEPROM_Lock())
 8003c10:	f7fd fd78 	bl	8001704 <HAL_FLASHEx_DATAEEPROM_Lock>
 8003c14:	2800      	cmp	r0, #0
 8003c16:	d1f0      	bne.n	8003bfa <EEPROM_save+0x12>
				if( HAL_OK == HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, (uint32_t) file_name, (uint32_t) buffer[0]) )
 8003c18:	4260      	negs	r0, r4
 8003c1a:	4160      	adcs	r0, r4
	uint8_t result = 0;
 8003c1c:	b2c0      	uxtb	r0, r0
 8003c1e:	e7ed      	b.n	8003bfc <EEPROM_save+0x14>
 8003c20:	f7f80000 	.word	0xf7f80000

08003c24 <EEPROM_load>:
uint8_t EEPROM_load(uint32_t file_name, uint8_t *buffer, uint8_t buffer_size)
{

	uint8_t result = 0;
	//before anything else first check if the address you are trying to write to is in fact within the EEPROM memory map
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003c24:	4a06      	ldr	r2, [pc, #24]	; (8003c40 <EEPROM_load+0x1c>)
{
 8003c26:	b510      	push	{r4, lr}
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003c28:	1884      	adds	r4, r0, r2
 8003c2a:	2280      	movs	r2, #128	; 0x80
{
 8003c2c:	0003      	movs	r3, r0
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003c2e:	0112      	lsls	r2, r2, #4
	uint8_t result = 0;
 8003c30:	2000      	movs	r0, #0
	if (IS_FLASH_DATA_ADDRESS(file_name))
 8003c32:	4294      	cmp	r4, r2
 8003c34:	d202      	bcs.n	8003c3c <EEPROM_load+0x18>
	{
		buffer[0] = *(uint8_t*) file_name;
 8003c36:	781b      	ldrb	r3, [r3, #0]
		result = 1;
 8003c38:	3001      	adds	r0, #1
		buffer[0] = *(uint8_t*) file_name;
 8003c3a:	700b      	strb	r3, [r1, #0]
	}
	//Lock the EEPROM afterwards to protect it from accidental memory writes
	return(result);
}
 8003c3c:	bd10      	pop	{r4, pc}
 8003c3e:	46c0      	nop			; (mov r8, r8)
 8003c40:	f7f80000 	.word	0xf7f80000

08003c44 <magnetometer_create>:
//!since different sensors may have different type and number of variables
//!1 - sensor type  depend to the sensor type
//!2 - data tranmitter handler in this implimentation we just limited that to SPI in future if we add I2C or analog sensor ADC line can passs as a parameter
//!--------------------------create a new magnotmemeter of any type lower layer support and make a interface and initilize that-----------------------------------
Magnetometer_t * magnetometer_create(uint8_t type,SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 8003c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c46:	46d6      	mov	lr, sl
 8003c48:	464f      	mov	r7, r9
 8003c4a:	4646      	mov	r6, r8
 8003c4c:	b5c0      	push	{r6, r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	ac0a      	add	r4, sp, #40	; 0x28
 8003c52:	001f      	movs	r7, r3
 8003c54:	cc08      	ldmia	r4!, {r3}
 8003c56:	0005      	movs	r5, r0
 8003c58:	4699      	mov	r9, r3
 8003c5a:	8823      	ldrh	r3, [r4, #0]
	Magnetometer_t *  thisMagnetometer = malloc(sizeof(Magnetometer_t));
 8003c5c:	2018      	movs	r0, #24
{
 8003c5e:	000e      	movs	r6, r1
 8003c60:	4690      	mov	r8, r2
 8003c62:	469a      	mov	sl, r3
	Magnetometer_t *  thisMagnetometer = malloc(sizeof(Magnetometer_t));
 8003c64:	f000 fc12 	bl	800448c <malloc>
 8003c68:	1e04      	subs	r4, r0, #0
	if(thisMagnetometer != NULL)
 8003c6a:	d015      	beq.n	8003c98 <magnetometer_create+0x54>
	{
		thisMagnetometer->whichMagnetometer = type;
 8003c6c:	7005      	strb	r5, [r0, #0]
		switch (thisMagnetometer->whichMagnetometer)
 8003c6e:	2d0a      	cmp	r5, #10
 8003c70:	d019      	beq.n	8003ca6 <magnetometer_create+0x62>
 8003c72:	2d14      	cmp	r5, #20
 8003c74:	d110      	bne.n	8003c98 <magnetometer_create+0x54>
			}
			break;
		//------------------------------
		case MAGNETOMETER_TYPE_MMC5983:
			{
				thisMagnetometer->magnetometer = (MMC5983_t*)MMC5983_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8003c76:	4653      	mov	r3, sl
 8003c78:	003a      	movs	r2, r7
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	4641      	mov	r1, r8
 8003c7e:	464b      	mov	r3, r9
 8003c80:	0030      	movs	r0, r6
 8003c82:	f000 f941 	bl	8003f08 <MMC5983_create>
 8003c86:	6060      	str	r0, [r4, #4]
				if(thisMagnetometer->magnetometer != NULL)
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d005      	beq.n	8003c98 <magnetometer_create+0x54>
				{
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
					thisMagnetometer->timeStamp = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6163      	str	r3, [r4, #20]
					thisMagnetometer->Readings[X_AX] = 0;
 8003c90:	60a3      	str	r3, [r4, #8]
 8003c92:	23c8      	movs	r3, #200	; 0xc8
 8003c94:	03db      	lsls	r3, r3, #15
 8003c96:	60e3      	str	r3, [r4, #12]
			}
			break;
		}
	}
	return(thisMagnetometer);
}
 8003c98:	0020      	movs	r0, r4
 8003c9a:	b002      	add	sp, #8
 8003c9c:	bce0      	pop	{r5, r6, r7}
 8003c9e:	46ba      	mov	sl, r7
 8003ca0:	46b1      	mov	r9, r6
 8003ca2:	46a8      	mov	r8, r5
 8003ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
				thisMagnetometer->magnetometer = (LIS3MDL_t*)LIS3MDL_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8003ca6:	4653      	mov	r3, sl
 8003ca8:	003a      	movs	r2, r7
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	4641      	mov	r1, r8
 8003cae:	464b      	mov	r3, r9
 8003cb0:	0030      	movs	r0, r6
 8003cb2:	f000 f86d 	bl	8003d90 <LIS3MDL_create>
 8003cb6:	6060      	str	r0, [r4, #4]
				if(thisMagnetometer->magnetometer != NULL)
 8003cb8:	2800      	cmp	r0, #0
 8003cba:	d1e7      	bne.n	8003c8c <magnetometer_create+0x48>
 8003cbc:	e7ec      	b.n	8003c98 <magnetometer_create+0x54>
 8003cbe:	46c0      	nop			; (mov r8, r8)

08003cc0 <magnetometer_read>:
//----------------regardless of magnetometer type this methode is our interface between higher layer and driver layer---------------------------------------
//--------------- by calling this methode we will have fresh data provided by low level layer driver ready to use --------------------------
uint8_t magnetometer_read(Magnetometer_t *thisMagnetometer)
{
	uint8_t res=0;
	switch (thisMagnetometer->whichMagnetometer)
 8003cc0:	7803      	ldrb	r3, [r0, #0]
{
 8003cc2:	b510      	push	{r4, lr}
	switch (thisMagnetometer->whichMagnetometer)
 8003cc4:	2b0a      	cmp	r3, #10
 8003cc6:	d009      	beq.n	8003cdc <magnetometer_read+0x1c>
 8003cc8:	2b14      	cmp	r3, #20
 8003cca:	d105      	bne.n	8003cd8 <magnetometer_read+0x18>
	case MAGNETOMETER_TYPE_LIS3MDL:
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
		break;
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		res = MMC5983_read_XYZ((MMC5983_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
 8003ccc:	0001      	movs	r1, r0
 8003cce:	6840      	ldr	r0, [r0, #4]
 8003cd0:	3108      	adds	r1, #8
 8003cd2:	f000 f9bb 	bl	800404c <MMC5983_read_XYZ>
		break;
	}
	return res;
}
 8003cd6:	bd10      	pop	{r4, pc}
	switch (thisMagnetometer->whichMagnetometer)
 8003cd8:	2000      	movs	r0, #0
 8003cda:	e7fc      	b.n	8003cd6 <magnetometer_read+0x16>
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
 8003cdc:	0001      	movs	r1, r0
 8003cde:	6840      	ldr	r0, [r0, #4]
 8003ce0:	3108      	adds	r1, #8
 8003ce2:	f000 f90f 	bl	8003f04 <LIS3MDL_read_XYZ>
		break;
 8003ce6:	e7f6      	b.n	8003cd6 <magnetometer_read+0x16>

08003ce8 <I2C_interface_create>:
#include "i2c_network_interface.h"


I2C_t * I2C_interface_create(I2C_HandleTypeDef *I2C_handle,uint8_t channel_address)
{
 8003ce8:	b570      	push	{r4, r5, r6, lr}
 8003cea:	0005      	movs	r5, r0
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8003cec:	2008      	movs	r0, #8
{
 8003cee:	000e      	movs	r6, r1
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8003cf0:	f000 fbcc 	bl	800448c <malloc>
 8003cf4:	1e04      	subs	r4, r0, #0
	if(thisI2C != NULL)
 8003cf6:	d017      	beq.n	8003d28 <I2C_interface_create+0x40>
	{
		thisI2C->I2C_line = I2C_handle;
		i2c2_interrupt_interface_pointer = thisI2C;
 8003cf8:	4b0c      	ldr	r3, [pc, #48]	; (8003d2c <I2C_interface_create+0x44>)
		thisI2C->buffer_index=0;

		// Disable Own Address1 before setting the new address configuration
		//TODO it is much safer to use HAL compatible address change instead of manual mode
		//is ther any reason for using manual mode?
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003cfa:	490d      	ldr	r1, [pc, #52]	; (8003d30 <I2C_interface_create+0x48>)
		i2c2_interrupt_interface_pointer = thisI2C;
 8003cfc:	6018      	str	r0, [r3, #0]
		thisI2C->buffer_index=0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	7003      	strb	r3, [r0, #0]
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d02:	682b      	ldr	r3, [r5, #0]
		thisI2C->I2C_line = I2C_handle;
 8003d04:	6045      	str	r5, [r0, #4]
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d06:	689a      	ldr	r2, [r3, #8]
 8003d08:	400a      	ands	r2, r1
 8003d0a:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	0071      	lsls	r1, r6, #1
 8003d10:	0212      	lsls	r2, r2, #8
 8003d12:	4311      	orrs	r1, r2
 8003d14:	6099      	str	r1, [r3, #8]
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8003d16:	212c      	movs	r1, #44	; 0x2c
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	601a      	str	r2, [r3, #0]
		HAL_I2C_Slave_Receive_IT(thisI2C->I2C_line, thisI2C->receiveBuffer, I2C_RECEIVE_LENGTH);
 8003d1e:	1c41      	adds	r1, r0, #1
 8003d20:	2201      	movs	r2, #1
 8003d22:	0028      	movs	r0, r5
 8003d24:	f7fd fe72 	bl	8001a0c <HAL_I2C_Slave_Receive_IT>
	else
	{
		//TODO  erro handler
	}
	return thisI2C;
}
 8003d28:	0020      	movs	r0, r4
 8003d2a:	bd70      	pop	{r4, r5, r6, pc}
 8003d2c:	200001c0 	.word	0x200001c0
 8003d30:	ffff7fff 	.word	0xffff7fff

08003d34 <I2C2_IRQHandler>:
//------------------------------------------
void I2C2_IRQHandler(void)
{
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_STOPI) != RESET))
 8003d34:	2120      	movs	r1, #32
 8003d36:	4b15      	ldr	r3, [pc, #84]	; (8003d8c <I2C2_IRQHandler+0x58>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	6853      	ldr	r3, [r2, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	6998      	ldr	r0, [r3, #24]
 8003d40:	4201      	tst	r1, r0
 8003d42:	d002      	beq.n	8003d4a <I2C2_IRQHandler+0x16>
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	4201      	tst	r1, r0
 8003d48:	d11d      	bne.n	8003d86 <I2C2_IRQHandler+0x52>
	{
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_STOPF);
	}
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_RXI) != RESET))
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	6998      	ldr	r0, [r3, #24]
 8003d4e:	4201      	tst	r1, r0
 8003d50:	d002      	beq.n	8003d58 <I2C2_IRQHandler+0x24>
 8003d52:	6818      	ldr	r0, [r3, #0]
 8003d54:	4201      	tst	r1, r0
 8003d56:	d108      	bne.n	8003d6a <I2C2_IRQHandler+0x36>
		{
			i2c2_interrupt_interface_pointer->receiveBuffer[i2c2_interrupt_interface_pointer->buffer_index] = (uint8_t)i2c2_interrupt_interface_pointer->I2C_line->Instance->RXDR;
			i2c2_interrupt_interface_pointer->buffer_index++;
		}
	}
	if ((I2C_CHECK_FLAG(i2c2_interrupt_interface_pointer->I2C_line->Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(i2c2_interrupt_interface_pointer->I2C_line->Instance->CR1, I2C_IT_ADDRI) != RESET))
 8003d58:	2208      	movs	r2, #8
 8003d5a:	6999      	ldr	r1, [r3, #24]
 8003d5c:	420a      	tst	r2, r1
 8003d5e:	d003      	beq.n	8003d68 <I2C2_IRQHandler+0x34>
 8003d60:	6819      	ldr	r1, [r3, #0]
 8003d62:	420a      	tst	r2, r1
 8003d64:	d000      	beq.n	8003d68 <I2C2_IRQHandler+0x34>
	{
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_ADDR);
 8003d66:	61da      	str	r2, [r3, #28]
	}
	return;
}
 8003d68:	4770      	bx	lr
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_RXNE);
 8003d6a:	61d9      	str	r1, [r3, #28]
		if(i2c2_interrupt_interface_pointer->buffer_index < I2C_RECEIVE_LENGTH)
 8003d6c:	7811      	ldrb	r1, [r2, #0]
 8003d6e:	2900      	cmp	r1, #0
 8003d70:	d1f2      	bne.n	8003d58 <I2C2_IRQHandler+0x24>
			i2c2_interrupt_interface_pointer->receiveBuffer[i2c2_interrupt_interface_pointer->buffer_index] = (uint8_t)i2c2_interrupt_interface_pointer->I2C_line->Instance->RXDR;
 8003d72:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003d74:	7811      	ldrb	r1, [r2, #0]
 8003d76:	b2c0      	uxtb	r0, r0
 8003d78:	1851      	adds	r1, r2, r1
 8003d7a:	7048      	strb	r0, [r1, #1]
			i2c2_interrupt_interface_pointer->buffer_index++;
 8003d7c:	7811      	ldrb	r1, [r2, #0]
 8003d7e:	3101      	adds	r1, #1
 8003d80:	b2c9      	uxtb	r1, r1
 8003d82:	7011      	strb	r1, [r2, #0]
 8003d84:	e7e8      	b.n	8003d58 <I2C2_IRQHandler+0x24>
		__HAL_I2C_CLEAR_FLAG(i2c2_interrupt_interface_pointer->I2C_line, I2C_FLAG_STOPF);
 8003d86:	61d9      	str	r1, [r3, #28]
 8003d88:	e7df      	b.n	8003d4a <I2C2_IRQHandler+0x16>
 8003d8a:	46c0      	nop			; (mov r8, r8)
 8003d8c:	200001c0 	.word	0x200001c0

08003d90 <LIS3MDL_create>:
#include "lis3mdl_driver.h"

//TODO we need to test the whole library
LIS3MDL_t * LIS3MDL_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *DRDY_Bus,uint16_t DRDY_Pin)
{
 8003d90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d92:	46ce      	mov	lr, r9
 8003d94:	4647      	mov	r7, r8
 8003d96:	4698      	mov	r8, r3
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b085      	sub	sp, #20
 8003d9c:	ab0c      	add	r3, sp, #48	; 0x30
 8003d9e:	881b      	ldrh	r3, [r3, #0]
 8003da0:	0007      	movs	r7, r0
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 8003da2:	2018      	movs	r0, #24
{
 8003da4:	000d      	movs	r5, r1
 8003da6:	0016      	movs	r6, r2
 8003da8:	4699      	mov	r9, r3
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 8003daa:	f000 fb6f 	bl	800448c <malloc>
	thisLIS3MDL->CS_GPIO_Bus = CS_Bus;
	thisLIS3MDL->CS_GPIO_Pin = CS_Pin;
	thisLIS3MDL->DRDY_GPIO_Bus = DRDY_Bus;
 8003dae:	4643      	mov	r3, r8
 8003db0:	6103      	str	r3, [r0, #16]
	thisLIS3MDL->DRDY_GPIO_Pin = DRDY_Pin;
 8003db2:	464b      	mov	r3, r9
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 8003db4:	0004      	movs	r4, r0
	thisLIS3MDL->spi_channel = spi_line;
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8003db6:	0031      	movs	r1, r6
	thisLIS3MDL->CS_GPIO_Bus = CS_Bus;
 8003db8:	6085      	str	r5, [r0, #8]
	thisLIS3MDL->CS_GPIO_Pin = CS_Pin;
 8003dba:	8186      	strh	r6, [r0, #12]
	thisLIS3MDL->DRDY_GPIO_Pin = DRDY_Pin;
 8003dbc:	8283      	strh	r3, [r0, #20]
	thisLIS3MDL->spi_channel = spi_line;
 8003dbe:	6047      	str	r7, [r0, #4]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	0028      	movs	r0, r5
 8003dc4:	f7fd fdc2 	bl	800194c <HAL_GPIO_WritePin>
}

void LIS3MDL_register_write(LIS3MDL_t *thisLIS3MDL, uint8_t thisRegister, uint8_t val)
{
	uint8_t out[2];
	out[0] = thisRegister;
 8003dc8:	4b4b      	ldr	r3, [pc, #300]	; (8003ef8 <LIS3MDL_create+0x168>)
 8003dca:	ad03      	add	r5, sp, #12
 8003dcc:	802b      	strh	r3, [r5, #0]
	out[1] = val;
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003dce:	89a1      	ldrh	r1, [r4, #12]
 8003dd0:	68a0      	ldr	r0, [r4, #8]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f7fd fdba 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003dd8:	230a      	movs	r3, #10
 8003dda:	0029      	movs	r1, r5
 8003ddc:	2202      	movs	r2, #2
 8003dde:	6860      	ldr	r0, [r4, #4]
 8003de0:	f7fe ffe6 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003de4:	89a1      	ldrh	r1, [r4, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	68a0      	ldr	r0, [r4, #8]
 8003dea:	f7fd fdaf 	bl	800194c <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8003dee:	2001      	movs	r0, #1
 8003df0:	f7fc fff4 	bl	8000ddc <HAL_Delay>
	out[0] = thisRegister;
 8003df4:	23f1      	movs	r3, #241	; 0xf1
 8003df6:	015b      	lsls	r3, r3, #5
 8003df8:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003dfa:	89a1      	ldrh	r1, [r4, #12]
 8003dfc:	68a0      	ldr	r0, [r4, #8]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	f7fd fda4 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003e04:	230a      	movs	r3, #10
 8003e06:	0029      	movs	r1, r5
 8003e08:	2202      	movs	r2, #2
 8003e0a:	6860      	ldr	r0, [r4, #4]
 8003e0c:	f7fe ffd0 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003e10:	89a1      	ldrh	r1, [r4, #12]
 8003e12:	68a0      	ldr	r0, [r4, #8]
 8003e14:	2201      	movs	r2, #1
 8003e16:	f7fd fd99 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <LIS3MDL_create+0x16c>)
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003e1c:	68a0      	ldr	r0, [r4, #8]
	out[0] = thisRegister;
 8003e1e:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003e20:	89a1      	ldrh	r1, [r4, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f7fd fd92 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003e28:	230a      	movs	r3, #10
 8003e2a:	0029      	movs	r1, r5
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	6860      	ldr	r0, [r4, #4]
 8003e30:	f7fe ffbe 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003e34:	89a1      	ldrh	r1, [r4, #12]
 8003e36:	68a0      	ldr	r0, [r4, #8]
 8003e38:	2201      	movs	r2, #1
 8003e3a:	f7fd fd87 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003e3e:	2322      	movs	r3, #34	; 0x22
 8003e40:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003e42:	89a1      	ldrh	r1, [r4, #12]
 8003e44:	68a0      	ldr	r0, [r4, #8]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f7fd fd80 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003e4c:	230a      	movs	r3, #10
 8003e4e:	0029      	movs	r1, r5
 8003e50:	2202      	movs	r2, #2
 8003e52:	6860      	ldr	r0, [r4, #4]
 8003e54:	f7fe ffac 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003e58:	89a1      	ldrh	r1, [r4, #12]
 8003e5a:	68a0      	ldr	r0, [r4, #8]
 8003e5c:	2201      	movs	r2, #1
 8003e5e:	f7fd fd75 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003e62:	4b27      	ldr	r3, [pc, #156]	; (8003f00 <LIS3MDL_create+0x170>)
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003e64:	68a0      	ldr	r0, [r4, #8]
	out[0] = thisRegister;
 8003e66:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003e68:	89a1      	ldrh	r1, [r4, #12]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f7fd fd6e 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003e70:	230a      	movs	r3, #10
 8003e72:	0029      	movs	r1, r5
 8003e74:	2202      	movs	r2, #2
 8003e76:	6860      	ldr	r0, [r4, #4]
 8003e78:	f7fe ff9a 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003e7c:	89a1      	ldrh	r1, [r4, #12]
 8003e7e:	68a0      	ldr	r0, [r4, #8]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f7fd fd63 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003e86:	2324      	movs	r3, #36	; 0x24
 8003e88:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003e8a:	89a1      	ldrh	r1, [r4, #12]
 8003e8c:	68a0      	ldr	r0, [r4, #8]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f7fd fd5c 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003e94:	230a      	movs	r3, #10
 8003e96:	0029      	movs	r1, r5
 8003e98:	2202      	movs	r2, #2
 8003e9a:	6860      	ldr	r0, [r4, #4]
 8003e9c:	f7fe ff88 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003ea0:	89a1      	ldrh	r1, [r4, #12]
 8003ea2:	68a0      	ldr	r0, [r4, #8]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f7fd fd51 	bl	800194c <HAL_GPIO_WritePin>
	uint8_t in[2] = {0 , 0};
 8003eaa:	2300      	movs	r3, #0
	out[0] = 128 | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8003eac:	ae02      	add	r6, sp, #8
	uint8_t in[2] = {0 , 0};
 8003eae:	802b      	strh	r3, [r5, #0]
	out[0] = 128 | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8003eb0:	338f      	adds	r3, #143	; 0x8f
 8003eb2:	8033      	strh	r3, [r6, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003eb4:	89a1      	ldrh	r1, [r4, #12]
 8003eb6:	68a0      	ldr	r0, [r4, #8]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f7fd fd47 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisLIS3MDL->spi_channel , out, in, 2, 10);
 8003ebe:	230a      	movs	r3, #10
 8003ec0:	002a      	movs	r2, r5
 8003ec2:	0031      	movs	r1, r6
 8003ec4:	9300      	str	r3, [sp, #0]
 8003ec6:	6860      	ldr	r0, [r4, #4]
 8003ec8:	3b08      	subs	r3, #8
 8003eca:	f7ff f897 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003ece:	2201      	movs	r2, #1
 8003ed0:	68a0      	ldr	r0, [r4, #8]
 8003ed2:	89a1      	ldrh	r1, [r4, #12]
 8003ed4:	f7fd fd3a 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 8003ed8:	786b      	ldrb	r3, [r5, #1]
}
 8003eda:	0020      	movs	r0, r4
			thisLIS3MDL->sensor_status = LIS3MDL_SENSOR_NOT_FOUND;
 8003edc:	3b3d      	subs	r3, #61	; 0x3d
 8003ede:	425a      	negs	r2, r3
 8003ee0:	4153      	adcs	r3, r2
 8003ee2:	220f      	movs	r2, #15
 8003ee4:	425b      	negs	r3, r3
 8003ee6:	4393      	bics	r3, r2
 8003ee8:	3330      	adds	r3, #48	; 0x30
 8003eea:	7023      	strb	r3, [r4, #0]
}
 8003eec:	b005      	add	sp, #20
 8003eee:	bcc0      	pop	{r6, r7}
 8003ef0:	46b9      	mov	r9, r7
 8003ef2:	46b0      	mov	r8, r6
 8003ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ef6:	46c0      	nop			; (mov r8, r8)
 8003ef8:	00000c21 	.word	0x00000c21
 8003efc:	00006021 	.word	0x00006021
 8003f00:	00000c23 	.word	0x00000c23

08003f04 <LIS3MDL_read_XYZ>:
		if (thisLIS3MDL->magneticFront == LIS3MDL_MAXREADINGS)
		{
			thisLIS3MDL->magneticFront = 0;
		}
	}*/
}
 8003f04:	4770      	bx	lr
 8003f06:	46c0      	nop			; (mov r8, r8)

08003f08 <MMC5983_create>:
#include "mmc5983_driver.h"
#include "main.h"

MMC5983_t * MMC5983_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 8003f08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f0a:	46ce      	mov	lr, r9
 8003f0c:	4647      	mov	r7, r8
 8003f0e:	4698      	mov	r8, r3
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b085      	sub	sp, #20
 8003f14:	ab0c      	add	r3, sp, #48	; 0x30
 8003f16:	881b      	ldrh	r3, [r3, #0]
 8003f18:	0007      	movs	r7, r0
	//TODO Do we want to use a series of #defines with | in between to describe configuration registers to make this function more human readable?

	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 8003f1a:	2018      	movs	r0, #24
{
 8003f1c:	000d      	movs	r5, r1
 8003f1e:	0016      	movs	r6, r2
 8003f20:	4699      	mov	r9, r3
	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 8003f22:	f000 fab3 	bl	800448c <malloc>
	thisMMC5983->CS_GPIO_Bus = CS_Bus;
	thisMMC5983->CS_GPIO_Pin = CS_Pin;
	thisMMC5983->INT_GPIO_Bus = INT_Bus;
 8003f26:	4643      	mov	r3, r8
 8003f28:	6083      	str	r3, [r0, #8]
	thisMMC5983->INT_GPIO_Pin = INT_Pin;
 8003f2a:	464b      	mov	r3, r9
	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 8003f2c:	0004      	movs	r4, r0
	thisMMC5983->spi_channel = spi_line;
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8003f2e:	0031      	movs	r1, r6
	thisMMC5983->CS_GPIO_Bus = CS_Bus;
 8003f30:	6105      	str	r5, [r0, #16]
	thisMMC5983->CS_GPIO_Pin = CS_Pin;
 8003f32:	8286      	strh	r6, [r0, #20]
	thisMMC5983->INT_GPIO_Pin = INT_Pin;
 8003f34:	8183      	strh	r3, [r0, #12]
	thisMMC5983->spi_channel = spi_line;
 8003f36:	6047      	str	r7, [r0, #4]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8003f38:	2201      	movs	r2, #1
 8003f3a:	0028      	movs	r0, r5
 8003f3c:	f7fd fd06 	bl	800194c <HAL_GPIO_WritePin>
}

void MMC5983_register_write(MMC5983_t *thisMMC5983, uint8_t thisRegister, uint8_t val)
{
	uint8_t out[2];
	out[0] = thisRegister;
 8003f40:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <MMC5983_create+0x138>)
 8003f42:	ad03      	add	r5, sp, #12
 8003f44:	802b      	strh	r3, [r5, #0]
	out[1] = val;
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003f46:	8aa1      	ldrh	r1, [r4, #20]
 8003f48:	6920      	ldr	r0, [r4, #16]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f7fd fcfe 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8003f50:	230a      	movs	r3, #10
 8003f52:	0029      	movs	r1, r5
 8003f54:	2202      	movs	r2, #2
 8003f56:	6860      	ldr	r0, [r4, #4]
 8003f58:	f7fe ff2a 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003f5c:	8aa1      	ldrh	r1, [r4, #20]
 8003f5e:	6920      	ldr	r0, [r4, #16]
 8003f60:	2201      	movs	r2, #1
 8003f62:	f7fd fcf3 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003f66:	230c      	movs	r3, #12
 8003f68:	270a      	movs	r7, #10
 8003f6a:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003f6c:	8aa1      	ldrh	r1, [r4, #20]
 8003f6e:	6920      	ldr	r0, [r4, #16]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f7fd fceb 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8003f76:	230a      	movs	r3, #10
 8003f78:	0029      	movs	r1, r5
 8003f7a:	2202      	movs	r2, #2
 8003f7c:	6860      	ldr	r0, [r4, #4]
 8003f7e:	f7fe ff17 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003f82:	8aa1      	ldrh	r1, [r4, #20]
 8003f84:	6920      	ldr	r0, [r4, #16]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f7fd fce0 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003f8c:	4b2d      	ldr	r3, [pc, #180]	; (8004044 <MMC5983_create+0x13c>)
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003f8e:	6920      	ldr	r0, [r4, #16]
	out[0] = thisRegister;
 8003f90:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003f92:	8aa1      	ldrh	r1, [r4, #20]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f7fd fcd9 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8003f9a:	230a      	movs	r3, #10
 8003f9c:	0029      	movs	r1, r5
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	6860      	ldr	r0, [r4, #4]
 8003fa2:	f7fe ff05 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003fa6:	8aa1      	ldrh	r1, [r4, #20]
 8003fa8:	6920      	ldr	r0, [r4, #16]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f7fd fcce 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003fb0:	802f      	strh	r7, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003fb2:	8aa1      	ldrh	r1, [r4, #20]
 8003fb4:	6920      	ldr	r0, [r4, #16]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f7fd fcc8 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8003fbc:	230a      	movs	r3, #10
 8003fbe:	0029      	movs	r1, r5
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	6860      	ldr	r0, [r4, #4]
 8003fc4:	f7fe fef4 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003fc8:	8aa1      	ldrh	r1, [r4, #20]
 8003fca:	6920      	ldr	r0, [r4, #16]
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f7fd fcbd 	bl	800194c <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8003fd2:	4b1d      	ldr	r3, [pc, #116]	; (8004048 <MMC5983_create+0x140>)
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003fd4:	6920      	ldr	r0, [r4, #16]
	out[0] = thisRegister;
 8003fd6:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003fd8:	8aa1      	ldrh	r1, [r4, #20]
 8003fda:	2200      	movs	r2, #0
 8003fdc:	f7fd fcb6 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8003fe0:	230a      	movs	r3, #10
 8003fe2:	0029      	movs	r1, r5
 8003fe4:	2202      	movs	r2, #2
 8003fe6:	6860      	ldr	r0, [r4, #4]
 8003fe8:	f7fe fee2 	bl	8002db0 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003fec:	8aa1      	ldrh	r1, [r4, #20]
 8003fee:	6920      	ldr	r0, [r4, #16]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f7fd fcab 	bl	800194c <HAL_GPIO_WritePin>
	uint8_t in[2] = {0 , 0};
 8003ff6:	2300      	movs	r3, #0
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8003ff8:	ae02      	add	r6, sp, #8
	uint8_t in[2] = {0 , 0};
 8003ffa:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8003ffc:	33af      	adds	r3, #175	; 0xaf
 8003ffe:	8033      	strh	r3, [r6, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8004000:	8aa1      	ldrh	r1, [r4, #20]
 8004002:	6920      	ldr	r0, [r4, #16]
 8004004:	2200      	movs	r2, #0
 8004006:	f7fd fca1 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 800400a:	2302      	movs	r3, #2
 800400c:	002a      	movs	r2, r5
 800400e:	0031      	movs	r1, r6
 8004010:	6860      	ldr	r0, [r4, #4]
 8004012:	9700      	str	r7, [sp, #0]
 8004014:	f7fe fff2 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8004018:	2201      	movs	r2, #1
 800401a:	6920      	ldr	r0, [r4, #16]
 800401c:	8aa1      	ldrh	r1, [r4, #20]
 800401e:	f7fd fc95 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 8004022:	786b      	ldrb	r3, [r5, #1]
}
 8004024:	0020      	movs	r0, r4
			thisMMC5983->sensor_status = MMC5983_SENSOR_NOT_FOUND;
 8004026:	3b30      	subs	r3, #48	; 0x30
 8004028:	425a      	negs	r2, r3
 800402a:	4153      	adcs	r3, r2
 800402c:	220f      	movs	r2, #15
 800402e:	425b      	negs	r3, r3
 8004030:	4393      	bics	r3, r2
 8004032:	3330      	adds	r3, #48	; 0x30
 8004034:	7023      	strb	r3, [r4, #0]
}
 8004036:	b005      	add	sp, #20
 8004038:	bcc0      	pop	{r6, r7}
 800403a:	46b9      	mov	r9, r7
 800403c:	46b0      	mov	r8, r6
 800403e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004040:	00000809 	.word	0x00000809
 8004044:	00002009 	.word	0x00002009
 8004048:	00000d0b 	.word	0x00000d0b

0800404c <MMC5983_read_XYZ>:
//-----------  we really do not need to send the second parameter since by having the address of the magnetometer object ----------
//------- we can calculate the offset of x y z data place holder there is risk on that approach if someone in future ------------
//--- add more eleman at the bigining of the structure or change the data type we need to consider those changes ---------
//----and after c++ 11 compiler can not guarantee the address of the first member of the struct is equal to the struct address -------------
uint8_t MMC5983_read_XYZ(MMC5983_t *thisMMC5983,uint16_t *data)
{
 800404c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800404e:	46ce      	mov	lr, r9
 8004050:	4647      	mov	r7, r8
 8004052:	b580      	push	{r7, lr}
	uint8_t in[2] = {0 , 0};
 8004054:	2300      	movs	r3, #0
{
 8004056:	b085      	sub	sp, #20
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004058:	466a      	mov	r2, sp
{
 800405a:	0004      	movs	r4, r0
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 800405c:	270a      	movs	r7, #10
	uint8_t in[2] = {0 , 0};
 800405e:	ad03      	add	r5, sp, #12
 8004060:	802b      	strh	r3, [r5, #0]
 8004062:	4698      	mov	r8, r3
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004064:	3388      	adds	r3, #136	; 0x88
 8004066:	8113      	strh	r3, [r2, #8]
{
 8004068:	000e      	movs	r6, r1
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800406a:	2200      	movs	r2, #0
 800406c:	8a81      	ldrh	r1, [r0, #20]
 800406e:	6900      	ldr	r0, [r0, #16]
 8004070:	f7fd fc6c 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8004074:	2302      	movs	r3, #2
 8004076:	002a      	movs	r2, r5
 8004078:	a902      	add	r1, sp, #8
 800407a:	6860      	ldr	r0, [r4, #4]
 800407c:	9700      	str	r7, [sp, #0]
 800407e:	f7fe ffbd 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8004082:	2201      	movs	r2, #1
 8004084:	8aa1      	ldrh	r1, [r4, #20]
 8004086:	6920      	ldr	r0, [r4, #16]
 8004088:	f7fd fc60 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 800408c:	2201      	movs	r2, #1
 800408e:	0011      	movs	r1, r2
 8004090:	786b      	ldrb	r3, [r5, #1]
	//TODO  need a better implimentation
	uint8_t sensor_status;
	sensor_status = MMC5983_register_read(thisMMC5983, MMC5983_STATUS);
	if(sensor_status & MMC5983_STATUS_Meas_M_Done )
 8004092:	4019      	ands	r1, r3
 8004094:	4689      	mov	r9, r1
 8004096:	421a      	tst	r2, r3
 8004098:	d105      	bne.n	80040a6 <MMC5983_read_XYZ+0x5a>
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
		return 1;
	}
	return 0;
}
 800409a:	4648      	mov	r0, r9
 800409c:	b005      	add	sp, #20
 800409e:	bcc0      	pop	{r6, r7}
 80040a0:	46b9      	mov	r9, r7
 80040a2:	46b0      	mov	r8, r6
 80040a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t in[2] = {0 , 0};
 80040a6:	4643      	mov	r3, r8
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 80040a8:	466a      	mov	r2, sp
	uint8_t in[2] = {0 , 0};
 80040aa:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 80040ac:	3380      	adds	r3, #128	; 0x80
 80040ae:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80040b0:	8aa1      	ldrh	r1, [r4, #20]
 80040b2:	2200      	movs	r2, #0
 80040b4:	6920      	ldr	r0, [r4, #16]
 80040b6:	f7fd fc49 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 80040ba:	2302      	movs	r3, #2
 80040bc:	002a      	movs	r2, r5
 80040be:	a902      	add	r1, sp, #8
 80040c0:	6860      	ldr	r0, [r4, #4]
 80040c2:	9700      	str	r7, [sp, #0]
 80040c4:	f7fe ff9a 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80040c8:	2201      	movs	r2, #1
 80040ca:	8aa1      	ldrh	r1, [r4, #20]
 80040cc:	6920      	ldr	r0, [r4, #16]
 80040ce:	f7fd fc3d 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 80040d2:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 80040d4:	466a      	mov	r2, sp
		data[0] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT0);
 80040d6:	8033      	strh	r3, [r6, #0]
	uint8_t in[2] = {0 , 0};
 80040d8:	4643      	mov	r3, r8
 80040da:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 80040dc:	3381      	adds	r3, #129	; 0x81
 80040de:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80040e0:	8aa1      	ldrh	r1, [r4, #20]
 80040e2:	2200      	movs	r2, #0
 80040e4:	6920      	ldr	r0, [r4, #16]
 80040e6:	f7fd fc31 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 80040ea:	2302      	movs	r3, #2
 80040ec:	002a      	movs	r2, r5
 80040ee:	a902      	add	r1, sp, #8
 80040f0:	6860      	ldr	r0, [r4, #4]
 80040f2:	9700      	str	r7, [sp, #0]
 80040f4:	f7fe ff82 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80040f8:	2201      	movs	r2, #1
 80040fa:	8aa1      	ldrh	r1, [r4, #20]
 80040fc:	6920      	ldr	r0, [r4, #16]
 80040fe:	f7fd fc25 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 8004102:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004104:	466a      	mov	r2, sp
		data[1] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT1);
 8004106:	8073      	strh	r3, [r6, #2]
	uint8_t in[2] = {0 , 0};
 8004108:	4643      	mov	r3, r8
 800410a:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 800410c:	3382      	adds	r3, #130	; 0x82
 800410e:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8004110:	8aa1      	ldrh	r1, [r4, #20]
 8004112:	2200      	movs	r2, #0
 8004114:	6920      	ldr	r0, [r4, #16]
 8004116:	f7fd fc19 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 800411a:	2302      	movs	r3, #2
 800411c:	002a      	movs	r2, r5
 800411e:	a902      	add	r1, sp, #8
 8004120:	6860      	ldr	r0, [r4, #4]
 8004122:	9700      	str	r7, [sp, #0]
 8004124:	f7fe ff6a 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8004128:	2201      	movs	r2, #1
 800412a:	8aa1      	ldrh	r1, [r4, #20]
 800412c:	6920      	ldr	r0, [r4, #16]
 800412e:	f7fd fc0d 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 8004132:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004134:	466a      	mov	r2, sp
		data[2] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT0);
 8004136:	80b3      	strh	r3, [r6, #4]
	uint8_t in[2] = {0 , 0};
 8004138:	4643      	mov	r3, r8
 800413a:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 800413c:	3383      	adds	r3, #131	; 0x83
 800413e:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8004140:	8aa1      	ldrh	r1, [r4, #20]
 8004142:	2200      	movs	r2, #0
 8004144:	6920      	ldr	r0, [r4, #16]
 8004146:	f7fd fc01 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 800414a:	2302      	movs	r3, #2
 800414c:	002a      	movs	r2, r5
 800414e:	a902      	add	r1, sp, #8
 8004150:	6860      	ldr	r0, [r4, #4]
 8004152:	9700      	str	r7, [sp, #0]
 8004154:	f7fe ff52 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8004158:	2201      	movs	r2, #1
 800415a:	8aa1      	ldrh	r1, [r4, #20]
 800415c:	6920      	ldr	r0, [r4, #16]
 800415e:	f7fd fbf5 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 8004162:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004164:	466a      	mov	r2, sp
		data[3] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT1);
 8004166:	80f3      	strh	r3, [r6, #6]
	uint8_t in[2] = {0 , 0};
 8004168:	4643      	mov	r3, r8
 800416a:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 800416c:	3384      	adds	r3, #132	; 0x84
 800416e:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8004170:	8aa1      	ldrh	r1, [r4, #20]
 8004172:	2200      	movs	r2, #0
 8004174:	6920      	ldr	r0, [r4, #16]
 8004176:	f7fd fbe9 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 800417a:	2302      	movs	r3, #2
 800417c:	002a      	movs	r2, r5
 800417e:	a902      	add	r1, sp, #8
 8004180:	6860      	ldr	r0, [r4, #4]
 8004182:	9700      	str	r7, [sp, #0]
 8004184:	f7fe ff3a 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8004188:	2201      	movs	r2, #1
 800418a:	8aa1      	ldrh	r1, [r4, #20]
 800418c:	6920      	ldr	r0, [r4, #16]
 800418e:	f7fd fbdd 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 8004192:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8004194:	466a      	mov	r2, sp
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
 8004196:	8133      	strh	r3, [r6, #8]
	uint8_t in[2] = {0 , 0};
 8004198:	4643      	mov	r3, r8
 800419a:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 800419c:	3385      	adds	r3, #133	; 0x85
 800419e:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80041a0:	8aa1      	ldrh	r1, [r4, #20]
 80041a2:	2200      	movs	r2, #0
 80041a4:	6920      	ldr	r0, [r4, #16]
 80041a6:	f7fd fbd1 	bl	800194c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 80041aa:	2302      	movs	r3, #2
 80041ac:	002a      	movs	r2, r5
 80041ae:	a902      	add	r1, sp, #8
 80041b0:	6860      	ldr	r0, [r4, #4]
 80041b2:	9700      	str	r7, [sp, #0]
 80041b4:	f7fe ff22 	bl	8002ffc <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80041b8:	2201      	movs	r2, #1
 80041ba:	8aa1      	ldrh	r1, [r4, #20]
 80041bc:	6920      	ldr	r0, [r4, #16]
 80041be:	f7fd fbc5 	bl	800194c <HAL_GPIO_WritePin>
	result = in[1];
 80041c2:	786b      	ldrb	r3, [r5, #1]
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
 80041c4:	8173      	strh	r3, [r6, #10]
		return 1;
 80041c6:	e768      	b.n	800409a <MMC5983_read_XYZ+0x4e>

080041c8 <module_system_init>:
extern TIM_HandleTypeDef htim21;
extern TIM_HandleTypeDef htim22;
extern System my_sys;

void module_system_init(System *thisSystem)
{
 80041c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	my_sys.data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 80041ca:	2380      	movs	r3, #128	; 0x80
 80041cc:	25a0      	movs	r5, #160	; 0xa0
{
 80041ce:	b085      	sub	sp, #20
	my_sys.data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 80041d0:	05ed      	lsls	r5, r5, #23
 80041d2:	01db      	lsls	r3, r3, #7
 80041d4:	002a      	movs	r2, r5
 80041d6:	21ff      	movs	r1, #255	; 0xff
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	482c      	ldr	r0, [pc, #176]	; (800428c <module_system_init+0xc4>)
 80041dc:	2301      	movs	r3, #1
 80041de:	9500      	str	r5, [sp, #0]
 80041e0:	f7ff fbea 	bl	80039b8 <internal_bus_create>
											BUS_CLK_GPIO_Port, BUS_CLK_Pin,
											BUS_C1_GPIO_Port, BUS_C1_Pin);

	//GlobalTimerInit(&thisSystem->GlobalTimer);

	uint8_t temp_data[4]={0,0,0,0};
 80041e4:	2300      	movs	r3, #0
	my_sys.data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 80041e6:	4c2a      	ldr	r4, [pc, #168]	; (8004290 <module_system_init+0xc8>)
	uint8_t i2c_new_address[4]={0,0,0,0};

	  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 80041e8:	2201      	movs	r2, #1
 80041ea:	2140      	movs	r1, #64	; 0x40
	my_sys.data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 80041ec:	6320      	str	r0, [r4, #48]	; 0x30
	  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 80041ee:	0028      	movs	r0, r5
	uint8_t temp_data[4]={0,0,0,0};
 80041f0:	9302      	str	r3, [sp, #8]
	uint8_t i2c_new_address[4]={0,0,0,0};
 80041f2:	9303      	str	r3, [sp, #12]
	  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 80041f4:	f7fd fbaa 	bl	800194c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 80041f8:	2201      	movs	r2, #1
 80041fa:	2180      	movs	r1, #128	; 0x80
 80041fc:	0028      	movs	r0, r5
 80041fe:	f7fd fba5 	bl	800194c <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8004202:	2180      	movs	r1, #128	; 0x80
 8004204:	2201      	movs	r2, #1
 8004206:	0028      	movs	r0, r5
	uint8_t temp_data[4]={0,0,0,0};
 8004208:	ae02      	add	r6, sp, #8
	  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 800420a:	0049      	lsls	r1, r1, #1
 800420c:	f7fd fb9e 	bl	800194c <HAL_GPIO_WritePin>
	EEPROM_load(EEPROM_FIRST_TIME_INITIATION, temp_data, 1);  //TODO  this is bungee jumping without rope we assume everything if good no error check
 8004210:	2201      	movs	r2, #1
 8004212:	0031      	movs	r1, r6
 8004214:	481f      	ldr	r0, [pc, #124]	; (8004294 <module_system_init+0xcc>)
 8004216:	f7ff fd05 	bl	8003c24 <EEPROM_load>
	if (temp_data[0] == EEPROM_FIRST_TIME_BOOT_MARKER )
 800421a:	7833      	ldrb	r3, [r6, #0]
 800421c:	2b21      	cmp	r3, #33	; 0x21
 800421e:	d029      	beq.n	8004274 <module_system_init+0xac>
		EEPROM_load(EEPROM_I2C_ADDR, i2c_new_address, 1);
		my_sys.i2c_line = I2C_interface_create(&hi2c2,i2c_new_address[0]);
	}
	else
	{
		my_sys.i2c_line = I2C_interface_create(&hi2c2,100 );   //TDOD hard code this to correct default value
 8004220:	2164      	movs	r1, #100	; 0x64
 8004222:	481d      	ldr	r0, [pc, #116]	; (8004298 <module_system_init+0xd0>)
 8004224:	f7ff fd60 	bl	8003ce8 <I2C_interface_create>
 8004228:	62e0      	str	r0, [r4, #44]	; 0x2c
	}
	// init sensors
	my_sys.sensors[0] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_A_CS_GPIO_Port , SPI_A_CS_Pin , mag_int_a_GPIO_Port , mag_int_a_Pin);
 800422a:	25a0      	movs	r5, #160	; 0xa0
 800422c:	2780      	movs	r7, #128	; 0x80
 800422e:	4e1b      	ldr	r6, [pc, #108]	; (800429c <module_system_init+0xd4>)
 8004230:	4b16      	ldr	r3, [pc, #88]	; (800428c <module_system_init+0xc4>)
 8004232:	05ed      	lsls	r5, r5, #23
 8004234:	007f      	lsls	r7, r7, #1
 8004236:	002a      	movs	r2, r5
 8004238:	0031      	movs	r1, r6
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	9701      	str	r7, [sp, #4]
 800423e:	2340      	movs	r3, #64	; 0x40
 8004240:	2014      	movs	r0, #20
 8004242:	f7ff fcff 	bl	8003c44 <magnetometer_create>
	my_sys.sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
 8004246:	2308      	movs	r3, #8
	my_sys.sensors[0] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_A_CS_GPIO_Port , SPI_A_CS_Pin , mag_int_a_GPIO_Port , mag_int_a_Pin);
 8004248:	6220      	str	r0, [r4, #32]
	my_sys.sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
 800424a:	002a      	movs	r2, r5
 800424c:	0031      	movs	r1, r6
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	9500      	str	r5, [sp, #0]
 8004252:	3378      	adds	r3, #120	; 0x78
 8004254:	2014      	movs	r0, #20
 8004256:	f7ff fcf5 	bl	8003c44 <magnetometer_create>
	my_sys.sensors[2] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_C_CS_GPIO_Port , SPI_C_CS_Pin , mag_int_c_GPIO_Port , mag_int_c_Pin);
 800425a:	2310      	movs	r3, #16
	my_sys.sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
 800425c:	6260      	str	r0, [r4, #36]	; 0x24
	my_sys.sensors[2] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,&hspi1 , SPI_C_CS_GPIO_Port , SPI_C_CS_Pin , mag_int_c_GPIO_Port , mag_int_c_Pin);
 800425e:	002a      	movs	r2, r5
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	0031      	movs	r1, r6
 8004264:	003b      	movs	r3, r7
 8004266:	9500      	str	r5, [sp, #0]
 8004268:	2014      	movs	r0, #20
 800426a:	f7ff fceb 	bl	8003c44 <magnetometer_create>
 800426e:	62a0      	str	r0, [r4, #40]	; 0x28

	return;
}
 8004270:	b005      	add	sp, #20
 8004272:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EEPROM_load(EEPROM_I2C_ADDR, i2c_new_address, 1);
 8004274:	2201      	movs	r2, #1
 8004276:	a903      	add	r1, sp, #12
 8004278:	4809      	ldr	r0, [pc, #36]	; (80042a0 <module_system_init+0xd8>)
 800427a:	f7ff fcd3 	bl	8003c24 <EEPROM_load>
		my_sys.i2c_line = I2C_interface_create(&hi2c2,i2c_new_address[0]);
 800427e:	466b      	mov	r3, sp
 8004280:	4805      	ldr	r0, [pc, #20]	; (8004298 <module_system_init+0xd0>)
 8004282:	7b19      	ldrb	r1, [r3, #12]
 8004284:	f7ff fd30 	bl	8003ce8 <I2C_interface_create>
 8004288:	62e0      	str	r0, [r4, #44]	; 0x2c
 800428a:	e7ce      	b.n	800422a <module_system_init+0x62>
 800428c:	50000400 	.word	0x50000400
 8004290:	20000140 	.word	0x20000140
 8004294:	08080020 	.word	0x08080020
 8004298:	200000f4 	.word	0x200000f4
 800429c:	200001c4 	.word	0x200001c4
 80042a0:	08080010 	.word	0x08080010

080042a4 <state_machine>:

void state_machine(System *thisSystem)
{
 80042a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042a6:	46ce      	mov	lr, r9
 80042a8:	2612      	movs	r6, #18
 80042aa:	b500      	push	{lr}
 80042ac:	4b5c      	ldr	r3, [pc, #368]	; (8004420 <state_machine+0x17c>)
 80042ae:	b08c      	sub	sp, #48	; 0x30
	uint8_t testData[40];// = {255,0,0,100,0,1,0,2,0,3,0,0,0,200,0,4,0,5,0,6,0,0,0,30,0,7,0,8,0,9,255};  //TODO remove after Link data output to magnetometer memory instead
	int read_permit =0;
 80042b0:	2700      	movs	r7, #0
 80042b2:	4699      	mov	r9, r3
 80042b4:	4d5b      	ldr	r5, [pc, #364]	; (8004424 <state_machine+0x180>)
 80042b6:	ac02      	add	r4, sp, #8
 80042b8:	446e      	add	r6, sp
 80042ba:	e003      	b.n	80042c4 <state_machine+0x20>
				testData[28] = *((uint8_t*)my_sys.sensors[2]->Readings + 4);
				testData[29] = *((uint8_t*)my_sys.sensors[2]->Readings + 5);
			}
		}
		//------------------------------------------
		if(my_sys.i2c_line->buffer_index)
 80042bc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80042be:	781a      	ldrb	r2, [r3, #0]
 80042c0:	2a00      	cmp	r2, #0
 80042c2:	d149      	bne.n	8004358 <state_machine+0xb4>
		if(read_permit)
 80042c4:	2f00      	cmp	r7, #0
 80042c6:	d0f9      	beq.n	80042bc <state_machine+0x18>
			if(magnetometer_read(my_sys.sensors[0]))
 80042c8:	6a28      	ldr	r0, [r5, #32]
 80042ca:	f7ff fcf9 	bl	8003cc0 <magnetometer_read>
 80042ce:	2800      	cmp	r0, #0
 80042d0:	d00f      	beq.n	80042f2 <state_machine+0x4e>
				(*(uint32_t *)(testData + 0))++;
 80042d2:	9b02      	ldr	r3, [sp, #8]
 80042d4:	3301      	adds	r3, #1
 80042d6:	9302      	str	r3, [sp, #8]
				testData[4] = *((uint8_t*)my_sys.sensors[0]->Readings + 0);
 80042d8:	6a2b      	ldr	r3, [r5, #32]
 80042da:	7a1a      	ldrb	r2, [r3, #8]
 80042dc:	7122      	strb	r2, [r4, #4]
				testData[5] = *((uint8_t*)my_sys.sensors[0]->Readings + 1);
 80042de:	7a5a      	ldrb	r2, [r3, #9]
 80042e0:	7162      	strb	r2, [r4, #5]
				testData[6] = *((uint8_t*)my_sys.sensors[0]->Readings + 2);
 80042e2:	7a9a      	ldrb	r2, [r3, #10]
 80042e4:	71a2      	strb	r2, [r4, #6]
				testData[7] = *((uint8_t*)my_sys.sensors[0]->Readings + 3);
 80042e6:	7ada      	ldrb	r2, [r3, #11]
 80042e8:	71e2      	strb	r2, [r4, #7]
				testData[8] = *((uint8_t*)my_sys.sensors[0]->Readings + 4);
 80042ea:	7b1a      	ldrb	r2, [r3, #12]
 80042ec:	7222      	strb	r2, [r4, #8]
				testData[9] = *((uint8_t*)my_sys.sensors[0]->Readings + 5);
 80042ee:	7b5b      	ldrb	r3, [r3, #13]
 80042f0:	7263      	strb	r3, [r4, #9]
			if(magnetometer_read(my_sys.sensors[1]))
 80042f2:	6a68      	ldr	r0, [r5, #36]	; 0x24
 80042f4:	f7ff fce4 	bl	8003cc0 <magnetometer_read>
 80042f8:	2800      	cmp	r0, #0
 80042fa:	d014      	beq.n	8004326 <state_machine+0x82>
				(*(uint32_t *)(testData + 10))++;
 80042fc:	8873      	ldrh	r3, [r6, #2]
 80042fe:	8832      	ldrh	r2, [r6, #0]
 8004300:	041b      	lsls	r3, r3, #16
 8004302:	4313      	orrs	r3, r2
 8004304:	3301      	adds	r3, #1
 8004306:	8033      	strh	r3, [r6, #0]
 8004308:	0c1b      	lsrs	r3, r3, #16
 800430a:	8073      	strh	r3, [r6, #2]
				testData[14] = *((uint8_t*)my_sys.sensors[1]->Readings + 0);
 800430c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800430e:	7a1a      	ldrb	r2, [r3, #8]
 8004310:	73a2      	strb	r2, [r4, #14]
				testData[15] = *((uint8_t*)my_sys.sensors[1]->Readings + 1);
 8004312:	7a5a      	ldrb	r2, [r3, #9]
 8004314:	73e2      	strb	r2, [r4, #15]
				testData[16] = *((uint8_t*)my_sys.sensors[1]->Readings + 2);
 8004316:	7a9a      	ldrb	r2, [r3, #10]
 8004318:	7422      	strb	r2, [r4, #16]
				testData[17] = *((uint8_t*)my_sys.sensors[1]->Readings + 3);
 800431a:	7ada      	ldrb	r2, [r3, #11]
 800431c:	7462      	strb	r2, [r4, #17]
				testData[18] = *((uint8_t*)my_sys.sensors[1]->Readings + 4);
 800431e:	7b1a      	ldrb	r2, [r3, #12]
 8004320:	74a2      	strb	r2, [r4, #18]
				testData[19] = *((uint8_t*)my_sys.sensors[1]->Readings + 5);
 8004322:	7b5b      	ldrb	r3, [r3, #13]
 8004324:	74e3      	strb	r3, [r4, #19]
			if(magnetometer_read(my_sys.sensors[2]))
 8004326:	6aa8      	ldr	r0, [r5, #40]	; 0x28
 8004328:	f7ff fcca 	bl	8003cc0 <magnetometer_read>
 800432c:	2800      	cmp	r0, #0
 800432e:	d0c5      	beq.n	80042bc <state_machine+0x18>
				(*(uint32_t *)(testData + 20))++;
 8004330:	9b07      	ldr	r3, [sp, #28]
 8004332:	3301      	adds	r3, #1
 8004334:	9307      	str	r3, [sp, #28]
				testData[24] = *((uint8_t*)my_sys.sensors[2]->Readings + 0);
 8004336:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8004338:	7a1a      	ldrb	r2, [r3, #8]
 800433a:	7622      	strb	r2, [r4, #24]
				testData[25] = *((uint8_t*)my_sys.sensors[2]->Readings + 1);
 800433c:	7a5a      	ldrb	r2, [r3, #9]
 800433e:	7662      	strb	r2, [r4, #25]
				testData[26] = *((uint8_t*)my_sys.sensors[2]->Readings + 2);
 8004340:	7a9a      	ldrb	r2, [r3, #10]
 8004342:	76a2      	strb	r2, [r4, #26]
				testData[27] = *((uint8_t*)my_sys.sensors[2]->Readings + 3);
 8004344:	7ada      	ldrb	r2, [r3, #11]
 8004346:	76e2      	strb	r2, [r4, #27]
				testData[28] = *((uint8_t*)my_sys.sensors[2]->Readings + 4);
 8004348:	7b1a      	ldrb	r2, [r3, #12]
 800434a:	7722      	strb	r2, [r4, #28]
				testData[29] = *((uint8_t*)my_sys.sensors[2]->Readings + 5);
 800434c:	7b5b      	ldrb	r3, [r3, #13]
 800434e:	7763      	strb	r3, [r4, #29]
		if(my_sys.i2c_line->buffer_index)
 8004350:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004352:	781a      	ldrb	r2, [r3, #0]
 8004354:	2a00      	cmp	r2, #0
 8004356:	d0b5      	beq.n	80042c4 <state_machine+0x20>
		{
			switch(my_sys.i2c_line->receiveBuffer[0])
 8004358:	785a      	ldrb	r2, [r3, #1]
 800435a:	3a0a      	subs	r2, #10
 800435c:	b2d2      	uxtb	r2, r2
 800435e:	2a14      	cmp	r2, #20
 8004360:	d80a      	bhi.n	8004378 <state_machine+0xd4>
 8004362:	4649      	mov	r1, r9
 8004364:	0092      	lsls	r2, r2, #2
 8004366:	588a      	ldr	r2, [r1, r2]
 8004368:	4697      	mov	pc, r2
					break;
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_OFF:
				{
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 800436a:	2201      	movs	r2, #1
 800436c:	20a0      	movs	r0, #160	; 0xa0
 800436e:	2180      	movs	r1, #128	; 0x80
 8004370:	05c0      	lsls	r0, r0, #23
 8004372:	f7fd faeb 	bl	800194c <HAL_GPIO_WritePin>
					break;
 8004376:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				}
			}
			//-------- if we get any data higher than 0x80  it mean it is a new address
			if ( my_sys.i2c_line->receiveBuffer[0] > I2C_PACKET_SET_NEW_ADDRESS )
 8004378:	785a      	ldrb	r2, [r3, #1]
 800437a:	2a80      	cmp	r2, #128	; 0x80
 800437c:	d910      	bls.n	80043a0 <state_machine+0xfc>
			{
				uint8_t i2c_new_address[4]={3,3,3,3};
 800437e:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <state_machine+0x184>)
				uint8_t temp_data[4]={0,0,0,0};
				i2c_new_address[0] =  (uint8_t)my_sys.i2c_line->receiveBuffer[0] & 0x7f;
				if( !EEPROM_save(EEPROM_I2C_ADDR, i2c_new_address, 1) )
 8004380:	4669      	mov	r1, sp
				uint8_t i2c_new_address[4]={3,3,3,3};
 8004382:	9200      	str	r2, [sp, #0]
				uint8_t temp_data[4]={0,0,0,0};
 8004384:	2200      	movs	r2, #0
 8004386:	9201      	str	r2, [sp, #4]
				i2c_new_address[0] =  (uint8_t)my_sys.i2c_line->receiveBuffer[0] & 0x7f;
 8004388:	785a      	ldrb	r2, [r3, #1]
 800438a:	237f      	movs	r3, #127	; 0x7f
 800438c:	4013      	ands	r3, r2
 800438e:	466a      	mov	r2, sp
				if( !EEPROM_save(EEPROM_I2C_ADDR, i2c_new_address, 1) )
 8004390:	4826      	ldr	r0, [pc, #152]	; (800442c <state_machine+0x188>)
				i2c_new_address[0] =  (uint8_t)my_sys.i2c_line->receiveBuffer[0] & 0x7f;
 8004392:	7013      	strb	r3, [r2, #0]
				if( !EEPROM_save(EEPROM_I2C_ADDR, i2c_new_address, 1) )
 8004394:	2201      	movs	r2, #1
 8004396:	f7ff fc27 	bl	8003be8 <EEPROM_save>
 800439a:	2800      	cmp	r0, #0
 800439c:	d103      	bne.n	80043a6 <state_machine+0x102>
					if( !EEPROM_save(EEPROM_FIRST_TIME_INITIATION, temp_data,1) )  //TODO  this is bungee jumping without rope we assume everything if good no error check
					{
						//TODO we failed to saved
						//this is bad we can kill the whole system master micro should now about this
						//we donot have any valid address for now we go to idle mode we never activate common bus
					}
 800439e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				}
			}
		my_sys.i2c_line->buffer_index =0;
 80043a0:	2200      	movs	r2, #0
 80043a2:	701a      	strb	r2, [r3, #0]
 80043a4:	e78e      	b.n	80042c4 <state_machine+0x20>
					temp_data[0] = EEPROM_FIRST_TIME_BOOT_MARKER;
 80043a6:	466a      	mov	r2, sp
 80043a8:	2321      	movs	r3, #33	; 0x21
					if( !EEPROM_save(EEPROM_FIRST_TIME_INITIATION, temp_data,1) )  //TODO  this is bungee jumping without rope we assume everything if good no error check
 80043aa:	a901      	add	r1, sp, #4
					temp_data[0] = EEPROM_FIRST_TIME_BOOT_MARKER;
 80043ac:	7113      	strb	r3, [r2, #4]
					if( !EEPROM_save(EEPROM_FIRST_TIME_INITIATION, temp_data,1) )  //TODO  this is bungee jumping without rope we assume everything if good no error check
 80043ae:	4820      	ldr	r0, [pc, #128]	; (8004430 <state_machine+0x18c>)
 80043b0:	2201      	movs	r2, #1
 80043b2:	f7ff fc19 	bl	8003be8 <EEPROM_save>
 80043b6:	e7f2      	b.n	800439e <state_machine+0xfa>
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 80043b8:	2200      	movs	r2, #0
 80043ba:	e7d7      	b.n	800436c <state_machine+0xc8>
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	20a0      	movs	r0, #160	; 0xa0
 80043c0:	2140      	movs	r1, #64	; 0x40
 80043c2:	05c0      	lsls	r0, r0, #23
 80043c4:	f7fd fac2 	bl	800194c <HAL_GPIO_WritePin>
					break;
 80043c8:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80043ca:	e7d5      	b.n	8004378 <state_machine+0xd4>
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 80043cc:	2200      	movs	r2, #0
 80043ce:	e7f6      	b.n	80043be <state_machine+0x11a>
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 80043d0:	2201      	movs	r2, #1
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	20a0      	movs	r0, #160	; 0xa0
 80043d6:	0049      	lsls	r1, r1, #1
 80043d8:	05c0      	lsls	r0, r0, #23
 80043da:	f7fd fab7 	bl	800194c <HAL_GPIO_WritePin>
					break;
 80043de:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80043e0:	e7ca      	b.n	8004378 <state_machine+0xd4>
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 80043e2:	2200      	movs	r2, #0
 80043e4:	e7f5      	b.n	80043d2 <state_machine+0x12e>
					 HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_SET);
 80043e6:	2201      	movs	r2, #1
 80043e8:	2180      	movs	r1, #128	; 0x80
 80043ea:	4812      	ldr	r0, [pc, #72]	; (8004434 <state_machine+0x190>)
 80043ec:	01c9      	lsls	r1, r1, #7
 80043ee:	f7fd faad 	bl	800194c <HAL_GPIO_WritePin>
					break;
 80043f2:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 80043f4:	e7c0      	b.n	8004378 <state_machine+0xd4>
					  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_RESET);
 80043f6:	2200      	movs	r2, #0
 80043f8:	e7f6      	b.n	80043e8 <state_machine+0x144>
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_SET);
 80043fa:	2201      	movs	r2, #1
 80043fc:	2180      	movs	r1, #128	; 0x80
 80043fe:	480d      	ldr	r0, [pc, #52]	; (8004434 <state_machine+0x190>)
 8004400:	0209      	lsls	r1, r1, #8
 8004402:	f7fd faa3 	bl	800194c <HAL_GPIO_WritePin>
					break;
 8004406:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004408:	e7b6      	b.n	8004378 <state_machine+0xd4>
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 800440a:	2200      	movs	r2, #0
 800440c:	e7f6      	b.n	80043fc <state_machine+0x158>
					internal_bus_write_data_frame(my_sys.data_bus,testData,31);
 800440e:	221f      	movs	r2, #31
 8004410:	0021      	movs	r1, r4
 8004412:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004414:	f7ff fb90 	bl	8003b38 <internal_bus_write_data_frame>
					break;
 8004418:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800441a:	e7ad      	b.n	8004378 <state_machine+0xd4>
			switch(my_sys.i2c_line->receiveBuffer[0])
 800441c:	2701      	movs	r7, #1
 800441e:	e7ab      	b.n	8004378 <state_machine+0xd4>
 8004420:	0800464c 	.word	0x0800464c
 8004424:	20000140 	.word	0x20000140
 8004428:	03030303 	.word	0x03030303
 800442c:	08080010 	.word	0x08080010
 8004430:	08080020 	.word	0x08080020
 8004434:	50000800 	.word	0x50000800

08004438 <__errno>:
 8004438:	4b01      	ldr	r3, [pc, #4]	; (8004440 <__errno+0x8>)
 800443a:	6818      	ldr	r0, [r3, #0]
 800443c:	4770      	bx	lr
 800443e:	46c0      	nop			; (mov r8, r8)
 8004440:	2000000c 	.word	0x2000000c

08004444 <__libc_init_array>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	2600      	movs	r6, #0
 8004448:	4d0c      	ldr	r5, [pc, #48]	; (800447c <__libc_init_array+0x38>)
 800444a:	4c0d      	ldr	r4, [pc, #52]	; (8004480 <__libc_init_array+0x3c>)
 800444c:	1b64      	subs	r4, r4, r5
 800444e:	10a4      	asrs	r4, r4, #2
 8004450:	42a6      	cmp	r6, r4
 8004452:	d109      	bne.n	8004468 <__libc_init_array+0x24>
 8004454:	2600      	movs	r6, #0
 8004456:	f000 f8ad 	bl	80045b4 <_init>
 800445a:	4d0a      	ldr	r5, [pc, #40]	; (8004484 <__libc_init_array+0x40>)
 800445c:	4c0a      	ldr	r4, [pc, #40]	; (8004488 <__libc_init_array+0x44>)
 800445e:	1b64      	subs	r4, r4, r5
 8004460:	10a4      	asrs	r4, r4, #2
 8004462:	42a6      	cmp	r6, r4
 8004464:	d105      	bne.n	8004472 <__libc_init_array+0x2e>
 8004466:	bd70      	pop	{r4, r5, r6, pc}
 8004468:	00b3      	lsls	r3, r6, #2
 800446a:	58eb      	ldr	r3, [r5, r3]
 800446c:	4798      	blx	r3
 800446e:	3601      	adds	r6, #1
 8004470:	e7ee      	b.n	8004450 <__libc_init_array+0xc>
 8004472:	00b3      	lsls	r3, r6, #2
 8004474:	58eb      	ldr	r3, [r5, r3]
 8004476:	4798      	blx	r3
 8004478:	3601      	adds	r6, #1
 800447a:	e7f2      	b.n	8004462 <__libc_init_array+0x1e>
 800447c:	080046a8 	.word	0x080046a8
 8004480:	080046a8 	.word	0x080046a8
 8004484:	080046a8 	.word	0x080046a8
 8004488:	080046ac 	.word	0x080046ac

0800448c <malloc>:
 800448c:	b510      	push	{r4, lr}
 800448e:	4b03      	ldr	r3, [pc, #12]	; (800449c <malloc+0x10>)
 8004490:	0001      	movs	r1, r0
 8004492:	6818      	ldr	r0, [r3, #0]
 8004494:	f000 f80c 	bl	80044b0 <_malloc_r>
 8004498:	bd10      	pop	{r4, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	2000000c 	.word	0x2000000c

080044a0 <memset>:
 80044a0:	0003      	movs	r3, r0
 80044a2:	1882      	adds	r2, r0, r2
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d100      	bne.n	80044aa <memset+0xa>
 80044a8:	4770      	bx	lr
 80044aa:	7019      	strb	r1, [r3, #0]
 80044ac:	3301      	adds	r3, #1
 80044ae:	e7f9      	b.n	80044a4 <memset+0x4>

080044b0 <_malloc_r>:
 80044b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044b2:	2303      	movs	r3, #3
 80044b4:	1ccd      	adds	r5, r1, #3
 80044b6:	439d      	bics	r5, r3
 80044b8:	3508      	adds	r5, #8
 80044ba:	0006      	movs	r6, r0
 80044bc:	2d0c      	cmp	r5, #12
 80044be:	d21f      	bcs.n	8004500 <_malloc_r+0x50>
 80044c0:	250c      	movs	r5, #12
 80044c2:	42a9      	cmp	r1, r5
 80044c4:	d81e      	bhi.n	8004504 <_malloc_r+0x54>
 80044c6:	0030      	movs	r0, r6
 80044c8:	f000 f862 	bl	8004590 <__malloc_lock>
 80044cc:	4925      	ldr	r1, [pc, #148]	; (8004564 <_malloc_r+0xb4>)
 80044ce:	680a      	ldr	r2, [r1, #0]
 80044d0:	0014      	movs	r4, r2
 80044d2:	2c00      	cmp	r4, #0
 80044d4:	d11a      	bne.n	800450c <_malloc_r+0x5c>
 80044d6:	4f24      	ldr	r7, [pc, #144]	; (8004568 <_malloc_r+0xb8>)
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <_malloc_r+0x38>
 80044de:	0021      	movs	r1, r4
 80044e0:	0030      	movs	r0, r6
 80044e2:	f000 f843 	bl	800456c <_sbrk_r>
 80044e6:	6038      	str	r0, [r7, #0]
 80044e8:	0029      	movs	r1, r5
 80044ea:	0030      	movs	r0, r6
 80044ec:	f000 f83e 	bl	800456c <_sbrk_r>
 80044f0:	1c43      	adds	r3, r0, #1
 80044f2:	d12b      	bne.n	800454c <_malloc_r+0x9c>
 80044f4:	230c      	movs	r3, #12
 80044f6:	0030      	movs	r0, r6
 80044f8:	6033      	str	r3, [r6, #0]
 80044fa:	f000 f851 	bl	80045a0 <__malloc_unlock>
 80044fe:	e003      	b.n	8004508 <_malloc_r+0x58>
 8004500:	2d00      	cmp	r5, #0
 8004502:	dade      	bge.n	80044c2 <_malloc_r+0x12>
 8004504:	230c      	movs	r3, #12
 8004506:	6033      	str	r3, [r6, #0]
 8004508:	2000      	movs	r0, #0
 800450a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800450c:	6823      	ldr	r3, [r4, #0]
 800450e:	1b5b      	subs	r3, r3, r5
 8004510:	d419      	bmi.n	8004546 <_malloc_r+0x96>
 8004512:	2b0b      	cmp	r3, #11
 8004514:	d903      	bls.n	800451e <_malloc_r+0x6e>
 8004516:	6023      	str	r3, [r4, #0]
 8004518:	18e4      	adds	r4, r4, r3
 800451a:	6025      	str	r5, [r4, #0]
 800451c:	e003      	b.n	8004526 <_malloc_r+0x76>
 800451e:	6863      	ldr	r3, [r4, #4]
 8004520:	42a2      	cmp	r2, r4
 8004522:	d10e      	bne.n	8004542 <_malloc_r+0x92>
 8004524:	600b      	str	r3, [r1, #0]
 8004526:	0030      	movs	r0, r6
 8004528:	f000 f83a 	bl	80045a0 <__malloc_unlock>
 800452c:	0020      	movs	r0, r4
 800452e:	2207      	movs	r2, #7
 8004530:	300b      	adds	r0, #11
 8004532:	1d23      	adds	r3, r4, #4
 8004534:	4390      	bics	r0, r2
 8004536:	1ac2      	subs	r2, r0, r3
 8004538:	4298      	cmp	r0, r3
 800453a:	d0e6      	beq.n	800450a <_malloc_r+0x5a>
 800453c:	1a1b      	subs	r3, r3, r0
 800453e:	50a3      	str	r3, [r4, r2]
 8004540:	e7e3      	b.n	800450a <_malloc_r+0x5a>
 8004542:	6053      	str	r3, [r2, #4]
 8004544:	e7ef      	b.n	8004526 <_malloc_r+0x76>
 8004546:	0022      	movs	r2, r4
 8004548:	6864      	ldr	r4, [r4, #4]
 800454a:	e7c2      	b.n	80044d2 <_malloc_r+0x22>
 800454c:	2303      	movs	r3, #3
 800454e:	1cc4      	adds	r4, r0, #3
 8004550:	439c      	bics	r4, r3
 8004552:	42a0      	cmp	r0, r4
 8004554:	d0e1      	beq.n	800451a <_malloc_r+0x6a>
 8004556:	1a21      	subs	r1, r4, r0
 8004558:	0030      	movs	r0, r6
 800455a:	f000 f807 	bl	800456c <_sbrk_r>
 800455e:	1c43      	adds	r3, r0, #1
 8004560:	d1db      	bne.n	800451a <_malloc_r+0x6a>
 8004562:	e7c7      	b.n	80044f4 <_malloc_r+0x44>
 8004564:	20000090 	.word	0x20000090
 8004568:	20000094 	.word	0x20000094

0800456c <_sbrk_r>:
 800456c:	2300      	movs	r3, #0
 800456e:	b570      	push	{r4, r5, r6, lr}
 8004570:	4d06      	ldr	r5, [pc, #24]	; (800458c <_sbrk_r+0x20>)
 8004572:	0004      	movs	r4, r0
 8004574:	0008      	movs	r0, r1
 8004576:	602b      	str	r3, [r5, #0]
 8004578:	f7fc fa44 	bl	8000a04 <_sbrk>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d103      	bne.n	8004588 <_sbrk_r+0x1c>
 8004580:	682b      	ldr	r3, [r5, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d000      	beq.n	8004588 <_sbrk_r+0x1c>
 8004586:	6023      	str	r3, [r4, #0]
 8004588:	bd70      	pop	{r4, r5, r6, pc}
 800458a:	46c0      	nop			; (mov r8, r8)
 800458c:	2000037c 	.word	0x2000037c

08004590 <__malloc_lock>:
 8004590:	b510      	push	{r4, lr}
 8004592:	4802      	ldr	r0, [pc, #8]	; (800459c <__malloc_lock+0xc>)
 8004594:	f000 f80c 	bl	80045b0 <__retarget_lock_acquire_recursive>
 8004598:	bd10      	pop	{r4, pc}
 800459a:	46c0      	nop			; (mov r8, r8)
 800459c:	20000384 	.word	0x20000384

080045a0 <__malloc_unlock>:
 80045a0:	b510      	push	{r4, lr}
 80045a2:	4802      	ldr	r0, [pc, #8]	; (80045ac <__malloc_unlock+0xc>)
 80045a4:	f000 f805 	bl	80045b2 <__retarget_lock_release_recursive>
 80045a8:	bd10      	pop	{r4, pc}
 80045aa:	46c0      	nop			; (mov r8, r8)
 80045ac:	20000384 	.word	0x20000384

080045b0 <__retarget_lock_acquire_recursive>:
 80045b0:	4770      	bx	lr

080045b2 <__retarget_lock_release_recursive>:
 80045b2:	4770      	bx	lr

080045b4 <_init>:
 80045b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b6:	46c0      	nop			; (mov r8, r8)
 80045b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045ba:	bc08      	pop	{r3}
 80045bc:	469e      	mov	lr, r3
 80045be:	4770      	bx	lr

080045c0 <_fini>:
 80045c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045c2:	46c0      	nop			; (mov r8, r8)
 80045c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045c6:	bc08      	pop	{r3}
 80045c8:	469e      	mov	lr, r3
 80045ca:	4770      	bx	lr
