
mantarray-firmware-channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031bc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001bc  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003438  08003438  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003440  08003440  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003440  08003440  00013440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003444  08003444  00013444  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003448  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  080034b8  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  080034b8  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000219f3  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003fa8  00000000  00000000  00041a8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc0  00000000  00000000  00045a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002558  00000000  00000000  000465f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e90  00000000  00000000  00048b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e9ba  00000000  00000000  0005f9e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007ce31  00000000  00000000  0007e39a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000fb1cb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002664  00000000  00000000  000fb220  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    000141ee  00000000  00000000  000fd884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003264 	.word	0x08003264

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003264 	.word	0x08003264

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800049c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800049e:	b08b      	sub	sp, #44	; 0x2c

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a0:	2214      	movs	r2, #20
 80004a2:	2100      	movs	r1, #0
 80004a4:	a804      	add	r0, sp, #16
 80004a6:	f002 fe52 	bl	800314e <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004aa:	2201      	movs	r2, #1
 80004ac:	4b29      	ldr	r3, [pc, #164]	; (8000554 <MX_GPIO_Init+0xb8>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004ae:	4d2a      	ldr	r5, [pc, #168]	; (8000558 <MX_GPIO_Init+0xbc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004b2:	0028      	movs	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b4:	4311      	orrs	r1, r2
 80004b6:	62d9      	str	r1, [r3, #44]	; 0x2c
 80004b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 80004ba:	24a0      	movs	r4, #160	; 0xa0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004bc:	400a      	ands	r2, r1
 80004be:	9201      	str	r2, [sp, #4]
 80004c0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c2:	2202      	movs	r2, #2
 80004c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 80004c6:	05e4      	lsls	r4, r4, #23
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c8:	4311      	orrs	r1, r2
 80004ca:	62d9      	str	r1, [r3, #44]	; 0x2c
 80004cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
                          |programmer_RX_line_Pin|BUS_CLK_Pin|mag_int_c_Pin|mag_int_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004ce:	2600      	movs	r6, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	400a      	ands	r2, r1
 80004d2:	9202      	str	r2, [sp, #8]
 80004d4:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004d6:	2204      	movs	r2, #4
 80004d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 80004da:	2700      	movs	r7, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004dc:	4311      	orrs	r1, r2
 80004de:	62d9      	str	r1, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004e0:	21c0      	movs	r1, #192	; 0xc0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004e4:	0209      	lsls	r1, r1, #8
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e6:	401a      	ands	r2, r3
 80004e8:	9203      	str	r2, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004ec:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004ee:	f000 fc13 	bl	8000d18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 80004f2:	21e0      	movs	r1, #224	; 0xe0
 80004f4:	0020      	movs	r0, r4
 80004f6:	2200      	movs	r2, #0
 80004f8:	0049      	lsls	r1, r1, #1
 80004fa:	f000 fc0d 	bl	8000d18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 80004fe:	2300      	movs	r3, #0
 8000500:	4a16      	ldr	r2, [pc, #88]	; (800055c <MX_GPIO_Init+0xc0>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000502:	0020      	movs	r0, r4
 8000504:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 8000506:	9204      	str	r2, [sp, #16]
 8000508:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050a:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800050c:	f000 fb14 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 8000510:	2300      	movs	r3, #0
 8000512:	4a13      	ldr	r2, [pc, #76]	; (8000560 <MX_GPIO_Init+0xc4>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000514:	a904      	add	r1, sp, #16
 8000516:	4813      	ldr	r0, [pc, #76]	; (8000564 <MX_GPIO_Init+0xc8>)
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 8000518:	9204      	str	r2, [sp, #16]
 800051a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800051c:	9606      	str	r6, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800051e:	f000 fb0b 	bl	8000b38 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 8000522:	22c0      	movs	r2, #192	; 0xc0
 8000524:	2301      	movs	r3, #1
 8000526:	2600      	movs	r6, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000528:	0028      	movs	r0, r5
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 800052a:	0212      	lsls	r2, r2, #8
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800052c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 800052e:	9204      	str	r2, [sp, #16]
 8000530:	9305      	str	r3, [sp, #20]
 8000532:	9606      	str	r6, [sp, #24]
 8000534:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000536:	f000 faff 	bl	8000b38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 800053a:	22e0      	movs	r2, #224	; 0xe0
 800053c:	2301      	movs	r3, #1
 800053e:	0052      	lsls	r2, r2, #1
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000540:	0020      	movs	r0, r4
 8000542:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 8000544:	9204      	str	r2, [sp, #16]
 8000546:	9305      	str	r3, [sp, #20]
 8000548:	9606      	str	r6, [sp, #24]
 800054a:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f000 faf4 	bl	8000b38 <HAL_GPIO_Init>

}
 8000550:	b00b      	add	sp, #44	; 0x2c
 8000552:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000554:	40021000 	.word	0x40021000
 8000558:	50000800 	.word	0x50000800
 800055c:	0000e619 	.word	0x0000e619
 8000560:	000001ff 	.word	0x000001ff
 8000564:	50000400 	.word	0x50000400

08000568 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000568:	b510      	push	{r4, lr}
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800056a:	4b1e      	ldr	r3, [pc, #120]	; (80005e4 <MX_I2C2_Init+0x7c>)
 800056c:	4c1e      	ldr	r4, [pc, #120]	; (80005e8 <MX_I2C2_Init+0x80>)
 800056e:	6023      	str	r3, [r4, #0]
  hi2c2.Init.Timing = 0x00100413;
 8000570:	4b1e      	ldr	r3, [pc, #120]	; (80005ec <MX_I2C2_Init+0x84>)
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c2.Init.OwnAddress2 = 0;
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000572:	0020      	movs	r0, r4
  hi2c2.Init.Timing = 0x00100413;
 8000574:	6063      	str	r3, [r4, #4]
  hi2c2.Init.OwnAddress1 = 200;
 8000576:	23c8      	movs	r3, #200	; 0xc8
 8000578:	60a3      	str	r3, [r4, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800057a:	3bc7      	subs	r3, #199	; 0xc7
 800057c:	60e3      	str	r3, [r4, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800057e:	2300      	movs	r3, #0
 8000580:	6123      	str	r3, [r4, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000582:	6163      	str	r3, [r4, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000584:	61a3      	str	r3, [r4, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 8000586:	2380      	movs	r3, #128	; 0x80
 8000588:	031b      	lsls	r3, r3, #12
 800058a:	61e3      	str	r3, [r4, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 800058c:	2380      	movs	r3, #128	; 0x80
 800058e:	029b      	lsls	r3, r3, #10
 8000590:	6223      	str	r3, [r4, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000592:	f000 fbc7 	bl	8000d24 <HAL_I2C_Init>
 8000596:	2800      	cmp	r0, #0
 8000598:	d110      	bne.n	80005bc <MX_I2C2_Init+0x54>
  {
    Error_Handler();
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800059a:	2100      	movs	r1, #0
 800059c:	0020      	movs	r0, r4
 800059e:	f000 fc1b 	bl	8000dd8 <HAL_I2CEx_ConfigAnalogFilter>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	d112      	bne.n	80005cc <MX_I2C2_Init+0x64>
  {
    Error_Handler();
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005a6:	2100      	movs	r1, #0
 80005a8:	0020      	movs	r0, r4
 80005aa:	f000 fc3d 	bl	8000e28 <HAL_I2CEx_ConfigDigitalFilter>
 80005ae:	2800      	cmp	r0, #0
 80005b0:	d114      	bne.n	80005dc <MX_I2C2_Init+0x74>
  {
    Error_Handler();
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 80005b2:	2080      	movs	r0, #128	; 0x80
 80005b4:	0180      	lsls	r0, r0, #6
 80005b6:	f000 fc5d 	bl	8000e74 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80005ba:	bd10      	pop	{r4, pc}
    Error_Handler();
 80005bc:	f000 f8b6 	bl	800072c <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80005c0:	2100      	movs	r1, #0
 80005c2:	0020      	movs	r0, r4
 80005c4:	f000 fc08 	bl	8000dd8 <HAL_I2CEx_ConfigAnalogFilter>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d0ec      	beq.n	80005a6 <MX_I2C2_Init+0x3e>
    Error_Handler();
 80005cc:	f000 f8ae 	bl	800072c <Error_Handler>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80005d0:	2100      	movs	r1, #0
 80005d2:	0020      	movs	r0, r4
 80005d4:	f000 fc28 	bl	8000e28 <HAL_I2CEx_ConfigDigitalFilter>
 80005d8:	2800      	cmp	r0, #0
 80005da:	d0ea      	beq.n	80005b2 <MX_I2C2_Init+0x4a>
    Error_Handler();
 80005dc:	f000 f8a6 	bl	800072c <Error_Handler>
 80005e0:	e7e7      	b.n	80005b2 <MX_I2C2_Init+0x4a>
 80005e2:	46c0      	nop			; (mov r8, r8)
 80005e4:	40005800 	.word	0x40005800
 80005e8:	20000098 	.word	0x20000098
 80005ec:	00100413 	.word	0x00100413

080005f0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80005f0:	b510      	push	{r4, lr}
 80005f2:	0004      	movs	r4, r0
 80005f4:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005f6:	2214      	movs	r2, #20
 80005f8:	2100      	movs	r1, #0
 80005fa:	a802      	add	r0, sp, #8
 80005fc:	f002 fda7 	bl	800314e <memset>
  if(i2cHandle->Instance==I2C2)
 8000600:	4b15      	ldr	r3, [pc, #84]	; (8000658 <HAL_I2C_MspInit+0x68>)
 8000602:	6822      	ldr	r2, [r4, #0]
 8000604:	429a      	cmp	r2, r3
 8000606:	d001      	beq.n	800060c <HAL_I2C_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000608:	b008      	add	sp, #32
 800060a:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800060c:	2302      	movs	r3, #2
 800060e:	4c13      	ldr	r4, [pc, #76]	; (800065c <HAL_I2C_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000610:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000614:	4812      	ldr	r0, [pc, #72]	; (8000660 <HAL_I2C_MspInit+0x70>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000616:	431a      	orrs	r2, r3
 8000618:	62e2      	str	r2, [r4, #44]	; 0x2c
 800061a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800061c:	4013      	ands	r3, r2
 800061e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000620:	22c0      	movs	r2, #192	; 0xc0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000622:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000624:	2312      	movs	r3, #18
 8000626:	0112      	lsls	r2, r2, #4
 8000628:	9202      	str	r2, [sp, #8]
 800062a:	9303      	str	r3, [sp, #12]
 800062c:	2201      	movs	r2, #1
 800062e:	2303      	movs	r3, #3
 8000630:	9204      	str	r2, [sp, #16]
 8000632:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000634:	2306      	movs	r3, #6
 8000636:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000638:	f000 fa7e 	bl	8000b38 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8000640:	03db      	lsls	r3, r3, #15
 8000642:	4313      	orrs	r3, r2
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 8000644:	2100      	movs	r1, #0
 8000646:	2200      	movs	r2, #0
 8000648:	2018      	movs	r0, #24
    __HAL_RCC_I2C2_CLK_ENABLE();
 800064a:	63a3      	str	r3, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 800064c:	f000 fa1c 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 8000650:	2018      	movs	r0, #24
 8000652:	f000 fa4b 	bl	8000aec <HAL_NVIC_EnableIRQ>
}
 8000656:	e7d7      	b.n	8000608 <HAL_I2C_MspInit+0x18>
 8000658:	40005800 	.word	0x40005800
 800065c:	40021000 	.word	0x40021000
 8000660:	50000400 	.word	0x50000400

08000664 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000664:	b500      	push	{lr}
 8000666:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000668:	2224      	movs	r2, #36	; 0x24
 800066a:	2100      	movs	r1, #0
 800066c:	a807      	add	r0, sp, #28
 800066e:	f002 fd6e 	bl	800314e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000672:	2214      	movs	r2, #20
 8000674:	2100      	movs	r1, #0
 8000676:	4668      	mov	r0, sp
 8000678:	f002 fd69 	bl	800314e <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800067c:	4919      	ldr	r1, [pc, #100]	; (80006e4 <SystemClock_Config+0x80>)
 800067e:	4a1a      	ldr	r2, [pc, #104]	; (80006e8 <SystemClock_Config+0x84>)
 8000680:	680b      	ldr	r3, [r1, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000682:	a806      	add	r0, sp, #24
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000684:	401a      	ands	r2, r3
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	4313      	orrs	r3, r2
 800068c:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800068e:	2322      	movs	r3, #34	; 0x22
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000690:	2210      	movs	r2, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000692:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000694:	3b21      	subs	r3, #33	; 0x21
 8000696:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000698:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800069a:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800069c:	2202      	movs	r2, #2
 800069e:	2300      	movs	r3, #0
 80006a0:	9210      	str	r2, [sp, #64]	; 0x40
 80006a2:	9311      	str	r3, [sp, #68]	; 0x44
 80006a4:	2280      	movs	r2, #128	; 0x80
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	02d2      	lsls	r2, r2, #11
 80006aa:	03db      	lsls	r3, r3, #15
 80006ac:	9212      	str	r2, [sp, #72]	; 0x48
 80006ae:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b0:	f000 fc34 	bl	8000f1c <HAL_RCC_OscConfig>
 80006b4:	2800      	cmp	r0, #0
 80006b6:	d001      	beq.n	80006bc <SystemClock_Config+0x58>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006b8:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ba:	e7fe      	b.n	80006ba <SystemClock_Config+0x56>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006bc:	220f      	movs	r2, #15
 80006be:	2303      	movs	r3, #3
 80006c0:	9200      	str	r2, [sp, #0]
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	2200      	movs	r2, #0
 80006c6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006c8:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ca:	2101      	movs	r1, #1
 80006cc:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ce:	9202      	str	r2, [sp, #8]
 80006d0:	9303      	str	r3, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006d2:	f000 ff1b 	bl	800150c <HAL_RCC_ClockConfig>
 80006d6:	2800      	cmp	r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0x7a>
 80006da:	b672      	cpsid	i
  while (1)
 80006dc:	e7fe      	b.n	80006dc <SystemClock_Config+0x78>
}
 80006de:	b015      	add	sp, #84	; 0x54
 80006e0:	bd00      	pop	{pc}
 80006e2:	46c0      	nop			; (mov r8, r8)
 80006e4:	40007000 	.word	0x40007000
 80006e8:	ffffe7ff 	.word	0xffffe7ff

080006ec <main>:
{
 80006ec:	b510      	push	{r4, lr}
  HAL_Init();
 80006ee:	f000 f98b 	bl	8000a08 <HAL_Init>
  SystemClock_Config();
 80006f2:	f7ff ffb7 	bl	8000664 <SystemClock_Config>
  MX_GPIO_Init();
 80006f6:	f7ff fed1 	bl	800049c <MX_GPIO_Init>
  MX_I2C2_Init();
 80006fa:	f7ff ff35 	bl	8000568 <MX_I2C2_Init>
  MX_SPI1_Init();
 80006fe:	f000 f817 	bl	8000730 <MX_SPI1_Init>
  MX_TIM21_Init();
 8000702:	f000 f8b3 	bl	800086c <MX_TIM21_Init>
  module_system_init(&my_sys, &hspi1, &hi2c2, &htim21);
 8000706:	4c05      	ldr	r4, [pc, #20]	; (800071c <main+0x30>)
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <main+0x34>)
 800070a:	0020      	movs	r0, r4
 800070c:	4a05      	ldr	r2, [pc, #20]	; (8000724 <main+0x38>)
 800070e:	4906      	ldr	r1, [pc, #24]	; (8000728 <main+0x3c>)
 8000710:	f002 fa9c 	bl	8002c4c <module_system_init>
	  state_machine(&my_sys);
 8000714:	0020      	movs	r0, r4
 8000716:	f002 faf7 	bl	8002d08 <state_machine>
  while (1)
 800071a:	e7fb      	b.n	8000714 <main+0x28>
 800071c:	200000e4 	.word	0x200000e4
 8000720:	20000228 	.word	0x20000228
 8000724:	20000098 	.word	0x20000098
 8000728:	200001d0 	.word	0x200001d0

0800072c <Error_Handler>:
 800072c:	b672      	cpsid	i
  while (1)
 800072e:	e7fe      	b.n	800072e <Error_Handler+0x2>

08000730 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000730:	4810      	ldr	r0, [pc, #64]	; (8000774 <MX_SPI1_Init+0x44>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000732:	2202      	movs	r2, #2
  hspi1.Instance = SPI1;
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <MX_SPI1_Init+0x48>)
{
 8000736:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8000738:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800073a:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800073c:	6102      	str	r2, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800073e:	3a01      	subs	r2, #1
 8000740:	6142      	str	r2, [r0, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000742:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000744:	005b      	lsls	r3, r3, #1
 8000746:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000748:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800074a:	0092      	lsls	r2, r2, #2
 800074c:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800074e:	3af9      	subs	r2, #249	; 0xf9
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000750:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000752:	60c3      	str	r3, [r0, #12]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000754:	3aff      	subs	r2, #255	; 0xff
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000756:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000758:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800075a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800075c:	3307      	adds	r3, #7
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800075e:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000760:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000762:	f001 f829 	bl	80017b8 <HAL_SPI_Init>
 8000766:	2800      	cmp	r0, #0
 8000768:	d100      	bne.n	800076c <MX_SPI1_Init+0x3c>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800076a:	bd10      	pop	{r4, pc}
    Error_Handler();
 800076c:	f7ff ffde 	bl	800072c <Error_Handler>
}
 8000770:	e7fb      	b.n	800076a <MX_SPI1_Init+0x3a>
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	200001d0 	.word	0x200001d0
 8000778:	40013000 	.word	0x40013000

0800077c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800077c:	b510      	push	{r4, lr}
 800077e:	0004      	movs	r4, r0
 8000780:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000782:	2214      	movs	r2, #20
 8000784:	2100      	movs	r1, #0
 8000786:	a802      	add	r0, sp, #8
 8000788:	f002 fce1 	bl	800314e <memset>
  if(spiHandle->Instance==SPI1)
 800078c:	4b12      	ldr	r3, [pc, #72]	; (80007d8 <HAL_SPI_MspInit+0x5c>)
 800078e:	6822      	ldr	r2, [r4, #0]
 8000790:	429a      	cmp	r2, r3
 8000792:	d001      	beq.n	8000798 <HAL_SPI_MspInit+0x1c>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000794:	b008      	add	sp, #32
 8000796:	bd10      	pop	{r4, pc}
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000798:	2280      	movs	r2, #128	; 0x80
 800079a:	4b10      	ldr	r3, [pc, #64]	; (80007dc <HAL_SPI_MspInit+0x60>)
 800079c:	0152      	lsls	r2, r2, #5
 800079e:	6b59      	ldr	r1, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007a2:	430a      	orrs	r2, r1
 80007a4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a6:	2201      	movs	r2, #1
 80007a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007aa:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ac:	4311      	orrs	r1, r2
 80007ae:	62d9      	str	r1, [r3, #44]	; 0x2c
 80007b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b4:	401a      	ands	r2, r3
 80007b6:	9201      	str	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 80007b8:	22c1      	movs	r2, #193	; 0xc1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 80007bc:	2302      	movs	r3, #2
 80007be:	0152      	lsls	r2, r2, #5
 80007c0:	9202      	str	r2, [sp, #8]
 80007c2:	9303      	str	r3, [sp, #12]
 80007c4:	2200      	movs	r2, #0
 80007c6:	2303      	movs	r3, #3
 80007c8:	9204      	str	r2, [sp, #16]
 80007ca:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80007cc:	2300      	movs	r3, #0
 80007ce:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007d0:	f000 f9b2 	bl	8000b38 <HAL_GPIO_Init>
}
 80007d4:	e7de      	b.n	8000794 <HAL_SPI_MspInit+0x18>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40013000 	.word	0x40013000
 80007dc:	40021000 	.word	0x40021000

080007e0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e0:	2101      	movs	r1, #1
 80007e2:	4b05      	ldr	r3, [pc, #20]	; (80007f8 <HAL_MspInit+0x18>)
 80007e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80007e6:	430a      	orrs	r2, r1
 80007e8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ea:	2280      	movs	r2, #128	; 0x80
 80007ec:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80007ee:	0552      	lsls	r2, r2, #21
 80007f0:	430a      	orrs	r2, r1
 80007f2:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f4:	4770      	bx	lr
 80007f6:	46c0      	nop			; (mov r8, r8)
 80007f8:	40021000 	.word	0x40021000

080007fc <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler>
 80007fe:	46c0      	nop			; (mov r8, r8)

08000800 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000800:	e7fe      	b.n	8000800 <HardFault_Handler>
 8000802:	46c0      	nop			; (mov r8, r8)

08000804 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000804:	4770      	bx	lr
 8000806:	46c0      	nop			; (mov r8, r8)

08000808 <PendSV_Handler>:
 8000808:	4770      	bx	lr
 800080a:	46c0      	nop			; (mov r8, r8)

0800080c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800080c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800080e:	f000 f90f 	bl	8000a30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000812:	bd10      	pop	{r4, pc}

08000814 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000814:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000816:	4802      	ldr	r0, [pc, #8]	; (8000820 <TIM21_IRQHandler+0xc>)
 8000818:	f001 fc14 	bl	8002044 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800081c:	bd10      	pop	{r4, pc}
 800081e:	46c0      	nop			; (mov r8, r8)
 8000820:	20000228 	.word	0x20000228

08000824 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000824:	490c      	ldr	r1, [pc, #48]	; (8000858 <_sbrk+0x34>)
 8000826:	4a0d      	ldr	r2, [pc, #52]	; (800085c <_sbrk+0x38>)
{
 8000828:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800082a:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800082c:	490c      	ldr	r1, [pc, #48]	; (8000860 <_sbrk+0x3c>)
{
 800082e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8000830:	6808      	ldr	r0, [r1, #0]
 8000832:	2800      	cmp	r0, #0
 8000834:	d004      	beq.n	8000840 <_sbrk+0x1c>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000836:	18c3      	adds	r3, r0, r3
 8000838:	4293      	cmp	r3, r2
 800083a:	d806      	bhi.n	800084a <_sbrk+0x26>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 800083c:	600b      	str	r3, [r1, #0]

  return (void *)prev_heap_end;
}
 800083e:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 8000840:	4808      	ldr	r0, [pc, #32]	; (8000864 <_sbrk+0x40>)
  if (__sbrk_heap_end + incr > max_heap)
 8000842:	18c3      	adds	r3, r0, r3
    __sbrk_heap_end = &_end;
 8000844:	6008      	str	r0, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 8000846:	4293      	cmp	r3, r2
 8000848:	d9f8      	bls.n	800083c <_sbrk+0x18>
    errno = ENOMEM;
 800084a:	f002 fc43 	bl	80030d4 <__errno>
 800084e:	230c      	movs	r3, #12
 8000850:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8000852:	2001      	movs	r0, #1
 8000854:	4240      	negs	r0, r0
 8000856:	e7f2      	b.n	800083e <_sbrk+0x1a>
 8000858:	00000400 	.word	0x00000400
 800085c:	20002000 	.word	0x20002000
 8000860:	2000008c 	.word	0x2000008c
 8000864:	20000280 	.word	0x20000280

08000868 <SystemInit>:
{
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000868:	4770      	bx	lr
 800086a:	46c0      	nop			; (mov r8, r8)

0800086c <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 800086c:	b510      	push	{r4, lr}
 800086e:	b086      	sub	sp, #24

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000870:	2210      	movs	r2, #16
 8000872:	2100      	movs	r1, #0
 8000874:	a802      	add	r0, sp, #8
 8000876:	f002 fc6a 	bl	800314e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800087a:	2208      	movs	r2, #8
 800087c:	2100      	movs	r1, #0
 800087e:	4668      	mov	r0, sp
 8000880:	f002 fc65 	bl	800314e <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000884:	4c19      	ldr	r4, [pc, #100]	; (80008ec <MX_TIM21_Init+0x80>)
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_TIM21_Init+0x84>)
  htim21.Init.Prescaler = 0;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 65535;
 8000888:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <MX_TIM21_Init+0x88>)
  htim21.Instance = TIM21;
 800088a:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 0;
 800088c:	2300      	movs	r3, #0
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800088e:	0020      	movs	r0, r4
  htim21.Init.Prescaler = 0;
 8000890:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000892:	60a3      	str	r3, [r4, #8]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000894:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000896:	3380      	adds	r3, #128	; 0x80
  htim21.Init.Period = 65535;
 8000898:	60e2      	str	r2, [r4, #12]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800089a:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800089c:	f001 fab0 	bl	8001e00 <HAL_TIM_Base_Init>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	d11a      	bne.n	80008da <MX_TIM21_Init+0x6e>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80008a4:	2280      	movs	r2, #128	; 0x80
 80008a6:	2300      	movs	r3, #0
 80008a8:	0192      	lsls	r2, r2, #6
 80008aa:	9202      	str	r2, [sp, #8]
 80008ac:	9303      	str	r3, [sp, #12]
 80008ae:	2200      	movs	r2, #0
 80008b0:	2300      	movs	r3, #0
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
  sClockSourceConfig.ClockFilter = 0;
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80008b2:	0020      	movs	r0, r4
 80008b4:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 80008b6:	9204      	str	r2, [sp, #16]
 80008b8:	9305      	str	r3, [sp, #20]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 80008ba:	f001 fb13 	bl	8001ee4 <HAL_TIM_ConfigClockSource>
 80008be:	2800      	cmp	r0, #0
 80008c0:	d111      	bne.n	80008e6 <MX_TIM21_Init+0x7a>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008c2:	2200      	movs	r2, #0
 80008c4:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80008c6:	4669      	mov	r1, sp
 80008c8:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ca:	9200      	str	r2, [sp, #0]
 80008cc:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80008ce:	f001 fc47 	bl	8002160 <HAL_TIMEx_MasterConfigSynchronization>
 80008d2:	2800      	cmp	r0, #0
 80008d4:	d104      	bne.n	80008e0 <MX_TIM21_Init+0x74>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80008d6:	b006      	add	sp, #24
 80008d8:	bd10      	pop	{r4, pc}
    Error_Handler();
 80008da:	f7ff ff27 	bl	800072c <Error_Handler>
 80008de:	e7e1      	b.n	80008a4 <MX_TIM21_Init+0x38>
    Error_Handler();
 80008e0:	f7ff ff24 	bl	800072c <Error_Handler>
}
 80008e4:	e7f7      	b.n	80008d6 <MX_TIM21_Init+0x6a>
    Error_Handler();
 80008e6:	f7ff ff21 	bl	800072c <Error_Handler>
 80008ea:	e7ea      	b.n	80008c2 <MX_TIM21_Init+0x56>
 80008ec:	20000228 	.word	0x20000228
 80008f0:	40010800 	.word	0x40010800
 80008f4:	0000ffff 	.word	0x0000ffff

080008f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80008f8:	b510      	push	{r4, lr}
 80008fa:	0004      	movs	r4, r0
 80008fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	2214      	movs	r2, #20
 8000900:	2100      	movs	r1, #0
 8000902:	a802      	add	r0, sp, #8
 8000904:	f002 fc23 	bl	800314e <memset>
  if(tim_baseHandle->Instance==TIM21)
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_TIM_Base_MspInit+0x68>)
 800090a:	6822      	ldr	r2, [r4, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d001      	beq.n	8000914 <HAL_TIM_Base_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000910:	b008      	add	sp, #32
 8000912:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000914:	2104      	movs	r1, #4
 8000916:	4b13      	ldr	r3, [pc, #76]	; (8000964 <HAL_TIM_Base_MspInit+0x6c>)
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000918:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_TIM21_CLK_ENABLE();
 800091a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800091c:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_TIM21_CLK_ENABLE();
 800091e:	430a      	orrs	r2, r1
 8000920:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000922:	2201      	movs	r2, #1
 8000924:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000926:	4311      	orrs	r1, r2
 8000928:	62d9      	str	r1, [r3, #44]	; 0x2c
 800092a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092c:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	401a      	ands	r2, r3
 8000930:	9201      	str	r2, [sp, #4]
 8000932:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000934:	2202      	movs	r2, #2
 8000936:	2302      	movs	r3, #2
 8000938:	9202      	str	r2, [sp, #8]
 800093a:	9303      	str	r3, [sp, #12]
 800093c:	2200      	movs	r2, #0
 800093e:	2300      	movs	r3, #0
 8000940:	9204      	str	r2, [sp, #16]
 8000942:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000944:	2305      	movs	r3, #5
 8000946:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	f000 f8f6 	bl	8000b38 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 800094c:	2200      	movs	r2, #0
 800094e:	2100      	movs	r1, #0
 8000950:	2014      	movs	r0, #20
 8000952:	f000 f899 	bl	8000a88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000956:	2014      	movs	r0, #20
 8000958:	f000 f8c8 	bl	8000aec <HAL_NVIC_EnableIRQ>
}
 800095c:	e7d8      	b.n	8000910 <HAL_TIM_Base_MspInit+0x18>
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40010800 	.word	0x40010800
 8000964:	40021000 	.word	0x40021000

08000968 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000968:	480d      	ldr	r0, [pc, #52]	; (80009a0 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800096a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480d      	ldr	r0, [pc, #52]	; (80009a4 <LoopForever+0x6>)
  ldr r1, =_edata
 800096e:	490e      	ldr	r1, [pc, #56]	; (80009a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000970:	4a0e      	ldr	r2, [pc, #56]	; (80009ac <LoopForever+0xe>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0b      	ldr	r2, [pc, #44]	; (80009b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000984:	4c0b      	ldr	r4, [pc, #44]	; (80009b4 <LoopForever+0x16>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000992:	f7ff ff69 	bl	8000868 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000996:	f002 fba3 	bl	80030e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800099a:	f7ff fea7 	bl	80006ec <main>

0800099e <LoopForever>:

LoopForever:
    b LoopForever
 800099e:	e7fe      	b.n	800099e <LoopForever>
   ldr   r0, =_estack
 80009a0:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80009a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80009ac:	08003448 	.word	0x08003448
  ldr r2, =_sbss
 80009b0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80009b4:	2000027c 	.word	0x2000027c

080009b8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b8:	e7fe      	b.n	80009b8 <ADC1_COMP_IRQHandler>
	...

080009bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b510      	push	{r4, lr}
 80009be:	0004      	movs	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009c0:	20fa      	movs	r0, #250	; 0xfa
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <HAL_InitTick+0x40>)
 80009c4:	0080      	lsls	r0, r0, #2
 80009c6:	7819      	ldrb	r1, [r3, #0]
 80009c8:	f7ff fb9e 	bl	8000108 <__udivsi3>
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <HAL_InitTick+0x44>)
 80009ce:	0001      	movs	r1, r0
 80009d0:	6818      	ldr	r0, [r3, #0]
 80009d2:	f7ff fb99 	bl	8000108 <__udivsi3>
 80009d6:	f000 f895 	bl	8000b04 <HAL_SYSTICK_Config>
 80009da:	2800      	cmp	r0, #0
 80009dc:	d10c      	bne.n	80009f8 <HAL_InitTick+0x3c>
  {
    return HAL_ERROR;
 80009de:	3001      	adds	r0, #1
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e0:	2c03      	cmp	r4, #3
 80009e2:	d900      	bls.n	80009e6 <HAL_InitTick+0x2a>
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80009e4:	bd10      	pop	{r4, pc}
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e6:	3802      	subs	r0, #2
 80009e8:	2200      	movs	r2, #0
 80009ea:	0021      	movs	r1, r4
 80009ec:	f000 f84c 	bl	8000a88 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f0:	4b04      	ldr	r3, [pc, #16]	; (8000a04 <HAL_InitTick+0x48>)
 80009f2:	2000      	movs	r0, #0
 80009f4:	601c      	str	r4, [r3, #0]
  return HAL_OK;
 80009f6:	e7f5      	b.n	80009e4 <HAL_InitTick+0x28>
    return HAL_ERROR;
 80009f8:	2001      	movs	r0, #1
 80009fa:	e7f3      	b.n	80009e4 <HAL_InitTick+0x28>
 80009fc:	20000004 	.word	0x20000004
 8000a00:	20000000 	.word	0x20000000
 8000a04:	20000008 	.word	0x20000008

08000a08 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a08:	2140      	movs	r1, #64	; 0x40
 8000a0a:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <HAL_Init+0x24>)
{
 8000a0c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a0e:	6813      	ldr	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a10:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000a12:	430b      	orrs	r3, r1
 8000a14:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a16:	f7ff ffd1 	bl	80009bc <HAL_InitTick>
 8000a1a:	1e04      	subs	r4, r0, #0
 8000a1c:	d002      	beq.n	8000a24 <HAL_Init+0x1c>
    status = HAL_ERROR;
 8000a1e:	2401      	movs	r4, #1
}
 8000a20:	0020      	movs	r0, r4
 8000a22:	bd10      	pop	{r4, pc}
    HAL_MspInit();
 8000a24:	f7ff fedc 	bl	80007e0 <HAL_MspInit>
 8000a28:	e7fa      	b.n	8000a20 <HAL_Init+0x18>
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	40022000 	.word	0x40022000

08000a30 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000a30:	4a03      	ldr	r2, [pc, #12]	; (8000a40 <HAL_IncTick+0x10>)
 8000a32:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <HAL_IncTick+0x14>)
 8000a34:	6811      	ldr	r1, [r2, #0]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	185b      	adds	r3, r3, r1
 8000a3a:	6013      	str	r3, [r2, #0]
}
 8000a3c:	4770      	bx	lr
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	20000268 	.word	0x20000268
 8000a44:	20000004 	.word	0x20000004

08000a48 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8000a48:	4b01      	ldr	r3, [pc, #4]	; (8000a50 <HAL_GetTick+0x8>)
 8000a4a:	6818      	ldr	r0, [r3, #0]
}
 8000a4c:	4770      	bx	lr
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	20000268 	.word	0x20000268

08000a54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a54:	b570      	push	{r4, r5, r6, lr}
 8000a56:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff fff6 	bl	8000a48 <HAL_GetTick>
 8000a5c:	0005      	movs	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a5e:	1c63      	adds	r3, r4, #1
 8000a60:	d002      	beq.n	8000a68 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a62:	4b04      	ldr	r3, [pc, #16]	; (8000a74 <HAL_Delay+0x20>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a68:	f7ff ffee 	bl	8000a48 <HAL_GetTick>
 8000a6c:	1b40      	subs	r0, r0, r5
 8000a6e:	42a0      	cmp	r0, r4
 8000a70:	d3fa      	bcc.n	8000a68 <HAL_Delay+0x14>
  {
  }
}
 8000a72:	bd70      	pop	{r4, r5, r6, pc}
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000a78:	2102      	movs	r1, #2
 8000a7a:	4a02      	ldr	r2, [pc, #8]	; (8000a84 <HAL_SuspendTick+0xc>)
 8000a7c:	6813      	ldr	r3, [r2, #0]
 8000a7e:	438b      	bics	r3, r1
 8000a80:	6013      	str	r3, [r2, #0]
}
 8000a82:	4770      	bx	lr
 8000a84:	e000e010 	.word	0xe000e010

08000a88 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a88:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8000a8a:	2800      	cmp	r0, #0
 8000a8c:	db14      	blt.n	8000ab8 <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8e:	4b15      	ldr	r3, [pc, #84]	; (8000ae4 <HAL_NVIC_SetPriority+0x5c>)
 8000a90:	2203      	movs	r2, #3
 8000a92:	469c      	mov	ip, r3
 8000a94:	23ff      	movs	r3, #255	; 0xff
 8000a96:	0884      	lsrs	r4, r0, #2
 8000a98:	4010      	ands	r0, r2
 8000a9a:	001a      	movs	r2, r3
 8000a9c:	26c0      	movs	r6, #192	; 0xc0
 8000a9e:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa0:	0189      	lsls	r1, r1, #6
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aa2:	4082      	lsls	r2, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aa4:	400b      	ands	r3, r1
 8000aa6:	4083      	lsls	r3, r0
 8000aa8:	00a4      	lsls	r4, r4, #2
 8000aaa:	4464      	add	r4, ip
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000aac:	00b6      	lsls	r6, r6, #2
 8000aae:	59a5      	ldr	r5, [r4, r6]
 8000ab0:	4395      	bics	r5, r2
 8000ab2:	432b      	orrs	r3, r5
 8000ab4:	51a3      	str	r3, [r4, r6]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8000ab6:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <HAL_NVIC_SetPriority+0x60>)
 8000aba:	230f      	movs	r3, #15
 8000abc:	4694      	mov	ip, r2
 8000abe:	2203      	movs	r2, #3
 8000ac0:	4003      	ands	r3, r0
 8000ac2:	4010      	ands	r0, r2
 8000ac4:	32fc      	adds	r2, #252	; 0xfc
 8000ac6:	0015      	movs	r5, r2
 8000ac8:	00c0      	lsls	r0, r0, #3
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000aca:	0189      	lsls	r1, r1, #6
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000acc:	4085      	lsls	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ace:	400a      	ands	r2, r1
 8000ad0:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad2:	3b08      	subs	r3, #8
 8000ad4:	089b      	lsrs	r3, r3, #2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	4463      	add	r3, ip
 8000ada:	69dc      	ldr	r4, [r3, #28]
 8000adc:	43ac      	bics	r4, r5
 8000ade:	4322      	orrs	r2, r4
 8000ae0:	61da      	str	r2, [r3, #28]
 8000ae2:	e7e8      	b.n	8000ab6 <HAL_NVIC_SetPriority+0x2e>
 8000ae4:	e000e100 	.word	0xe000e100
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8000aec:	2800      	cmp	r0, #0
 8000aee:	db05      	blt.n	8000afc <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000af0:	231f      	movs	r3, #31
 8000af2:	4018      	ands	r0, r3
 8000af4:	3b1e      	subs	r3, #30
 8000af6:	4083      	lsls	r3, r0
 8000af8:	4a01      	ldr	r2, [pc, #4]	; (8000b00 <HAL_NVIC_EnableIRQ+0x14>)
 8000afa:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8000afc:	4770      	bx	lr
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	e000e100 	.word	0xe000e100

08000b04 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b04:	2280      	movs	r2, #128	; 0x80
 8000b06:	1e43      	subs	r3, r0, #1
 8000b08:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b0a:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	d20e      	bcs.n	8000b2e <HAL_SYSTICK_Config+0x2a>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b10:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b14:	4807      	ldr	r0, [pc, #28]	; (8000b34 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b16:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b18:	6a03      	ldr	r3, [r0, #32]
 8000b1a:	0609      	lsls	r1, r1, #24
 8000b1c:	021b      	lsls	r3, r3, #8
 8000b1e:	0a1b      	lsrs	r3, r3, #8
 8000b20:	430b      	orrs	r3, r1
 8000b22:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b24:	2300      	movs	r3, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b26:	2000      	movs	r0, #0
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b28:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b2a:	3307      	adds	r3, #7
 8000b2c:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000b2e:	4770      	bx	lr
 8000b30:	e000e010 	.word	0xe000e010
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <HAL_GPIO_Init>:
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b38:	680b      	ldr	r3, [r1, #0]
{
 8000b3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b3c:	464e      	mov	r6, r9
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b3e:	4699      	mov	r9, r3
{
 8000b40:	46de      	mov	lr, fp
 8000b42:	4657      	mov	r7, sl
 8000b44:	4645      	mov	r5, r8
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b46:	464a      	mov	r2, r9
{
 8000b48:	b5e0      	push	{r5, r6, r7, lr}
  uint32_t position = 0x00U;
 8000b4a:	2300      	movs	r3, #0
{
 8000b4c:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0)
 8000b4e:	2a00      	cmp	r2, #0
 8000b50:	d07a      	beq.n	8000c48 <HAL_GPIO_Init+0x110>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b52:	2201      	movs	r2, #1
 8000b54:	4692      	mov	sl, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b56:	4a69      	ldr	r2, [pc, #420]	; (8000cfc <HAL_GPIO_Init+0x1c4>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000b58:	46c8      	mov	r8, r9
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b5a:	4693      	mov	fp, r2
        temp = EXTI->IMR;
 8000b5c:	4f68      	ldr	r7, [pc, #416]	; (8000d00 <HAL_GPIO_Init+0x1c8>)
 8000b5e:	9101      	str	r1, [sp, #4]
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000b60:	4652      	mov	r2, sl
 8000b62:	4644      	mov	r4, r8
 8000b64:	409a      	lsls	r2, r3
 8000b66:	4014      	ands	r4, r2
 8000b68:	9402      	str	r4, [sp, #8]
    if (iocurrent)
 8000b6a:	4644      	mov	r4, r8
 8000b6c:	4214      	tst	r4, r2
 8000b6e:	d067      	beq.n	8000c40 <HAL_GPIO_Init+0x108>
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b70:	9901      	ldr	r1, [sp, #4]
 8000b72:	6849      	ldr	r1, [r1, #4]
 8000b74:	000e      	movs	r6, r1
 8000b76:	4689      	mov	r9, r1
 8000b78:	2110      	movs	r1, #16
 8000b7a:	438e      	bics	r6, r1
 8000b7c:	1e74      	subs	r4, r6, #1
 8000b7e:	2c01      	cmp	r4, #1
 8000b80:	d969      	bls.n	8000c56 <HAL_GPIO_Init+0x11e>
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b82:	2503      	movs	r5, #3
 8000b84:	005c      	lsls	r4, r3, #1
 8000b86:	40a5      	lsls	r5, r4
      temp = GPIOx->PUPDR;
 8000b88:	68c2      	ldr	r2, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b8a:	43e9      	mvns	r1, r5
 8000b8c:	43aa      	bics	r2, r5
 8000b8e:	0015      	movs	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b90:	9a01      	ldr	r2, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000b92:	9103      	str	r1, [sp, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000b94:	6892      	ldr	r2, [r2, #8]
 8000b96:	40a2      	lsls	r2, r4
 8000b98:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000b9a:	60c2      	str	r2, [r0, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000b9c:	4649      	mov	r1, r9
 8000b9e:	2603      	movs	r6, #3
      temp = GPIOx->MODER;
 8000ba0:	6802      	ldr	r2, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba2:	400e      	ands	r6, r1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000ba4:	9d03      	ldr	r5, [sp, #12]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ba6:	40a6      	lsls	r6, r4
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ba8:	2180      	movs	r1, #128	; 0x80
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000baa:	4015      	ands	r5, r2
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bac:	464a      	mov	r2, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000bae:	432e      	orrs	r6, r5
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb0:	0549      	lsls	r1, r1, #21
      GPIOx->MODER = temp;
 8000bb2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bb4:	420a      	tst	r2, r1
 8000bb6:	d043      	beq.n	8000c40 <HAL_GPIO_Init+0x108>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb8:	465a      	mov	r2, fp
 8000bba:	4651      	mov	r1, sl
 8000bbc:	6b52      	ldr	r2, [r2, #52]	; 0x34
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bbe:	2503      	movs	r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc0:	430a      	orrs	r2, r1
 8000bc2:	4659      	mov	r1, fp
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bc4:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	634a      	str	r2, [r1, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bc8:	494e      	ldr	r1, [pc, #312]	; (8000d04 <HAL_GPIO_Init+0x1cc>)
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bca:	401d      	ands	r5, r3
 8000bcc:	468c      	mov	ip, r1
 8000bce:	00ad      	lsls	r5, r5, #2
 8000bd0:	40ae      	lsls	r6, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bd2:	21a0      	movs	r1, #160	; 0xa0
        temp = SYSCFG->EXTICR[position >> 2U];
 8000bd4:	089a      	lsrs	r2, r3, #2
 8000bd6:	0092      	lsls	r2, r2, #2
 8000bd8:	4462      	add	r2, ip
 8000bda:	6894      	ldr	r4, [r2, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000bdc:	05c9      	lsls	r1, r1, #23
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000bde:	43b4      	bics	r4, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000be0:	4288      	cmp	r0, r1
 8000be2:	d012      	beq.n	8000c0a <HAL_GPIO_Init+0xd2>
 8000be4:	4e48      	ldr	r6, [pc, #288]	; (8000d08 <HAL_GPIO_Init+0x1d0>)
 8000be6:	42b0      	cmp	r0, r6
 8000be8:	d100      	bne.n	8000bec <HAL_GPIO_Init+0xb4>
 8000bea:	e07b      	b.n	8000ce4 <HAL_GPIO_Init+0x1ac>
 8000bec:	4e47      	ldr	r6, [pc, #284]	; (8000d0c <HAL_GPIO_Init+0x1d4>)
 8000bee:	42b0      	cmp	r0, r6
 8000bf0:	d100      	bne.n	8000bf4 <HAL_GPIO_Init+0xbc>
 8000bf2:	e07b      	b.n	8000cec <HAL_GPIO_Init+0x1b4>
 8000bf4:	4e46      	ldr	r6, [pc, #280]	; (8000d10 <HAL_GPIO_Init+0x1d8>)
 8000bf6:	42b0      	cmp	r0, r6
 8000bf8:	d100      	bne.n	8000bfc <HAL_GPIO_Init+0xc4>
 8000bfa:	e06f      	b.n	8000cdc <HAL_GPIO_Init+0x1a4>
 8000bfc:	4e45      	ldr	r6, [pc, #276]	; (8000d14 <HAL_GPIO_Init+0x1dc>)
 8000bfe:	42b0      	cmp	r0, r6
 8000c00:	d100      	bne.n	8000c04 <HAL_GPIO_Init+0xcc>
 8000c02:	e077      	b.n	8000cf4 <HAL_GPIO_Init+0x1bc>
 8000c04:	2606      	movs	r6, #6
 8000c06:	40ae      	lsls	r6, r5
 8000c08:	4334      	orrs	r4, r6
        temp &= ~((uint32_t)iocurrent);
 8000c0a:	9902      	ldr	r1, [sp, #8]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000c0c:	6094      	str	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8000c0e:	43cd      	mvns	r5, r1
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c10:	4649      	mov	r1, r9
        temp = EXTI->IMR;
 8000c12:	683a      	ldr	r2, [r7, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c14:	03c9      	lsls	r1, r1, #15
 8000c16:	d45e      	bmi.n	8000cd6 <HAL_GPIO_Init+0x19e>
        temp &= ~((uint32_t)iocurrent);
 8000c18:	402a      	ands	r2, r5
        }
        EXTI->IMR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c1a:	4649      	mov	r1, r9
        EXTI->IMR = temp;
 8000c1c:	603a      	str	r2, [r7, #0]
        temp = EXTI->EMR;
 8000c1e:	687a      	ldr	r2, [r7, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c20:	0389      	lsls	r1, r1, #14
 8000c22:	d455      	bmi.n	8000cd0 <HAL_GPIO_Init+0x198>
        temp &= ~((uint32_t)iocurrent);
 8000c24:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR = temp;
 8000c26:	607a      	str	r2, [r7, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c28:	464a      	mov	r2, r9
        temp = EXTI->RTSR;
 8000c2a:	68bc      	ldr	r4, [r7, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c2c:	02d2      	lsls	r2, r2, #11
 8000c2e:	d44c      	bmi.n	8000cca <HAL_GPIO_Init+0x192>
        temp &= ~((uint32_t)iocurrent);
 8000c30:	402c      	ands	r4, r5
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c32:	4649      	mov	r1, r9
        EXTI->RTSR = temp;
 8000c34:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 8000c36:	68fa      	ldr	r2, [r7, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c38:	0289      	lsls	r1, r1, #10
 8000c3a:	d441      	bmi.n	8000cc0 <HAL_GPIO_Init+0x188>
        temp &= ~((uint32_t)iocurrent);
 8000c3c:	402a      	ands	r2, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR = temp;
 8000c3e:	60fa      	str	r2, [r7, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c40:	4642      	mov	r2, r8
      }
    }
    position++;
 8000c42:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0)
 8000c44:	40da      	lsrs	r2, r3
 8000c46:	d18b      	bne.n	8000b60 <HAL_GPIO_Init+0x28>
  }
}
 8000c48:	b005      	add	sp, #20
 8000c4a:	bcf0      	pop	{r4, r5, r6, r7}
 8000c4c:	46bb      	mov	fp, r7
 8000c4e:	46b2      	mov	sl, r6
 8000c50:	46a9      	mov	r9, r5
 8000c52:	46a0      	mov	r8, r4
 8000c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c56:	2103      	movs	r1, #3
 8000c58:	005c      	lsls	r4, r3, #1
 8000c5a:	40a1      	lsls	r1, r4
 8000c5c:	468c      	mov	ip, r1
 8000c5e:	43c9      	mvns	r1, r1
 8000c60:	9103      	str	r1, [sp, #12]
 8000c62:	4661      	mov	r1, ip
        temp = GPIOx->OSPEEDR;
 8000c64:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000c66:	438d      	bics	r5, r1
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c68:	9901      	ldr	r1, [sp, #4]
 8000c6a:	68c9      	ldr	r1, [r1, #12]
 8000c6c:	40a1      	lsls	r1, r4
 8000c6e:	430d      	orrs	r5, r1
        GPIOx->OSPEEDR = temp;
 8000c70:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8000c72:	6845      	ldr	r5, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c74:	4651      	mov	r1, sl
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c76:	4395      	bics	r5, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000c78:	464a      	mov	r2, r9
 8000c7a:	0912      	lsrs	r2, r2, #4
 8000c7c:	400a      	ands	r2, r1
 8000c7e:	409a      	lsls	r2, r3
 8000c80:	432a      	orrs	r2, r5
        GPIOx->OTYPER = temp;
 8000c82:	6042      	str	r2, [r0, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c84:	4662      	mov	r2, ip
      temp = GPIOx->PUPDR;
 8000c86:	68c5      	ldr	r5, [r0, #12]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c88:	9901      	ldr	r1, [sp, #4]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c8a:	4395      	bics	r5, r2
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8c:	688a      	ldr	r2, [r1, #8]
 8000c8e:	40a2      	lsls	r2, r4
 8000c90:	432a      	orrs	r2, r5
      GPIOx->PUPDR = temp;
 8000c92:	60c2      	str	r2, [r0, #12]
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000c94:	2e02      	cmp	r6, #2
 8000c96:	d000      	beq.n	8000c9a <HAL_GPIO_Init+0x162>
 8000c98:	e780      	b.n	8000b9c <HAL_GPIO_Init+0x64>
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000c9a:	2507      	movs	r5, #7
 8000c9c:	401d      	ands	r5, r3
 8000c9e:	00ad      	lsls	r5, r5, #2
 8000ca0:	360d      	adds	r6, #13
 8000ca2:	40ae      	lsls	r6, r5
        temp = GPIOx->AFR[position >> 3U];
 8000ca4:	08da      	lsrs	r2, r3, #3
 8000ca6:	0092      	lsls	r2, r2, #2
 8000ca8:	1882      	adds	r2, r0, r2
 8000caa:	6a11      	ldr	r1, [r2, #32]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000cac:	43b1      	bics	r1, r6
 8000cae:	468c      	mov	ip, r1
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000cb0:	9901      	ldr	r1, [sp, #4]
 8000cb2:	6909      	ldr	r1, [r1, #16]
 8000cb4:	40a9      	lsls	r1, r5
 8000cb6:	000d      	movs	r5, r1
 8000cb8:	4661      	mov	r1, ip
 8000cba:	430d      	orrs	r5, r1
        GPIOx->AFR[position >> 3U] = temp;
 8000cbc:	6215      	str	r5, [r2, #32]
 8000cbe:	e76d      	b.n	8000b9c <HAL_GPIO_Init+0x64>
          temp |= iocurrent;
 8000cc0:	9902      	ldr	r1, [sp, #8]
 8000cc2:	4311      	orrs	r1, r2
 8000cc4:	000a      	movs	r2, r1
        EXTI->FTSR = temp;
 8000cc6:	60fa      	str	r2, [r7, #12]
 8000cc8:	e7ba      	b.n	8000c40 <HAL_GPIO_Init+0x108>
          temp |= iocurrent;
 8000cca:	9a02      	ldr	r2, [sp, #8]
 8000ccc:	4314      	orrs	r4, r2
 8000cce:	e7b0      	b.n	8000c32 <HAL_GPIO_Init+0xfa>
          temp |= iocurrent;
 8000cd0:	9902      	ldr	r1, [sp, #8]
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	e7a7      	b.n	8000c26 <HAL_GPIO_Init+0xee>
          temp |= iocurrent;
 8000cd6:	9902      	ldr	r1, [sp, #8]
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	e79e      	b.n	8000c1a <HAL_GPIO_Init+0xe2>
 8000cdc:	2103      	movs	r1, #3
 8000cde:	40a9      	lsls	r1, r5
 8000ce0:	430c      	orrs	r4, r1
 8000ce2:	e792      	b.n	8000c0a <HAL_GPIO_Init+0xd2>
 8000ce4:	4651      	mov	r1, sl
 8000ce6:	40a9      	lsls	r1, r5
 8000ce8:	430c      	orrs	r4, r1
 8000cea:	e78e      	b.n	8000c0a <HAL_GPIO_Init+0xd2>
 8000cec:	2602      	movs	r6, #2
 8000cee:	40ae      	lsls	r6, r5
 8000cf0:	4334      	orrs	r4, r6
 8000cf2:	e78a      	b.n	8000c0a <HAL_GPIO_Init+0xd2>
 8000cf4:	2605      	movs	r6, #5
 8000cf6:	40ae      	lsls	r6, r5
 8000cf8:	4334      	orrs	r4, r6
 8000cfa:	e786      	b.n	8000c0a <HAL_GPIO_Init+0xd2>
 8000cfc:	40021000 	.word	0x40021000
 8000d00:	40010400 	.word	0x40010400
 8000d04:	40010000 	.word	0x40010000
 8000d08:	50000400 	.word	0x50000400
 8000d0c:	50000800 	.word	0x50000800
 8000d10:	50000c00 	.word	0x50000c00
 8000d14:	50001c00 	.word	0x50001c00

08000d18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	d001      	beq.n	8000d20 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d1c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8000d1e:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 8000d20:	6281      	str	r1, [r0, #40]	; 0x28
}
 8000d22:	e7fc      	b.n	8000d1e <HAL_GPIO_WritePin+0x6>

08000d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d24:	b510      	push	{r4, lr}
 8000d26:	1e04      	subs	r4, r0, #0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d28:	d04d      	beq.n	8000dc6 <HAL_I2C_Init+0xa2>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d2a:	2341      	movs	r3, #65	; 0x41
 8000d2c:	5cc3      	ldrb	r3, [r0, r3]
 8000d2e:	b2da      	uxtb	r2, r3
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d043      	beq.n	8000dbc <HAL_I2C_Init+0x98>
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d34:	2341      	movs	r3, #65	; 0x41
 8000d36:	2224      	movs	r2, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d38:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d3a:	54e2      	strb	r2, [r4, r3]
  __HAL_I2C_DISABLE(hi2c);
 8000d3c:	6823      	ldr	r3, [r4, #0]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	438a      	bics	r2, r1
 8000d42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d44:	6861      	ldr	r1, [r4, #4]
 8000d46:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_I2C_Init+0xa8>)
 8000d48:	400a      	ands	r2, r1
 8000d4a:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d4c:	689a      	ldr	r2, [r3, #8]
 8000d4e:	4920      	ldr	r1, [pc, #128]	; (8000dd0 <HAL_I2C_Init+0xac>)
 8000d50:	400a      	ands	r2, r1
 8000d52:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d54:	68e2      	ldr	r2, [r4, #12]
 8000d56:	2a01      	cmp	r2, #1
 8000d58:	d02a      	beq.n	8000db0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000d5a:	2184      	movs	r1, #132	; 0x84
 8000d5c:	68a0      	ldr	r0, [r4, #8]
 8000d5e:	0209      	lsls	r1, r1, #8
 8000d60:	4301      	orrs	r1, r0
 8000d62:	6099      	str	r1, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000d64:	2a02      	cmp	r2, #2
 8000d66:	d102      	bne.n	8000d6e <HAL_I2C_Init+0x4a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000d68:	2280      	movs	r2, #128	; 0x80
 8000d6a:	0112      	lsls	r2, r2, #4
 8000d6c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d6e:	6859      	ldr	r1, [r3, #4]
 8000d70:	4a18      	ldr	r2, [pc, #96]	; (8000dd4 <HAL_I2C_Init+0xb0>)
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
  hi2c->State = HAL_I2C_STATE_READY;
  hi2c->PreviousState = I2C_STATE_NONE;
  hi2c->Mode = HAL_I2C_MODE_NONE;

  return HAL_OK;
 8000d72:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000d74:	430a      	orrs	r2, r1
 8000d76:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4915      	ldr	r1, [pc, #84]	; (8000dd0 <HAL_I2C_Init+0xac>)
 8000d7c:	400a      	ands	r2, r1
 8000d7e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000d80:	6961      	ldr	r1, [r4, #20]
 8000d82:	6922      	ldr	r2, [r4, #16]
 8000d84:	430a      	orrs	r2, r1
 8000d86:	69a1      	ldr	r1, [r4, #24]
 8000d88:	0209      	lsls	r1, r1, #8
 8000d8a:	430a      	orrs	r2, r1
 8000d8c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d8e:	6a21      	ldr	r1, [r4, #32]
 8000d90:	69e2      	ldr	r2, [r4, #28]
 8000d92:	430a      	orrs	r2, r1
  __HAL_I2C_ENABLE(hi2c);
 8000d94:	2101      	movs	r1, #1
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000d96:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	601a      	str	r2, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000d9e:	2300      	movs	r3, #0
  hi2c->State = HAL_I2C_STATE_READY;
 8000da0:	2241      	movs	r2, #65	; 0x41
 8000da2:	311f      	adds	r1, #31
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000da4:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000da6:	54a1      	strb	r1, [r4, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000da8:	3201      	adds	r2, #1
  hi2c->PreviousState = I2C_STATE_NONE;
 8000daa:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000dac:	54a3      	strb	r3, [r4, r2]
}
 8000dae:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000db0:	2280      	movs	r2, #128	; 0x80
 8000db2:	68a1      	ldr	r1, [r4, #8]
 8000db4:	0212      	lsls	r2, r2, #8
 8000db6:	430a      	orrs	r2, r1
 8000db8:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dba:	e7d8      	b.n	8000d6e <HAL_I2C_Init+0x4a>
    hi2c->Lock = HAL_UNLOCKED;
 8000dbc:	3340      	adds	r3, #64	; 0x40
 8000dbe:	54c2      	strb	r2, [r0, r3]
    HAL_I2C_MspInit(hi2c);
 8000dc0:	f7ff fc16 	bl	80005f0 <HAL_I2C_MspInit>
 8000dc4:	e7b6      	b.n	8000d34 <HAL_I2C_Init+0x10>
    return HAL_ERROR;
 8000dc6:	2001      	movs	r0, #1
 8000dc8:	e7f1      	b.n	8000dae <HAL_I2C_Init+0x8a>
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	f0ffffff 	.word	0xf0ffffff
 8000dd0:	ffff7fff 	.word	0xffff7fff
 8000dd4:	02008000 	.word	0x02008000

08000dd8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000dda:	2541      	movs	r5, #65	; 0x41
 8000ddc:	5d43      	ldrb	r3, [r0, r5]
{
 8000dde:	000a      	movs	r2, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8000de0:	b2de      	uxtb	r6, r3
 8000de2:	2b20      	cmp	r3, #32
 8000de4:	d11b      	bne.n	8000e1e <HAL_I2CEx_ConfigAnalogFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000de6:	2740      	movs	r7, #64	; 0x40
 8000de8:	5dc3      	ldrb	r3, [r0, r7]
 8000dea:	2b01      	cmp	r3, #1
 8000dec:	d017      	beq.n	8000e1e <HAL_I2CEx_ConfigAnalogFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000dee:	2101      	movs	r1, #1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000df0:	2324      	movs	r3, #36	; 0x24
    __HAL_I2C_DISABLE(hi2c);
 8000df2:	468c      	mov	ip, r1
    hi2c->State = HAL_I2C_STATE_BUSY;
 8000df4:	5543      	strb	r3, [r0, r5]
    __HAL_I2C_DISABLE(hi2c);
 8000df6:	6803      	ldr	r3, [r0, #0]
 8000df8:	681c      	ldr	r4, [r3, #0]
 8000dfa:	438c      	bics	r4, r1
 8000dfc:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000dfe:	681c      	ldr	r4, [r3, #0]
 8000e00:	4908      	ldr	r1, [pc, #32]	; (8000e24 <HAL_I2CEx_ConfigAnalogFilter+0x4c>)
 8000e02:	400c      	ands	r4, r1
 8000e04:	601c      	str	r4, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e06:	6819      	ldr	r1, [r3, #0]
 8000e08:	4311      	orrs	r1, r2
 8000e0a:	6019      	str	r1, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e0c:	4661      	mov	r1, ip
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e14:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e16:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8000e18:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8000e1a:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000e1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8000e1e:	2002      	movs	r0, #2
 8000e20:	e7fc      	b.n	8000e1c <HAL_I2CEx_ConfigAnalogFilter+0x44>
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	ffffefff 	.word	0xffffefff

08000e28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e28:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e2a:	2541      	movs	r5, #65	; 0x41
 8000e2c:	5d43      	ldrb	r3, [r0, r5]
 8000e2e:	b2de      	uxtb	r6, r3
 8000e30:	2b20      	cmp	r3, #32
 8000e32:	d11a      	bne.n	8000e6a <HAL_I2CEx_ConfigDigitalFilter+0x42>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e34:	2740      	movs	r7, #64	; 0x40
 8000e36:	5dc3      	ldrb	r3, [r0, r7]
 8000e38:	2b01      	cmp	r3, #1
 8000e3a:	d016      	beq.n	8000e6a <HAL_I2CEx_ConfigDigitalFilter+0x42>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e3c:	2324      	movs	r3, #36	; 0x24
 8000e3e:	5543      	strb	r3, [r0, r5]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e40:	3b23      	subs	r3, #35	; 0x23
 8000e42:	469c      	mov	ip, r3
 8000e44:	6804      	ldr	r4, [r0, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e46:	0209      	lsls	r1, r1, #8
    __HAL_I2C_DISABLE(hi2c);
 8000e48:	6822      	ldr	r2, [r4, #0]
 8000e4a:	439a      	bics	r2, r3
 8000e4c:	6022      	str	r2, [r4, #0]
    tmpreg = hi2c->Instance->CR1;
 8000e4e:	6822      	ldr	r2, [r4, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8000e50:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <HAL_I2CEx_ConfigDigitalFilter+0x48>)
 8000e52:	401a      	ands	r2, r3
    tmpreg |= DigitalFilter << 8U;
 8000e54:	4311      	orrs	r1, r2

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;

    __HAL_I2C_ENABLE(hi2c);
 8000e56:	4662      	mov	r2, ip
    hi2c->Instance->CR1 = tmpreg;
 8000e58:	6021      	str	r1, [r4, #0]
    __HAL_I2C_ENABLE(hi2c);
 8000e5a:	6823      	ldr	r3, [r4, #0]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	6023      	str	r3, [r4, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e60:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8000e62:	5546      	strb	r6, [r0, r5]
    __HAL_UNLOCK(hi2c);
 8000e64:	55c3      	strb	r3, [r0, r7]

    return HAL_OK;
 8000e66:	2000      	movs	r0, #0
  }
  else
  {
    return HAL_BUSY;
  }
}
 8000e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_BUSY;
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	e7fc      	b.n	8000e68 <HAL_I2CEx_ConfigDigitalFilter+0x40>
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	fffff0ff 	.word	0xfffff0ff

08000e74 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e74:	2301      	movs	r3, #1
 8000e76:	4904      	ldr	r1, [pc, #16]	; (8000e88 <HAL_I2CEx_EnableFastModePlus+0x14>)
 8000e78:	6b4a      	ldr	r2, [r1, #52]	; 0x34
 8000e7a:	431a      	orrs	r2, r3
 8000e7c:	634a      	str	r2, [r1, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8000e7e:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <HAL_I2CEx_EnableFastModePlus+0x18>)
 8000e80:	6853      	ldr	r3, [r2, #4]
 8000e82:	4303      	orrs	r3, r0
 8000e84:	6053      	str	r3, [r2, #4]
}
 8000e86:	4770      	bx	lr
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010000 	.word	0x40010000

08000e90 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e90:	230c      	movs	r3, #12
  tmpreg = RCC->CFGR;
 8000e92:	491c      	ldr	r1, [pc, #112]	; (8000f04 <HAL_RCC_GetSysClockFreq+0x74>)
{
 8000e94:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000e96:	68ca      	ldr	r2, [r1, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	2b08      	cmp	r3, #8
 8000e9c:	d00b      	beq.n	8000eb6 <HAL_RCC_GetSysClockFreq+0x26>
 8000e9e:	2b0c      	cmp	r3, #12
 8000ea0:	d014      	beq.n	8000ecc <HAL_RCC_GetSysClockFreq+0x3c>
 8000ea2:	2b04      	cmp	r3, #4
 8000ea4:	d009      	beq.n	8000eba <HAL_RCC_GetSysClockFreq+0x2a>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000ea6:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000ea8:	684b      	ldr	r3, [r1, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000eaa:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8000eac:	041b      	lsls	r3, r3, #16
 8000eae:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8000eb0:	3301      	adds	r3, #1
 8000eb2:	4098      	lsls	r0, r3
      break;
    }
  }
  return sysclockfreq;
}
 8000eb4:	bd10      	pop	{r4, pc}
  switch (tmpreg & RCC_CFGR_SWS)
 8000eb6:	4814      	ldr	r0, [pc, #80]	; (8000f08 <HAL_RCC_GetSysClockFreq+0x78>)
 8000eb8:	e7fc      	b.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x24>
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000eba:	6808      	ldr	r0, [r1, #0]
        sysclockfreq =  HSI_VALUE;
 8000ebc:	4b13      	ldr	r3, [pc, #76]	; (8000f0c <HAL_RCC_GetSysClockFreq+0x7c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000ebe:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 8000ec0:	17c0      	asrs	r0, r0, #31
 8000ec2:	4018      	ands	r0, r3
 8000ec4:	4b12      	ldr	r3, [pc, #72]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x80>)
 8000ec6:	469c      	mov	ip, r3
 8000ec8:	4460      	add	r0, ip
 8000eca:	e7f3      	b.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x24>
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8000ecc:	0293      	lsls	r3, r2, #10
 8000ece:	4811      	ldr	r0, [pc, #68]	; (8000f14 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ed0:	0f1b      	lsrs	r3, r3, #28
 8000ed2:	5cc0      	ldrb	r0, [r0, r3]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000ed4:	0212      	lsls	r2, r2, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000ed6:	68cb      	ldr	r3, [r1, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8000ed8:	0f92      	lsrs	r2, r2, #30
 8000eda:	1c54      	adds	r4, r2, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000edc:	03db      	lsls	r3, r3, #15
 8000ede:	d40c      	bmi.n	8000efa <HAL_RCC_GetSysClockFreq+0x6a>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8000ee0:	680b      	ldr	r3, [r1, #0]
 8000ee2:	06db      	lsls	r3, r3, #27
 8000ee4:	d50b      	bpl.n	8000efe <HAL_RCC_GetSysClockFreq+0x6e>
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8000ee6:	4a0c      	ldr	r2, [pc, #48]	; (8000f18 <HAL_RCC_GetSysClockFreq+0x88>)
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	2100      	movs	r1, #0
 8000eec:	f7ff f9b8 	bl	8000260 <__aeabi_lmul>
 8000ef0:	0022      	movs	r2, r4
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	f7ff f994 	bl	8000220 <__aeabi_uldivmod>
 8000ef8:	e7dc      	b.n	8000eb4 <HAL_RCC_GetSysClockFreq+0x24>
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000efa:	4a03      	ldr	r2, [pc, #12]	; (8000f08 <HAL_RCC_GetSysClockFreq+0x78>)
 8000efc:	e7f4      	b.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x58>
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <HAL_RCC_GetSysClockFreq+0x80>)
 8000f00:	e7f2      	b.n	8000ee8 <HAL_RCC_GetSysClockFreq+0x58>
 8000f02:	46c0      	nop			; (mov r8, r8)
 8000f04:	40021000 	.word	0x40021000
 8000f08:	007a1200 	.word	0x007a1200
 8000f0c:	ff48e500 	.word	0xff48e500
 8000f10:	00f42400 	.word	0x00f42400
 8000f14:	080032b0 	.word	0x080032b0
 8000f18:	003d0900 	.word	0x003d0900

08000f1c <HAL_RCC_OscConfig>:
{
 8000f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f1e:	46d6      	mov	lr, sl
 8000f20:	464f      	mov	r7, r9
 8000f22:	4646      	mov	r6, r8
 8000f24:	b5c0      	push	{r6, r7, lr}
 8000f26:	0004      	movs	r4, r0
 8000f28:	b082      	sub	sp, #8
  if(RCC_OscInitStruct == NULL)
 8000f2a:	2800      	cmp	r0, #0
 8000f2c:	d100      	bne.n	8000f30 <HAL_RCC_OscConfig+0x14>
 8000f2e:	e146      	b.n	80011be <HAL_RCC_OscConfig+0x2a2>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f30:	4bc8      	ldr	r3, [pc, #800]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f32:	250c      	movs	r5, #12
 8000f34:	68da      	ldr	r2, [r3, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000f36:	68de      	ldr	r6, [r3, #12]
 8000f38:	2380      	movs	r3, #128	; 0x80
 8000f3a:	025b      	lsls	r3, r3, #9
 8000f3c:	401e      	ands	r6, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f3e:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000f40:	4015      	ands	r5, r2
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f42:	07da      	lsls	r2, r3, #31
 8000f44:	d533      	bpl.n	8000fae <HAL_RCC_OscConfig+0x92>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000f46:	2d08      	cmp	r5, #8
 8000f48:	d100      	bne.n	8000f4c <HAL_RCC_OscConfig+0x30>
 8000f4a:	e12f      	b.n	80011ac <HAL_RCC_OscConfig+0x290>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000f4c:	2d0c      	cmp	r5, #12
 8000f4e:	d100      	bne.n	8000f52 <HAL_RCC_OscConfig+0x36>
 8000f50:	e129      	b.n	80011a6 <HAL_RCC_OscConfig+0x28a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f52:	2080      	movs	r0, #128	; 0x80
 8000f54:	6861      	ldr	r1, [r4, #4]
 8000f56:	0240      	lsls	r0, r0, #9
 8000f58:	4281      	cmp	r1, r0
 8000f5a:	d100      	bne.n	8000f5e <HAL_RCC_OscConfig+0x42>
 8000f5c:	e161      	b.n	8001222 <HAL_RCC_OscConfig+0x306>
 8000f5e:	22a0      	movs	r2, #160	; 0xa0
 8000f60:	02d2      	lsls	r2, r2, #11
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d100      	bne.n	8000f68 <HAL_RCC_OscConfig+0x4c>
 8000f66:	e245      	b.n	80013f4 <HAL_RCC_OscConfig+0x4d8>
 8000f68:	4fba      	ldr	r7, [pc, #744]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8000f6a:	4bbb      	ldr	r3, [pc, #748]	; (8001258 <HAL_RCC_OscConfig+0x33c>)
 8000f6c:	683a      	ldr	r2, [r7, #0]
 8000f6e:	401a      	ands	r2, r3
 8000f70:	603a      	str	r2, [r7, #0]
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	4ab9      	ldr	r2, [pc, #740]	; (800125c <HAL_RCC_OscConfig+0x340>)
 8000f76:	4003      	ands	r3, r0
 8000f78:	9301      	str	r3, [sp, #4]
 8000f7a:	9b01      	ldr	r3, [sp, #4]
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	603b      	str	r3, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f82:	2900      	cmp	r1, #0
 8000f84:	d000      	beq.n	8000f88 <HAL_RCC_OscConfig+0x6c>
 8000f86:	e150      	b.n	800122a <HAL_RCC_OscConfig+0x30e>
        tickstart = HAL_GetTick();
 8000f88:	f7ff fd5e 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f8c:	2380      	movs	r3, #128	; 0x80
 8000f8e:	029b      	lsls	r3, r3, #10
        tickstart = HAL_GetTick();
 8000f90:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000f92:	4699      	mov	r9, r3
 8000f94:	e006      	b.n	8000fa4 <HAL_RCC_OscConfig+0x88>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f96:	f7ff fd57 	bl	8000a48 <HAL_GetTick>
 8000f9a:	4643      	mov	r3, r8
 8000f9c:	1ac0      	subs	r0, r0, r3
 8000f9e:	2864      	cmp	r0, #100	; 0x64
 8000fa0:	d900      	bls.n	8000fa4 <HAL_RCC_OscConfig+0x88>
 8000fa2:	e1cc      	b.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fa4:	464a      	mov	r2, r9
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	4213      	tst	r3, r2
 8000faa:	d1f4      	bne.n	8000f96 <HAL_RCC_OscConfig+0x7a>
 8000fac:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fae:	079a      	lsls	r2, r3, #30
 8000fb0:	d527      	bpl.n	8001002 <HAL_RCC_OscConfig+0xe6>
    hsi_state = RCC_OscInitStruct->HSIState;
 8000fb2:	68e3      	ldr	r3, [r4, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000fb4:	2d04      	cmp	r5, #4
 8000fb6:	d100      	bne.n	8000fba <HAL_RCC_OscConfig+0x9e>
 8000fb8:	e16b      	b.n	8001292 <HAL_RCC_OscConfig+0x376>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000fba:	2d0c      	cmp	r5, #12
 8000fbc:	d100      	bne.n	8000fc0 <HAL_RCC_OscConfig+0xa4>
 8000fbe:	e165      	b.n	800128c <HAL_RCC_OscConfig+0x370>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fc0:	4ea4      	ldr	r6, [pc, #656]	; (8001254 <HAL_RCC_OscConfig+0x338>)
      if(hsi_state != RCC_HSI_OFF)
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d100      	bne.n	8000fc8 <HAL_RCC_OscConfig+0xac>
 8000fc6:	e1d1      	b.n	800136c <HAL_RCC_OscConfig+0x450>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8000fc8:	2109      	movs	r1, #9
 8000fca:	6832      	ldr	r2, [r6, #0]
 8000fcc:	438a      	bics	r2, r1
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000fd2:	f7ff fd39 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fd6:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 8000fd8:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fda:	4698      	mov	r8, r3
 8000fdc:	e005      	b.n	8000fea <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fde:	f7ff fd33 	bl	8000a48 <HAL_GetTick>
 8000fe2:	1bc0      	subs	r0, r0, r7
 8000fe4:	2802      	cmp	r0, #2
 8000fe6:	d900      	bls.n	8000fea <HAL_RCC_OscConfig+0xce>
 8000fe8:	e1a9      	b.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8000fea:	4642      	mov	r2, r8
 8000fec:	6833      	ldr	r3, [r6, #0]
 8000fee:	421a      	tst	r2, r3
 8000ff0:	d0f5      	beq.n	8000fde <HAL_RCC_OscConfig+0xc2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ff2:	6872      	ldr	r2, [r6, #4]
 8000ff4:	6923      	ldr	r3, [r4, #16]
 8000ff6:	499a      	ldr	r1, [pc, #616]	; (8001260 <HAL_RCC_OscConfig+0x344>)
 8000ff8:	021b      	lsls	r3, r3, #8
 8000ffa:	400a      	ands	r2, r1
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	6073      	str	r3, [r6, #4]
 8001000:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001002:	06da      	lsls	r2, r3, #27
 8001004:	d52b      	bpl.n	800105e <HAL_RCC_OscConfig+0x142>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001006:	2d00      	cmp	r5, #0
 8001008:	d100      	bne.n	800100c <HAL_RCC_OscConfig+0xf0>
 800100a:	e0df      	b.n	80011cc <HAL_RCC_OscConfig+0x2b0>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800100c:	69e3      	ldr	r3, [r4, #28]
        __HAL_RCC_MSI_ENABLE();
 800100e:	4e91      	ldr	r6, [pc, #580]	; (8001254 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001010:	2b00      	cmp	r3, #0
 8001012:	d100      	bne.n	8001016 <HAL_RCC_OscConfig+0xfa>
 8001014:	e1bf      	b.n	8001396 <HAL_RCC_OscConfig+0x47a>
        __HAL_RCC_MSI_ENABLE();
 8001016:	2380      	movs	r3, #128	; 0x80
 8001018:	6832      	ldr	r2, [r6, #0]
 800101a:	005b      	lsls	r3, r3, #1
 800101c:	4313      	orrs	r3, r2
 800101e:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001020:	f7ff fd12 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 8001028:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800102a:	4698      	mov	r8, r3
 800102c:	e005      	b.n	800103a <HAL_RCC_OscConfig+0x11e>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800102e:	f7ff fd0b 	bl	8000a48 <HAL_GetTick>
 8001032:	1bc0      	subs	r0, r0, r7
 8001034:	2802      	cmp	r0, #2
 8001036:	d900      	bls.n	800103a <HAL_RCC_OscConfig+0x11e>
 8001038:	e181      	b.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800103a:	4642      	mov	r2, r8
 800103c:	6833      	ldr	r3, [r6, #0]
 800103e:	4213      	tst	r3, r2
 8001040:	d0f5      	beq.n	800102e <HAL_RCC_OscConfig+0x112>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001042:	6873      	ldr	r3, [r6, #4]
 8001044:	4a87      	ldr	r2, [pc, #540]	; (8001264 <HAL_RCC_OscConfig+0x348>)
 8001046:	4013      	ands	r3, r2
 8001048:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800104a:	4313      	orrs	r3, r2
 800104c:	6073      	str	r3, [r6, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800104e:	6872      	ldr	r2, [r6, #4]
 8001050:	6a23      	ldr	r3, [r4, #32]
 8001052:	0212      	lsls	r2, r2, #8
 8001054:	061b      	lsls	r3, r3, #24
 8001056:	0a12      	lsrs	r2, r2, #8
 8001058:	4313      	orrs	r3, r2
 800105a:	6073      	str	r3, [r6, #4]
 800105c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800105e:	071a      	lsls	r2, r3, #28
 8001060:	d519      	bpl.n	8001096 <HAL_RCC_OscConfig+0x17a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001062:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8001064:	4e7b      	ldr	r6, [pc, #492]	; (8001254 <HAL_RCC_OscConfig+0x338>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001066:	2b00      	cmp	r3, #0
 8001068:	d100      	bne.n	800106c <HAL_RCC_OscConfig+0x150>
 800106a:	e16a      	b.n	8001342 <HAL_RCC_OscConfig+0x426>
      __HAL_RCC_LSI_ENABLE();
 800106c:	2201      	movs	r2, #1
 800106e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001070:	4313      	orrs	r3, r2
 8001072:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 8001074:	f7ff fce8 	bl	8000a48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001078:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 800107a:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800107c:	4698      	mov	r8, r3
 800107e:	e005      	b.n	800108c <HAL_RCC_OscConfig+0x170>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001080:	f7ff fce2 	bl	8000a48 <HAL_GetTick>
 8001084:	1bc0      	subs	r0, r0, r7
 8001086:	2802      	cmp	r0, #2
 8001088:	d900      	bls.n	800108c <HAL_RCC_OscConfig+0x170>
 800108a:	e158      	b.n	800133e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800108c:	4642      	mov	r2, r8
 800108e:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001090:	421a      	tst	r2, r3
 8001092:	d0f5      	beq.n	8001080 <HAL_RCC_OscConfig+0x164>
 8001094:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001096:	075a      	lsls	r2, r3, #29
 8001098:	d543      	bpl.n	8001122 <HAL_RCC_OscConfig+0x206>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800109c:	2000      	movs	r0, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800109e:	4a6d      	ldr	r2, [pc, #436]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010a0:	055b      	lsls	r3, r3, #21
 80010a2:	6b91      	ldr	r1, [r2, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 80010a4:	4682      	mov	sl, r0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80010a6:	4219      	tst	r1, r3
 80010a8:	d104      	bne.n	80010b4 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 80010aa:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80010ac:	430b      	orrs	r3, r1
 80010ae:	6393      	str	r3, [r2, #56]	; 0x38
      pwrclkchanged = SET;
 80010b0:	2301      	movs	r3, #1
 80010b2:	469a      	mov	sl, r3
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010b4:	2780      	movs	r7, #128	; 0x80
 80010b6:	4e6c      	ldr	r6, [pc, #432]	; (8001268 <HAL_RCC_OscConfig+0x34c>)
 80010b8:	007f      	lsls	r7, r7, #1
 80010ba:	6833      	ldr	r3, [r6, #0]
 80010bc:	423b      	tst	r3, r7
 80010be:	d100      	bne.n	80010c2 <HAL_RCC_OscConfig+0x1a6>
 80010c0:	e12d      	b.n	800131e <HAL_RCC_OscConfig+0x402>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010c2:	2280      	movs	r2, #128	; 0x80
 80010c4:	68a3      	ldr	r3, [r4, #8]
 80010c6:	0052      	lsls	r2, r2, #1
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d100      	bne.n	80010ce <HAL_RCC_OscConfig+0x1b2>
 80010cc:	e1d7      	b.n	800147e <HAL_RCC_OscConfig+0x562>
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d100      	bne.n	80010d4 <HAL_RCC_OscConfig+0x1b8>
 80010d2:	e108      	b.n	80012e6 <HAL_RCC_OscConfig+0x3ca>
 80010d4:	21a0      	movs	r1, #160	; 0xa0
 80010d6:	00c9      	lsls	r1, r1, #3
 80010d8:	428b      	cmp	r3, r1
 80010da:	d100      	bne.n	80010de <HAL_RCC_OscConfig+0x1c2>
 80010dc:	e1f1      	b.n	80014c2 <HAL_RCC_OscConfig+0x5a6>
 80010de:	4b5d      	ldr	r3, [pc, #372]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80010e0:	4962      	ldr	r1, [pc, #392]	; (800126c <HAL_RCC_OscConfig+0x350>)
 80010e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010e4:	400a      	ands	r2, r1
 80010e6:	651a      	str	r2, [r3, #80]	; 0x50
 80010e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80010ea:	4961      	ldr	r1, [pc, #388]	; (8001270 <HAL_RCC_OscConfig+0x354>)
 80010ec:	400a      	ands	r2, r1
 80010ee:	651a      	str	r2, [r3, #80]	; 0x50
      tickstart = HAL_GetTick();
 80010f0:	f7ff fcaa 	bl	8000a48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010f4:	2780      	movs	r7, #128	; 0x80
 80010f6:	4b57      	ldr	r3, [pc, #348]	; (8001254 <HAL_RCC_OscConfig+0x338>)
      tickstart = HAL_GetTick();
 80010f8:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010fa:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010fc:	4b5d      	ldr	r3, [pc, #372]	; (8001274 <HAL_RCC_OscConfig+0x358>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80010fe:	00bf      	lsls	r7, r7, #2
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001100:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001102:	e005      	b.n	8001110 <HAL_RCC_OscConfig+0x1f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001104:	f7ff fca0 	bl	8000a48 <HAL_GetTick>
 8001108:	1b80      	subs	r0, r0, r6
 800110a:	4548      	cmp	r0, r9
 800110c:	d900      	bls.n	8001110 <HAL_RCC_OscConfig+0x1f4>
 800110e:	e116      	b.n	800133e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001110:	4643      	mov	r3, r8
 8001112:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001114:	423b      	tst	r3, r7
 8001116:	d0f5      	beq.n	8001104 <HAL_RCC_OscConfig+0x1e8>
    if(pwrclkchanged == SET)
 8001118:	4653      	mov	r3, sl
 800111a:	2b01      	cmp	r3, #1
 800111c:	d100      	bne.n	8001120 <HAL_RCC_OscConfig+0x204>
 800111e:	e173      	b.n	8001408 <HAL_RCC_OscConfig+0x4ec>
 8001120:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001122:	069b      	lsls	r3, r3, #26
 8001124:	d520      	bpl.n	8001168 <HAL_RCC_OscConfig+0x24c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001126:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_HSI48_ENABLE();
 8001128:	4e4a      	ldr	r6, [pc, #296]	; (8001254 <HAL_RCC_OscConfig+0x338>)
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800112a:	2b00      	cmp	r3, #0
 800112c:	d100      	bne.n	8001130 <HAL_RCC_OscConfig+0x214>
 800112e:	e148      	b.n	80013c2 <HAL_RCC_OscConfig+0x4a6>
        __HAL_RCC_HSI48_ENABLE();
 8001130:	2101      	movs	r1, #1
 8001132:	68b2      	ldr	r2, [r6, #8]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001134:	2702      	movs	r7, #2
        __HAL_RCC_HSI48_ENABLE();
 8001136:	430a      	orrs	r2, r1
 8001138:	60b2      	str	r2, [r6, #8]
 800113a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 800113c:	4a4e      	ldr	r2, [pc, #312]	; (8001278 <HAL_RCC_OscConfig+0x35c>)
 800113e:	430b      	orrs	r3, r1
 8001140:	6373      	str	r3, [r6, #52]	; 0x34
 8001142:	2380      	movs	r3, #128	; 0x80
 8001144:	6a11      	ldr	r1, [r2, #32]
 8001146:	019b      	lsls	r3, r3, #6
 8001148:	430b      	orrs	r3, r1
 800114a:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 800114c:	f7ff fc7c 	bl	8000a48 <HAL_GetTick>
 8001150:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001152:	e006      	b.n	8001162 <HAL_RCC_OscConfig+0x246>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001154:	f7ff fc78 	bl	8000a48 <HAL_GetTick>
 8001158:	4643      	mov	r3, r8
 800115a:	1ac0      	subs	r0, r0, r3
 800115c:	2802      	cmp	r0, #2
 800115e:	d900      	bls.n	8001162 <HAL_RCC_OscConfig+0x246>
 8001160:	e0ed      	b.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001162:	68b3      	ldr	r3, [r6, #8]
 8001164:	421f      	tst	r7, r3
 8001166:	d0f5      	beq.n	8001154 <HAL_RCC_OscConfig+0x238>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800116a:	2b00      	cmp	r3, #0
 800116c:	d019      	beq.n	80011a2 <HAL_RCC_OscConfig+0x286>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800116e:	2d0c      	cmp	r5, #12
 8001170:	d100      	bne.n	8001174 <HAL_RCC_OscConfig+0x258>
 8001172:	e189      	b.n	8001488 <HAL_RCC_OscConfig+0x56c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001174:	2b02      	cmp	r3, #2
 8001176:	d100      	bne.n	800117a <HAL_RCC_OscConfig+0x25e>
 8001178:	e14d      	b.n	8001416 <HAL_RCC_OscConfig+0x4fa>
        __HAL_RCC_PLL_DISABLE();
 800117a:	4c36      	ldr	r4, [pc, #216]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 800117c:	4a3f      	ldr	r2, [pc, #252]	; (800127c <HAL_RCC_OscConfig+0x360>)
 800117e:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001180:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8001182:	4013      	ands	r3, r2
 8001184:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001186:	f7ff fc5f 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800118a:	04b6      	lsls	r6, r6, #18
        tickstart = HAL_GetTick();
 800118c:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800118e:	e005      	b.n	800119c <HAL_RCC_OscConfig+0x280>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001190:	f7ff fc5a 	bl	8000a48 <HAL_GetTick>
 8001194:	1b40      	subs	r0, r0, r5
 8001196:	2802      	cmp	r0, #2
 8001198:	d900      	bls.n	800119c <HAL_RCC_OscConfig+0x280>
 800119a:	e0d0      	b.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800119c:	6823      	ldr	r3, [r4, #0]
 800119e:	4233      	tst	r3, r6
 80011a0:	d1f6      	bne.n	8001190 <HAL_RCC_OscConfig+0x274>
  return HAL_OK;
 80011a2:	2000      	movs	r0, #0
 80011a4:	e00c      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80011a6:	2e00      	cmp	r6, #0
 80011a8:	d100      	bne.n	80011ac <HAL_RCC_OscConfig+0x290>
 80011aa:	e6d2      	b.n	8000f52 <HAL_RCC_OscConfig+0x36>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ac:	4a29      	ldr	r2, [pc, #164]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011ae:	6812      	ldr	r2, [r2, #0]
 80011b0:	0392      	lsls	r2, r2, #14
 80011b2:	d400      	bmi.n	80011b6 <HAL_RCC_OscConfig+0x29a>
 80011b4:	e6fb      	b.n	8000fae <HAL_RCC_OscConfig+0x92>
 80011b6:	6862      	ldr	r2, [r4, #4]
 80011b8:	2a00      	cmp	r2, #0
 80011ba:	d000      	beq.n	80011be <HAL_RCC_OscConfig+0x2a2>
 80011bc:	e6f7      	b.n	8000fae <HAL_RCC_OscConfig+0x92>
        return HAL_ERROR;
 80011be:	2001      	movs	r0, #1
}
 80011c0:	b002      	add	sp, #8
 80011c2:	bce0      	pop	{r5, r6, r7}
 80011c4:	46ba      	mov	sl, r7
 80011c6:	46b1      	mov	r9, r6
 80011c8:	46a8      	mov	r8, r5
 80011ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	059b      	lsls	r3, r3, #22
 80011d2:	d502      	bpl.n	80011da <HAL_RCC_OscConfig+0x2be>
 80011d4:	69e3      	ldr	r3, [r4, #28]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d0f1      	beq.n	80011be <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011da:	4a1e      	ldr	r2, [pc, #120]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 80011dc:	4821      	ldr	r0, [pc, #132]	; (8001264 <HAL_RCC_OscConfig+0x348>)
 80011de:	6851      	ldr	r1, [r2, #4]
 80011e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011e2:	4001      	ands	r1, r0
 80011e4:	4319      	orrs	r1, r3
 80011e6:	6051      	str	r1, [r2, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e8:	6850      	ldr	r0, [r2, #4]
 80011ea:	6a21      	ldr	r1, [r4, #32]
 80011ec:	0200      	lsls	r0, r0, #8
 80011ee:	0a00      	lsrs	r0, r0, #8
 80011f0:	0609      	lsls	r1, r1, #24
 80011f2:	4301      	orrs	r1, r0
 80011f4:	6051      	str	r1, [r2, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80011f6:	68d1      	ldr	r1, [r2, #12]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80011f8:	2280      	movs	r2, #128	; 0x80
 80011fa:	0b5b      	lsrs	r3, r3, #13
 80011fc:	3301      	adds	r3, #1
 80011fe:	0212      	lsls	r2, r2, #8
 8001200:	409a      	lsls	r2, r3
 8001202:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001204:	060a      	lsls	r2, r1, #24
 8001206:	491e      	ldr	r1, [pc, #120]	; (8001280 <HAL_RCC_OscConfig+0x364>)
 8001208:	0f12      	lsrs	r2, r2, #28
 800120a:	5c8a      	ldrb	r2, [r1, r2]
 800120c:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800120e:	4a1d      	ldr	r2, [pc, #116]	; (8001284 <HAL_RCC_OscConfig+0x368>)
 8001210:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (uwTickPrio);
 8001212:	4b1d      	ldr	r3, [pc, #116]	; (8001288 <HAL_RCC_OscConfig+0x36c>)
 8001214:	6818      	ldr	r0, [r3, #0]
 8001216:	f7ff fbd1 	bl	80009bc <HAL_InitTick>
        if(status != HAL_OK)
 800121a:	2800      	cmp	r0, #0
 800121c:	d1d0      	bne.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
 800121e:	6823      	ldr	r3, [r4, #0]
 8001220:	e71d      	b.n	800105e <HAL_RCC_OscConfig+0x142>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001222:	4a0c      	ldr	r2, [pc, #48]	; (8001254 <HAL_RCC_OscConfig+0x338>)
 8001224:	6813      	ldr	r3, [r2, #0]
 8001226:	430b      	orrs	r3, r1
 8001228:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800122a:	f7ff fc0d 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800122e:	4b09      	ldr	r3, [pc, #36]	; (8001254 <HAL_RCC_OscConfig+0x338>)
        tickstart = HAL_GetTick();
 8001230:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001232:	4699      	mov	r9, r3
 8001234:	2380      	movs	r3, #128	; 0x80
 8001236:	029b      	lsls	r3, r3, #10
 8001238:	4698      	mov	r8, r3
 800123a:	e004      	b.n	8001246 <HAL_RCC_OscConfig+0x32a>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800123c:	f7ff fc04 	bl	8000a48 <HAL_GetTick>
 8001240:	1bc0      	subs	r0, r0, r7
 8001242:	2864      	cmp	r0, #100	; 0x64
 8001244:	d87b      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001246:	464b      	mov	r3, r9
 8001248:	4642      	mov	r2, r8
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4213      	tst	r3, r2
 800124e:	d0f5      	beq.n	800123c <HAL_RCC_OscConfig+0x320>
 8001250:	6823      	ldr	r3, [r4, #0]
 8001252:	e6ac      	b.n	8000fae <HAL_RCC_OscConfig+0x92>
 8001254:	40021000 	.word	0x40021000
 8001258:	fffeffff 	.word	0xfffeffff
 800125c:	fffbffff 	.word	0xfffbffff
 8001260:	ffffe0ff 	.word	0xffffe0ff
 8001264:	ffff1fff 	.word	0xffff1fff
 8001268:	40007000 	.word	0x40007000
 800126c:	fffffeff 	.word	0xfffffeff
 8001270:	fffffbff 	.word	0xfffffbff
 8001274:	00001388 	.word	0x00001388
 8001278:	40010000 	.word	0x40010000
 800127c:	feffffff 	.word	0xfeffffff
 8001280:	080032a0 	.word	0x080032a0
 8001284:	20000000 	.word	0x20000000
 8001288:	20000008 	.word	0x20000008
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800128c:	2e00      	cmp	r6, #0
 800128e:	d000      	beq.n	8001292 <HAL_RCC_OscConfig+0x376>
 8001290:	e696      	b.n	8000fc0 <HAL_RCC_OscConfig+0xa4>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001292:	4a91      	ldr	r2, [pc, #580]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 8001294:	6812      	ldr	r2, [r2, #0]
 8001296:	0752      	lsls	r2, r2, #29
 8001298:	d502      	bpl.n	80012a0 <HAL_RCC_OscConfig+0x384>
 800129a:	2b00      	cmp	r3, #0
 800129c:	d100      	bne.n	80012a0 <HAL_RCC_OscConfig+0x384>
 800129e:	e78e      	b.n	80011be <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4e8d      	ldr	r6, [pc, #564]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 80012a2:	6922      	ldr	r2, [r4, #16]
 80012a4:	6871      	ldr	r1, [r6, #4]
 80012a6:	488d      	ldr	r0, [pc, #564]	; (80014dc <HAL_RCC_OscConfig+0x5c0>)
 80012a8:	0212      	lsls	r2, r2, #8
 80012aa:	4001      	ands	r1, r0
 80012ac:	430a      	orrs	r2, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012ae:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b0:	6072      	str	r2, [r6, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80012b2:	6832      	ldr	r2, [r6, #0]
 80012b4:	438a      	bics	r2, r1
 80012b6:	4313      	orrs	r3, r2
 80012b8:	6033      	str	r3, [r6, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012ba:	f7ff fde9 	bl	8000e90 <HAL_RCC_GetSysClockFreq>
 80012be:	68f3      	ldr	r3, [r6, #12]
 80012c0:	4a87      	ldr	r2, [pc, #540]	; (80014e0 <HAL_RCC_OscConfig+0x5c4>)
 80012c2:	061b      	lsls	r3, r3, #24
 80012c4:	0f1b      	lsrs	r3, r3, #28
 80012c6:	5cd3      	ldrb	r3, [r2, r3]
 80012c8:	40d8      	lsrs	r0, r3
 80012ca:	4b86      	ldr	r3, [pc, #536]	; (80014e4 <HAL_RCC_OscConfig+0x5c8>)
 80012cc:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (uwTickPrio);
 80012ce:	4b86      	ldr	r3, [pc, #536]	; (80014e8 <HAL_RCC_OscConfig+0x5cc>)
 80012d0:	6818      	ldr	r0, [r3, #0]
 80012d2:	f7ff fb73 	bl	80009bc <HAL_InitTick>
      if(status != HAL_OK)
 80012d6:	2800      	cmp	r0, #0
 80012d8:	d000      	beq.n	80012dc <HAL_RCC_OscConfig+0x3c0>
 80012da:	e771      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
 80012dc:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012de:	06da      	lsls	r2, r3, #27
 80012e0:	d400      	bmi.n	80012e4 <HAL_RCC_OscConfig+0x3c8>
 80012e2:	e6bc      	b.n	800105e <HAL_RCC_OscConfig+0x142>
 80012e4:	e68f      	b.n	8001006 <HAL_RCC_OscConfig+0xea>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012e6:	4e7c      	ldr	r6, [pc, #496]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 80012e8:	4a80      	ldr	r2, [pc, #512]	; (80014ec <HAL_RCC_OscConfig+0x5d0>)
 80012ea:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80012ec:	4013      	ands	r3, r2
 80012ee:	6533      	str	r3, [r6, #80]	; 0x50
 80012f0:	6d33      	ldr	r3, [r6, #80]	; 0x50
 80012f2:	4a7f      	ldr	r2, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x5d4>)
 80012f4:	4013      	ands	r3, r2
 80012f6:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 80012f8:	f7ff fba6 	bl	8000a48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80012fc:	2380      	movs	r3, #128	; 0x80
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001302:	4b7c      	ldr	r3, [pc, #496]	; (80014f4 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8001304:	0007      	movs	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001306:	4699      	mov	r9, r3
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001308:	e004      	b.n	8001314 <HAL_RCC_OscConfig+0x3f8>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800130a:	f7ff fb9d 	bl	8000a48 <HAL_GetTick>
 800130e:	1bc0      	subs	r0, r0, r7
 8001310:	4548      	cmp	r0, r9
 8001312:	d814      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001314:	4642      	mov	r2, r8
 8001316:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001318:	4213      	tst	r3, r2
 800131a:	d1f6      	bne.n	800130a <HAL_RCC_OscConfig+0x3ee>
 800131c:	e6fc      	b.n	8001118 <HAL_RCC_OscConfig+0x1fc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800131e:	6833      	ldr	r3, [r6, #0]
 8001320:	433b      	orrs	r3, r7
 8001322:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8001324:	f7ff fb90 	bl	8000a48 <HAL_GetTick>
 8001328:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	6833      	ldr	r3, [r6, #0]
 800132c:	423b      	tst	r3, r7
 800132e:	d000      	beq.n	8001332 <HAL_RCC_OscConfig+0x416>
 8001330:	e6c7      	b.n	80010c2 <HAL_RCC_OscConfig+0x1a6>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001332:	f7ff fb89 	bl	8000a48 <HAL_GetTick>
 8001336:	4643      	mov	r3, r8
 8001338:	1ac0      	subs	r0, r0, r3
 800133a:	2864      	cmp	r0, #100	; 0x64
 800133c:	d9f5      	bls.n	800132a <HAL_RCC_OscConfig+0x40e>
            return HAL_TIMEOUT;
 800133e:	2003      	movs	r0, #3
 8001340:	e73e      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
      __HAL_RCC_LSI_DISABLE();
 8001342:	2201      	movs	r2, #1
 8001344:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001346:	4393      	bics	r3, r2
 8001348:	6533      	str	r3, [r6, #80]	; 0x50
      tickstart = HAL_GetTick();
 800134a:	f7ff fb7d 	bl	8000a48 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800134e:	2302      	movs	r3, #2
      tickstart = HAL_GetTick();
 8001350:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001352:	4698      	mov	r8, r3
 8001354:	e004      	b.n	8001360 <HAL_RCC_OscConfig+0x444>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001356:	f7ff fb77 	bl	8000a48 <HAL_GetTick>
 800135a:	1bc0      	subs	r0, r0, r7
 800135c:	2802      	cmp	r0, #2
 800135e:	d8ee      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001360:	4642      	mov	r2, r8
 8001362:	6d33      	ldr	r3, [r6, #80]	; 0x50
 8001364:	421a      	tst	r2, r3
 8001366:	d1f6      	bne.n	8001356 <HAL_RCC_OscConfig+0x43a>
 8001368:	6823      	ldr	r3, [r4, #0]
 800136a:	e694      	b.n	8001096 <HAL_RCC_OscConfig+0x17a>
        __HAL_RCC_HSI_DISABLE();
 800136c:	2201      	movs	r2, #1
 800136e:	6833      	ldr	r3, [r6, #0]
 8001370:	4393      	bics	r3, r2
 8001372:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8001374:	f7ff fb68 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001378:	2304      	movs	r3, #4
        tickstart = HAL_GetTick();
 800137a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800137c:	4698      	mov	r8, r3
 800137e:	e004      	b.n	800138a <HAL_RCC_OscConfig+0x46e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001380:	f7ff fb62 	bl	8000a48 <HAL_GetTick>
 8001384:	1bc0      	subs	r0, r0, r7
 8001386:	2802      	cmp	r0, #2
 8001388:	d8d9      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800138a:	4642      	mov	r2, r8
 800138c:	6833      	ldr	r3, [r6, #0]
 800138e:	421a      	tst	r2, r3
 8001390:	d1f6      	bne.n	8001380 <HAL_RCC_OscConfig+0x464>
 8001392:	6823      	ldr	r3, [r4, #0]
 8001394:	e7a3      	b.n	80012de <HAL_RCC_OscConfig+0x3c2>
        __HAL_RCC_MSI_DISABLE();
 8001396:	6833      	ldr	r3, [r6, #0]
 8001398:	4a54      	ldr	r2, [pc, #336]	; (80014ec <HAL_RCC_OscConfig+0x5d0>)
 800139a:	4013      	ands	r3, r2
 800139c:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 800139e:	f7ff fb53 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013a2:	2380      	movs	r3, #128	; 0x80
 80013a4:	009b      	lsls	r3, r3, #2
        tickstart = HAL_GetTick();
 80013a6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013a8:	4698      	mov	r8, r3
 80013aa:	e004      	b.n	80013b6 <HAL_RCC_OscConfig+0x49a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013ac:	f7ff fb4c 	bl	8000a48 <HAL_GetTick>
 80013b0:	1bc0      	subs	r0, r0, r7
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d8c3      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80013b6:	4642      	mov	r2, r8
 80013b8:	6833      	ldr	r3, [r6, #0]
 80013ba:	4213      	tst	r3, r2
 80013bc:	d1f6      	bne.n	80013ac <HAL_RCC_OscConfig+0x490>
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	e64d      	b.n	800105e <HAL_RCC_OscConfig+0x142>
        __HAL_RCC_HSI48_DISABLE();
 80013c2:	2201      	movs	r2, #1
 80013c4:	68b3      	ldr	r3, [r6, #8]
 80013c6:	494c      	ldr	r1, [pc, #304]	; (80014f8 <HAL_RCC_OscConfig+0x5dc>)
 80013c8:	4393      	bics	r3, r2
 80013ca:	4a4c      	ldr	r2, [pc, #304]	; (80014fc <HAL_RCC_OscConfig+0x5e0>)
 80013cc:	60b3      	str	r3, [r6, #8]
 80013ce:	6a13      	ldr	r3, [r2, #32]
 80013d0:	400b      	ands	r3, r1
 80013d2:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 80013d4:	f7ff fb38 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013d8:	2302      	movs	r3, #2
        tickstart = HAL_GetTick();
 80013da:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013dc:	4698      	mov	r8, r3
 80013de:	e004      	b.n	80013ea <HAL_RCC_OscConfig+0x4ce>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80013e0:	f7ff fb32 	bl	8000a48 <HAL_GetTick>
 80013e4:	1bc0      	subs	r0, r0, r7
 80013e6:	2802      	cmp	r0, #2
 80013e8:	d8a9      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80013ea:	4642      	mov	r2, r8
 80013ec:	68b3      	ldr	r3, [r6, #8]
 80013ee:	421a      	tst	r2, r3
 80013f0:	d1f6      	bne.n	80013e0 <HAL_RCC_OscConfig+0x4c4>
 80013f2:	e6b9      	b.n	8001168 <HAL_RCC_OscConfig+0x24c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	4a38      	ldr	r2, [pc, #224]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 80013f8:	02db      	lsls	r3, r3, #11
 80013fa:	6811      	ldr	r1, [r2, #0]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	6013      	str	r3, [r2, #0]
 8001400:	6813      	ldr	r3, [r2, #0]
 8001402:	4303      	orrs	r3, r0
 8001404:	6013      	str	r3, [r2, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001406:	e710      	b.n	800122a <HAL_RCC_OscConfig+0x30e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001408:	4a33      	ldr	r2, [pc, #204]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 800140a:	493d      	ldr	r1, [pc, #244]	; (8001500 <HAL_RCC_OscConfig+0x5e4>)
 800140c:	6b93      	ldr	r3, [r2, #56]	; 0x38
 800140e:	400b      	ands	r3, r1
 8001410:	6393      	str	r3, [r2, #56]	; 0x38
 8001412:	6823      	ldr	r3, [r4, #0]
 8001414:	e685      	b.n	8001122 <HAL_RCC_OscConfig+0x206>
        __HAL_RCC_PLL_DISABLE();
 8001416:	4d30      	ldr	r5, [pc, #192]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 8001418:	4a3a      	ldr	r2, [pc, #232]	; (8001504 <HAL_RCC_OscConfig+0x5e8>)
 800141a:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800141c:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 800141e:	4013      	ands	r3, r2
 8001420:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001422:	f7ff fb11 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001426:	04bf      	lsls	r7, r7, #18
        tickstart = HAL_GetTick();
 8001428:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800142a:	e004      	b.n	8001436 <HAL_RCC_OscConfig+0x51a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb0c 	bl	8000a48 <HAL_GetTick>
 8001430:	1b80      	subs	r0, r0, r6
 8001432:	2802      	cmp	r0, #2
 8001434:	d883      	bhi.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001436:	682b      	ldr	r3, [r5, #0]
 8001438:	423b      	tst	r3, r7
 800143a:	d1f7      	bne.n	800142c <HAL_RCC_OscConfig+0x510>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800143c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800143e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001440:	68ea      	ldr	r2, [r5, #12]
 8001442:	430b      	orrs	r3, r1
 8001444:	4930      	ldr	r1, [pc, #192]	; (8001508 <HAL_RCC_OscConfig+0x5ec>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001446:	4e24      	ldr	r6, [pc, #144]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001448:	400a      	ands	r2, r1
 800144a:	4313      	orrs	r3, r2
 800144c:	6b62      	ldr	r2, [r4, #52]	; 0x34
 800144e:	4313      	orrs	r3, r2
 8001450:	60eb      	str	r3, [r5, #12]
        __HAL_RCC_PLL_ENABLE();
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	682a      	ldr	r2, [r5, #0]
 8001456:	045b      	lsls	r3, r3, #17
 8001458:	4313      	orrs	r3, r2
 800145a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800145c:	f7ff faf4 	bl	8000a48 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001460:	2580      	movs	r5, #128	; 0x80
        tickstart = HAL_GetTick();
 8001462:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001464:	04ad      	lsls	r5, r5, #18
 8001466:	e005      	b.n	8001474 <HAL_RCC_OscConfig+0x558>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001468:	f7ff faee 	bl	8000a48 <HAL_GetTick>
 800146c:	1b00      	subs	r0, r0, r4
 800146e:	2802      	cmp	r0, #2
 8001470:	d900      	bls.n	8001474 <HAL_RCC_OscConfig+0x558>
 8001472:	e764      	b.n	800133e <HAL_RCC_OscConfig+0x422>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001474:	6833      	ldr	r3, [r6, #0]
 8001476:	422b      	tst	r3, r5
 8001478:	d0f6      	beq.n	8001468 <HAL_RCC_OscConfig+0x54c>
  return HAL_OK;
 800147a:	2000      	movs	r0, #0
 800147c:	e6a0      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800147e:	4a16      	ldr	r2, [pc, #88]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 8001480:	6d11      	ldr	r1, [r2, #80]	; 0x50
 8001482:	430b      	orrs	r3, r1
 8001484:	6513      	str	r3, [r2, #80]	; 0x50
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001486:	e633      	b.n	80010f0 <HAL_RCC_OscConfig+0x1d4>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001488:	2b01      	cmp	r3, #1
 800148a:	d100      	bne.n	800148e <HAL_RCC_OscConfig+0x572>
 800148c:	e697      	b.n	80011be <HAL_RCC_OscConfig+0x2a2>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800148e:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001492:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        pll_config = RCC->CFGR;
 8001494:	68db      	ldr	r3, [r3, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001496:	0252      	lsls	r2, r2, #9
        return HAL_ERROR;
 8001498:	2001      	movs	r0, #1
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800149a:	401a      	ands	r2, r3
 800149c:	428a      	cmp	r2, r1
 800149e:	d000      	beq.n	80014a2 <HAL_RCC_OscConfig+0x586>
 80014a0:	e68e      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014a2:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014a6:	0392      	lsls	r2, r2, #14
 80014a8:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014aa:	428a      	cmp	r2, r1
 80014ac:	d000      	beq.n	80014b0 <HAL_RCC_OscConfig+0x594>
 80014ae:	e687      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014b0:	20c0      	movs	r0, #192	; 0xc0
 80014b2:	0400      	lsls	r0, r0, #16
 80014b4:	4003      	ands	r3, r0
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
 80014b8:	1a18      	subs	r0, r3, r0
 80014ba:	1e43      	subs	r3, r0, #1
 80014bc:	4198      	sbcs	r0, r3
        return HAL_ERROR;
 80014be:	b2c0      	uxtb	r0, r0
 80014c0:	e67e      	b.n	80011c0 <HAL_RCC_OscConfig+0x2a4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014c2:	4b05      	ldr	r3, [pc, #20]	; (80014d8 <HAL_RCC_OscConfig+0x5bc>)
 80014c4:	3901      	subs	r1, #1
 80014c6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80014c8:	39ff      	subs	r1, #255	; 0xff
 80014ca:	4301      	orrs	r1, r0
 80014cc:	6519      	str	r1, [r3, #80]	; 0x50
 80014ce:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80014d0:	430a      	orrs	r2, r1
 80014d2:	651a      	str	r2, [r3, #80]	; 0x50
 80014d4:	e60c      	b.n	80010f0 <HAL_RCC_OscConfig+0x1d4>
 80014d6:	46c0      	nop			; (mov r8, r8)
 80014d8:	40021000 	.word	0x40021000
 80014dc:	ffffe0ff 	.word	0xffffe0ff
 80014e0:	080032a0 	.word	0x080032a0
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000008 	.word	0x20000008
 80014ec:	fffffeff 	.word	0xfffffeff
 80014f0:	fffffbff 	.word	0xfffffbff
 80014f4:	00001388 	.word	0x00001388
 80014f8:	ffffdfff 	.word	0xffffdfff
 80014fc:	40010000 	.word	0x40010000
 8001500:	efffffff 	.word	0xefffffff
 8001504:	feffffff 	.word	0xfeffffff
 8001508:	ff02ffff 	.word	0xff02ffff

0800150c <HAL_RCC_ClockConfig>:
{
 800150c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800150e:	46ce      	mov	lr, r9
 8001510:	4647      	mov	r7, r8
 8001512:	0005      	movs	r5, r0
 8001514:	000c      	movs	r4, r1
 8001516:	b580      	push	{r7, lr}
  if(RCC_ClkInitStruct == NULL)
 8001518:	2800      	cmp	r0, #0
 800151a:	d066      	beq.n	80015ea <HAL_RCC_ClockConfig+0xde>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800151c:	2201      	movs	r2, #1
 800151e:	4e6b      	ldr	r6, [pc, #428]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 8001520:	6833      	ldr	r3, [r6, #0]
 8001522:	4013      	ands	r3, r2
 8001524:	428b      	cmp	r3, r1
 8001526:	d362      	bcc.n	80015ee <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	079a      	lsls	r2, r3, #30
 800152c:	d506      	bpl.n	800153c <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800152e:	20f0      	movs	r0, #240	; 0xf0
 8001530:	4967      	ldr	r1, [pc, #412]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001532:	68ca      	ldr	r2, [r1, #12]
 8001534:	4382      	bics	r2, r0
 8001536:	68a8      	ldr	r0, [r5, #8]
 8001538:	4302      	orrs	r2, r0
 800153a:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800153c:	07db      	lsls	r3, r3, #31
 800153e:	d52d      	bpl.n	800159c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001540:	4b63      	ldr	r3, [pc, #396]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001542:	686a      	ldr	r2, [r5, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001544:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001546:	2a02      	cmp	r2, #2
 8001548:	d04d      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xda>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800154a:	2a03      	cmp	r2, #3
 800154c:	d100      	bne.n	8001550 <HAL_RCC_ClockConfig+0x44>
 800154e:	e06f      	b.n	8001630 <HAL_RCC_ClockConfig+0x124>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001550:	2a01      	cmp	r2, #1
 8001552:	d100      	bne.n	8001556 <HAL_RCC_ClockConfig+0x4a>
 8001554:	e0a4      	b.n	80016a0 <HAL_RCC_ClockConfig+0x194>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001556:	059b      	lsls	r3, r3, #22
 8001558:	d547      	bpl.n	80015ea <HAL_RCC_ClockConfig+0xde>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155a:	2103      	movs	r1, #3
 800155c:	4e5c      	ldr	r6, [pc, #368]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 800155e:	68f3      	ldr	r3, [r6, #12]
 8001560:	438b      	bics	r3, r1
 8001562:	4313      	orrs	r3, r2
 8001564:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8001566:	f7ff fa6f 	bl	8000a48 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156a:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 800156c:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800156e:	2b02      	cmp	r3, #2
 8001570:	d100      	bne.n	8001574 <HAL_RCC_ClockConfig+0x68>
 8001572:	e075      	b.n	8001660 <HAL_RCC_ClockConfig+0x154>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001574:	2b03      	cmp	r3, #3
 8001576:	d100      	bne.n	800157a <HAL_RCC_ClockConfig+0x6e>
 8001578:	e082      	b.n	8001680 <HAL_RCC_ClockConfig+0x174>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800157a:	2b01      	cmp	r3, #1
 800157c:	d100      	bne.n	8001580 <HAL_RCC_ClockConfig+0x74>
 800157e:	e094      	b.n	80016aa <HAL_RCC_ClockConfig+0x19e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001580:	230c      	movs	r3, #12
 8001582:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001584:	4b53      	ldr	r3, [pc, #332]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001586:	4699      	mov	r9, r3
 8001588:	e004      	b.n	8001594 <HAL_RCC_ClockConfig+0x88>
 800158a:	f7ff fa5d 	bl	8000a48 <HAL_GetTick>
 800158e:	1bc0      	subs	r0, r0, r7
 8001590:	4548      	cmp	r0, r9
 8001592:	d842      	bhi.n	800161a <HAL_RCC_ClockConfig+0x10e>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001594:	4642      	mov	r2, r8
 8001596:	68f3      	ldr	r3, [r6, #12]
 8001598:	421a      	tst	r2, r3
 800159a:	d1f6      	bne.n	800158a <HAL_RCC_ClockConfig+0x7e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800159c:	2201      	movs	r2, #1
 800159e:	4e4b      	ldr	r6, [pc, #300]	; (80016cc <HAL_RCC_ClockConfig+0x1c0>)
 80015a0:	6833      	ldr	r3, [r6, #0]
 80015a2:	4013      	ands	r3, r2
 80015a4:	42a3      	cmp	r3, r4
 80015a6:	d847      	bhi.n	8001638 <HAL_RCC_ClockConfig+0x12c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	075a      	lsls	r2, r3, #29
 80015ac:	d506      	bpl.n	80015bc <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015ae:	4948      	ldr	r1, [pc, #288]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015b0:	4849      	ldr	r0, [pc, #292]	; (80016d8 <HAL_RCC_ClockConfig+0x1cc>)
 80015b2:	68ca      	ldr	r2, [r1, #12]
 80015b4:	4002      	ands	r2, r0
 80015b6:	68e8      	ldr	r0, [r5, #12]
 80015b8:	4302      	orrs	r2, r0
 80015ba:	60ca      	str	r2, [r1, #12]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	071b      	lsls	r3, r3, #28
 80015be:	d42e      	bmi.n	800161e <HAL_RCC_ClockConfig+0x112>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015c0:	f7ff fc66 	bl	8000e90 <HAL_RCC_GetSysClockFreq>
 80015c4:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 80015c6:	4a45      	ldr	r2, [pc, #276]	; (80016dc <HAL_RCC_ClockConfig+0x1d0>)
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	061b      	lsls	r3, r3, #24
 80015cc:	0f1b      	lsrs	r3, r3, #28
 80015ce:	5cd3      	ldrb	r3, [r2, r3]
 80015d0:	40d8      	lsrs	r0, r3
 80015d2:	4b43      	ldr	r3, [pc, #268]	; (80016e0 <HAL_RCC_ClockConfig+0x1d4>)
 80015d4:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 80015d6:	4b43      	ldr	r3, [pc, #268]	; (80016e4 <HAL_RCC_ClockConfig+0x1d8>)
 80015d8:	6818      	ldr	r0, [r3, #0]
 80015da:	f7ff f9ef 	bl	80009bc <HAL_InitTick>
}
 80015de:	bcc0      	pop	{r6, r7}
 80015e0:	46b9      	mov	r9, r7
 80015e2:	46b0      	mov	r8, r6
 80015e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015e6:	039b      	lsls	r3, r3, #14
 80015e8:	d4b7      	bmi.n	800155a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80015ea:	2001      	movs	r0, #1
 80015ec:	e7f7      	b.n	80015de <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ee:	6833      	ldr	r3, [r6, #0]
 80015f0:	4393      	bics	r3, r2
 80015f2:	430b      	orrs	r3, r1
 80015f4:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80015f6:	f7ff fa27 	bl	8000a48 <HAL_GetTick>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015fa:	2301      	movs	r3, #1
 80015fc:	4698      	mov	r8, r3
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015fe:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 8001600:	0007      	movs	r7, r0
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001602:	4699      	mov	r9, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001604:	4642      	mov	r2, r8
 8001606:	6833      	ldr	r3, [r6, #0]
 8001608:	4013      	ands	r3, r2
 800160a:	42a3      	cmp	r3, r4
 800160c:	d100      	bne.n	8001610 <HAL_RCC_ClockConfig+0x104>
 800160e:	e78b      	b.n	8001528 <HAL_RCC_ClockConfig+0x1c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001610:	f7ff fa1a 	bl	8000a48 <HAL_GetTick>
 8001614:	1bc0      	subs	r0, r0, r7
 8001616:	4548      	cmp	r0, r9
 8001618:	d9f4      	bls.n	8001604 <HAL_RCC_ClockConfig+0xf8>
        return HAL_TIMEOUT;
 800161a:	2003      	movs	r0, #3
 800161c:	e7df      	b.n	80015de <HAL_RCC_ClockConfig+0xd2>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800161e:	492c      	ldr	r1, [pc, #176]	; (80016d0 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	692b      	ldr	r3, [r5, #16]
 8001622:	68ca      	ldr	r2, [r1, #12]
 8001624:	4830      	ldr	r0, [pc, #192]	; (80016e8 <HAL_RCC_ClockConfig+0x1dc>)
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	4002      	ands	r2, r0
 800162a:	4313      	orrs	r3, r2
 800162c:	60cb      	str	r3, [r1, #12]
 800162e:	e7c7      	b.n	80015c0 <HAL_RCC_ClockConfig+0xb4>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	d492      	bmi.n	800155a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 8001634:	2001      	movs	r0, #1
 8001636:	e7d2      	b.n	80015de <HAL_RCC_ClockConfig+0xd2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001638:	6833      	ldr	r3, [r6, #0]
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800163a:	0034      	movs	r4, r6
    __HAL_FLASH_SET_LATENCY(FLatency);
 800163c:	4393      	bics	r3, r2
 800163e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001640:	f7ff fa02 	bl	8000a48 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001644:	4b23      	ldr	r3, [pc, #140]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
    tickstart = HAL_GetTick();
 8001646:	0007      	movs	r7, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001648:	2601      	movs	r6, #1
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	4698      	mov	r8, r3
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800164c:	6823      	ldr	r3, [r4, #0]
 800164e:	421e      	tst	r6, r3
 8001650:	d0aa      	beq.n	80015a8 <HAL_RCC_ClockConfig+0x9c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001652:	f7ff f9f9 	bl	8000a48 <HAL_GetTick>
 8001656:	1bc0      	subs	r0, r0, r7
 8001658:	4540      	cmp	r0, r8
 800165a:	d9f7      	bls.n	800164c <HAL_RCC_ClockConfig+0x140>
        return HAL_TIMEOUT;
 800165c:	2003      	movs	r0, #3
 800165e:	e7be      	b.n	80015de <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001660:	330a      	adds	r3, #10
 8001662:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001664:	4b1b      	ldr	r3, [pc, #108]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001666:	4699      	mov	r9, r3
 8001668:	e004      	b.n	8001674 <HAL_RCC_ClockConfig+0x168>
 800166a:	f7ff f9ed 	bl	8000a48 <HAL_GetTick>
 800166e:	1bc0      	subs	r0, r0, r7
 8001670:	4548      	cmp	r0, r9
 8001672:	d8d2      	bhi.n	800161a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001674:	4642      	mov	r2, r8
 8001676:	68f3      	ldr	r3, [r6, #12]
 8001678:	4013      	ands	r3, r2
 800167a:	2b08      	cmp	r3, #8
 800167c:	d1f5      	bne.n	800166a <HAL_RCC_ClockConfig+0x15e>
 800167e:	e78d      	b.n	800159c <HAL_RCC_ClockConfig+0x90>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001680:	3309      	adds	r3, #9
 8001682:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001684:	4b13      	ldr	r3, [pc, #76]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 8001686:	4699      	mov	r9, r3
 8001688:	e004      	b.n	8001694 <HAL_RCC_ClockConfig+0x188>
 800168a:	f7ff f9dd 	bl	8000a48 <HAL_GetTick>
 800168e:	1bc0      	subs	r0, r0, r7
 8001690:	4548      	cmp	r0, r9
 8001692:	d8c2      	bhi.n	800161a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001694:	4642      	mov	r2, r8
 8001696:	68f3      	ldr	r3, [r6, #12]
 8001698:	4013      	ands	r3, r2
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d1f5      	bne.n	800168a <HAL_RCC_ClockConfig+0x17e>
 800169e:	e77d      	b.n	800159c <HAL_RCC_ClockConfig+0x90>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a0:	075b      	lsls	r3, r3, #29
 80016a2:	d500      	bpl.n	80016a6 <HAL_RCC_ClockConfig+0x19a>
 80016a4:	e759      	b.n	800155a <HAL_RCC_ClockConfig+0x4e>
    return HAL_ERROR;
 80016a6:	2001      	movs	r0, #1
 80016a8:	e799      	b.n	80015de <HAL_RCC_ClockConfig+0xd2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016aa:	330b      	adds	r3, #11
 80016ac:	4698      	mov	r8, r3
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016ae:	4b09      	ldr	r3, [pc, #36]	; (80016d4 <HAL_RCC_ClockConfig+0x1c8>)
 80016b0:	4699      	mov	r9, r3
 80016b2:	e004      	b.n	80016be <HAL_RCC_ClockConfig+0x1b2>
 80016b4:	f7ff f9c8 	bl	8000a48 <HAL_GetTick>
 80016b8:	1bc0      	subs	r0, r0, r7
 80016ba:	4548      	cmp	r0, r9
 80016bc:	d8ad      	bhi.n	800161a <HAL_RCC_ClockConfig+0x10e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80016be:	4642      	mov	r2, r8
 80016c0:	68f3      	ldr	r3, [r6, #12]
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b04      	cmp	r3, #4
 80016c6:	d1f5      	bne.n	80016b4 <HAL_RCC_ClockConfig+0x1a8>
 80016c8:	e768      	b.n	800159c <HAL_RCC_ClockConfig+0x90>
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	40022000 	.word	0x40022000
 80016d0:	40021000 	.word	0x40021000
 80016d4:	00001388 	.word	0x00001388
 80016d8:	fffff8ff 	.word	0xfffff8ff
 80016dc:	080032a0 	.word	0x080032a0
 80016e0:	20000000 	.word	0x20000000
 80016e4:	20000008 	.word	0x20000008
 80016e8:	ffffc7ff 	.word	0xffffc7ff

080016ec <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	46c6      	mov	lr, r8
 80016f0:	b500      	push	{lr}
 80016f2:	001d      	movs	r5, r3
 80016f4:	0016      	movs	r6, r2
 80016f6:	b082      	sub	sp, #8
 80016f8:	000c      	movs	r4, r1
 80016fa:	0007      	movs	r7, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80016fc:	f7ff f9a4 	bl	8000a48 <HAL_GetTick>
 8001700:	19ad      	adds	r5, r5, r6
 8001702:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8001704:	f7ff f9a0 	bl	8000a48 <HAL_GetTick>
 8001708:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800170a:	4b29      	ldr	r3, [pc, #164]	; (80017b0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc4>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	015b      	lsls	r3, r3, #5
 8001710:	0d1b      	lsrs	r3, r3, #20
 8001712:	436b      	muls	r3, r5
 8001714:	9301      	str	r3, [sp, #4]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	1c73      	adds	r3, r6, #1
 800171a:	d108      	bne.n	800172e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x42>
 800171c:	688b      	ldr	r3, [r1, #8]
 800171e:	4023      	ands	r3, r4
 8001720:	42a3      	cmp	r3, r4
 8001722:	d0fb      	beq.n	800171c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x30>
      }
      count--;
    }
  }

  return HAL_OK;
 8001724:	2000      	movs	r0, #0
}
 8001726:	b002      	add	sp, #8
 8001728:	bc80      	pop	{r7}
 800172a:	46b8      	mov	r8, r7
 800172c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800172e:	688b      	ldr	r3, [r1, #8]
 8001730:	4023      	ands	r3, r4
 8001732:	429c      	cmp	r4, r3
 8001734:	d1f6      	bne.n	8001724 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001736:	f7ff f987 	bl	8000a48 <HAL_GetTick>
 800173a:	4643      	mov	r3, r8
 800173c:	1ac0      	subs	r0, r0, r3
 800173e:	42a8      	cmp	r0, r5
 8001740:	d208      	bcs.n	8001754 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
      if(count == 0U)
 8001742:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8001744:	1e5a      	subs	r2, r3, #1
 8001746:	4193      	sbcs	r3, r2
 8001748:	425b      	negs	r3, r3
 800174a:	401d      	ands	r5, r3
      count--;
 800174c:	9b01      	ldr	r3, [sp, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	9301      	str	r3, [sp, #4]
 8001752:	e7e0      	b.n	8001716 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x2a>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001754:	21e0      	movs	r1, #224	; 0xe0
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	438a      	bics	r2, r1
 800175c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800175e:	2282      	movs	r2, #130	; 0x82
 8001760:	6879      	ldr	r1, [r7, #4]
 8001762:	0052      	lsls	r2, r2, #1
 8001764:	4291      	cmp	r1, r2
 8001766:	d014      	beq.n	8001792 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa6>
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001768:	2180      	movs	r1, #128	; 0x80
 800176a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800176c:	0189      	lsls	r1, r1, #6
 800176e:	428a      	cmp	r2, r1
 8001770:	d007      	beq.n	8001782 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x96>
        hspi->State = HAL_SPI_STATE_READY;
 8001772:	2351      	movs	r3, #81	; 0x51
 8001774:	2201      	movs	r2, #1
 8001776:	54fa      	strb	r2, [r7, r3]
        __HAL_UNLOCK(hspi);
 8001778:	2200      	movs	r2, #0
 800177a:	3b01      	subs	r3, #1
 800177c:	2003      	movs	r0, #3
 800177e:	54fa      	strb	r2, [r7, r3]
        return HAL_TIMEOUT;
 8001780:	e7d1      	b.n	8001726 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x3a>
          SPI_RESET_CRC(hspi);
 8001782:	6819      	ldr	r1, [r3, #0]
 8001784:	480b      	ldr	r0, [pc, #44]	; (80017b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc8>)
 8001786:	4001      	ands	r1, r0
 8001788:	6019      	str	r1, [r3, #0]
 800178a:	6819      	ldr	r1, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	e7ef      	b.n	8001772 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x86>
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001792:	2180      	movs	r1, #128	; 0x80
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	0209      	lsls	r1, r1, #8
 8001798:	428a      	cmp	r2, r1
 800179a:	d003      	beq.n	80017a4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb8>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800179c:	2180      	movs	r1, #128	; 0x80
 800179e:	00c9      	lsls	r1, r1, #3
 80017a0:	428a      	cmp	r2, r1
 80017a2:	d1e1      	bne.n	8001768 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
          __HAL_SPI_DISABLE(hspi);
 80017a4:	2140      	movs	r1, #64	; 0x40
 80017a6:	681a      	ldr	r2, [r3, #0]
 80017a8:	438a      	bics	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	e7dc      	b.n	8001768 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	20000000 	.word	0x20000000
 80017b4:	ffffdfff 	.word	0xffffdfff

080017b8 <HAL_SPI_Init>:
{
 80017b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017ba:	46ce      	mov	lr, r9
 80017bc:	4647      	mov	r7, r8
 80017be:	0004      	movs	r4, r0
 80017c0:	b580      	push	{r7, lr}
  if (hspi == NULL)
 80017c2:	2800      	cmp	r0, #0
 80017c4:	d06a      	beq.n	800189c <HAL_SPI_Init+0xe4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80017c6:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80017c8:	2800      	cmp	r0, #0
 80017ca:	d04f      	beq.n	800186c <HAL_SPI_Init+0xb4>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80017cc:	2300      	movs	r3, #0
 80017ce:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80017d0:	6163      	str	r3, [r4, #20]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d2:	2300      	movs	r3, #0
 80017d4:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80017d6:	3351      	adds	r3, #81	; 0x51
 80017d8:	5ce3      	ldrb	r3, [r4, r3]
 80017da:	2600      	movs	r6, #0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d052      	beq.n	8001886 <HAL_SPI_Init+0xce>
  hspi->State = HAL_SPI_STATE_BUSY;
 80017e0:	2351      	movs	r3, #81	; 0x51
 80017e2:	4698      	mov	r8, r3
 80017e4:	4642      	mov	r2, r8
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017e6:	2784      	movs	r7, #132	; 0x84
  hspi->State = HAL_SPI_STATE_BUSY;
 80017e8:	3b4f      	subs	r3, #79	; 0x4f
 80017ea:	54a3      	strb	r3, [r4, r2]
  __HAL_SPI_DISABLE(hspi);
 80017ec:	6822      	ldr	r2, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017ee:	6865      	ldr	r5, [r4, #4]
  __HAL_SPI_DISABLE(hspi);
 80017f0:	6811      	ldr	r1, [r2, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80017f2:	469c      	mov	ip, r3
  __HAL_SPI_DISABLE(hspi);
 80017f4:	333e      	adds	r3, #62	; 0x3e
 80017f6:	4399      	bics	r1, r3
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80017f8:	33c4      	adds	r3, #196	; 0xc4
 80017fa:	402b      	ands	r3, r5
 80017fc:	68a5      	ldr	r5, [r4, #8]
 80017fe:	023f      	lsls	r7, r7, #8
 8001800:	402f      	ands	r7, r5
 8001802:	433b      	orrs	r3, r7
 8001804:	2780      	movs	r7, #128	; 0x80
 8001806:	68e5      	ldr	r5, [r4, #12]
 8001808:	013f      	lsls	r7, r7, #4
 800180a:	402f      	ands	r7, r5
 800180c:	433b      	orrs	r3, r7
 800180e:	4667      	mov	r7, ip
 8001810:	6925      	ldr	r5, [r4, #16]
  __HAL_SPI_DISABLE(hspi);
 8001812:	6011      	str	r1, [r2, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001814:	402f      	ands	r7, r5
 8001816:	2501      	movs	r5, #1
 8001818:	46a9      	mov	r9, r5
 800181a:	433b      	orrs	r3, r7
 800181c:	464f      	mov	r7, r9
 800181e:	6965      	ldr	r5, [r4, #20]
 8001820:	69a1      	ldr	r1, [r4, #24]
 8001822:	403d      	ands	r5, r7
 8001824:	432b      	orrs	r3, r5
 8001826:	2580      	movs	r5, #128	; 0x80
 8001828:	00ad      	lsls	r5, r5, #2
 800182a:	400d      	ands	r5, r1
 800182c:	432b      	orrs	r3, r5
 800182e:	2538      	movs	r5, #56	; 0x38
 8001830:	69e7      	ldr	r7, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001832:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001834:	403d      	ands	r5, r7
 8001836:	432b      	orrs	r3, r5
 8001838:	2580      	movs	r5, #128	; 0x80
 800183a:	6a27      	ldr	r7, [r4, #32]
 800183c:	403d      	ands	r5, r7
 800183e:	432b      	orrs	r3, r5
 8001840:	4333      	orrs	r3, r6
 8001842:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001844:	2304      	movs	r3, #4
 8001846:	4019      	ands	r1, r3
 8001848:	330c      	adds	r3, #12
 800184a:	4018      	ands	r0, r3
 800184c:	4308      	orrs	r0, r1
 800184e:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001850:	69d3      	ldr	r3, [r2, #28]
 8001852:	4913      	ldr	r1, [pc, #76]	; (80018a0 <HAL_SPI_Init+0xe8>)
  return HAL_OK;
 8001854:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001856:	400b      	ands	r3, r1
 8001858:	61d3      	str	r3, [r2, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800185a:	2300      	movs	r3, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800185c:	464a      	mov	r2, r9
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800185e:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001860:	4643      	mov	r3, r8
 8001862:	54e2      	strb	r2, [r4, r3]
}
 8001864:	bcc0      	pop	{r6, r7}
 8001866:	46b9      	mov	r9, r7
 8001868:	46b0      	mov	r8, r6
 800186a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800186c:	2382      	movs	r3, #130	; 0x82
 800186e:	6862      	ldr	r2, [r4, #4]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	429a      	cmp	r2, r3
 8001874:	d0ad      	beq.n	80017d2 <HAL_SPI_Init+0x1a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001876:	2300      	movs	r3, #0
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001878:	61e0      	str	r0, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800187a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800187c:	3351      	adds	r3, #81	; 0x51
 800187e:	5ce3      	ldrb	r3, [r4, r3]
 8001880:	2600      	movs	r6, #0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ac      	bne.n	80017e0 <HAL_SPI_Init+0x28>
    hspi->Lock = HAL_UNLOCKED;
 8001886:	3350      	adds	r3, #80	; 0x50
 8001888:	54e6      	strb	r6, [r4, r3]
    HAL_SPI_MspInit(hspi);
 800188a:	2680      	movs	r6, #128	; 0x80
 800188c:	0020      	movs	r0, r4
 800188e:	f7fe ff75 	bl	800077c <HAL_SPI_MspInit>
 8001892:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8001894:	01b6      	lsls	r6, r6, #6
 8001896:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001898:	401e      	ands	r6, r3
 800189a:	e7a1      	b.n	80017e0 <HAL_SPI_Init+0x28>
    return HAL_ERROR;
 800189c:	2001      	movs	r0, #1
 800189e:	e7e1      	b.n	8001864 <HAL_SPI_Init+0xac>
 80018a0:	fffff7ff 	.word	0xfffff7ff

080018a4 <HAL_SPI_Transmit>:
{
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	4647      	mov	r7, r8
 80018a8:	46ce      	mov	lr, r9
 80018aa:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 80018ac:	2350      	movs	r3, #80	; 0x50
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 80018b2:	5cc2      	ldrb	r2, [r0, r3]
{
 80018b4:	0004      	movs	r4, r0
 80018b6:	000f      	movs	r7, r1
 80018b8:	b083      	sub	sp, #12
  __HAL_LOCK(hspi);
 80018ba:	2a01      	cmp	r2, #1
 80018bc:	d100      	bne.n	80018c0 <HAL_SPI_Transmit+0x1c>
 80018be:	e085      	b.n	80019cc <HAL_SPI_Transmit+0x128>
 80018c0:	2201      	movs	r2, #1
 80018c2:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 80018c4:	f7ff f8c0 	bl	8000a48 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80018c8:	2251      	movs	r2, #81	; 0x51
 80018ca:	5ca3      	ldrb	r3, [r4, r2]
  tickstart = HAL_GetTick();
 80018cc:	0006      	movs	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80018ce:	b2d8      	uxtb	r0, r3
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d00b      	beq.n	80018ec <HAL_SPI_Transmit+0x48>
    errorcode = HAL_BUSY;
 80018d4:	2002      	movs	r0, #2
  hspi->State = HAL_SPI_STATE_READY;
 80018d6:	2351      	movs	r3, #81	; 0x51
 80018d8:	2201      	movs	r2, #1
 80018da:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 80018dc:	2200      	movs	r2, #0
 80018de:	3b01      	subs	r3, #1
 80018e0:	54e2      	strb	r2, [r4, r3]
}
 80018e2:	b003      	add	sp, #12
 80018e4:	bcc0      	pop	{r6, r7}
 80018e6:	46b9      	mov	r9, r7
 80018e8:	46b0      	mov	r8, r6
 80018ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((pData == NULL) || (Size == 0U))
 80018ec:	2f00      	cmp	r7, #0
 80018ee:	d0f2      	beq.n	80018d6 <HAL_SPI_Transmit+0x32>
 80018f0:	4643      	mov	r3, r8
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ef      	beq.n	80018d6 <HAL_SPI_Transmit+0x32>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80018f6:	2303      	movs	r3, #3
 80018f8:	54a3      	strb	r3, [r4, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018fa:	2300      	movs	r3, #0
  hspi->TxXferSize  = Size;
 80018fc:	4642      	mov	r2, r8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80018fe:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001900:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8001902:	86e2      	strh	r2, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8001904:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001906:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001908:	6463      	str	r3, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 800190a:	6423      	str	r3, [r4, #64]	; 0x40
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800190c:	2380      	movs	r3, #128	; 0x80
  hspi->TxXferSize  = Size;
 800190e:	86a2      	strh	r2, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001910:	68a2      	ldr	r2, [r4, #8]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001912:	6327      	str	r7, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001914:	021b      	lsls	r3, r3, #8
 8001916:	429a      	cmp	r2, r3
 8001918:	d05a      	beq.n	80019d0 <HAL_SPI_Transmit+0x12c>
 800191a:	6822      	ldr	r2, [r4, #0]
 800191c:	0013      	movs	r3, r2
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800191e:	2140      	movs	r1, #64	; 0x40
 8001920:	6810      	ldr	r0, [r2, #0]
 8001922:	4201      	tst	r1, r0
 8001924:	d102      	bne.n	800192c <HAL_SPI_Transmit+0x88>
    __HAL_SPI_ENABLE(hspi);
 8001926:	6810      	ldr	r0, [r2, #0]
 8001928:	4301      	orrs	r1, r0
 800192a:	6011      	str	r1, [r2, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	68e0      	ldr	r0, [r4, #12]
 8001930:	0109      	lsls	r1, r1, #4
 8001932:	4288      	cmp	r0, r1
 8001934:	d100      	bne.n	8001938 <HAL_SPI_Transmit+0x94>
 8001936:	e07f      	b.n	8001a38 <HAL_SPI_Transmit+0x194>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001938:	6863      	ldr	r3, [r4, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d06c      	beq.n	8001a18 <HAL_SPI_Transmit+0x174>
 800193e:	4643      	mov	r3, r8
 8001940:	2b01      	cmp	r3, #1
 8001942:	d069      	beq.n	8001a18 <HAL_SPI_Transmit+0x174>
    while (hspi->TxXferCount > 0U)
 8001944:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001946:	2b00      	cmp	r3, #0
 8001948:	d013      	beq.n	8001972 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800194a:	2702      	movs	r7, #2
 800194c:	1c6b      	adds	r3, r5, #1
 800194e:	d158      	bne.n	8001a02 <HAL_SPI_Transmit+0x15e>
 8001950:	6823      	ldr	r3, [r4, #0]
 8001952:	689a      	ldr	r2, [r3, #8]
 8001954:	4217      	tst	r7, r2
 8001956:	d069      	beq.n	8001a2c <HAL_SPI_Transmit+0x188>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001958:	6b22      	ldr	r2, [r4, #48]	; 0x30
 800195a:	7812      	ldrb	r2, [r2, #0]
 800195c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800195e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001960:	1c5a      	adds	r2, r3, #1
 8001962:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001964:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001966:	3a01      	subs	r2, #1
 8001968:	b292      	uxth	r2, r2
 800196a:	86e2      	strh	r2, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 800196c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1ee      	bne.n	8001950 <HAL_SPI_Transmit+0xac>
 8001972:	6863      	ldr	r3, [r4, #4]
 8001974:	4699      	mov	r9, r3
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001976:	4b5c      	ldr	r3, [pc, #368]	; (8001ae8 <HAL_SPI_Transmit+0x244>)
 8001978:	495c      	ldr	r1, [pc, #368]	; (8001aec <HAL_SPI_Transmit+0x248>)
 800197a:	6818      	ldr	r0, [r3, #0]
 800197c:	f7fe fbc4 	bl	8000108 <__udivsi3>
 8001980:	0002      	movs	r2, r0
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001982:	2382      	movs	r3, #130	; 0x82
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001984:	0140      	lsls	r0, r0, #5
 8001986:	1a80      	subs	r0, r0, r2
 8001988:	0080      	lsls	r0, r0, #2
 800198a:	1880      	adds	r0, r0, r2
 800198c:	00c0      	lsls	r0, r0, #3
      if (count == 0U)
      {
        break;
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800198e:	2280      	movs	r2, #128	; 0x80
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001990:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4599      	cmp	r9, r3
 8001996:	d107      	bne.n	80019a8 <HAL_SPI_Transmit+0x104>
 8001998:	e097      	b.n	8001aca <HAL_SPI_Transmit+0x226>
      count--;
 800199a:	9b01      	ldr	r3, [sp, #4]
 800199c:	3b01      	subs	r3, #1
 800199e:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80019a0:	6823      	ldr	r3, [r4, #0]
 80019a2:	689b      	ldr	r3, [r3, #8]
 80019a4:	421a      	tst	r2, r3
 80019a6:	d002      	beq.n	80019ae <HAL_SPI_Transmit+0x10a>
      if (count == 0U)
 80019a8:	9b01      	ldr	r3, [sp, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f5      	bne.n	800199a <HAL_SPI_Transmit+0xf6>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80019ae:	68a3      	ldr	r3, [r4, #8]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d106      	bne.n	80019c2 <HAL_SPI_Transmit+0x11e>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80019b4:	9300      	str	r3, [sp, #0]
 80019b6:	6823      	ldr	r3, [r4, #0]
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	9b00      	ldr	r3, [sp, #0]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80019c2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80019c4:	1e43      	subs	r3, r0, #1
 80019c6:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 80019c8:	b2c0      	uxtb	r0, r0
error:
 80019ca:	e784      	b.n	80018d6 <HAL_SPI_Transmit+0x32>
  __HAL_LOCK(hspi);
 80019cc:	2002      	movs	r0, #2
 80019ce:	e788      	b.n	80018e2 <HAL_SPI_Transmit+0x3e>
    __HAL_SPI_DISABLE(hspi);
 80019d0:	2040      	movs	r0, #64	; 0x40
 80019d2:	6822      	ldr	r2, [r4, #0]
 80019d4:	6811      	ldr	r1, [r2, #0]
 80019d6:	0013      	movs	r3, r2
 80019d8:	4381      	bics	r1, r0
 80019da:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 80019dc:	2180      	movs	r1, #128	; 0x80
 80019de:	6810      	ldr	r0, [r2, #0]
 80019e0:	01c9      	lsls	r1, r1, #7
 80019e2:	4301      	orrs	r1, r0
 80019e4:	6011      	str	r1, [r2, #0]
 80019e6:	e79a      	b.n	800191e <HAL_SPI_Transmit+0x7a>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80019e8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80019ea:	7812      	ldrb	r2, [r2, #0]
 80019ec:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80019ee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80019f0:	3301      	adds	r3, #1
 80019f2:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80019f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29b      	uxth	r3, r3
 80019fa:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80019fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d0b7      	beq.n	8001972 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a02:	6823      	ldr	r3, [r4, #0]
 8001a04:	689a      	ldr	r2, [r3, #8]
 8001a06:	4217      	tst	r7, r2
 8001a08:	d1ee      	bne.n	80019e8 <HAL_SPI_Transmit+0x144>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a0a:	f7ff f81d 	bl	8000a48 <HAL_GetTick>
 8001a0e:	1b80      	subs	r0, r0, r6
 8001a10:	42a8      	cmp	r0, r5
 8001a12:	d3f3      	bcc.n	80019fc <HAL_SPI_Transmit+0x158>
          errorcode = HAL_TIMEOUT;
 8001a14:	2003      	movs	r0, #3
 8001a16:	e75e      	b.n	80018d6 <HAL_SPI_Transmit+0x32>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001a18:	783b      	ldrb	r3, [r7, #0]
 8001a1a:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001a1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a1e:	3301      	adds	r3, #1
 8001a20:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a22:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a24:	3b01      	subs	r3, #1
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001a2a:	e78b      	b.n	8001944 <HAL_SPI_Transmit+0xa0>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a2c:	f7ff f80c 	bl	8000a48 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001a30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d18c      	bne.n	8001950 <HAL_SPI_Transmit+0xac>
 8001a36:	e79c      	b.n	8001972 <HAL_SPI_Transmit+0xce>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001a38:	6861      	ldr	r1, [r4, #4]
 8001a3a:	4689      	mov	r9, r1
 8001a3c:	2900      	cmp	r1, #0
 8001a3e:	d140      	bne.n	8001ac2 <HAL_SPI_Transmit+0x21e>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a40:	8839      	ldrh	r1, [r7, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a42:	3702      	adds	r7, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a44:	60d1      	str	r1, [r2, #12]
      hspi->TxXferCount--;
 8001a46:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a48:	6327      	str	r7, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001a4a:	3901      	subs	r1, #1
 8001a4c:	b289      	uxth	r1, r1
 8001a4e:	86e1      	strh	r1, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001a50:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8001a52:	2900      	cmp	r1, #0
 8001a54:	d08f      	beq.n	8001976 <HAL_SPI_Transmit+0xd2>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a56:	2702      	movs	r7, #2
 8001a58:	1c69      	adds	r1, r5, #1
 8001a5a:	d128      	bne.n	8001aae <HAL_SPI_Transmit+0x20a>
 8001a5c:	6893      	ldr	r3, [r2, #8]
 8001a5e:	421f      	tst	r7, r3
 8001a60:	d00f      	beq.n	8001a82 <HAL_SPI_Transmit+0x1de>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a62:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a64:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a66:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a68:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a6a:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a6c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001a74:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d100      	bne.n	8001a7c <HAL_SPI_Transmit+0x1d8>
 8001a7a:	e77a      	b.n	8001972 <HAL_SPI_Transmit+0xce>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001a7c:	6893      	ldr	r3, [r2, #8]
 8001a7e:	421f      	tst	r7, r3
 8001a80:	d1ef      	bne.n	8001a62 <HAL_SPI_Transmit+0x1be>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a82:	f7fe ffe1 	bl	8000a48 <HAL_GetTick>
    while (hspi->TxXferCount > 0U)
 8001a86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d100      	bne.n	8001a8e <HAL_SPI_Transmit+0x1ea>
 8001a8c:	e771      	b.n	8001972 <HAL_SPI_Transmit+0xce>
 8001a8e:	6822      	ldr	r2, [r4, #0]
 8001a90:	e7e4      	b.n	8001a5c <HAL_SPI_Transmit+0x1b8>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a92:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a94:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a96:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001a98:	60d9      	str	r1, [r3, #12]
        hspi->TxXferCount--;
 8001a9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001a9c:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001a9e:	3b01      	subs	r3, #1
 8001aa0:	b29b      	uxth	r3, r3
 8001aa2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8001aa4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d100      	bne.n	8001aac <HAL_SPI_Transmit+0x208>
 8001aaa:	e762      	b.n	8001972 <HAL_SPI_Transmit+0xce>
 8001aac:	6823      	ldr	r3, [r4, #0]
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	4217      	tst	r7, r2
 8001ab2:	d1ee      	bne.n	8001a92 <HAL_SPI_Transmit+0x1ee>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001ab4:	f7fe ffc8 	bl	8000a48 <HAL_GetTick>
 8001ab8:	1b80      	subs	r0, r0, r6
 8001aba:	42a8      	cmp	r0, r5
 8001abc:	d3f2      	bcc.n	8001aa4 <HAL_SPI_Transmit+0x200>
          errorcode = HAL_TIMEOUT;
 8001abe:	2003      	movs	r0, #3
 8001ac0:	e709      	b.n	80018d6 <HAL_SPI_Transmit+0x32>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001ac2:	4641      	mov	r1, r8
 8001ac4:	2901      	cmp	r1, #1
 8001ac6:	d1c3      	bne.n	8001a50 <HAL_SPI_Transmit+0x1ac>
 8001ac8:	e7ba      	b.n	8001a40 <HAL_SPI_Transmit+0x19c>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001aca:	0033      	movs	r3, r6
 8001acc:	002a      	movs	r2, r5
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0020      	movs	r0, r4
 8001ad2:	f7ff fe0b 	bl	80016ec <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001ad6:	2800      	cmp	r0, #0
 8001ad8:	d100      	bne.n	8001adc <HAL_SPI_Transmit+0x238>
 8001ada:	e768      	b.n	80019ae <HAL_SPI_Transmit+0x10a>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001adc:	2220      	movs	r2, #32
 8001ade:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001ae4:	6562      	str	r2, [r4, #84]	; 0x54
 8001ae6:	e762      	b.n	80019ae <HAL_SPI_Transmit+0x10a>
 8001ae8:	20000000 	.word	0x20000000
 8001aec:	016e3600 	.word	0x016e3600

08001af0 <HAL_SPI_TransmitReceive>:
{
 8001af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001af2:	46c6      	mov	lr, r8
 8001af4:	001d      	movs	r5, r3
  __HAL_LOCK(hspi);
 8001af6:	2350      	movs	r3, #80	; 0x50
{
 8001af8:	b500      	push	{lr}
 8001afa:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8001afc:	5cc2      	ldrb	r2, [r0, r3]
{
 8001afe:	0004      	movs	r4, r0
 8001b00:	000e      	movs	r6, r1
 8001b02:	b082      	sub	sp, #8
  __HAL_LOCK(hspi);
 8001b04:	2a01      	cmp	r2, #1
 8001b06:	d100      	bne.n	8001b0a <HAL_SPI_TransmitReceive+0x1a>
 8001b08:	e0ac      	b.n	8001c64 <HAL_SPI_TransmitReceive+0x174>
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	54c2      	strb	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8001b0e:	f7fe ff9b 	bl	8000a48 <HAL_GetTick>
  tmp_state           = hspi->State;
 8001b12:	2351      	movs	r3, #81	; 0x51
 8001b14:	5ce3      	ldrb	r3, [r4, r3]
  tickstart = HAL_GetTick();
 8001b16:	4680      	mov	r8, r0
  tmp_mode            = hspi->Init.Mode;
 8001b18:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 8001b1a:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d013      	beq.n	8001b48 <HAL_SPI_TransmitReceive+0x58>
 8001b20:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8001b22:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	429a      	cmp	r2, r3
 8001b28:	d009      	beq.n	8001b3e <HAL_SPI_TransmitReceive+0x4e>
  hspi->State = HAL_SPI_STATE_READY;
 8001b2a:	2351      	movs	r3, #81	; 0x51
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	54e2      	strb	r2, [r4, r3]
  __HAL_UNLOCK(hspi);
 8001b30:	2200      	movs	r2, #0
 8001b32:	3b01      	subs	r3, #1
 8001b34:	54e2      	strb	r2, [r4, r3]
}
 8001b36:	b002      	add	sp, #8
 8001b38:	bc80      	pop	{r7}
 8001b3a:	46b8      	mov	r8, r7
 8001b3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8001b3e:	68a3      	ldr	r3, [r4, #8]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d1f2      	bne.n	8001b2a <HAL_SPI_TransmitReceive+0x3a>
 8001b44:	2904      	cmp	r1, #4
 8001b46:	d1f0      	bne.n	8001b2a <HAL_SPI_TransmitReceive+0x3a>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b48:	2e00      	cmp	r6, #0
 8001b4a:	d100      	bne.n	8001b4e <HAL_SPI_TransmitReceive+0x5e>
 8001b4c:	e08c      	b.n	8001c68 <HAL_SPI_TransmitReceive+0x178>
 8001b4e:	2f00      	cmp	r7, #0
 8001b50:	d100      	bne.n	8001b54 <HAL_SPI_TransmitReceive+0x64>
 8001b52:	e089      	b.n	8001c68 <HAL_SPI_TransmitReceive+0x178>
 8001b54:	2d00      	cmp	r5, #0
 8001b56:	d100      	bne.n	8001b5a <HAL_SPI_TransmitReceive+0x6a>
 8001b58:	e086      	b.n	8001c68 <HAL_SPI_TransmitReceive+0x178>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b5a:	2351      	movs	r3, #81	; 0x51
 8001b5c:	5ce1      	ldrb	r1, [r4, r3]
 8001b5e:	2904      	cmp	r1, #4
 8001b60:	d001      	beq.n	8001b66 <HAL_SPI_TransmitReceive+0x76>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001b62:	2105      	movs	r1, #5
 8001b64:	54e1      	strb	r1, [r4, r3]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b66:	2300      	movs	r3, #0
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b68:	2140      	movs	r1, #64	; 0x40
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001b6a:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8001b6c:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8001b6e:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b70:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8001b72:	87e5      	strh	r5, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8001b74:	86e5      	strh	r5, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b76:	6818      	ldr	r0, [r3, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001b78:	63a7      	str	r7, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8001b7a:	87a5      	strh	r5, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8001b7c:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001b7e:	86a5      	strh	r5, [r4, #52]	; 0x34
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001b80:	4201      	tst	r1, r0
 8001b82:	d102      	bne.n	8001b8a <HAL_SPI_TransmitReceive+0x9a>
    __HAL_SPI_ENABLE(hspi);
 8001b84:	6818      	ldr	r0, [r3, #0]
 8001b86:	4301      	orrs	r1, r0
 8001b88:	6019      	str	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001b8a:	2180      	movs	r1, #128	; 0x80
 8001b8c:	68e0      	ldr	r0, [r4, #12]
 8001b8e:	0109      	lsls	r1, r1, #4
 8001b90:	4288      	cmp	r0, r1
 8001b92:	d100      	bne.n	8001b96 <HAL_SPI_TransmitReceive+0xa6>
 8001b94:	e0de      	b.n	8001d54 <HAL_SPI_TransmitReceive+0x264>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001b96:	2a00      	cmp	r2, #0
 8001b98:	d100      	bne.n	8001b9c <HAL_SPI_TransmitReceive+0xac>
 8001b9a:	e0d1      	b.n	8001d40 <HAL_SPI_TransmitReceive+0x250>
 8001b9c:	2d01      	cmp	r5, #1
 8001b9e:	d100      	bne.n	8001ba2 <HAL_SPI_TransmitReceive+0xb2>
 8001ba0:	e0ce      	b.n	8001d40 <HAL_SPI_TransmitReceive+0x250>
 8001ba2:	9b08      	ldr	r3, [sp, #32]
        txallowed = 1U;
 8001ba4:	2701      	movs	r7, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ba6:	2602      	movs	r6, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001ba8:	2501      	movs	r5, #1
 8001baa:	3301      	adds	r3, #1
 8001bac:	d02a      	beq.n	8001c04 <HAL_SPI_TransmitReceive+0x114>
 8001bae:	e085      	b.n	8001cbc <HAL_SPI_TransmitReceive+0x1cc>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001bb0:	6823      	ldr	r3, [r4, #0]
 8001bb2:	689a      	ldr	r2, [r3, #8]
 8001bb4:	4216      	tst	r6, r2
 8001bb6:	d010      	beq.n	8001bda <HAL_SPI_TransmitReceive+0xea>
 8001bb8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001bba:	2a00      	cmp	r2, #0
 8001bbc:	d00d      	beq.n	8001bda <HAL_SPI_TransmitReceive+0xea>
 8001bbe:	2f01      	cmp	r7, #1
 8001bc0:	d10b      	bne.n	8001bda <HAL_SPI_TransmitReceive+0xea>
        txallowed = 0U;
 8001bc2:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001bc4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001bc6:	7812      	ldrb	r2, [r2, #0]
 8001bc8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001bca:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001bcc:	3301      	adds	r3, #1
 8001bce:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001bd0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001bd2:	3b01      	subs	r3, #1
 8001bd4:	b29b      	uxth	r3, r3
 8001bd6:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001bd8:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001bda:	0029      	movs	r1, r5
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	4011      	ands	r1, r2
 8001be0:	4215      	tst	r5, r2
 8001be2:	d00d      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x110>
 8001be4:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001be6:	2a00      	cmp	r2, #0
 8001be8:	d00a      	beq.n	8001c00 <HAL_SPI_TransmitReceive+0x110>
        txallowed = 1U;
 8001bea:	000f      	movs	r7, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001bf0:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8001bf2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001bf8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001bfa:	3b01      	subs	r3, #1
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001c00:	f7fe ff22 	bl	8000a48 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c04:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1d2      	bne.n	8001bb0 <HAL_SPI_TransmitReceive+0xc0>
 8001c0a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d1cf      	bne.n	8001bb0 <HAL_SPI_TransmitReceive+0xc0>
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c10:	4b79      	ldr	r3, [pc, #484]	; (8001df8 <HAL_SPI_TransmitReceive+0x308>)
 8001c12:	497a      	ldr	r1, [pc, #488]	; (8001dfc <HAL_SPI_TransmitReceive+0x30c>)
 8001c14:	6818      	ldr	r0, [r3, #0]
 8001c16:	f7fe fa77 	bl	8000108 <__udivsi3>
 8001c1a:	0002      	movs	r2, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c1c:	2382      	movs	r3, #130	; 0x82
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c1e:	0140      	lsls	r0, r0, #5
 8001c20:	1a80      	subs	r0, r0, r2
 8001c22:	0080      	lsls	r0, r0, #2
 8001c24:	1880      	adds	r0, r0, r2
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c26:	6862      	ldr	r2, [r4, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8001c28:	00c0      	lsls	r0, r0, #3
 8001c2a:	9001      	str	r0, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d100      	bne.n	8001c34 <HAL_SPI_TransmitReceive+0x144>
 8001c32:	e0d1      	b.n	8001dd8 <HAL_SPI_TransmitReceive+0x2e8>
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c34:	2280      	movs	r2, #128	; 0x80
 8001c36:	e006      	b.n	8001c46 <HAL_SPI_TransmitReceive+0x156>
      count--;
 8001c38:	9b01      	ldr	r3, [sp, #4]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8001c3e:	6823      	ldr	r3, [r4, #0]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	421a      	tst	r2, r3
 8001c44:	d002      	beq.n	8001c4c <HAL_SPI_TransmitReceive+0x15c>
      if (count == 0U)
 8001c46:	9b01      	ldr	r3, [sp, #4]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d1f5      	bne.n	8001c38 <HAL_SPI_TransmitReceive+0x148>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001c4c:	68a3      	ldr	r3, [r4, #8]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d106      	bne.n	8001c60 <HAL_SPI_TransmitReceive+0x170>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001c52:	9300      	str	r3, [sp, #0]
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	68da      	ldr	r2, [r3, #12]
 8001c58:	9200      	str	r2, [sp, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	9b00      	ldr	r3, [sp, #0]
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8001c60:	2000      	movs	r0, #0
 8001c62:	e762      	b.n	8001b2a <HAL_SPI_TransmitReceive+0x3a>
  __HAL_LOCK(hspi);
 8001c64:	2002      	movs	r0, #2
 8001c66:	e766      	b.n	8001b36 <HAL_SPI_TransmitReceive+0x46>
    errorcode = HAL_ERROR;
 8001c68:	2001      	movs	r0, #1
 8001c6a:	e75e      	b.n	8001b2a <HAL_SPI_TransmitReceive+0x3a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c6c:	2f01      	cmp	r7, #1
 8001c6e:	d10b      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x198>
        txallowed = 0U;
 8001c70:	2700      	movs	r7, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8001c72:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001c74:	7812      	ldrb	r2, [r2, #0]
 8001c76:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 8001c78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001c7e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8001c86:	6823      	ldr	r3, [r4, #0]
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c88:	0029      	movs	r1, r5
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	4011      	ands	r1, r2
 8001c8e:	4215      	tst	r5, r2
 8001c90:	d00d      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x1be>
 8001c92:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001c94:	2a00      	cmp	r2, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_SPI_TransmitReceive+0x1be>
        txallowed = 1U;
 8001c98:	000f      	movs	r7, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001c9e:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr++;
 8001ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001ca6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ca8:	3b01      	subs	r3, #1
 8001caa:	b29b      	uxth	r3, r3
 8001cac:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001cae:	f7fe fecb 	bl	8000a48 <HAL_GetTick>
 8001cb2:	4643      	mov	r3, r8
 8001cb4:	1ac0      	subs	r0, r0, r3
 8001cb6:	9b08      	ldr	r3, [sp, #32]
 8001cb8:	4298      	cmp	r0, r3
 8001cba:	d23f      	bcs.n	8001d3c <HAL_SPI_TransmitReceive+0x24c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_SPI_TransmitReceive+0x1d8>
 8001cc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0a3      	beq.n	8001c10 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	4216      	tst	r6, r2
 8001cce:	d0db      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0x198>
 8001cd0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001cd2:	2a00      	cmp	r2, #0
 8001cd4:	d0d8      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0x198>
 8001cd6:	e7c9      	b.n	8001c6c <HAL_SPI_TransmitReceive+0x17c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cd8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d102      	bne.n	8001ce4 <HAL_SPI_TransmitReceive+0x1f4>
 8001cde:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d095      	beq.n	8001c10 <HAL_SPI_TransmitReceive+0x120>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001ce4:	6823      	ldr	r3, [r4, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	4216      	tst	r6, r2
 8001cea:	d00e      	beq.n	8001d0a <HAL_SPI_TransmitReceive+0x21a>
 8001cec:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001cee:	2a00      	cmp	r2, #0
 8001cf0:	d00b      	beq.n	8001d0a <HAL_SPI_TransmitReceive+0x21a>
 8001cf2:	2f01      	cmp	r7, #1
 8001cf4:	d109      	bne.n	8001d0a <HAL_SPI_TransmitReceive+0x21a>
        txallowed = 0U;
 8001cf6:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cf8:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001cfa:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001cfc:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001cfe:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d00:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d02:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d04:	3a01      	subs	r2, #1
 8001d06:	b292      	uxth	r2, r2
 8001d08:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d0a:	0029      	movs	r1, r5
 8001d0c:	689a      	ldr	r2, [r3, #8]
 8001d0e:	4011      	ands	r1, r2
 8001d10:	4215      	tst	r5, r2
 8001d12:	d00c      	beq.n	8001d2e <HAL_SPI_TransmitReceive+0x23e>
 8001d14:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001d16:	2a00      	cmp	r2, #0
 8001d18:	d009      	beq.n	8001d2e <HAL_SPI_TransmitReceive+0x23e>
        txallowed = 1U;
 8001d1a:	000f      	movs	r7, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001d1c:	68da      	ldr	r2, [r3, #12]
 8001d1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d20:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001d22:	3302      	adds	r3, #2
 8001d24:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001d26:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001d2e:	f7fe fe8b 	bl	8000a48 <HAL_GetTick>
 8001d32:	4643      	mov	r3, r8
 8001d34:	1ac0      	subs	r0, r0, r3
 8001d36:	9b08      	ldr	r3, [sp, #32]
 8001d38:	4298      	cmp	r0, r3
 8001d3a:	d3cd      	bcc.n	8001cd8 <HAL_SPI_TransmitReceive+0x1e8>
        errorcode = HAL_TIMEOUT;
 8001d3c:	2003      	movs	r0, #3
 8001d3e:	e6f4      	b.n	8001b2a <HAL_SPI_TransmitReceive+0x3a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001d40:	7832      	ldrb	r2, [r6, #0]
 8001d42:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d44:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d46:	3301      	adds	r3, #1
 8001d48:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d4a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29b      	uxth	r3, r3
 8001d50:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001d52:	e726      	b.n	8001ba2 <HAL_SPI_TransmitReceive+0xb2>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d54:	2a00      	cmp	r2, #0
 8001d56:	d13c      	bne.n	8001dd2 <HAL_SPI_TransmitReceive+0x2e2>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d58:	8832      	ldrh	r2, [r6, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d5a:	3602      	adds	r6, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d5c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8001d5e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d60:	6326      	str	r6, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8001d62:	3b01      	subs	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	86e3      	strh	r3, [r4, #54]	; 0x36
 8001d68:	9b08      	ldr	r3, [sp, #32]
{
 8001d6a:	2701      	movs	r7, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d6c:	2602      	movs	r6, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d6e:	2501      	movs	r5, #1
 8001d70:	3301      	adds	r3, #1
 8001d72:	d027      	beq.n	8001dc4 <HAL_SPI_TransmitReceive+0x2d4>
 8001d74:	e7b0      	b.n	8001cd8 <HAL_SPI_TransmitReceive+0x1e8>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d76:	6823      	ldr	r3, [r4, #0]
 8001d78:	689a      	ldr	r2, [r3, #8]
 8001d7a:	4216      	tst	r6, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x2ac>
 8001d7e:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d80:	2a00      	cmp	r2, #0
 8001d82:	d00b      	beq.n	8001d9c <HAL_SPI_TransmitReceive+0x2ac>
 8001d84:	2f01      	cmp	r7, #1
 8001d86:	d109      	bne.n	8001d9c <HAL_SPI_TransmitReceive+0x2ac>
        txallowed = 0U;
 8001d88:	2700      	movs	r7, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d8a:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001d8c:	8811      	ldrh	r1, [r2, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d8e:	3202      	adds	r2, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d90:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d92:	6322      	str	r2, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8001d94:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001d96:	3a01      	subs	r2, #1
 8001d98:	b292      	uxth	r2, r2
 8001d9a:	86e2      	strh	r2, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d9c:	0029      	movs	r1, r5
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	4011      	ands	r1, r2
 8001da2:	4215      	tst	r5, r2
 8001da4:	d00c      	beq.n	8001dc0 <HAL_SPI_TransmitReceive+0x2d0>
 8001da6:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8001da8:	2a00      	cmp	r2, #0
 8001daa:	d009      	beq.n	8001dc0 <HAL_SPI_TransmitReceive+0x2d0>
        txallowed = 1U;
 8001dac:	000f      	movs	r7, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001db2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001db4:	3302      	adds	r3, #2
 8001db6:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8001db8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dba:	3b01      	subs	r3, #1
 8001dbc:	b29b      	uxth	r3, r3
 8001dbe:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001dc0:	f7fe fe42 	bl	8000a48 <HAL_GetTick>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dc4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1d5      	bne.n	8001d76 <HAL_SPI_TransmitReceive+0x286>
 8001dca:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d1d2      	bne.n	8001d76 <HAL_SPI_TransmitReceive+0x286>
 8001dd0:	e71e      	b.n	8001c10 <HAL_SPI_TransmitReceive+0x120>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dd2:	2d01      	cmp	r5, #1
 8001dd4:	d1c8      	bne.n	8001d68 <HAL_SPI_TransmitReceive+0x278>
 8001dd6:	e7bf      	b.n	8001d58 <HAL_SPI_TransmitReceive+0x268>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001dd8:	4643      	mov	r3, r8
 8001dda:	2180      	movs	r1, #128	; 0x80
 8001ddc:	0020      	movs	r0, r4
 8001dde:	9a08      	ldr	r2, [sp, #32]
 8001de0:	f7ff fc84 	bl	80016ec <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	d100      	bne.n	8001dea <HAL_SPI_TransmitReceive+0x2fa>
 8001de8:	e730      	b.n	8001c4c <HAL_SPI_TransmitReceive+0x15c>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001dea:	2220      	movs	r2, #32
 8001dec:	6d63      	ldr	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8001dee:	2001      	movs	r0, #1
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001df0:	4313      	orrs	r3, r2
 8001df2:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001df4:	6562      	str	r2, [r4, #84]	; 0x54
    goto error;
 8001df6:	e698      	b.n	8001b2a <HAL_SPI_TransmitReceive+0x3a>
 8001df8:	20000000 	.word	0x20000000
 8001dfc:	016e3600 	.word	0x016e3600

08001e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001e00:	b510      	push	{r4, lr}
 8001e02:	1e04      	subs	r4, r0, #0
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e04:	d039      	beq.n	8001e7a <HAL_TIM_Base_Init+0x7a>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	2339      	movs	r3, #57	; 0x39
 8001e08:	5cc3      	ldrb	r3, [r0, r3]
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d02f      	beq.n	8001e70 <HAL_TIM_Base_Init+0x70>
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e10:	2339      	movs	r3, #57	; 0x39
 8001e12:	2202      	movs	r2, #2
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e14:	2180      	movs	r1, #128	; 0x80
  htim->State = HAL_TIM_STATE_BUSY;
 8001e16:	54e2      	strb	r2, [r4, r3]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e18:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1a:	05c9      	lsls	r1, r1, #23
  tmpcr1 = TIMx->CR1;
 8001e1c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001e1e:	428a      	cmp	r2, r1
 8001e20:	d005      	beq.n	8001e2e <HAL_TIM_Base_Init+0x2e>
 8001e22:	4917      	ldr	r1, [pc, #92]	; (8001e80 <HAL_TIM_Base_Init+0x80>)
 8001e24:	428a      	cmp	r2, r1
 8001e26:	d002      	beq.n	8001e2e <HAL_TIM_Base_Init+0x2e>
 8001e28:	4916      	ldr	r1, [pc, #88]	; (8001e84 <HAL_TIM_Base_Init+0x84>)
 8001e2a:	428a      	cmp	r2, r1
 8001e2c:	d107      	bne.n	8001e3e <HAL_TIM_Base_Init+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001e2e:	2170      	movs	r1, #112	; 0x70
 8001e30:	438b      	bics	r3, r1
    tmpcr1 |= Structure->CounterMode;
 8001e32:	68a1      	ldr	r1, [r4, #8]
 8001e34:	430b      	orrs	r3, r1
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e36:	4914      	ldr	r1, [pc, #80]	; (8001e88 <HAL_TIM_Base_Init+0x88>)
 8001e38:	400b      	ands	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e3a:	6921      	ldr	r1, [r4, #16]
 8001e3c:	430b      	orrs	r3, r1
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e3e:	2180      	movs	r1, #128	; 0x80
 8001e40:	438b      	bics	r3, r1
 8001e42:	6961      	ldr	r1, [r4, #20]
  return HAL_OK;
 8001e44:	2000      	movs	r0, #0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e46:	430b      	orrs	r3, r1

  TIMx->CR1 = tmpcr1;
 8001e48:	6013      	str	r3, [r2, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e4a:	68e3      	ldr	r3, [r4, #12]
 8001e4c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e4e:	6863      	ldr	r3, [r4, #4]
 8001e50:	6293      	str	r3, [r2, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e52:	2301      	movs	r3, #1
 8001e54:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e56:	223e      	movs	r2, #62	; 0x3e
 8001e58:	54a3      	strb	r3, [r4, r2]
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e5a:	3a04      	subs	r2, #4
 8001e5c:	54a3      	strb	r3, [r4, r2]
 8001e5e:	3201      	adds	r2, #1
 8001e60:	54a3      	strb	r3, [r4, r2]
 8001e62:	3201      	adds	r2, #1
 8001e64:	54a3      	strb	r3, [r4, r2]
 8001e66:	3201      	adds	r2, #1
 8001e68:	54a3      	strb	r3, [r4, r2]
  htim->State = HAL_TIM_STATE_READY;
 8001e6a:	3a04      	subs	r2, #4
 8001e6c:	54a3      	strb	r3, [r4, r2]
}
 8001e6e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8001e70:	3338      	adds	r3, #56	; 0x38
 8001e72:	54c2      	strb	r2, [r0, r3]
    HAL_TIM_Base_MspInit(htim);
 8001e74:	f7fe fd40 	bl	80008f8 <HAL_TIM_Base_MspInit>
 8001e78:	e7ca      	b.n	8001e10 <HAL_TIM_Base_Init+0x10>
    return HAL_ERROR;
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	e7f7      	b.n	8001e6e <HAL_TIM_Base_Init+0x6e>
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40010800 	.word	0x40010800
 8001e84:	40011400 	.word	0x40011400
 8001e88:	fffffcff 	.word	0xfffffcff

08001e8c <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8001e8c:	2239      	movs	r2, #57	; 0x39
 8001e8e:	5c81      	ldrb	r1, [r0, r2]
{
 8001e90:	0003      	movs	r3, r0
    return HAL_ERROR;
 8001e92:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8001e94:	2901      	cmp	r1, #1
 8001e96:	d113      	bne.n	8001ec0 <HAL_TIM_Base_Start_IT+0x34>
  htim->State = HAL_TIM_STATE_BUSY;
 8001e98:	3101      	adds	r1, #1
 8001e9a:	5499      	strb	r1, [r3, r2]
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68da      	ldr	r2, [r3, #12]
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ea4:	2280      	movs	r2, #128	; 0x80
 8001ea6:	05d2      	lsls	r2, r2, #23
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d00a      	beq.n	8001ec2 <HAL_TIM_Base_Start_IT+0x36>
 8001eac:	4a0b      	ldr	r2, [pc, #44]	; (8001edc <HAL_TIM_Base_Start_IT+0x50>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d007      	beq.n	8001ec2 <HAL_TIM_Base_Start_IT+0x36>
 8001eb2:	4a0b      	ldr	r2, [pc, #44]	; (8001ee0 <HAL_TIM_Base_Start_IT+0x54>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_TIM_Base_Start_IT+0x36>
    __HAL_TIM_ENABLE(htim);
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	4310      	orrs	r0, r2
 8001ebc:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 8001ebe:	2000      	movs	r0, #0
}
 8001ec0:	4770      	bx	lr
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ec2:	2207      	movs	r2, #7
 8001ec4:	6899      	ldr	r1, [r3, #8]
 8001ec6:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec8:	2a06      	cmp	r2, #6
 8001eca:	d005      	beq.n	8001ed8 <HAL_TIM_Base_Start_IT+0x4c>
      __HAL_TIM_ENABLE(htim);
 8001ecc:	2101      	movs	r1, #1
 8001ece:	681a      	ldr	r2, [r3, #0]
  return HAL_OK;
 8001ed0:	2000      	movs	r0, #0
      __HAL_TIM_ENABLE(htim);
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	e7f3      	b.n	8001ec0 <HAL_TIM_Base_Start_IT+0x34>
  return HAL_OK;
 8001ed8:	2000      	movs	r0, #0
 8001eda:	e7f1      	b.n	8001ec0 <HAL_TIM_Base_Start_IT+0x34>
 8001edc:	40010800 	.word	0x40010800
 8001ee0:	40011400 	.word	0x40011400

08001ee4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001ee4:	2338      	movs	r3, #56	; 0x38
{
 8001ee6:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001ee8:	5cc2      	ldrb	r2, [r0, r3]
 8001eea:	2a01      	cmp	r2, #1
 8001eec:	d100      	bne.n	8001ef0 <HAL_TIM_ConfigClockSource+0xc>
 8001eee:	e070      	b.n	8001fd2 <HAL_TIM_ConfigClockSource+0xee>
 8001ef0:	2401      	movs	r4, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef2:	2202      	movs	r2, #2
  __HAL_LOCK(htim);
 8001ef4:	54c4      	strb	r4, [r0, r3]
  htim->State = HAL_TIM_STATE_BUSY;
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	54c2      	strb	r2, [r0, r3]
  tmpsmcr = htim->Instance->SMCR;
 8001efa:	6802      	ldr	r2, [r0, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001efc:	4d4a      	ldr	r5, [pc, #296]	; (8002028 <HAL_TIM_ConfigClockSource+0x144>)
  tmpsmcr = htim->Instance->SMCR;
 8001efe:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f00:	402b      	ands	r3, r5
  htim->Instance->SMCR = tmpsmcr;
 8001f02:	6093      	str	r3, [r2, #8]
  switch (sClockSourceConfig->ClockSource)
 8001f04:	680b      	ldr	r3, [r1, #0]
 8001f06:	2b60      	cmp	r3, #96	; 0x60
 8001f08:	d065      	beq.n	8001fd6 <HAL_TIM_ConfigClockSource+0xf2>
 8001f0a:	d82f      	bhi.n	8001f6c <HAL_TIM_ConfigClockSource+0x88>
 8001f0c:	2b40      	cmp	r3, #64	; 0x40
 8001f0e:	d049      	beq.n	8001fa4 <HAL_TIM_ConfigClockSource+0xc0>
 8001f10:	d91f      	bls.n	8001f52 <HAL_TIM_ConfigClockSource+0x6e>
 8001f12:	2b50      	cmp	r3, #80	; 0x50
 8001f14:	d115      	bne.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f16:	684d      	ldr	r5, [r1, #4]
 8001f18:	68cb      	ldr	r3, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001f1a:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f1c:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f1e:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001f20:	43a6      	bics	r6, r4
 8001f22:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f24:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001f26:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001f28:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001f2a:	4323      	orrs	r3, r4

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001f2c:	240a      	movs	r4, #10
 8001f2e:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001f30:	4329      	orrs	r1, r5

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001f32:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001f34:	6211      	str	r1, [r2, #32]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f36:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001f38:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f3a:	438b      	bics	r3, r1
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f3c:	3919      	subs	r1, #25
 8001f3e:	430b      	orrs	r3, r1
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f40:	6093      	str	r3, [r2, #8]
  htim->State = HAL_TIM_STATE_READY;
 8001f42:	2339      	movs	r3, #57	; 0x39
 8001f44:	2201      	movs	r2, #1
 8001f46:	54c2      	strb	r2, [r0, r3]
  __HAL_UNLOCK(htim);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	3b01      	subs	r3, #1
 8001f4c:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8001f4e:	2000      	movs	r0, #0
}
 8001f50:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001f52:	2b20      	cmp	r3, #32
 8001f54:	d002      	beq.n	8001f5c <HAL_TIM_ConfigClockSource+0x78>
 8001f56:	d920      	bls.n	8001f9a <HAL_TIM_ConfigClockSource+0xb6>
 8001f58:	2b30      	cmp	r3, #48	; 0x30
 8001f5a:	d1f2      	bne.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f5c:	2470      	movs	r4, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001f5e:	6891      	ldr	r1, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f60:	43a1      	bics	r1, r4
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f62:	430b      	orrs	r3, r1
 8001f64:	2107      	movs	r1, #7
 8001f66:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001f68:	6093      	str	r3, [r2, #8]
}
 8001f6a:	e7ea      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8001f6c:	2b70      	cmp	r3, #112	; 0x70
 8001f6e:	d04b      	beq.n	8002008 <HAL_TIM_ConfigClockSource+0x124>
 8001f70:	2480      	movs	r4, #128	; 0x80
 8001f72:	01a4      	lsls	r4, r4, #6
 8001f74:	42a3      	cmp	r3, r4
 8001f76:	d1e4      	bne.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f78:	6893      	ldr	r3, [r2, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f7a:	4c2c      	ldr	r4, [pc, #176]	; (800202c <HAL_TIM_ConfigClockSource+0x148>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f7c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f7e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001f80:	688b      	ldr	r3, [r1, #8]
 8001f82:	68c9      	ldr	r1, [r1, #12]
 8001f84:	432b      	orrs	r3, r5
 8001f86:	0209      	lsls	r1, r1, #8
 8001f88:	430b      	orrs	r3, r1
 8001f8a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f8c:	6093      	str	r3, [r2, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001f8e:	2380      	movs	r3, #128	; 0x80
 8001f90:	6891      	ldr	r1, [r2, #8]
 8001f92:	01db      	lsls	r3, r3, #7
 8001f94:	430b      	orrs	r3, r1
 8001f96:	6093      	str	r3, [r2, #8]
      break;
 8001f98:	e7d3      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
  switch (sClockSourceConfig->ClockSource)
 8001f9a:	2110      	movs	r1, #16
 8001f9c:	001c      	movs	r4, r3
 8001f9e:	438c      	bics	r4, r1
 8001fa0:	d1cf      	bne.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
 8001fa2:	e7db      	b.n	8001f5c <HAL_TIM_ConfigClockSource+0x78>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001fa4:	684d      	ldr	r5, [r1, #4]
 8001fa6:	68cb      	ldr	r3, [r1, #12]
  tmpccer = TIMx->CCER;
 8001fa8:	6a11      	ldr	r1, [r2, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001faa:	6a16      	ldr	r6, [r2, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fac:	011b      	lsls	r3, r3, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001fae:	43a6      	bics	r6, r4
 8001fb0:	6216      	str	r6, [r2, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb2:	26f0      	movs	r6, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8001fb4:	6994      	ldr	r4, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001fb6:	43b4      	bics	r4, r6
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001fb8:	4323      	orrs	r3, r4
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001fba:	240a      	movs	r4, #10
 8001fbc:	43a1      	bics	r1, r4
  tmpccer |= TIM_ICPolarity;
 8001fbe:	4329      	orrs	r1, r5
  TIMx->CCMR1 = tmpccmr1;
 8001fc0:	6193      	str	r3, [r2, #24]
  TIMx->CCER = tmpccer;
 8001fc2:	6211      	str	r1, [r2, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fc4:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8001fc6:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001fc8:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001fca:	3929      	subs	r1, #41	; 0x29
 8001fcc:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8001fce:	6093      	str	r3, [r2, #8]
}
 8001fd0:	e7b7      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
  __HAL_LOCK(htim);
 8001fd2:	2002      	movs	r0, #2
 8001fd4:	e7bc      	b.n	8001f50 <HAL_TIM_ConfigClockSource+0x6c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fd6:	2510      	movs	r5, #16
 8001fd8:	6a14      	ldr	r4, [r2, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fda:	684b      	ldr	r3, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fdc:	43ac      	bics	r4, r5
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001fde:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001fe0:	6214      	str	r4, [r2, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001fe2:	6995      	ldr	r5, [r2, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe4:	4e12      	ldr	r6, [pc, #72]	; (8002030 <HAL_TIM_ConfigClockSource+0x14c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fe6:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001fe8:	4035      	ands	r5, r6
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001fea:	4329      	orrs	r1, r5
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001fec:	25a0      	movs	r5, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8001fee:	6a14      	ldr	r4, [r2, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8001ff0:	6191      	str	r1, [r2, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ff2:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001ff4:	43ac      	bics	r4, r5
  tmpccer |= (TIM_ICPolarity << 4U);
 8001ff6:	011b      	lsls	r3, r3, #4
 8001ff8:	4323      	orrs	r3, r4
  TIMx->CCER = tmpccer;
 8001ffa:	6213      	str	r3, [r2, #32]
  tmpsmcr = TIMx->SMCR;
 8001ffc:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8001ffe:	438b      	bics	r3, r1
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002000:	3909      	subs	r1, #9
 8002002:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 8002004:	6093      	str	r3, [r2, #8]
}
 8002006:	e79c      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
  tmpsmcr = TIMx->SMCR;
 8002008:	6893      	ldr	r3, [r2, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200a:	4c08      	ldr	r4, [pc, #32]	; (800202c <HAL_TIM_ConfigClockSource+0x148>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800200c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800200e:	401c      	ands	r4, r3
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002010:	688b      	ldr	r3, [r1, #8]
 8002012:	68c9      	ldr	r1, [r1, #12]
 8002014:	432b      	orrs	r3, r5
 8002016:	0209      	lsls	r1, r1, #8
 8002018:	430b      	orrs	r3, r1
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800201a:	2177      	movs	r1, #119	; 0x77
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800201c:	4323      	orrs	r3, r4
  TIMx->SMCR = tmpsmcr;
 800201e:	6093      	str	r3, [r2, #8]
      tmpsmcr = htim->Instance->SMCR;
 8002020:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002022:	430b      	orrs	r3, r1
      htim->Instance->SMCR = tmpsmcr;
 8002024:	6093      	str	r3, [r2, #8]
      break;
 8002026:	e78c      	b.n	8001f42 <HAL_TIM_ConfigClockSource+0x5e>
 8002028:	ffff0088 	.word	0xffff0088
 800202c:	ffff00ff 	.word	0xffff00ff
 8002030:	ffff0fff 	.word	0xffff0fff

08002034 <HAL_TIM_OC_DelayElapsedCallback>:
 8002034:	4770      	bx	lr
 8002036:	46c0      	nop			; (mov r8, r8)

08002038 <HAL_TIM_IC_CaptureCallback>:
 8002038:	4770      	bx	lr
 800203a:	46c0      	nop			; (mov r8, r8)

0800203c <HAL_TIM_PWM_PulseFinishedCallback>:
 800203c:	4770      	bx	lr
 800203e:	46c0      	nop			; (mov r8, r8)

08002040 <HAL_TIM_TriggerCallback>:
 8002040:	4770      	bx	lr
 8002042:	46c0      	nop			; (mov r8, r8)

08002044 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002044:	2202      	movs	r2, #2
 8002046:	6803      	ldr	r3, [r0, #0]
{
 8002048:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204a:	6919      	ldr	r1, [r3, #16]
{
 800204c:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800204e:	420a      	tst	r2, r1
 8002050:	d002      	beq.n	8002058 <HAL_TIM_IRQHandler+0x14>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002052:	68d9      	ldr	r1, [r3, #12]
 8002054:	420a      	tst	r2, r1
 8002056:	d154      	bne.n	8002102 <HAL_TIM_IRQHandler+0xbe>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002058:	2204      	movs	r2, #4
 800205a:	6919      	ldr	r1, [r3, #16]
 800205c:	420a      	tst	r2, r1
 800205e:	d002      	beq.n	8002066 <HAL_TIM_IRQHandler+0x22>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002060:	68d9      	ldr	r1, [r3, #12]
 8002062:	420a      	tst	r2, r1
 8002064:	d13a      	bne.n	80020dc <HAL_TIM_IRQHandler+0x98>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002066:	2208      	movs	r2, #8
 8002068:	6919      	ldr	r1, [r3, #16]
 800206a:	420a      	tst	r2, r1
 800206c:	d002      	beq.n	8002074 <HAL_TIM_IRQHandler+0x30>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800206e:	68d9      	ldr	r1, [r3, #12]
 8002070:	420a      	tst	r2, r1
 8002072:	d125      	bne.n	80020c0 <HAL_TIM_IRQHandler+0x7c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002074:	2210      	movs	r2, #16
 8002076:	6919      	ldr	r1, [r3, #16]
 8002078:	420a      	tst	r2, r1
 800207a:	d002      	beq.n	8002082 <HAL_TIM_IRQHandler+0x3e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800207c:	68d9      	ldr	r1, [r3, #12]
 800207e:	420a      	tst	r2, r1
 8002080:	d10e      	bne.n	80020a0 <HAL_TIM_IRQHandler+0x5c>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002082:	2201      	movs	r2, #1
 8002084:	6919      	ldr	r1, [r3, #16]
 8002086:	420a      	tst	r2, r1
 8002088:	d002      	beq.n	8002090 <HAL_TIM_IRQHandler+0x4c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800208a:	68d9      	ldr	r1, [r3, #12]
 800208c:	420a      	tst	r2, r1
 800208e:	d14e      	bne.n	800212e <HAL_TIM_IRQHandler+0xea>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002090:	2240      	movs	r2, #64	; 0x40
 8002092:	6919      	ldr	r1, [r3, #16]
 8002094:	420a      	tst	r2, r1
 8002096:	d002      	beq.n	800209e <HAL_TIM_IRQHandler+0x5a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002098:	68d9      	ldr	r1, [r3, #12]
 800209a:	420a      	tst	r2, r1
 800209c:	d141      	bne.n	8002122 <HAL_TIM_IRQHandler+0xde>
}
 800209e:	bd10      	pop	{r4, pc}
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020a0:	3a21      	subs	r2, #33	; 0x21
 80020a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80020a4:	3219      	adds	r2, #25
 80020a6:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020a8:	69da      	ldr	r2, [r3, #28]
 80020aa:	23c0      	movs	r3, #192	; 0xc0
 80020ac:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80020ae:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80020b0:	421a      	tst	r2, r3
 80020b2:	d043      	beq.n	800213c <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 80020b4:	f7ff ffc0 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b8:	2300      	movs	r3, #0
 80020ba:	7623      	strb	r3, [r4, #24]
 80020bc:	6823      	ldr	r3, [r4, #0]
 80020be:	e7e0      	b.n	8002082 <HAL_TIM_IRQHandler+0x3e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020c0:	3a11      	subs	r2, #17
 80020c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020c4:	320d      	adds	r2, #13
 80020c6:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020c8:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020cc:	079b      	lsls	r3, r3, #30
 80020ce:	d041      	beq.n	8002154 <HAL_TIM_IRQHandler+0x110>
        HAL_TIM_IC_CaptureCallback(htim);
 80020d0:	f7ff ffb2 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020d4:	2300      	movs	r3, #0
 80020d6:	7623      	strb	r3, [r4, #24]
 80020d8:	6823      	ldr	r3, [r4, #0]
 80020da:	e7cb      	b.n	8002074 <HAL_TIM_IRQHandler+0x30>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80020dc:	3a09      	subs	r2, #9
 80020de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80020e0:	3207      	adds	r2, #7
 80020e2:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020e4:	699a      	ldr	r2, [r3, #24]
 80020e6:	23c0      	movs	r3, #192	; 0xc0
 80020e8:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 80020ea:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80020ec:	421a      	tst	r2, r3
 80020ee:	d12e      	bne.n	800214e <HAL_TIM_IRQHandler+0x10a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020f0:	f7ff ffa0 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020f4:	0020      	movs	r0, r4
 80020f6:	f7ff ffa1 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020fa:	2300      	movs	r3, #0
 80020fc:	7623      	strb	r3, [r4, #24]
 80020fe:	6823      	ldr	r3, [r4, #0]
 8002100:	e7b1      	b.n	8002066 <HAL_TIM_IRQHandler+0x22>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002102:	3a05      	subs	r2, #5
 8002104:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002106:	3204      	adds	r2, #4
 8002108:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800210a:	699b      	ldr	r3, [r3, #24]
 800210c:	079b      	lsls	r3, r3, #30
 800210e:	d11b      	bne.n	8002148 <HAL_TIM_IRQHandler+0x104>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002110:	f7ff ff90 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002114:	0020      	movs	r0, r4
 8002116:	f7ff ff91 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800211a:	2300      	movs	r3, #0
 800211c:	7623      	strb	r3, [r4, #24]
 800211e:	6823      	ldr	r3, [r4, #0]
 8002120:	e79a      	b.n	8002058 <HAL_TIM_IRQHandler+0x14>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002122:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8002124:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002126:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8002128:	f7ff ff8a 	bl	8002040 <HAL_TIM_TriggerCallback>
}
 800212c:	e7b7      	b.n	800209e <HAL_TIM_IRQHandler+0x5a>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800212e:	3a03      	subs	r2, #3
 8002130:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002132:	0020      	movs	r0, r4
 8002134:	f000 fafc 	bl	8002730 <HAL_TIM_PeriodElapsedCallback>
 8002138:	6823      	ldr	r3, [r4, #0]
 800213a:	e7a9      	b.n	8002090 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800213c:	f7ff ff7a 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002140:	0020      	movs	r0, r4
 8002142:	f7ff ff7b 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
 8002146:	e7b7      	b.n	80020b8 <HAL_TIM_IRQHandler+0x74>
          HAL_TIM_IC_CaptureCallback(htim);
 8002148:	f7ff ff76 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
 800214c:	e7e5      	b.n	800211a <HAL_TIM_IRQHandler+0xd6>
        HAL_TIM_IC_CaptureCallback(htim);
 800214e:	f7ff ff73 	bl	8002038 <HAL_TIM_IC_CaptureCallback>
 8002152:	e7d2      	b.n	80020fa <HAL_TIM_IRQHandler+0xb6>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002154:	f7ff ff6e 	bl	8002034 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	0020      	movs	r0, r4
 800215a:	f7ff ff6f 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
 800215e:	e7b9      	b.n	80020d4 <HAL_TIM_IRQHandler+0x90>

08002160 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002160:	2338      	movs	r3, #56	; 0x38
{
 8002162:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8002164:	5cc3      	ldrb	r3, [r0, r3]
 8002166:	2b01      	cmp	r3, #1
 8002168:	d021      	beq.n	80021ae <HAL_TIMEx_MasterConfigSynchronization+0x4e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800216a:	2339      	movs	r3, #57	; 0x39
 800216c:	2202      	movs	r2, #2

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800216e:	2570      	movs	r5, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8002170:	54c2      	strb	r2, [r0, r3]
  tmpcr2 = htim->Instance->CR2;
 8002172:	6803      	ldr	r3, [r0, #0]
 8002174:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;
 8002176:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8002178:	43aa      	bics	r2, r5
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800217a:	680d      	ldr	r5, [r1, #0]
 800217c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800217e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002180:	2280      	movs	r2, #128	; 0x80
 8002182:	05d2      	lsls	r2, r2, #23
 8002184:	4293      	cmp	r3, r2
 8002186:	d005      	beq.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 8002188:	4a0a      	ldr	r2, [pc, #40]	; (80021b4 <HAL_TIMEx_MasterConfigSynchronization+0x54>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d002      	beq.n	8002194 <HAL_TIMEx_MasterConfigSynchronization+0x34>
 800218e:	4a0a      	ldr	r2, [pc, #40]	; (80021b8 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d104      	bne.n	800219e <HAL_TIMEx_MasterConfigSynchronization+0x3e>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002194:	2280      	movs	r2, #128	; 0x80
 8002196:	4394      	bics	r4, r2
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002198:	684a      	ldr	r2, [r1, #4]
 800219a:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800219c:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800219e:	2339      	movs	r3, #57	; 0x39
 80021a0:	2201      	movs	r2, #1
 80021a2:	54c2      	strb	r2, [r0, r3]

  __HAL_UNLOCK(htim);
 80021a4:	2200      	movs	r2, #0
 80021a6:	3b01      	subs	r3, #1
 80021a8:	54c2      	strb	r2, [r0, r3]

  return HAL_OK;
 80021aa:	2000      	movs	r0, #0
}
 80021ac:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021ae:	2002      	movs	r0, #2
 80021b0:	e7fc      	b.n	80021ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80021b2:	46c0      	nop			; (mov r8, r8)
 80021b4:	40010800 	.word	0x40010800
 80021b8:	40011400 	.word	0x40011400

080021bc <internal_bus_create>:
#include "Bus.h"

InternalBus_t * internal_bus_create(GPIO_TypeDef *bus_line,uint16_t bus_pins,GPIO_TypeDef *cl_bus,uint16_t cl_pin,GPIO_TypeDef *ak_bus,uint16_t ak_pin)
{
 80021bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021be:	4657      	mov	r7, sl
 80021c0:	464e      	mov	r6, r9
 80021c2:	4645      	mov	r5, r8
 80021c4:	46de      	mov	lr, fp
 80021c6:	b5e0      	push	{r5, r6, r7, lr}
 80021c8:	b087      	sub	sp, #28
 80021ca:	001e      	movs	r6, r3
 80021cc:	9301      	str	r3, [sp, #4]
 80021ce:	ab10      	add	r3, sp, #64	; 0x40
 80021d0:	4680      	mov	r8, r0
 80021d2:	cb01      	ldmia	r3!, {r0}
 80021d4:	4689      	mov	r9, r1
 80021d6:	881c      	ldrh	r4, [r3, #0]
 80021d8:	4682      	mov	sl, r0
	InternalBus_t * thisInternalBus = (InternalBus_t *) malloc(sizeof(InternalBus_t));
 80021da:	203c      	movs	r0, #60	; 0x3c
{
 80021dc:	0017      	movs	r7, r2
 80021de:	9100      	str	r1, [sp, #0]
 80021e0:	9205      	str	r2, [sp, #20]
 80021e2:	9402      	str	r4, [sp, #8]
	InternalBus_t * thisInternalBus = (InternalBus_t *) malloc(sizeof(InternalBus_t));
 80021e4:	f000 ffa0 	bl	8003128 <malloc>
	if(thisInternalBus != NULL)
 80021e8:	2800      	cmp	r0, #0
 80021ea:	d100      	bne.n	80021ee <internal_bus_create+0x32>
 80021ec:	e09e      	b.n	800232c <internal_bus_create+0x170>
	{
		//assign desired value for clock pin and other bus  so this bus will now which pins assigned for clock ack and bus line it self
		//everything else in this lib should use this data for other settings
		thisInternalBus->bus = bus_line;
 80021ee:	4645      	mov	r5, r8
		thisInternalBus->bus_mask = bus_pins;
 80021f0:	4649      	mov	r1, r9
		thisInternalBus->BUS_BUSMASK32 = 0;
 80021f2:	2200      	movs	r2, #0
 80021f4:	2300      	movs	r3, #0
		thisInternalBus->bus = bus_line;
 80021f6:	6005      	str	r5, [r0, #0]
		thisInternalBus->bus_mask = bus_pins;
 80021f8:	8081      	strh	r1, [r0, #4]
		thisInternalBus->bus_clk_mask = cl_pin;
		thisInternalBus->BUS_CLKMASK32 = 0;
		thisInternalBus->BUS_CLKMODER = 0;
		thisInternalBus->BUS_CLKOSPEEDR = 0;

		thisInternalBus->bus_ack = ak_bus;
 80021fa:	4655      	mov	r5, sl
		thisInternalBus->BUS_BUSOSPEEDR = 0;
 80021fc:	2100      	movs	r1, #0
		thisInternalBus->BUS_BUSMASK32 = 0;
 80021fe:	6082      	str	r2, [r0, #8]
 8002200:	60c3      	str	r3, [r0, #12]
		thisInternalBus->bus_ack_mask = ak_pin;
		thisInternalBus->BUS_ACKMASK32 = 0;
 8002202:	6302      	str	r2, [r0, #48]	; 0x30
 8002204:	6343      	str	r3, [r0, #52]	; 0x34
		thisInternalBus->BUS_BUSOSPEEDR = 0;
 8002206:	6101      	str	r1, [r0, #16]
		thisInternalBus->BUS_ACKMODER = 0;
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 8002208:	2300      	movs	r3, #0
		thisInternalBus->BUS_CLKMASK32 = 0;
 800220a:	61c1      	str	r1, [r0, #28]
		thisInternalBus->BUS_CLKMODER = 0;
 800220c:	6201      	str	r1, [r0, #32]
		thisInternalBus->BUS_CLKOSPEEDR = 0;
 800220e:	6241      	str	r1, [r0, #36]	; 0x24
		thisInternalBus->bus_ack = ak_bus;
 8002210:	6285      	str	r5, [r0, #40]	; 0x28
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 8002212:	6381      	str	r1, [r0, #56]	; 0x38
 8002214:	2500      	movs	r5, #0
		uint32_t pinShifter = 0;
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
		{
			if (bus_pins & (1 << pinShifter))
			{
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8002216:	9103      	str	r1, [sp, #12]
 8002218:	4641      	mov	r1, r8
		thisInternalBus->bus_clk = cl_bus;
 800221a:	6147      	str	r7, [r0, #20]
		thisInternalBus->bus_clk_mask = cl_pin;
 800221c:	8306      	strh	r6, [r0, #24]
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 800221e:	469c      	mov	ip, r3
 8002220:	2700      	movs	r7, #0
 8002222:	2600      	movs	r6, #0
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8002224:	46a8      	mov	r8, r5
 8002226:	4689      	mov	r9, r1
		thisInternalBus->bus_ack_mask = ak_pin;
 8002228:	8584      	strh	r4, [r0, #44]	; 0x2c
			if (bus_pins & (1 << pinShifter))
 800222a:	3201      	adds	r2, #1
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 800222c:	9304      	str	r3, [sp, #16]
			if (bus_pins & (1 << pinShifter))
 800222e:	9c00      	ldr	r4, [sp, #0]
 8002230:	411c      	asrs	r4, r3
 8002232:	4222      	tst	r2, r4
 8002234:	d012      	beq.n	800225c <internal_bus_create+0xa0>
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8002236:	2103      	movs	r1, #3
 8002238:	005c      	lsls	r4, r3, #1
 800223a:	40a1      	lsls	r1, r4
 800223c:	9d03      	ldr	r5, [sp, #12]
 800223e:	468b      	mov	fp, r1
 8002240:	430d      	orrs	r5, r1
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 8002242:	0011      	movs	r1, r2
 8002244:	40a1      	lsls	r1, r4
 8002246:	000c      	movs	r4, r1
 8002248:	68c1      	ldr	r1, [r0, #12]
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 800224a:	9503      	str	r5, [sp, #12]
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 800224c:	430c      	orrs	r4, r1
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 800224e:	4659      	mov	r1, fp
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 8002250:	60c4      	str	r4, [r0, #12]
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 8002252:	9c04      	ldr	r4, [sp, #16]
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 8002254:	6085      	str	r5, [r0, #8]
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 8002256:	430c      	orrs	r4, r1
 8002258:	9404      	str	r4, [sp, #16]
 800225a:	6104      	str	r4, [r0, #16]
			}
			if (cl_pin & (1 << pinShifter))
 800225c:	9c01      	ldr	r4, [sp, #4]
 800225e:	411c      	asrs	r4, r3
 8002260:	4222      	tst	r2, r4
 8002262:	d00e      	beq.n	8002282 <internal_bus_create+0xc6>
			{
				thisInternalBus->BUS_CLKMASK32  |= (0b11 << (pinShifter * 2));
 8002264:	2103      	movs	r1, #3
 8002266:	005c      	lsls	r4, r3, #1
 8002268:	40a1      	lsls	r1, r4
 800226a:	468b      	mov	fp, r1
 800226c:	430e      	orrs	r6, r1
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 800226e:	0011      	movs	r1, r2
 8002270:	40a1      	lsls	r1, r4
 8002272:	000c      	movs	r4, r1
 8002274:	6a01      	ldr	r1, [r0, #32]
				thisInternalBus->BUS_CLKMASK32  |= (0b11 << (pinShifter * 2));
 8002276:	61c6      	str	r6, [r0, #28]
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 8002278:	430c      	orrs	r4, r1
				thisInternalBus->BUS_CLKOSPEEDR |= (0b11 << (pinShifter * 2));
 800227a:	4659      	mov	r1, fp
 800227c:	430f      	orrs	r7, r1
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 800227e:	6204      	str	r4, [r0, #32]
				thisInternalBus->BUS_CLKOSPEEDR |= (0b11 << (pinShifter * 2));
 8002280:	6247      	str	r7, [r0, #36]	; 0x24
			}
			if (ak_pin & (1 << pinShifter))
 8002282:	9c02      	ldr	r4, [sp, #8]
 8002284:	411c      	asrs	r4, r3
 8002286:	4222      	tst	r2, r4
 8002288:	d012      	beq.n	80022b0 <internal_bus_create+0xf4>
			{
				thisInternalBus->BUS_ACKMASK32  |= (0b11 << (pinShifter * 2));
 800228a:	2103      	movs	r1, #3
 800228c:	005c      	lsls	r4, r3, #1
 800228e:	40a1      	lsls	r1, r4
 8002290:	468b      	mov	fp, r1
 8002292:	4641      	mov	r1, r8
 8002294:	465d      	mov	r5, fp
 8002296:	4329      	orrs	r1, r5
 8002298:	4688      	mov	r8, r1
 800229a:	6301      	str	r1, [r0, #48]	; 0x30
				thisInternalBus->BUS_ACKMODER   |= (0b01 << (pinShifter * 2));
 800229c:	0011      	movs	r1, r2
 800229e:	40a1      	lsls	r1, r4
 80022a0:	000c      	movs	r4, r1
 80022a2:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80022a4:	430c      	orrs	r4, r1
				thisInternalBus->BUS_ACKOSPEEDR |= (0b11 << (pinShifter * 2));
 80022a6:	4661      	mov	r1, ip
 80022a8:	4329      	orrs	r1, r5
 80022aa:	468c      	mov	ip, r1
				thisInternalBus->BUS_ACKMODER   |= (0b01 << (pinShifter * 2));
 80022ac:	6344      	str	r4, [r0, #52]	; 0x34
				thisInternalBus->BUS_ACKOSPEEDR |= (0b11 << (pinShifter * 2));
 80022ae:	6381      	str	r1, [r0, #56]	; 0x38
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
 80022b0:	3301      	adds	r3, #1
 80022b2:	2b10      	cmp	r3, #16
 80022b4:	d1bb      	bne.n	800222e <internal_bus_create+0x72>
 80022b6:	464b      	mov	r3, r9
 80022b8:	9903      	ldr	r1, [sp, #12]
			}
		}

		uint32_t temp = 0;
		//Set main bus output speed to very high
		temp = thisInternalBus->bus->OSPEEDR;
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	9a04      	ldr	r2, [sp, #16]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 80022be:	438b      	bics	r3, r1
		temp |= thisInternalBus->BUS_BUSOSPEEDR;
 80022c0:	4313      	orrs	r3, r2
		thisInternalBus->bus->OSPEEDR = temp;
 80022c2:	464a      	mov	r2, r9
 80022c4:	6093      	str	r3, [r2, #8]
		//Set main bus output type to output push-pull
		temp = thisInternalBus->bus->OTYPER;
 80022c6:	6853      	ldr	r3, [r2, #4]
		temp &= ~thisInternalBus->bus_mask;
 80022c8:	9c00      	ldr	r4, [sp, #0]
 80022ca:	4645      	mov	r5, r8
 80022cc:	43a3      	bics	r3, r4
		thisInternalBus->bus->OTYPER = temp;
 80022ce:	6053      	str	r3, [r2, #4]
		//Set main bus pullup/down resistors to none
		temp = thisInternalBus->bus->PUPDR;
 80022d0:	68d3      	ldr	r3, [r2, #12]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 80022d2:	438b      	bics	r3, r1
		thisInternalBus->bus->PUPDR = temp;
 80022d4:	60d3      	str	r3, [r2, #12]

		//Set Clock line, output speed to very high
		temp = thisInternalBus->bus_clk->OSPEEDR;
 80022d6:	9a05      	ldr	r2, [sp, #20]
 80022d8:	6893      	ldr	r3, [r2, #8]
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 80022da:	43b3      	bics	r3, r6
		temp |= thisInternalBus->BUS_CLKOSPEEDR;
 80022dc:	433b      	orrs	r3, r7
		thisInternalBus->bus_clk->OSPEEDR = temp;
 80022de:	6093      	str	r3, [r2, #8]
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_clk->OTYPER;
 80022e0:	6853      	ldr	r3, [r2, #4]
		temp &= ~thisInternalBus->bus_clk_mask;
 80022e2:	9f01      	ldr	r7, [sp, #4]
 80022e4:	43bb      	bics	r3, r7
		thisInternalBus->bus_clk->OTYPER = temp;
 80022e6:	6053      	str	r3, [r2, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_clk->PUPDR;
 80022e8:	68d3      	ldr	r3, [r2, #12]
		thisInternalBus->bus_clk->PUPDR = temp;

		//Set Ack line, output speed to very high
		temp = thisInternalBus->bus_ack->OSPEEDR;
		temp &= ~thisInternalBus->BUS_ACKMASK32;
		temp |= thisInternalBus->BUS_ACKOSPEEDR;
 80022ea:	4667      	mov	r7, ip
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 80022ec:	43b3      	bics	r3, r6
		thisInternalBus->bus_clk->PUPDR = temp;
 80022ee:	60d3      	str	r3, [r2, #12]
		temp = thisInternalBus->bus_ack->OSPEEDR;
 80022f0:	4653      	mov	r3, sl
 80022f2:	689b      	ldr	r3, [r3, #8]
		thisInternalBus->bus_ack->OSPEEDR = temp;
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_ack->OTYPER;
		temp &= ~thisInternalBus->bus_ack_mask;
		thisInternalBus->bus_ack->OTYPER = temp;
 80022f4:	4652      	mov	r2, sl
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 80022f6:	43ab      	bics	r3, r5
		temp |= thisInternalBus->BUS_ACKOSPEEDR;
 80022f8:	433b      	orrs	r3, r7
		thisInternalBus->bus_ack->OSPEEDR = temp;
 80022fa:	4657      	mov	r7, sl
 80022fc:	60bb      	str	r3, [r7, #8]
		temp = thisInternalBus->bus_ack->OTYPER;
 80022fe:	687b      	ldr	r3, [r7, #4]
		temp &= ~thisInternalBus->bus_ack_mask;
 8002300:	9f02      	ldr	r7, [sp, #8]
 8002302:	43bb      	bics	r3, r7
		thisInternalBus->bus_ack->OTYPER = temp;
 8002304:	6053      	str	r3, [r2, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_ack->PUPDR;
 8002306:	68d3      	ldr	r3, [r2, #12]
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 8002308:	43ab      	bics	r3, r5
		thisInternalBus->bus_ack->PUPDR = temp;
 800230a:	60d3      	str	r3, [r2, #12]

inline void internal_bus_release(InternalBus_t *thisInternalBus)
{
	uint32_t temp = 0;
	//Set all bus pins to low and send complete
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 800230c:	464b      	mov	r3, r9
 800230e:	629c      	str	r4, [r3, #40]	; 0x28
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 8002310:	6297      	str	r7, [r2, #40]	; 0x28

	//Set Bus pins to input
	temp = thisInternalBus->bus->MODER;
	temp &= ~thisInternalBus->BUS_BUSMASK32;
	thisInternalBus->bus->MODER = temp;
 8002312:	464a      	mov	r2, r9
	temp = thisInternalBus->bus->MODER;
 8002314:	681b      	ldr	r3, [r3, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8002316:	438b      	bics	r3, r1
	thisInternalBus->bus->MODER = temp;
 8002318:	6013      	str	r3, [r2, #0]

	//Set clock pin to input
	temp = thisInternalBus->bus_clk->MODER;
 800231a:	9a05      	ldr	r2, [sp, #20]
 800231c:	6813      	ldr	r3, [r2, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 800231e:	43b3      	bics	r3, r6
	thisInternalBus->bus_clk->MODER = temp;
 8002320:	6013      	str	r3, [r2, #0]

	//Set ack pins to input
	temp = thisInternalBus->bus_ack->MODER;
 8002322:	4653      	mov	r3, sl
	temp &= ~thisInternalBus->BUS_ACKMASK32;
	thisInternalBus->bus_ack->MODER = temp;
 8002324:	4652      	mov	r2, sl
	temp = thisInternalBus->bus_ack->MODER;
 8002326:	681b      	ldr	r3, [r3, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8002328:	43ab      	bics	r3, r5
	thisInternalBus->bus_ack->MODER = temp;
 800232a:	6013      	str	r3, [r2, #0]
}
 800232c:	b007      	add	sp, #28
 800232e:	bcf0      	pop	{r4, r5, r6, r7}
 8002330:	46bb      	mov	fp, r7
 8002332:	46b2      	mov	sl, r6
 8002334:	46a9      	mov	r9, r5
 8002336:	46a0      	mov	r8, r4
 8002338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)

0800233c <internal_bus_write_data_frame>:
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800233e:	4646      	mov	r6, r8
 8002340:	46d6      	mov	lr, sl
 8002342:	464f      	mov	r7, r9
	temp = thisInternalBus->bus->MODER;
 8002344:	6804      	ldr	r4, [r0, #0]
{
 8002346:	b5c0      	push	{r6, r7, lr}
	temp = thisInternalBus->bus->MODER;
 8002348:	6823      	ldr	r3, [r4, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 800234a:	6887      	ldr	r7, [r0, #8]
	temp |= thisInternalBus->BUS_BUSMODER;
 800234c:	68c2      	ldr	r2, [r0, #12]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 800234e:	43bb      	bics	r3, r7
	temp |= thisInternalBus->BUS_BUSMODER;
 8002350:	4313      	orrs	r3, r2
	thisInternalBus->bus->MODER = temp;
 8002352:	6023      	str	r3, [r4, #0]
	temp = thisInternalBus->bus_clk->MODER;
 8002354:	6943      	ldr	r3, [r0, #20]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8002356:	69c5      	ldr	r5, [r0, #28]
	temp = thisInternalBus->bus_clk->MODER;
 8002358:	681a      	ldr	r2, [r3, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 800235a:	46aa      	mov	sl, r5
 800235c:	43aa      	bics	r2, r5
	temp |= thisInternalBus->BUS_CLKMODER;
 800235e:	6a05      	ldr	r5, [r0, #32]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 8002360:	6b06      	ldr	r6, [r0, #48]	; 0x30
	temp |= thisInternalBus->BUS_CLKMODER;
 8002362:	432a      	orrs	r2, r5
	temp = thisInternalBus->bus_ack->MODER;
 8002364:	6a85      	ldr	r5, [r0, #40]	; 0x28
	thisInternalBus->bus_clk->MODER = temp;
 8002366:	601a      	str	r2, [r3, #0]
	temp = thisInternalBus->bus_ack->MODER;
 8002368:	682a      	ldr	r2, [r5, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 800236a:	46b4      	mov	ip, r6
 800236c:	43b2      	bics	r2, r6
	temp |= thisInternalBus->BUS_ACKMODER;
 800236e:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8002370:	4332      	orrs	r2, r6
	thisInternalBus->bus_ack->MODER = temp;
 8002372:	602a      	str	r2, [r5, #0]
	thisInternalBus->bus_ack->BSRR = (uint32_t) thisInternalBus->bus_ack_mask;
 8002374:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 8002376:	61aa      	str	r2, [r5, #24]
 8002378:	4690      	mov	r8, r2
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800237a:	8b02      	ldrh	r2, [r0, #24]
 800237c:	619a      	str	r2, [r3, #24]
 800237e:	680e      	ldr	r6, [r1, #0]
 8002380:	61a6      	str	r6, [r4, #24]
 8002382:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002384:	619a      	str	r2, [r3, #24]
 8002386:	684e      	ldr	r6, [r1, #4]
 8002388:	61a6      	str	r6, [r4, #24]
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800238c:	619a      	str	r2, [r3, #24]
 800238e:	688e      	ldr	r6, [r1, #8]
 8002390:	61a6      	str	r6, [r4, #24]
 8002392:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002394:	619a      	str	r2, [r3, #24]
 8002396:	68ce      	ldr	r6, [r1, #12]
 8002398:	61a6      	str	r6, [r4, #24]
 800239a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800239c:	619a      	str	r2, [r3, #24]
 800239e:	690e      	ldr	r6, [r1, #16]
 80023a0:	61a6      	str	r6, [r4, #24]
 80023a2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023a4:	619a      	str	r2, [r3, #24]
 80023a6:	694e      	ldr	r6, [r1, #20]
 80023a8:	61a6      	str	r6, [r4, #24]
 80023aa:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023ac:	619a      	str	r2, [r3, #24]
 80023ae:	698e      	ldr	r6, [r1, #24]
 80023b0:	61a6      	str	r6, [r4, #24]
 80023b2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023b4:	619a      	str	r2, [r3, #24]
 80023b6:	69ce      	ldr	r6, [r1, #28]
 80023b8:	61a6      	str	r6, [r4, #24]
 80023ba:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023bc:	619a      	str	r2, [r3, #24]
 80023be:	6a0e      	ldr	r6, [r1, #32]
 80023c0:	61a6      	str	r6, [r4, #24]
 80023c2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023c4:	619a      	str	r2, [r3, #24]
 80023c6:	6a4e      	ldr	r6, [r1, #36]	; 0x24
 80023c8:	61a6      	str	r6, [r4, #24]
 80023ca:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023cc:	619a      	str	r2, [r3, #24]
 80023ce:	6a8e      	ldr	r6, [r1, #40]	; 0x28
 80023d0:	61a6      	str	r6, [r4, #24]
 80023d2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023d4:	619a      	str	r2, [r3, #24]
 80023d6:	6ace      	ldr	r6, [r1, #44]	; 0x2c
 80023d8:	61a6      	str	r6, [r4, #24]
 80023da:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023dc:	619a      	str	r2, [r3, #24]
 80023de:	6b0e      	ldr	r6, [r1, #48]	; 0x30
 80023e0:	61a6      	str	r6, [r4, #24]
 80023e2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023e4:	619a      	str	r2, [r3, #24]
 80023e6:	6b4e      	ldr	r6, [r1, #52]	; 0x34
 80023e8:	61a6      	str	r6, [r4, #24]
 80023ea:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023ec:	619a      	str	r2, [r3, #24]
 80023ee:	6b8e      	ldr	r6, [r1, #56]	; 0x38
 80023f0:	61a6      	str	r6, [r4, #24]
 80023f2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023f4:	619a      	str	r2, [r3, #24]
 80023f6:	6bce      	ldr	r6, [r1, #60]	; 0x3c
 80023f8:	61a6      	str	r6, [r4, #24]
 80023fa:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 80023fc:	619a      	str	r2, [r3, #24]
 80023fe:	6c0e      	ldr	r6, [r1, #64]	; 0x40
 8002400:	61a6      	str	r6, [r4, #24]
 8002402:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002404:	619a      	str	r2, [r3, #24]
 8002406:	6c4e      	ldr	r6, [r1, #68]	; 0x44
 8002408:	61a6      	str	r6, [r4, #24]
 800240a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800240c:	619a      	str	r2, [r3, #24]
 800240e:	6c8e      	ldr	r6, [r1, #72]	; 0x48
 8002410:	61a6      	str	r6, [r4, #24]
 8002412:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002414:	619a      	str	r2, [r3, #24]
 8002416:	6cce      	ldr	r6, [r1, #76]	; 0x4c
 8002418:	61a6      	str	r6, [r4, #24]
 800241a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800241c:	619a      	str	r2, [r3, #24]
 800241e:	6d0e      	ldr	r6, [r1, #80]	; 0x50
 8002420:	61a6      	str	r6, [r4, #24]
 8002422:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002424:	619a      	str	r2, [r3, #24]
 8002426:	6d4e      	ldr	r6, [r1, #84]	; 0x54
 8002428:	61a6      	str	r6, [r4, #24]
 800242a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800242c:	619a      	str	r2, [r3, #24]
 800242e:	6d8e      	ldr	r6, [r1, #88]	; 0x58
 8002430:	61a6      	str	r6, [r4, #24]
 8002432:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002434:	619a      	str	r2, [r3, #24]
 8002436:	6dce      	ldr	r6, [r1, #92]	; 0x5c
 8002438:	61a6      	str	r6, [r4, #24]
 800243a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800243c:	619a      	str	r2, [r3, #24]
 800243e:	6e0e      	ldr	r6, [r1, #96]	; 0x60
 8002440:	61a6      	str	r6, [r4, #24]
 8002442:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002444:	619a      	str	r2, [r3, #24]
 8002446:	6e4e      	ldr	r6, [r1, #100]	; 0x64
 8002448:	61a6      	str	r6, [r4, #24]
 800244a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800244c:	619a      	str	r2, [r3, #24]
 800244e:	6e8e      	ldr	r6, [r1, #104]	; 0x68
 8002450:	61a6      	str	r6, [r4, #24]
 8002452:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002454:	619a      	str	r2, [r3, #24]
 8002456:	6ece      	ldr	r6, [r1, #108]	; 0x6c
 8002458:	61a6      	str	r6, [r4, #24]
 800245a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800245c:	619a      	str	r2, [r3, #24]
 800245e:	6f0e      	ldr	r6, [r1, #112]	; 0x70
 8002460:	61a6      	str	r6, [r4, #24]
 8002462:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002464:	619a      	str	r2, [r3, #24]
 8002466:	6f4e      	ldr	r6, [r1, #116]	; 0x74
 8002468:	61a6      	str	r6, [r4, #24]
 800246a:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800246c:	619a      	str	r2, [r3, #24]
 800246e:	6f8e      	ldr	r6, [r1, #120]	; 0x78
 8002470:	61a6      	str	r6, [r4, #24]
 8002472:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 8002474:	619a      	str	r2, [r3, #24]
 8002476:	6fce      	ldr	r6, [r1, #124]	; 0x7c
 8002478:	61a6      	str	r6, [r4, #24]
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800247a:	2680      	movs	r6, #128	; 0x80
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800247c:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_clk->BSRR = thisInternalBus->bus_clk_mask;thisInternalBus->bus->BSRR = buffer[buf_cnt++];thisInternalBus->bus_clk->BRR = thisInternalBus->bus_clk_mask;
 800247e:	619a      	str	r2, [r3, #24]
 8002480:	5989      	ldr	r1, [r1, r6]
 8002482:	61a1      	str	r1, [r4, #24]
 8002484:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 8002486:	8882      	ldrh	r2, [r0, #4]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8002488:	4651      	mov	r1, sl
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 800248a:	62a2      	str	r2, [r4, #40]	; 0x28
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 800248c:	4642      	mov	r2, r8
 800248e:	62aa      	str	r2, [r5, #40]	; 0x28
	temp = thisInternalBus->bus->MODER;
 8002490:	6822      	ldr	r2, [r4, #0]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 8002492:	43ba      	bics	r2, r7
	thisInternalBus->bus->MODER = temp;
 8002494:	6022      	str	r2, [r4, #0]
	temp = thisInternalBus->bus_clk->MODER;
 8002496:	681a      	ldr	r2, [r3, #0]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 8002498:	438a      	bics	r2, r1
	thisInternalBus->bus_clk->MODER = temp;
 800249a:	601a      	str	r2, [r3, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 800249c:	4662      	mov	r2, ip
	temp = thisInternalBus->bus_ack->MODER;
 800249e:	682b      	ldr	r3, [r5, #0]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 80024a0:	4393      	bics	r3, r2
	thisInternalBus->bus_ack->MODER = temp;
 80024a2:	602b      	str	r3, [r5, #0]
}
 80024a4:	bce0      	pop	{r5, r6, r7}
 80024a6:	46ba      	mov	sl, r7
 80024a8:	46b1      	mov	r9, r6
 80024aa:	46a8      	mov	r8, r5
 80024ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ae:	46c0      	nop			; (mov r8, r8)

080024b0 <global_timer_create>:
#include <stdlib.h>
extern TIM_HandleTypeDef htim21;


GlobalTimer_t * global_timer_create(TIM_HandleTypeDef *timer_id)
{
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	0005      	movs	r5, r0
	//Start global timer and initialize struct
	GlobalTimer_t *thisGlobalTimer = malloc(sizeof(GlobalTimer_t));
 80024b4:	2008      	movs	r0, #8
 80024b6:	f000 fe37 	bl	8003128 <malloc>
 80024ba:	0004      	movs	r4, r0
	thisGlobalTimer->h_timer = timer_id;
 80024bc:	6045      	str	r5, [r0, #4]
	HAL_TIM_Base_Start_IT(thisGlobalTimer->h_timer);
 80024be:	0028      	movs	r0, r5
 80024c0:	f7ff fce4 	bl	8001e8c <HAL_TIM_Base_Start_IT>
	thisGlobalTimer->overflow_counter = 0;
 80024c4:	2300      	movs	r3, #0
	return thisGlobalTimer;
}
 80024c6:	0020      	movs	r0, r4
	thisGlobalTimer->overflow_counter = 0;
 80024c8:	7023      	strb	r3, [r4, #0]
}
 80024ca:	bd70      	pop	{r4, r5, r6, pc}

080024cc <get_global_timer>:


uint64_t get_global_timer(GlobalTimer_t *thisGlobalTimer)
{
 80024cc:	0003      	movs	r3, r0
	uint8_t overflow_count_begin;
	uint64_t tot_value;
	do
	{
		overflow_count_begin = thisGlobalTimer->overflow_counter;
		tot_value = thisGlobalTimer->h_timer->Instance->CNT + thisGlobalTimer->h_timer->Instance->ARR * (thisGlobalTimer->overflow_counter);
 80024ce:	6842      	ldr	r2, [r0, #4]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	6812      	ldr	r2, [r2, #0]
 80024d4:	6a51      	ldr	r1, [r2, #36]	; 0x24
 80024d6:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80024d8:	4358      	muls	r0, r3
 80024da:	1840      	adds	r0, r0, r1

	} while (overflow_count_begin != thisGlobalTimer->overflow_counter);

	return tot_value;	//TODO there is a lot of potential timestamp synchronization issues here, need to be addressed
}
 80024dc:	2100      	movs	r1, #0
 80024de:	4770      	bx	lr

080024e0 <magnetometer_create>:
//!since different sensors may have different type and number of variables
//!1 - sensor type  depend to the sensor type
//!2 - data tranmitter handler in this implimentation we just limited that to SPI in future if we add I2C or analog sensor ADC line can passs as a parameter
//!--------------------------create a new magnotmemeter of any type lower layer support and make a interface and initilize that-----------------------------------
Magnetometer_t * magnetometer_create(uint8_t type,SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	46d6      	mov	lr, sl
 80024e4:	464f      	mov	r7, r9
 80024e6:	4646      	mov	r6, r8
 80024e8:	b5c0      	push	{r6, r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	0005      	movs	r5, r0
 80024ee:	a80a      	add	r0, sp, #40	; 0x28
 80024f0:	001f      	movs	r7, r3
 80024f2:	c808      	ldmia	r0!, {r3}
 80024f4:	000e      	movs	r6, r1
 80024f6:	4699      	mov	r9, r3
 80024f8:	8803      	ldrh	r3, [r0, #0]
	Magnetometer_t *  thisMagnetometer = malloc(sizeof(Magnetometer_t));
 80024fa:	2019      	movs	r0, #25
{
 80024fc:	4690      	mov	r8, r2
 80024fe:	469a      	mov	sl, r3
	Magnetometer_t *  thisMagnetometer = malloc(sizeof(Magnetometer_t));
 8002500:	f000 fe12 	bl	8003128 <malloc>
 8002504:	1e04      	subs	r4, r0, #0
	if(thisMagnetometer != NULL)
 8002506:	d004      	beq.n	8002512 <magnetometer_create+0x32>
	{
		thisMagnetometer->whichMagnetometer = type;
 8002508:	7005      	strb	r5, [r0, #0]
		switch (thisMagnetometer->whichMagnetometer)
 800250a:	2d0a      	cmp	r5, #10
 800250c:	d032      	beq.n	8002574 <magnetometer_create+0x94>
 800250e:	2d14      	cmp	r5, #20
 8002510:	d006      	beq.n	8002520 <magnetometer_create+0x40>
			}
		break;
		}
	}
	return(thisMagnetometer);
}
 8002512:	0020      	movs	r0, r4
 8002514:	b002      	add	sp, #8
 8002516:	bce0      	pop	{r5, r6, r7}
 8002518:	46ba      	mov	sl, r7
 800251a:	46b1      	mov	r9, r6
 800251c:	46a8      	mov	r8, r5
 800251e:	bdf0      	pop	{r4, r5, r6, r7, pc}
				thisMagnetometer->magnetometer = (MMC5983_t*)MMC5983_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8002520:	4653      	mov	r3, sl
 8002522:	003a      	movs	r2, r7
 8002524:	9300      	str	r3, [sp, #0]
 8002526:	4641      	mov	r1, r8
 8002528:	464b      	mov	r3, r9
 800252a:	0030      	movs	r0, r6
 800252c:	f000 f9e4 	bl	80028f8 <MMC5983_create>
 8002530:	0a02      	lsrs	r2, r0, #8
 8002532:	70a2      	strb	r2, [r4, #2]
 8002534:	0202      	lsls	r2, r0, #8
 8002536:	0e12      	lsrs	r2, r2, #24
 8002538:	70e2      	strb	r2, [r4, #3]
 800253a:	0e02      	lsrs	r2, r0, #24
 800253c:	7060      	strb	r0, [r4, #1]
 800253e:	7122      	strb	r2, [r4, #4]
				if(thisMagnetometer->magnetometer != NULL)
 8002540:	2800      	cmp	r0, #0
 8002542:	d0e6      	beq.n	8002512 <magnetometer_create+0x32>
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
 8002544:	2364      	movs	r3, #100	; 0x64
 8002546:	82a3      	strh	r3, [r4, #20]
					thisMagnetometer->time_stamp = 0;
 8002548:	2300      	movs	r3, #0
 800254a:	72e3      	strb	r3, [r4, #11]
 800254c:	7323      	strb	r3, [r4, #12]
 800254e:	7363      	strb	r3, [r4, #13]
 8002550:	73a3      	strb	r3, [r4, #14]
 8002552:	73e3      	strb	r3, [r4, #15]
 8002554:	7423      	strb	r3, [r4, #16]
 8002556:	7463      	strb	r3, [r4, #17]
 8002558:	74a3      	strb	r3, [r4, #18]
					thisMagnetometer->Readings[X_AX] = 0;
 800255a:	7163      	strb	r3, [r4, #5]
 800255c:	71a3      	strb	r3, [r4, #6]
					thisMagnetometer->Readings[Y_AX] = 0;
 800255e:	71e3      	strb	r3, [r4, #7]
 8002560:	7223      	strb	r3, [r4, #8]
					thisMagnetometer->Readings[Z_AX] = 0;
 8002562:	7263      	strb	r3, [r4, #9]
 8002564:	72a3      	strb	r3, [r4, #10]
					thisMagnetometer->sensor_status = ( MMC5983_get_status(thisMagnetometer->magnetometer) ? MAGNETOMETER_OK : MAGNETOMETER_FAULTY);
 8002566:	f000 fb6b 	bl	8002c40 <MMC5983_get_status>
 800256a:	1e43      	subs	r3, r0, #1
 800256c:	4198      	sbcs	r0, r3
 800256e:	3050      	adds	r0, #80	; 0x50
 8002570:	7620      	strb	r0, [r4, #24]
	return(thisMagnetometer);
 8002572:	e7ce      	b.n	8002512 <magnetometer_create+0x32>
				thisMagnetometer->magnetometer = (LIS3MDL_t*)LIS3MDL_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8002574:	4653      	mov	r3, sl
 8002576:	003a      	movs	r2, r7
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	4641      	mov	r1, r8
 800257c:	464b      	mov	r3, r9
 800257e:	0030      	movs	r0, r6
 8002580:	f000 f8e6 	bl	8002750 <LIS3MDL_create>
 8002584:	0a02      	lsrs	r2, r0, #8
 8002586:	70a2      	strb	r2, [r4, #2]
 8002588:	0202      	lsls	r2, r0, #8
 800258a:	0e12      	lsrs	r2, r2, #24
 800258c:	70e2      	strb	r2, [r4, #3]
 800258e:	0e02      	lsrs	r2, r0, #24
 8002590:	7060      	strb	r0, [r4, #1]
 8002592:	7122      	strb	r2, [r4, #4]
				if(thisMagnetometer->magnetometer != NULL)
 8002594:	2800      	cmp	r0, #0
 8002596:	d0bc      	beq.n	8002512 <magnetometer_create+0x32>
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
 8002598:	2364      	movs	r3, #100	; 0x64
 800259a:	82a3      	strh	r3, [r4, #20]
					thisMagnetometer->time_stamp = 0;
 800259c:	2300      	movs	r3, #0
 800259e:	72e3      	strb	r3, [r4, #11]
 80025a0:	7323      	strb	r3, [r4, #12]
 80025a2:	7363      	strb	r3, [r4, #13]
 80025a4:	73a3      	strb	r3, [r4, #14]
 80025a6:	73e3      	strb	r3, [r4, #15]
 80025a8:	7423      	strb	r3, [r4, #16]
 80025aa:	7463      	strb	r3, [r4, #17]
 80025ac:	74a3      	strb	r3, [r4, #18]
					thisMagnetometer->Readings[X_AX] = 0;
 80025ae:	7163      	strb	r3, [r4, #5]
 80025b0:	71a3      	strb	r3, [r4, #6]
					thisMagnetometer->Readings[Y_AX] = 0;
 80025b2:	71e3      	strb	r3, [r4, #7]
 80025b4:	7223      	strb	r3, [r4, #8]
					thisMagnetometer->Readings[Z_AX] = 0;
 80025b6:	7263      	strb	r3, [r4, #9]
 80025b8:	72a3      	strb	r3, [r4, #10]
 80025ba:	e7aa      	b.n	8002512 <magnetometer_create+0x32>

080025bc <magnetometer_read>:
//----------------regardless of magnetometer type this methode is our interface between higher layer and driver layer---------------------------------------
//--------------- by calling this methode we will have fresh data provided by low level layer driver ready to use --------------------------
uint8_t magnetometer_read(Magnetometer_t *thisMagnetometer)
{
	uint8_t res=0;
	switch (thisMagnetometer->whichMagnetometer)
 80025bc:	7803      	ldrb	r3, [r0, #0]
{
 80025be:	b510      	push	{r4, lr}
	switch (thisMagnetometer->whichMagnetometer)
 80025c0:	2b0a      	cmp	r3, #10
 80025c2:	d011      	beq.n	80025e8 <magnetometer_read+0x2c>
 80025c4:	2b14      	cmp	r3, #20
 80025c6:	d10d      	bne.n	80025e4 <magnetometer_read+0x28>
	case MAGNETOMETER_TYPE_LIS3MDL:
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
		break;
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		res = MMC5983_read_XYZ((MMC5983_t*)thisMagnetometer->magnetometer, (uint8_t*)thisMagnetometer->Readings);
 80025c8:	7883      	ldrb	r3, [r0, #2]
 80025ca:	7842      	ldrb	r2, [r0, #1]
 80025cc:	021b      	lsls	r3, r3, #8
 80025ce:	431a      	orrs	r2, r3
 80025d0:	78c3      	ldrb	r3, [r0, #3]
 80025d2:	1d41      	adds	r1, r0, #5
 80025d4:	7900      	ldrb	r0, [r0, #4]
 80025d6:	041b      	lsls	r3, r3, #16
 80025d8:	4313      	orrs	r3, r2
 80025da:	0600      	lsls	r0, r0, #24
 80025dc:	4318      	orrs	r0, r3
 80025de:	f000 fa71 	bl	8002ac4 <MMC5983_read_XYZ>
		break;
	}
	return res;
}
 80025e2:	bd10      	pop	{r4, pc}
	switch (thisMagnetometer->whichMagnetometer)
 80025e4:	2000      	movs	r0, #0
 80025e6:	e7fc      	b.n	80025e2 <magnetometer_read+0x26>
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
 80025e8:	7883      	ldrb	r3, [r0, #2]
 80025ea:	7842      	ldrb	r2, [r0, #1]
 80025ec:	021b      	lsls	r3, r3, #8
 80025ee:	431a      	orrs	r2, r3
 80025f0:	78c3      	ldrb	r3, [r0, #3]
 80025f2:	1d41      	adds	r1, r0, #5
 80025f4:	7900      	ldrb	r0, [r0, #4]
 80025f6:	041b      	lsls	r3, r3, #16
 80025f8:	4313      	orrs	r3, r2
 80025fa:	0600      	lsls	r0, r0, #24
 80025fc:	4318      	orrs	r0, r3
 80025fe:	f000 f979 	bl	80028f4 <LIS3MDL_read_XYZ>
		break;
 8002602:	e7ee      	b.n	80025e2 <magnetometer_read+0x26>

08002604 <magnetometer_direct_register_write>:
//---------------------------------------------------------------------------
uint8_t magnetometer_direct_register_write(Magnetometer_t *thisMagnetometer, uint8_t sensor_reg_add, uint8_t sensor_reg_val)
{
	uint8_t res=0;
	switch (thisMagnetometer->whichMagnetometer)
 8002604:	7803      	ldrb	r3, [r0, #0]
{
 8002606:	b510      	push	{r4, lr}
	switch (thisMagnetometer->whichMagnetometer)
 8002608:	2b0a      	cmp	r3, #10
 800260a:	d00f      	beq.n	800262c <magnetometer_direct_register_write+0x28>
 800260c:	2b14      	cmp	r3, #20
 800260e:	d10b      	bne.n	8002628 <magnetometer_direct_register_write+0x24>
	case MAGNETOMETER_TYPE_LIS3MDL:
		LIS3MDL_register_write((LIS3MDL_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
		break;
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		MMC5983_register_write((MMC5983_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
 8002610:	7883      	ldrb	r3, [r0, #2]
 8002612:	7844      	ldrb	r4, [r0, #1]
 8002614:	021b      	lsls	r3, r3, #8
 8002616:	431c      	orrs	r4, r3
 8002618:	78c3      	ldrb	r3, [r0, #3]
 800261a:	7900      	ldrb	r0, [r0, #4]
 800261c:	041b      	lsls	r3, r3, #16
 800261e:	4323      	orrs	r3, r4
 8002620:	0600      	lsls	r0, r0, #24
 8002622:	4318      	orrs	r0, r3
 8002624:	f000 fa36 	bl	8002a94 <MMC5983_register_write>
		break;
	}
	return res;
}
 8002628:	2000      	movs	r0, #0
 800262a:	bd10      	pop	{r4, pc}
		LIS3MDL_register_write((LIS3MDL_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
 800262c:	7883      	ldrb	r3, [r0, #2]
 800262e:	7844      	ldrb	r4, [r0, #1]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	431c      	orrs	r4, r3
 8002634:	78c3      	ldrb	r3, [r0, #3]
 8002636:	7900      	ldrb	r0, [r0, #4]
 8002638:	041b      	lsls	r3, r3, #16
 800263a:	4323      	orrs	r3, r4
 800263c:	0600      	lsls	r0, r0, #24
 800263e:	4318      	orrs	r0, r3
 8002640:	f000 f940 	bl	80028c4 <LIS3MDL_register_write>
		break;
 8002644:	e7f0      	b.n	8002628 <magnetometer_direct_register_write+0x24>
 8002646:	46c0      	nop			; (mov r8, r8)

08002648 <I2C_interface_create>:
#include "i2c_network_interface.h"


I2C_t * I2C_interface_create(I2C_HandleTypeDef *I2C_handle,uint8_t channel_address)
{
 8002648:	b570      	push	{r4, r5, r6, lr}
 800264a:	0005      	movs	r5, r0
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 800264c:	2028      	movs	r0, #40	; 0x28
{
 800264e:	000c      	movs	r4, r1
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8002650:	f000 fd6a 	bl	8003128 <malloc>
	if(thisI2C != NULL)
 8002654:	2800      	cmp	r0, #0
 8002656:	d014      	beq.n	8002682 <I2C_interface_create+0x3a>
	{
		thisI2C->I2C_line = I2C_handle;
		thisI2C->buffer_index=0;
 8002658:	2300      	movs	r3, #0
 800265a:	7003      	strb	r3, [r0, #0]
		thisI2C->new_command_is_ready_flag = 0;
 800265c:	7043      	strb	r3, [r0, #1]

		// Disable Own Address1 before setting the new address configuration
		//TODO it is much safer to use HAL compatible address change instead of manual mode
		//is ther any reason for using manual mode?
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800265e:	682b      	ldr	r3, [r5, #0]
		thisI2C->I2C_line = I2C_handle;
 8002660:	6245      	str	r5, [r0, #36]	; 0x24
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002662:	6899      	ldr	r1, [r3, #8]
 8002664:	4d07      	ldr	r5, [pc, #28]	; (8002684 <I2C_interface_create+0x3c>)
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 8002666:	0064      	lsls	r4, r4, #1
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002668:	4029      	ands	r1, r5
 800266a:	6099      	str	r1, [r3, #8]
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 800266c:	2180      	movs	r1, #128	; 0x80
 800266e:	0209      	lsls	r1, r1, #8
 8002670:	430c      	orrs	r4, r1
		thisI2C->I2C_line->Instance->CR2 &= ~I2C_CR2_NACK;
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8002672:	212c      	movs	r1, #44	; 0x2c
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 8002674:	609c      	str	r4, [r3, #8]
		thisI2C->I2C_line->Instance->CR2 &= ~I2C_CR2_NACK;
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	402a      	ands	r2, r5
 800267a:	605a      	str	r2, [r3, #4]
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	430a      	orrs	r2, r1
 8002680:	601a      	str	r2, [r3, #0]
	else
	{
		//TODO  erro handler
	}
	return thisI2C;
}
 8002682:	bd70      	pop	{r4, r5, r6, pc}
 8002684:	ffff7fff 	.word	0xffff7fff

08002688 <I2C2_IRQHandler>:
extern TIM_HandleTypeDef htim21;
extern System my_sys;

//------------------------i2c int------------------
void I2C2_IRQHandler(void)
{
 8002688:	b570      	push	{r4, r5, r6, lr}

	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_RXI) != RESET))
 800268a:	259c      	movs	r5, #156	; 0x9c
 800268c:	2104      	movs	r1, #4
 800268e:	4c27      	ldr	r4, [pc, #156]	; (800272c <I2C2_IRQHandler+0xa4>)
 8002690:	5962      	ldr	r2, [r4, r5]
 8002692:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6998      	ldr	r0, [r3, #24]
 8002698:	4201      	tst	r1, r0
 800269a:	d002      	beq.n	80026a2 <I2C2_IRQHandler+0x1a>
 800269c:	6818      	ldr	r0, [r3, #0]
 800269e:	4201      	tst	r1, r0
 80026a0:	d111      	bne.n	80026c6 <I2C2_IRQHandler+0x3e>
				my_sys.i2c_line->new_command_is_ready_flag = 1;
			}
		}
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_RXNE);
	}
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_ADDRI) != RESET))
 80026a2:	2208      	movs	r2, #8
 80026a4:	6999      	ldr	r1, [r3, #24]
 80026a6:	420a      	tst	r2, r1
 80026a8:	d002      	beq.n	80026b0 <I2C2_IRQHandler+0x28>
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	420a      	tst	r2, r1
 80026ae:	d108      	bne.n	80026c2 <I2C2_IRQHandler+0x3a>
	{
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_ADDR);
	}
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_STOPI) != RESET))
 80026b0:	2220      	movs	r2, #32
 80026b2:	6999      	ldr	r1, [r3, #24]
 80026b4:	420a      	tst	r2, r1
 80026b6:	d003      	beq.n	80026c0 <I2C2_IRQHandler+0x38>
 80026b8:	6819      	ldr	r1, [r3, #0]
 80026ba:	420a      	tst	r2, r1
 80026bc:	d000      	beq.n	80026c0 <I2C2_IRQHandler+0x38>
	{
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_STOPF);
 80026be:	61da      	str	r2, [r3, #28]
	}

	return;
}
 80026c0:	bd70      	pop	{r4, r5, r6, pc}
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_ADDR);
 80026c2:	61da      	str	r2, [r3, #28]
 80026c4:	e7f4      	b.n	80026b0 <I2C2_IRQHandler+0x28>
		if(my_sys.i2c_line->buffer_index < I2C_MAX_RECEIVE_LENGTH)
 80026c6:	7811      	ldrb	r1, [r2, #0]
 80026c8:	291e      	cmp	r1, #30
 80026ca:	d814      	bhi.n	80026f6 <I2C2_IRQHandler+0x6e>
			my_sys.i2c_line->receiveBuffer[my_sys.i2c_line->buffer_index] = (uint8_t)my_sys.i2c_line->I2C_line->Instance->RXDR;
 80026cc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80026ce:	7811      	ldrb	r1, [r2, #0]
 80026d0:	b2c0      	uxtb	r0, r0
 80026d2:	1851      	adds	r1, r2, r1
 80026d4:	7088      	strb	r0, [r1, #2]
			my_sys.i2c_line->buffer_index++;
 80026d6:	7811      	ldrb	r1, [r2, #0]
 80026d8:	3101      	adds	r1, #1
 80026da:	b2c9      	uxtb	r1, r1
 80026dc:	7011      	strb	r1, [r2, #0]
			if (my_sys.i2c_line->receiveBuffer[0] == I2C_PACKET_SEND_DATA_FRAME)
 80026de:	7891      	ldrb	r1, [r2, #2]
 80026e0:	290a      	cmp	r1, #10
 80026e2:	d015      	beq.n	8002710 <I2C2_IRQHandler+0x88>
			else if (my_sys.i2c_line->receiveBuffer[0] < I2C_SET_3_BYTE_COMMAND)
 80026e4:	7891      	ldrb	r1, [r2, #2]
 80026e6:	2963      	cmp	r1, #99	; 0x63
 80026e8:	d90f      	bls.n	800270a <I2C2_IRQHandler+0x82>
			else if (my_sys.i2c_line->receiveBuffer[0] < I2C_SET_31_BYTE_COMMAND)
 80026ea:	7891      	ldrb	r1, [r2, #2]
 80026ec:	296d      	cmp	r1, #109	; 0x6d
 80026ee:	d805      	bhi.n	80026fc <I2C2_IRQHandler+0x74>
				if(my_sys.i2c_line->buffer_index == 3)
 80026f0:	7811      	ldrb	r1, [r2, #0]
 80026f2:	2903      	cmp	r1, #3
 80026f4:	d009      	beq.n	800270a <I2C2_IRQHandler+0x82>
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_RXNE);
 80026f6:	2204      	movs	r2, #4
 80026f8:	61da      	str	r2, [r3, #28]
 80026fa:	e7d2      	b.n	80026a2 <I2C2_IRQHandler+0x1a>
			else if (my_sys.i2c_line->receiveBuffer[0] < I2C_PACKET_SET_NEW_ADDRESS)
 80026fc:	7891      	ldrb	r1, [r2, #2]
 80026fe:	b249      	sxtb	r1, r1
 8002700:	2900      	cmp	r1, #0
 8002702:	db02      	blt.n	800270a <I2C2_IRQHandler+0x82>
				if(my_sys.i2c_line->buffer_index == 31)
 8002704:	7811      	ldrb	r1, [r2, #0]
 8002706:	291f      	cmp	r1, #31
 8002708:	d1f5      	bne.n	80026f6 <I2C2_IRQHandler+0x6e>
				my_sys.i2c_line->new_command_is_ready_flag = 1;
 800270a:	2101      	movs	r1, #1
 800270c:	7051      	strb	r1, [r2, #1]
 800270e:	e7f2      	b.n	80026f6 <I2C2_IRQHandler+0x6e>
				internal_bus_write_data_frame(my_sys.data_bus , my_sys.bus_output_buffer , MODULE_SYSTEM_PACKET_LENGHT);
 8002710:	23a0      	movs	r3, #160	; 0xa0
 8002712:	0021      	movs	r1, r4
 8002714:	2221      	movs	r2, #33	; 0x21
 8002716:	58e0      	ldr	r0, [r4, r3]
 8002718:	3108      	adds	r1, #8
 800271a:	f7ff fe0f 	bl	800233c <internal_bus_write_data_frame>
				my_sys.i2c_line->new_command_is_ready_flag = 1;
 800271e:	2201      	movs	r2, #1
 8002720:	5963      	ldr	r3, [r4, r5]
 8002722:	705a      	strb	r2, [r3, #1]
 8002724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	e7e5      	b.n	80026f6 <I2C2_IRQHandler+0x6e>
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	200000e4 	.word	0x200000e4

08002730 <HAL_TIM_PeriodElapsedCallback>:
}
*/
//---------------------------  tim21 int----------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if (htim == &htim21)
 8002730:	4b05      	ldr	r3, [pc, #20]	; (8002748 <HAL_TIM_PeriodElapsedCallback+0x18>)
 8002732:	4283      	cmp	r3, r0
 8002734:	d000      	beq.n	8002738 <HAL_TIM_PeriodElapsedCallback+0x8>
	{
		my_sys.ph_global_timer->overflow_counter++;
	}
}
 8002736:	4770      	bx	lr
		my_sys.ph_global_timer->overflow_counter++;
 8002738:	238c      	movs	r3, #140	; 0x8c
 800273a:	4a04      	ldr	r2, [pc, #16]	; (800274c <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800273c:	58d2      	ldr	r2, [r2, r3]
 800273e:	7813      	ldrb	r3, [r2, #0]
 8002740:	3301      	adds	r3, #1
 8002742:	7013      	strb	r3, [r2, #0]
}
 8002744:	e7f7      	b.n	8002736 <HAL_TIM_PeriodElapsedCallback+0x6>
 8002746:	46c0      	nop			; (mov r8, r8)
 8002748:	20000228 	.word	0x20000228
 800274c:	200000e4 	.word	0x200000e4

08002750 <LIS3MDL_create>:
#include "lis3mdl_driver.h"

//TODO we need to test the whole library
LIS3MDL_t * LIS3MDL_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *DRDY_Bus,uint16_t DRDY_Pin)
{
 8002750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002752:	46ce      	mov	lr, r9
 8002754:	4647      	mov	r7, r8
 8002756:	4698      	mov	r8, r3
 8002758:	b580      	push	{r7, lr}
 800275a:	b085      	sub	sp, #20
 800275c:	ab0c      	add	r3, sp, #48	; 0x30
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	0007      	movs	r7, r0
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 8002762:	2018      	movs	r0, #24
{
 8002764:	000d      	movs	r5, r1
 8002766:	0016      	movs	r6, r2
 8002768:	4699      	mov	r9, r3
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 800276a:	f000 fcdd 	bl	8003128 <malloc>
	thisLIS3MDL->CS_GPIO_Bus = CS_Bus;
	thisLIS3MDL->CS_GPIO_Pin = CS_Pin;
	thisLIS3MDL->DRDY_GPIO_Bus = DRDY_Bus;
 800276e:	4643      	mov	r3, r8
 8002770:	6103      	str	r3, [r0, #16]
	thisLIS3MDL->DRDY_GPIO_Pin = DRDY_Pin;
 8002772:	464b      	mov	r3, r9
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 8002774:	0004      	movs	r4, r0
	thisLIS3MDL->spi_channel = spi_line;
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8002776:	0031      	movs	r1, r6
	thisLIS3MDL->CS_GPIO_Bus = CS_Bus;
 8002778:	6085      	str	r5, [r0, #8]
	thisLIS3MDL->CS_GPIO_Pin = CS_Pin;
 800277a:	8186      	strh	r6, [r0, #12]
	thisLIS3MDL->DRDY_GPIO_Pin = DRDY_Pin;
 800277c:	8283      	strh	r3, [r0, #20]
	thisLIS3MDL->spi_channel = spi_line;
 800277e:	6047      	str	r7, [r0, #4]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8002780:	2201      	movs	r2, #1
 8002782:	0028      	movs	r0, r5
 8002784:	f7fe fac8 	bl	8000d18 <HAL_GPIO_WritePin>
}

void LIS3MDL_register_write(LIS3MDL_t *thisLIS3MDL, uint8_t thisRegister, uint8_t val)
{
	uint8_t out[2];
	out[0] = thisRegister;
 8002788:	4b4b      	ldr	r3, [pc, #300]	; (80028b8 <LIS3MDL_create+0x168>)
 800278a:	ad03      	add	r5, sp, #12
 800278c:	802b      	strh	r3, [r5, #0]
	out[1] = val;
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800278e:	89a1      	ldrh	r1, [r4, #12]
 8002790:	68a0      	ldr	r0, [r4, #8]
 8002792:	2200      	movs	r2, #0
 8002794:	f7fe fac0 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8002798:	230a      	movs	r3, #10
 800279a:	0029      	movs	r1, r5
 800279c:	2202      	movs	r2, #2
 800279e:	6860      	ldr	r0, [r4, #4]
 80027a0:	f7ff f880 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80027a4:	89a1      	ldrh	r1, [r4, #12]
 80027a6:	2201      	movs	r2, #1
 80027a8:	68a0      	ldr	r0, [r4, #8]
 80027aa:	f7fe fab5 	bl	8000d18 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 80027ae:	2001      	movs	r0, #1
 80027b0:	f7fe f950 	bl	8000a54 <HAL_Delay>
	out[0] = thisRegister;
 80027b4:	23f1      	movs	r3, #241	; 0xf1
 80027b6:	015b      	lsls	r3, r3, #5
 80027b8:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80027ba:	89a1      	ldrh	r1, [r4, #12]
 80027bc:	68a0      	ldr	r0, [r4, #8]
 80027be:	2200      	movs	r2, #0
 80027c0:	f7fe faaa 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 80027c4:	230a      	movs	r3, #10
 80027c6:	0029      	movs	r1, r5
 80027c8:	2202      	movs	r2, #2
 80027ca:	6860      	ldr	r0, [r4, #4]
 80027cc:	f7ff f86a 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80027d0:	89a1      	ldrh	r1, [r4, #12]
 80027d2:	68a0      	ldr	r0, [r4, #8]
 80027d4:	2201      	movs	r2, #1
 80027d6:	f7fe fa9f 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 80027da:	4b38      	ldr	r3, [pc, #224]	; (80028bc <LIS3MDL_create+0x16c>)
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80027dc:	68a0      	ldr	r0, [r4, #8]
	out[0] = thisRegister;
 80027de:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80027e0:	89a1      	ldrh	r1, [r4, #12]
 80027e2:	2200      	movs	r2, #0
 80027e4:	f7fe fa98 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 80027e8:	230a      	movs	r3, #10
 80027ea:	0029      	movs	r1, r5
 80027ec:	2202      	movs	r2, #2
 80027ee:	6860      	ldr	r0, [r4, #4]
 80027f0:	f7ff f858 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80027f4:	89a1      	ldrh	r1, [r4, #12]
 80027f6:	68a0      	ldr	r0, [r4, #8]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f7fe fa8d 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 80027fe:	2322      	movs	r3, #34	; 0x22
 8002800:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002802:	89a1      	ldrh	r1, [r4, #12]
 8002804:	68a0      	ldr	r0, [r4, #8]
 8002806:	2200      	movs	r2, #0
 8002808:	f7fe fa86 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 800280c:	230a      	movs	r3, #10
 800280e:	0029      	movs	r1, r5
 8002810:	2202      	movs	r2, #2
 8002812:	6860      	ldr	r0, [r4, #4]
 8002814:	f7ff f846 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002818:	89a1      	ldrh	r1, [r4, #12]
 800281a:	68a0      	ldr	r0, [r4, #8]
 800281c:	2201      	movs	r2, #1
 800281e:	f7fe fa7b 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8002822:	4b27      	ldr	r3, [pc, #156]	; (80028c0 <LIS3MDL_create+0x170>)
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002824:	68a0      	ldr	r0, [r4, #8]
	out[0] = thisRegister;
 8002826:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002828:	89a1      	ldrh	r1, [r4, #12]
 800282a:	2200      	movs	r2, #0
 800282c:	f7fe fa74 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8002830:	230a      	movs	r3, #10
 8002832:	0029      	movs	r1, r5
 8002834:	2202      	movs	r2, #2
 8002836:	6860      	ldr	r0, [r4, #4]
 8002838:	f7ff f834 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 800283c:	89a1      	ldrh	r1, [r4, #12]
 800283e:	68a0      	ldr	r0, [r4, #8]
 8002840:	2201      	movs	r2, #1
 8002842:	f7fe fa69 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 8002846:	2324      	movs	r3, #36	; 0x24
 8002848:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800284a:	89a1      	ldrh	r1, [r4, #12]
 800284c:	68a0      	ldr	r0, [r4, #8]
 800284e:	2200      	movs	r2, #0
 8002850:	f7fe fa62 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8002854:	230a      	movs	r3, #10
 8002856:	0029      	movs	r1, r5
 8002858:	2202      	movs	r2, #2
 800285a:	6860      	ldr	r0, [r4, #4]
 800285c:	f7ff f822 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002860:	89a1      	ldrh	r1, [r4, #12]
 8002862:	68a0      	ldr	r0, [r4, #8]
 8002864:	2201      	movs	r2, #1
 8002866:	f7fe fa57 	bl	8000d18 <HAL_GPIO_WritePin>
	uint8_t in[2] = {0 , 0};
 800286a:	2300      	movs	r3, #0
	out[0] = 128 | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 800286c:	ae02      	add	r6, sp, #8
	uint8_t in[2] = {0 , 0};
 800286e:	802b      	strh	r3, [r5, #0]
	out[0] = 128 | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002870:	338f      	adds	r3, #143	; 0x8f
 8002872:	8033      	strh	r3, [r6, #0]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002874:	89a1      	ldrh	r1, [r4, #12]
 8002876:	68a0      	ldr	r0, [r4, #8]
 8002878:	2200      	movs	r2, #0
 800287a:	f7fe fa4d 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisLIS3MDL->spi_channel , out, in, 2, 10);
 800287e:	230a      	movs	r3, #10
 8002880:	002a      	movs	r2, r5
 8002882:	0031      	movs	r1, r6
 8002884:	9300      	str	r3, [sp, #0]
 8002886:	6860      	ldr	r0, [r4, #4]
 8002888:	3b08      	subs	r3, #8
 800288a:	f7ff f931 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 800288e:	2201      	movs	r2, #1
 8002890:	68a0      	ldr	r0, [r4, #8]
 8002892:	89a1      	ldrh	r1, [r4, #12]
 8002894:	f7fe fa40 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002898:	786b      	ldrb	r3, [r5, #1]
}
 800289a:	0020      	movs	r0, r4
			thisLIS3MDL->sensor_status = LIS3MDL_SENSOR_NOT_FOUND;
 800289c:	3b3d      	subs	r3, #61	; 0x3d
 800289e:	425a      	negs	r2, r3
 80028a0:	4153      	adcs	r3, r2
 80028a2:	220f      	movs	r2, #15
 80028a4:	425b      	negs	r3, r3
 80028a6:	4393      	bics	r3, r2
 80028a8:	3330      	adds	r3, #48	; 0x30
 80028aa:	7023      	strb	r3, [r4, #0]
}
 80028ac:	b005      	add	sp, #20
 80028ae:	bcc0      	pop	{r6, r7}
 80028b0:	46b9      	mov	r9, r7
 80028b2:	46b0      	mov	r8, r6
 80028b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028b6:	46c0      	nop			; (mov r8, r8)
 80028b8:	00000c21 	.word	0x00000c21
 80028bc:	00006021 	.word	0x00006021
 80028c0:	00000c23 	.word	0x00000c23

080028c4 <LIS3MDL_register_write>:
{
 80028c4:	b510      	push	{r4, lr}
 80028c6:	b082      	sub	sp, #8
	out[0] = thisRegister;
 80028c8:	466b      	mov	r3, sp
{
 80028ca:	0004      	movs	r4, r0
	out[1] = val;
 80028cc:	715a      	strb	r2, [r3, #5]
	out[0] = thisRegister;
 80028ce:	7119      	strb	r1, [r3, #4]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80028d0:	8981      	ldrh	r1, [r0, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	6880      	ldr	r0, [r0, #8]
 80028d6:	f7fe fa1f 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 80028da:	230a      	movs	r3, #10
 80028dc:	a901      	add	r1, sp, #4
 80028de:	2202      	movs	r2, #2
 80028e0:	6860      	ldr	r0, [r4, #4]
 80028e2:	f7fe ffdf 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80028e6:	2201      	movs	r2, #1
 80028e8:	89a1      	ldrh	r1, [r4, #12]
 80028ea:	68a0      	ldr	r0, [r4, #8]
 80028ec:	f7fe fa14 	bl	8000d18 <HAL_GPIO_WritePin>
}
 80028f0:	b002      	add	sp, #8
 80028f2:	bd10      	pop	{r4, pc}

080028f4 <LIS3MDL_read_XYZ>:
		if (thisLIS3MDL->magneticFront == LIS3MDL_MAXREADINGS)
		{
			thisLIS3MDL->magneticFront = 0;
		}
	}*/
}
 80028f4:	4770      	bx	lr
 80028f6:	46c0      	nop			; (mov r8, r8)

080028f8 <MMC5983_create>:
#include "mmc5983_driver.h"
#include <stdlib.h>

MMC5983_t * MMC5983_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 80028f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028fa:	46ce      	mov	lr, r9
 80028fc:	4647      	mov	r7, r8
 80028fe:	4698      	mov	r8, r3
 8002900:	b580      	push	{r7, lr}
 8002902:	b085      	sub	sp, #20
 8002904:	ab0c      	add	r3, sp, #48	; 0x30
 8002906:	881b      	ldrh	r3, [r3, #0]
 8002908:	0007      	movs	r7, r0
	//TODO Do we want to use a series of #defines with | in between to describe configuration registers to make this function more human readable?

	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 800290a:	2018      	movs	r0, #24
{
 800290c:	000d      	movs	r5, r1
 800290e:	0016      	movs	r6, r2
 8002910:	4699      	mov	r9, r3
	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 8002912:	f000 fc09 	bl	8003128 <malloc>
	thisMMC5983->CS_GPIO_Bus = CS_Bus;
	thisMMC5983->CS_GPIO_Pin = CS_Pin;
	thisMMC5983->INT_GPIO_Bus = INT_Bus;
 8002916:	4643      	mov	r3, r8
 8002918:	6083      	str	r3, [r0, #8]
	thisMMC5983->INT_GPIO_Pin = INT_Pin;
 800291a:	464b      	mov	r3, r9
	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 800291c:	0004      	movs	r4, r0
	thisMMC5983->spi_channel = spi_line;
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 800291e:	0031      	movs	r1, r6
	thisMMC5983->CS_GPIO_Bus = CS_Bus;
 8002920:	6105      	str	r5, [r0, #16]
	thisMMC5983->CS_GPIO_Pin = CS_Pin;
 8002922:	8286      	strh	r6, [r0, #20]
	thisMMC5983->INT_GPIO_Pin = INT_Pin;
 8002924:	8183      	strh	r3, [r0, #12]
	thisMMC5983->spi_channel = spi_line;
 8002926:	6047      	str	r7, [r0, #4]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8002928:	2201      	movs	r2, #1
 800292a:	0028      	movs	r0, r5
 800292c:	f7fe f9f4 	bl	8000d18 <HAL_GPIO_WritePin>
}

void MMC5983_register_write(MMC5983_t *thisMMC5983, uint8_t thisRegister, uint8_t val)
{
	uint8_t out[2];
	out[0] = thisRegister;
 8002930:	4b55      	ldr	r3, [pc, #340]	; (8002a88 <MMC5983_create+0x190>)
 8002932:	ad03      	add	r5, sp, #12
 8002934:	802b      	strh	r3, [r5, #0]
	out[1] = val;
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002936:	8aa1      	ldrh	r1, [r4, #20]
 8002938:	6920      	ldr	r0, [r4, #16]
 800293a:	2200      	movs	r2, #0
 800293c:	f7fe f9ec 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8002940:	230a      	movs	r3, #10
 8002942:	0029      	movs	r1, r5
 8002944:	2202      	movs	r2, #2
 8002946:	6860      	ldr	r0, [r4, #4]
 8002948:	f7fe ffac 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 800294c:	8aa1      	ldrh	r1, [r4, #20]
 800294e:	2201      	movs	r2, #1
 8002950:	6920      	ldr	r0, [r4, #16]
 8002952:	f7fe f9e1 	bl	8000d18 <HAL_GPIO_WritePin>
		HAL_Delay(20);
 8002956:	2014      	movs	r0, #20
 8002958:	f7fe f87c 	bl	8000a54 <HAL_Delay>
	out[0] = thisRegister;
 800295c:	4b4b      	ldr	r3, [pc, #300]	; (8002a8c <MMC5983_create+0x194>)
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800295e:	6920      	ldr	r0, [r4, #16]
	out[0] = thisRegister;
 8002960:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002962:	8aa1      	ldrh	r1, [r4, #20]
 8002964:	2200      	movs	r2, #0
 8002966:	f7fe f9d7 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 800296a:	230a      	movs	r3, #10
 800296c:	0029      	movs	r1, r5
 800296e:	2202      	movs	r2, #2
 8002970:	6860      	ldr	r0, [r4, #4]
 8002972:	f7fe ff97 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002976:	8aa1      	ldrh	r1, [r4, #20]
 8002978:	2201      	movs	r2, #1
 800297a:	6920      	ldr	r0, [r4, #16]
 800297c:	f7fe f9cc 	bl	8000d18 <HAL_GPIO_WritePin>
		HAL_Delay(5);
 8002980:	2005      	movs	r0, #5
 8002982:	f7fe f867 	bl	8000a54 <HAL_Delay>
	out[0] = thisRegister;
 8002986:	230c      	movs	r3, #12
 8002988:	270a      	movs	r7, #10
 800298a:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 800298c:	8aa1      	ldrh	r1, [r4, #20]
 800298e:	6920      	ldr	r0, [r4, #16]
 8002990:	2200      	movs	r2, #0
 8002992:	f7fe f9c1 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8002996:	230a      	movs	r3, #10
 8002998:	0029      	movs	r1, r5
 800299a:	2202      	movs	r2, #2
 800299c:	6860      	ldr	r0, [r4, #4]
 800299e:	f7fe ff81 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80029a2:	8aa1      	ldrh	r1, [r4, #20]
 80029a4:	6920      	ldr	r0, [r4, #16]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f7fe f9b6 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 80029ac:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <MMC5983_create+0x198>)
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80029ae:	6920      	ldr	r0, [r4, #16]
	out[0] = thisRegister;
 80029b0:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80029b2:	8aa1      	ldrh	r1, [r4, #20]
 80029b4:	2200      	movs	r2, #0
 80029b6:	f7fe f9af 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 80029ba:	230a      	movs	r3, #10
 80029bc:	0029      	movs	r1, r5
 80029be:	2202      	movs	r2, #2
 80029c0:	6860      	ldr	r0, [r4, #4]
 80029c2:	f7fe ff6f 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80029c6:	8aa1      	ldrh	r1, [r4, #20]
 80029c8:	6920      	ldr	r0, [r4, #16]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f7fe f9a4 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 80029d0:	802f      	strh	r7, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80029d2:	8aa1      	ldrh	r1, [r4, #20]
 80029d4:	6920      	ldr	r0, [r4, #16]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f7fe f99e 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 80029dc:	230a      	movs	r3, #10
 80029de:	0029      	movs	r1, r5
 80029e0:	2202      	movs	r2, #2
 80029e2:	6860      	ldr	r0, [r4, #4]
 80029e4:	f7fe ff5e 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 80029e8:	8aa1      	ldrh	r1, [r4, #20]
 80029ea:	6920      	ldr	r0, [r4, #16]
 80029ec:	2201      	movs	r2, #1
 80029ee:	f7fe f993 	bl	8000d18 <HAL_GPIO_WritePin>
	out[0] = thisRegister;
 80029f2:	230b      	movs	r3, #11
 80029f4:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 80029f6:	8aa1      	ldrh	r1, [r4, #20]
 80029f8:	6920      	ldr	r0, [r4, #16]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f7fe f98c 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8002a00:	230a      	movs	r3, #10
 8002a02:	0029      	movs	r1, r5
 8002a04:	2202      	movs	r2, #2
 8002a06:	6860      	ldr	r0, [r4, #4]
 8002a08:	f7fe ff4c 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002a0c:	8aa1      	ldrh	r1, [r4, #20]
 8002a0e:	6920      	ldr	r0, [r4, #16]
 8002a10:	2201      	movs	r2, #1
 8002a12:	f7fe f981 	bl	8000d18 <HAL_GPIO_WritePin>
	uint8_t in[2] = {0 , 0};
 8002a16:	2300      	movs	r3, #0
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002a18:	ae02      	add	r6, sp, #8
	uint8_t in[2] = {0 , 0};
 8002a1a:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002a1c:	33af      	adds	r3, #175	; 0xaf
 8002a1e:	8033      	strh	r3, [r6, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002a20:	8aa1      	ldrh	r1, [r4, #20]
 8002a22:	6920      	ldr	r0, [r4, #16]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f7fe f977 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	002a      	movs	r2, r5
 8002a2e:	0031      	movs	r1, r6
 8002a30:	6860      	ldr	r0, [r4, #4]
 8002a32:	9700      	str	r7, [sp, #0]
 8002a34:	f7ff f85c 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002a38:	2201      	movs	r2, #1
 8002a3a:	8aa1      	ldrh	r1, [r4, #20]
 8002a3c:	6920      	ldr	r0, [r4, #16]
 8002a3e:	f7fe f96b 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002a42:	786b      	ldrb	r3, [r5, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002a44:	6920      	ldr	r0, [r4, #16]
			thisMMC5983->sensor_status = MMC5983_SENSOR_NOT_FOUND;
 8002a46:	3b30      	subs	r3, #48	; 0x30
 8002a48:	425a      	negs	r2, r3
 8002a4a:	4153      	adcs	r3, r2
 8002a4c:	220f      	movs	r2, #15
 8002a4e:	425b      	negs	r3, r3
 8002a50:	4393      	bics	r3, r2
 8002a52:	3330      	adds	r3, #48	; 0x30
 8002a54:	7023      	strb	r3, [r4, #0]
	out[0] = thisRegister;
 8002a56:	230a      	movs	r3, #10
 8002a58:	33ff      	adds	r3, #255	; 0xff
 8002a5a:	802b      	strh	r3, [r5, #0]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002a5c:	8aa1      	ldrh	r1, [r4, #20]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	f7fe f95a 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8002a64:	230a      	movs	r3, #10
 8002a66:	0029      	movs	r1, r5
 8002a68:	2202      	movs	r2, #2
 8002a6a:	6860      	ldr	r0, [r4, #4]
 8002a6c:	f7fe ff1a 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002a70:	6920      	ldr	r0, [r4, #16]
 8002a72:	2201      	movs	r2, #1
 8002a74:	8aa1      	ldrh	r1, [r4, #20]
 8002a76:	f7fe f94f 	bl	8000d18 <HAL_GPIO_WritePin>
}
 8002a7a:	0020      	movs	r0, r4
 8002a7c:	b005      	add	sp, #20
 8002a7e:	bcc0      	pop	{r6, r7}
 8002a80:	46b9      	mov	r9, r7
 8002a82:	46b0      	mov	r8, r6
 8002a84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a86:	46c0      	nop			; (mov r8, r8)
 8002a88:	ffff800a 	.word	0xffff800a
 8002a8c:	00000809 	.word	0x00000809
 8002a90:	00002009 	.word	0x00002009

08002a94 <MMC5983_register_write>:
{
 8002a94:	b510      	push	{r4, lr}
 8002a96:	b082      	sub	sp, #8
	out[0] = thisRegister;
 8002a98:	466b      	mov	r3, sp
{
 8002a9a:	0004      	movs	r4, r0
	out[1] = val;
 8002a9c:	715a      	strb	r2, [r3, #5]
	out[0] = thisRegister;
 8002a9e:	7119      	strb	r1, [r3, #4]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002aa0:	8a81      	ldrh	r1, [r0, #20]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	6900      	ldr	r0, [r0, #16]
 8002aa6:	f7fe f937 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8002aaa:	230a      	movs	r3, #10
 8002aac:	a901      	add	r1, sp, #4
 8002aae:	2202      	movs	r2, #2
 8002ab0:	6860      	ldr	r0, [r4, #4]
 8002ab2:	f7fe fef7 	bl	80018a4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	8aa1      	ldrh	r1, [r4, #20]
 8002aba:	6920      	ldr	r0, [r4, #16]
 8002abc:	f7fe f92c 	bl	8000d18 <HAL_GPIO_WritePin>
}
 8002ac0:	b002      	add	sp, #8
 8002ac2:	bd10      	pop	{r4, pc}

08002ac4 <MMC5983_read_XYZ>:
//-----------  we really do not need to send the second parameter since by having the address of the magnetometer object ----------
//------- we can calculate the offset of x y z data place holder there is risk on that approach if someone in future ------------
//--- add more eleman at the bigining of the structure or change the data type we need to consider those changes ---------
//----and after c++ 11 compiler can not guarantee the address of the first member of the struct is equal to the struct address -------------
uint8_t MMC5983_read_XYZ(MMC5983_t *thisMMC5983,uint8_t * data)
{
 8002ac4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ac6:	46ce      	mov	lr, r9
 8002ac8:	4647      	mov	r7, r8
 8002aca:	b580      	push	{r7, lr}
	uint8_t in[2] = {0 , 0};
 8002acc:	2300      	movs	r3, #0
{
 8002ace:	b085      	sub	sp, #20
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002ad0:	466a      	mov	r2, sp
{
 8002ad2:	0004      	movs	r4, r0
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002ad4:	270a      	movs	r7, #10
	uint8_t in[2] = {0 , 0};
 8002ad6:	ad03      	add	r5, sp, #12
 8002ad8:	802b      	strh	r3, [r5, #0]
 8002ada:	4698      	mov	r8, r3
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002adc:	3388      	adds	r3, #136	; 0x88
 8002ade:	8113      	strh	r3, [r2, #8]
{
 8002ae0:	000e      	movs	r6, r1
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	8a81      	ldrh	r1, [r0, #20]
 8002ae6:	6900      	ldr	r0, [r0, #16]
 8002ae8:	f7fe f916 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002aec:	2302      	movs	r3, #2
 8002aee:	002a      	movs	r2, r5
 8002af0:	a902      	add	r1, sp, #8
 8002af2:	6860      	ldr	r0, [r4, #4]
 8002af4:	9700      	str	r7, [sp, #0]
 8002af6:	f7fe fffb 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002afa:	2201      	movs	r2, #1
 8002afc:	8aa1      	ldrh	r1, [r4, #20]
 8002afe:	6920      	ldr	r0, [r4, #16]
 8002b00:	f7fe f90a 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002b04:	2201      	movs	r2, #1
 8002b06:	0011      	movs	r1, r2
 8002b08:	786b      	ldrb	r3, [r5, #1]
	//TODO  need a better implimentation
	uint8_t sensor_status;
	sensor_status = MMC5983_register_read(thisMMC5983, MMC5983_STATUS);
	if(sensor_status & MMC5983_STATUS_Meas_M_Done )
 8002b0a:	4019      	ands	r1, r3
 8002b0c:	4689      	mov	r9, r1
 8002b0e:	421a      	tst	r2, r3
 8002b10:	d105      	bne.n	8002b1e <MMC5983_read_XYZ+0x5a>
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
		return 1;
	}
	return 0;
}
 8002b12:	4648      	mov	r0, r9
 8002b14:	b005      	add	sp, #20
 8002b16:	bcc0      	pop	{r6, r7}
 8002b18:	46b9      	mov	r9, r7
 8002b1a:	46b0      	mov	r8, r6
 8002b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uint8_t in[2] = {0 , 0};
 8002b1e:	4643      	mov	r3, r8
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002b20:	466a      	mov	r2, sp
	uint8_t in[2] = {0 , 0};
 8002b22:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002b24:	3381      	adds	r3, #129	; 0x81
 8002b26:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002b28:	8aa1      	ldrh	r1, [r4, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	6920      	ldr	r0, [r4, #16]
 8002b2e:	f7fe f8f3 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002b32:	2302      	movs	r3, #2
 8002b34:	002a      	movs	r2, r5
 8002b36:	a902      	add	r1, sp, #8
 8002b38:	6860      	ldr	r0, [r4, #4]
 8002b3a:	9700      	str	r7, [sp, #0]
 8002b3c:	f7fe ffd8 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002b40:	2201      	movs	r2, #1
 8002b42:	8aa1      	ldrh	r1, [r4, #20]
 8002b44:	6920      	ldr	r0, [r4, #16]
 8002b46:	f7fe f8e7 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002b4a:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002b4c:	466a      	mov	r2, sp
		data[0] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT1);
 8002b4e:	7033      	strb	r3, [r6, #0]
	uint8_t in[2] = {0 , 0};
 8002b50:	4643      	mov	r3, r8
 8002b52:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002b54:	3380      	adds	r3, #128	; 0x80
 8002b56:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002b58:	8aa1      	ldrh	r1, [r4, #20]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	6920      	ldr	r0, [r4, #16]
 8002b5e:	f7fe f8db 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002b62:	2302      	movs	r3, #2
 8002b64:	002a      	movs	r2, r5
 8002b66:	a902      	add	r1, sp, #8
 8002b68:	6860      	ldr	r0, [r4, #4]
 8002b6a:	9700      	str	r7, [sp, #0]
 8002b6c:	f7fe ffc0 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002b70:	2201      	movs	r2, #1
 8002b72:	8aa1      	ldrh	r1, [r4, #20]
 8002b74:	6920      	ldr	r0, [r4, #16]
 8002b76:	f7fe f8cf 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002b7a:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002b7c:	466a      	mov	r2, sp
		data[1] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT0);
 8002b7e:	7073      	strb	r3, [r6, #1]
	uint8_t in[2] = {0 , 0};
 8002b80:	4643      	mov	r3, r8
 8002b82:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002b84:	3383      	adds	r3, #131	; 0x83
 8002b86:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002b88:	8aa1      	ldrh	r1, [r4, #20]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	6920      	ldr	r0, [r4, #16]
 8002b8e:	f7fe f8c3 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002b92:	2302      	movs	r3, #2
 8002b94:	002a      	movs	r2, r5
 8002b96:	a902      	add	r1, sp, #8
 8002b98:	6860      	ldr	r0, [r4, #4]
 8002b9a:	9700      	str	r7, [sp, #0]
 8002b9c:	f7fe ffa8 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	8aa1      	ldrh	r1, [r4, #20]
 8002ba4:	6920      	ldr	r0, [r4, #16]
 8002ba6:	f7fe f8b7 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002baa:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002bac:	466a      	mov	r2, sp
		data[2] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT1);
 8002bae:	70b3      	strb	r3, [r6, #2]
	uint8_t in[2] = {0 , 0};
 8002bb0:	4643      	mov	r3, r8
 8002bb2:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002bb4:	3382      	adds	r3, #130	; 0x82
 8002bb6:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002bb8:	8aa1      	ldrh	r1, [r4, #20]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	6920      	ldr	r0, [r4, #16]
 8002bbe:	f7fe f8ab 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	002a      	movs	r2, r5
 8002bc6:	a902      	add	r1, sp, #8
 8002bc8:	6860      	ldr	r0, [r4, #4]
 8002bca:	9700      	str	r7, [sp, #0]
 8002bcc:	f7fe ff90 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	8aa1      	ldrh	r1, [r4, #20]
 8002bd4:	6920      	ldr	r0, [r4, #16]
 8002bd6:	f7fe f89f 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002bda:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002bdc:	466a      	mov	r2, sp
		data[3] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT0);
 8002bde:	70f3      	strb	r3, [r6, #3]
	uint8_t in[2] = {0 , 0};
 8002be0:	4643      	mov	r3, r8
 8002be2:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002be4:	3385      	adds	r3, #133	; 0x85
 8002be6:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002be8:	8aa1      	ldrh	r1, [r4, #20]
 8002bea:	2200      	movs	r2, #0
 8002bec:	6920      	ldr	r0, [r4, #16]
 8002bee:	f7fe f893 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	002a      	movs	r2, r5
 8002bf6:	a902      	add	r1, sp, #8
 8002bf8:	6860      	ldr	r0, [r4, #4]
 8002bfa:	9700      	str	r7, [sp, #0]
 8002bfc:	f7fe ff78 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002c00:	2201      	movs	r2, #1
 8002c02:	8aa1      	ldrh	r1, [r4, #20]
 8002c04:	6920      	ldr	r0, [r4, #16]
 8002c06:	f7fe f887 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002c0a:	786b      	ldrb	r3, [r5, #1]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002c0c:	466a      	mov	r2, sp
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
 8002c0e:	7133      	strb	r3, [r6, #4]
	uint8_t in[2] = {0 , 0};
 8002c10:	4643      	mov	r3, r8
 8002c12:	802b      	strh	r3, [r5, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8002c14:	3384      	adds	r3, #132	; 0x84
 8002c16:	8113      	strh	r3, [r2, #8]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8002c18:	8aa1      	ldrh	r1, [r4, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	6920      	ldr	r0, [r4, #16]
 8002c1e:	f7fe f87b 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8002c22:	2302      	movs	r3, #2
 8002c24:	002a      	movs	r2, r5
 8002c26:	a902      	add	r1, sp, #8
 8002c28:	6860      	ldr	r0, [r4, #4]
 8002c2a:	9700      	str	r7, [sp, #0]
 8002c2c:	f7fe ff60 	bl	8001af0 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8002c30:	2201      	movs	r2, #1
 8002c32:	8aa1      	ldrh	r1, [r4, #20]
 8002c34:	6920      	ldr	r0, [r4, #16]
 8002c36:	f7fe f86f 	bl	8000d18 <HAL_GPIO_WritePin>
	result = in[1];
 8002c3a:	786b      	ldrb	r3, [r5, #1]
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
 8002c3c:	7173      	strb	r3, [r6, #5]
		return 1;
 8002c3e:	e768      	b.n	8002b12 <MMC5983_read_XYZ+0x4e>

08002c40 <MMC5983_get_status>:
//---------------------------
uint8_t MMC5983_get_status(MMC5983_t *thisMMC5983)
{
	if(thisMMC5983->sensor_status == MMC5983_SENSOR_FOUND)
 8002c40:	7800      	ldrb	r0, [r0, #0]
 8002c42:	3820      	subs	r0, #32
 8002c44:	4243      	negs	r3, r0
 8002c46:	4158      	adcs	r0, r3
 8002c48:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return 0;
	}
}
 8002c4a:	4770      	bx	lr

08002c4c <module_system_init>:
#include "system.h"

//----------------------------------
void module_system_init(System *thisSystem, SPI_HandleTypeDef * h_SPI, I2C_HandleTypeDef * h_I2C, TIM_HandleTypeDef * h_global_timer)
{
 8002c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c4e:	46ce      	mov	lr, r9
 8002c50:	4647      	mov	r7, r8
 8002c52:	b580      	push	{r7, lr}
 8002c54:	001f      	movs	r7, r3
	thisSystem->data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 8002c56:	4b2b      	ldr	r3, [pc, #172]	; (8002d04 <module_system_init+0xb8>)
 8002c58:	24a0      	movs	r4, #160	; 0xa0
 8002c5a:	4699      	mov	r9, r3
 8002c5c:	2380      	movs	r3, #128	; 0x80
{
 8002c5e:	b083      	sub	sp, #12
	thisSystem->data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 8002c60:	05e4      	lsls	r4, r4, #23
 8002c62:	01db      	lsls	r3, r3, #7
{
 8002c64:	0005      	movs	r5, r0
 8002c66:	000e      	movs	r6, r1
 8002c68:	4690      	mov	r8, r2
	thisSystem->data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 8002c6a:	21ff      	movs	r1, #255	; 0xff
 8002c6c:	0022      	movs	r2, r4
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	4648      	mov	r0, r9
 8002c72:	2301      	movs	r3, #1
 8002c74:	9400      	str	r4, [sp, #0]
 8002c76:	f7ff faa1 	bl	80021bc <internal_bus_create>
 8002c7a:	23a0      	movs	r3, #160	; 0xa0
 8002c7c:	50e8      	str	r0, [r5, r3]
											BUS_CLK_GPIO_Port, BUS_CLK_Pin,
											BUS_C1_GPIO_Port, BUS_C1_Pin);

	thisSystem->ph_global_timer = global_timer_create(h_global_timer);
 8002c7e:	0038      	movs	r0, r7
 8002c80:	f7ff fc16 	bl	80024b0 <global_timer_create>
 8002c84:	238c      	movs	r3, #140	; 0x8c

	HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
	HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8002c86:	2780      	movs	r7, #128	; 0x80
	thisSystem->ph_global_timer = global_timer_create(h_global_timer);
 8002c88:	50e8      	str	r0, [r5, r3]
	HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	0020      	movs	r0, r4
 8002c8e:	2140      	movs	r1, #64	; 0x40
 8002c90:	f7fe f842 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8002c94:	007f      	lsls	r7, r7, #1
	HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 8002c96:	0020      	movs	r0, r4
 8002c98:	2201      	movs	r2, #1
 8002c9a:	2180      	movs	r1, #128	; 0x80
 8002c9c:	f7fe f83c 	bl	8000d18 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	0039      	movs	r1, r7
 8002ca4:	0020      	movs	r0, r4
 8002ca6:	f7fe f837 	bl	8000d18 <HAL_GPIO_WritePin>

	thisSystem->i2c_line = I2C_interface_create(h_I2C,100);
 8002caa:	2164      	movs	r1, #100	; 0x64
 8002cac:	4640      	mov	r0, r8
 8002cae:	f7ff fccb 	bl	8002648 <I2C_interface_create>
 8002cb2:	239c      	movs	r3, #156	; 0x9c
 8002cb4:	50e8      	str	r0, [r5, r3]

	// init sensors
	thisSystem->sensors[0] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_A_CS_GPIO_Port , SPI_A_CS_Pin , mag_int_a_GPIO_Port , mag_int_a_Pin);
 8002cb6:	464b      	mov	r3, r9
 8002cb8:	0022      	movs	r2, r4
 8002cba:	0031      	movs	r1, r6
 8002cbc:	9300      	str	r3, [sp, #0]
 8002cbe:	9701      	str	r7, [sp, #4]
 8002cc0:	2340      	movs	r3, #64	; 0x40
 8002cc2:	2014      	movs	r0, #20
 8002cc4:	f7ff fc0c 	bl	80024e0 <magnetometer_create>
 8002cc8:	2390      	movs	r3, #144	; 0x90
 8002cca:	50e8      	str	r0, [r5, r3]
	thisSystem->sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
 8002ccc:	3b88      	subs	r3, #136	; 0x88
 8002cce:	0022      	movs	r2, r4
 8002cd0:	0031      	movs	r1, r6
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	9400      	str	r4, [sp, #0]
 8002cd6:	3378      	adds	r3, #120	; 0x78
 8002cd8:	2014      	movs	r0, #20
 8002cda:	f7ff fc01 	bl	80024e0 <magnetometer_create>
 8002cde:	2394      	movs	r3, #148	; 0x94
 8002ce0:	50e8      	str	r0, [r5, r3]
	thisSystem->sensors[2] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_C_CS_GPIO_Port , SPI_C_CS_Pin , mag_int_c_GPIO_Port , mag_int_c_Pin);
 8002ce2:	3b84      	subs	r3, #132	; 0x84
 8002ce4:	9301      	str	r3, [sp, #4]
 8002ce6:	0022      	movs	r2, r4
 8002ce8:	003b      	movs	r3, r7
 8002cea:	0031      	movs	r1, r6
 8002cec:	9400      	str	r4, [sp, #0]
 8002cee:	2014      	movs	r0, #20
 8002cf0:	f7ff fbf6 	bl	80024e0 <magnetometer_create>
 8002cf4:	2398      	movs	r3, #152	; 0x98
 8002cf6:	50e8      	str	r0, [r5, r3]

	return;
}
 8002cf8:	b003      	add	sp, #12
 8002cfa:	bcc0      	pop	{r6, r7}
 8002cfc:	46b9      	mov	r9, r7
 8002cfe:	46b0      	mov	r8, r6
 8002d00:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	50000400 	.word	0x50000400

08002d08 <state_machine>:

void state_machine(System *thisSystem)
{
 8002d08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0a:	4657      	mov	r7, sl
 8002d0c:	464e      	mov	r6, r9
 8002d0e:	4645      	mov	r5, r8
 8002d10:	46de      	mov	lr, fp
 8002d12:	b5e0      	push	{r5, r6, r7, lr}
 8002d14:	b08f      	sub	sp, #60	; 0x3c
	uint8_t zeros[33] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8002d16:	ab05      	add	r3, sp, #20
 8002d18:	469a      	mov	sl, r3
 8002d1a:	4652      	mov	r2, sl
 8002d1c:	4be9      	ldr	r3, [pc, #932]	; (80030c4 <state_machine+0x3bc>)
{
 8002d1e:	0007      	movs	r7, r0
	uint8_t zeros[33] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
 8002d20:	cb13      	ldmia	r3!, {r0, r1, r4}
 8002d22:	c213      	stmia	r2!, {r0, r1, r4}
 8002d24:	cb13      	ldmia	r3!, {r0, r1, r4}
 8002d26:	c213      	stmia	r2!, {r0, r1, r4}
 8002d28:	cb03      	ldmia	r3!, {r0, r1}
 8002d2a:	c203      	stmia	r2!, {r0, r1}
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	003e      	movs	r6, r7
 8002d30:	7013      	strb	r3, [r2, #0]
	uint8_t b_read_permit =0;
	uint8_t byte_shifter = 0;
	uint8_t this_byte = 0;
	while(1)
	{
		if(b_read_permit)
 8002d32:	2290      	movs	r2, #144	; 0x90
 8002d34:	4694      	mov	ip, r2
 8002d36:	44bc      	add	ip, r7
 8002d38:	4662      	mov	r2, ip
 8002d3a:	9202      	str	r2, [sp, #8]
 8002d3c:	2208      	movs	r2, #8
 8002d3e:	4694      	mov	ip, r2
 8002d40:	44bc      	add	ip, r7
 8002d42:	4662      	mov	r2, ip
 8002d44:	9203      	str	r2, [sp, #12]
			b_read_permit =0;
		}
		//------------------------------------------
		if(thisSystem->i2c_line->new_command_is_ready_flag)
		{
			switch(thisSystem->i2c_line->receiveBuffer[0])
 8002d46:	2200      	movs	r2, #0
 8002d48:	239c      	movs	r3, #156	; 0x9c
 8002d4a:	4690      	mov	r8, r2
 8002d4c:	58fb      	ldr	r3, [r7, r3]
 8002d4e:	368c      	adds	r6, #140	; 0x8c
		if(thisSystem->i2c_line->new_command_is_ready_flag)
 8002d50:	785a      	ldrb	r2, [r3, #1]
 8002d52:	2a00      	cmp	r2, #0
 8002d54:	d0fc      	beq.n	8002d50 <state_machine+0x48>
			switch(thisSystem->i2c_line->receiveBuffer[0])
 8002d56:	789a      	ldrb	r2, [r3, #2]
 8002d58:	3a0a      	subs	r2, #10
 8002d5a:	b2d2      	uxtb	r2, r2
 8002d5c:	2a5e      	cmp	r2, #94	; 0x5e
 8002d5e:	d803      	bhi.n	8002d68 <state_machine+0x60>
 8002d60:	49d9      	ldr	r1, [pc, #868]	; (80030c8 <state_machine+0x3c0>)
 8002d62:	0092      	lsls	r2, r2, #2
 8002d64:	588a      	ldr	r2, [r1, r2]
 8002d66:	4697      	mov	pc, r2
 8002d68:	2000      	movs	r0, #0
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
					break;
				}
			}
			//-------- if we get any data higher than 0x80 in the first byte it mean it is a new address
			if ( thisSystem->i2c_line->receiveBuffer[0] > I2C_PACKET_SET_NEW_ADDRESS )
 8002d6a:	789a      	ldrb	r2, [r3, #2]
 8002d6c:	2a80      	cmp	r2, #128	; 0x80
 8002d6e:	d916      	bls.n	8002d9e <state_machine+0x96>
			{
				__HAL_I2C_DISABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8002d70:	242c      	movs	r4, #44	; 0x2c
 8002d72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	6811      	ldr	r1, [r2, #0]
 8002d78:	43a1      	bics	r1, r4
 8002d7a:	6011      	str	r1, [r2, #0]
				uint8_t i2c_new_address =  (uint8_t)thisSystem->i2c_line->receiveBuffer[0] & 0x7f;
 8002d7c:	7899      	ldrb	r1, [r3, #2]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d7e:	6895      	ldr	r5, [r2, #8]
				uint8_t i2c_new_address =  (uint8_t)thisSystem->i2c_line->receiveBuffer[0] & 0x7f;
 8002d80:	468c      	mov	ip, r1
				thisSystem->i2c_line->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d82:	49d2      	ldr	r1, [pc, #840]	; (80030cc <state_machine+0x3c4>)
 8002d84:	400d      	ands	r5, r1
 8002d86:	6095      	str	r5, [r2, #8]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( i2c_new_address << 1) );
 8002d88:	217f      	movs	r1, #127	; 0x7f
 8002d8a:	4665      	mov	r5, ip
 8002d8c:	4029      	ands	r1, r5
 8002d8e:	2580      	movs	r5, #128	; 0x80
 8002d90:	0049      	lsls	r1, r1, #1
 8002d92:	022d      	lsls	r5, r5, #8
 8002d94:	4329      	orrs	r1, r5
 8002d96:	6091      	str	r1, [r2, #8]
				__HAL_I2C_ENABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8002d98:	6811      	ldr	r1, [r2, #0]
 8002d9a:	4321      	orrs	r1, r4
 8002d9c:	6011      	str	r1, [r2, #0]
			}
			thisSystem->i2c_line->buffer_index =0;
 8002d9e:	4642      	mov	r2, r8
 8002da0:	701a      	strb	r2, [r3, #0]
			thisSystem->i2c_line->new_command_is_ready_flag = 0;
 8002da2:	705a      	strb	r2, [r3, #1]
		if(b_read_permit)
 8002da4:	2800      	cmp	r0, #0
 8002da6:	d0d3      	beq.n	8002d50 <state_machine+0x48>
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8002da8:	23a0      	movs	r3, #160	; 0xa0
 8002daa:	469b      	mov	fp, r3
 8002dac:	9d02      	ldr	r5, [sp, #8]
 8002dae:	9c03      	ldr	r4, [sp, #12]
				if( (thisSystem->sensors[sensor_num]->sensor_status == MAGNETOMETER_OK) & thisSystem->sensors[sensor_num]->b_new_data_needed)
 8002db0:	6828      	ldr	r0, [r5, #0]
 8002db2:	7e03      	ldrb	r3, [r0, #24]
 8002db4:	3b51      	subs	r3, #81	; 0x51
 8002db6:	425a      	negs	r2, r3
 8002db8:	4153      	adcs	r3, r2
 8002dba:	7cc2      	ldrb	r2, [r0, #19]
 8002dbc:	421a      	tst	r2, r3
 8002dbe:	d000      	beq.n	8002dc2 <state_machine+0xba>
 8002dc0:	e0c0      	b.n	8002f44 <state_machine+0x23c>
			for (uint8_t sensor_num = 0; sensor_num < MODULE_SYSTEM_NUM_SENSORS; sensor_num++)
 8002dc2:	342c      	adds	r4, #44	; 0x2c
 8002dc4:	3504      	adds	r5, #4
 8002dc6:	42a6      	cmp	r6, r4
 8002dc8:	d1f2      	bne.n	8002db0 <state_machine+0xa8>
 8002dca:	239c      	movs	r3, #156	; 0x9c
 8002dcc:	58fb      	ldr	r3, [r7, r3]
 8002dce:	e7bf      	b.n	8002d50 <state_machine+0x48>
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002dd0:	78d9      	ldrb	r1, [r3, #3]
 8002dd2:	791a      	ldrb	r2, [r3, #4]
 8002dd4:	2398      	movs	r3, #152	; 0x98
 8002dd6:	b2c9      	uxtb	r1, r1
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	58fc      	ldr	r4, [r7, r3]
 8002ddc:	78a3      	ldrb	r3, [r4, #2]
 8002dde:	7860      	ldrb	r0, [r4, #1]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	4303      	orrs	r3, r0
 8002de4:	78e0      	ldrb	r0, [r4, #3]
 8002de6:	0400      	lsls	r0, r0, #16
 8002de8:	4303      	orrs	r3, r0
 8002dea:	7920      	ldrb	r0, [r4, #4]
 8002dec:	0600      	lsls	r0, r0, #24
 8002dee:	4318      	orrs	r0, r3
 8002df0:	f7ff fc08 	bl	8002604 <magnetometer_direct_register_write>
					break;
 8002df4:	239c      	movs	r3, #156	; 0x9c
 8002df6:	2000      	movs	r0, #0
 8002df8:	58fb      	ldr	r3, [r7, r3]
 8002dfa:	e7b6      	b.n	8002d6a <state_machine+0x62>
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002dfc:	78d9      	ldrb	r1, [r3, #3]
 8002dfe:	791a      	ldrb	r2, [r3, #4]
 8002e00:	b2c9      	uxtb	r1, r1
 8002e02:	2394      	movs	r3, #148	; 0x94
 8002e04:	b2d2      	uxtb	r2, r2
 8002e06:	e7e8      	b.n	8002dda <state_machine+0xd2>
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002e08:	78d9      	ldrb	r1, [r3, #3]
 8002e0a:	791a      	ldrb	r2, [r3, #4]
 8002e0c:	b2c9      	uxtb	r1, r1
 8002e0e:	2390      	movs	r3, #144	; 0x90
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	e7e2      	b.n	8002dda <state_machine+0xd2>
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002e14:	78d9      	ldrb	r1, [r3, #3]
 8002e16:	791a      	ldrb	r2, [r3, #4]
 8002e18:	2390      	movs	r3, #144	; 0x90
 8002e1a:	58fc      	ldr	r4, [r7, r3]
 8002e1c:	b2c9      	uxtb	r1, r1
 8002e1e:	78a3      	ldrb	r3, [r4, #2]
 8002e20:	7860      	ldrb	r0, [r4, #1]
 8002e22:	021b      	lsls	r3, r3, #8
 8002e24:	4303      	orrs	r3, r0
 8002e26:	78e0      	ldrb	r0, [r4, #3]
 8002e28:	b2d2      	uxtb	r2, r2
 8002e2a:	0400      	lsls	r0, r0, #16
 8002e2c:	4303      	orrs	r3, r0
 8002e2e:	7920      	ldrb	r0, [r4, #4]
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002e30:	249c      	movs	r4, #156	; 0x9c
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002e32:	0600      	lsls	r0, r0, #24
 8002e34:	4318      	orrs	r0, r3
 8002e36:	f7ff fbe5 	bl	8002604 <magnetometer_direct_register_write>
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002e3a:	593b      	ldr	r3, [r7, r4]
 8002e3c:	78d9      	ldrb	r1, [r3, #3]
 8002e3e:	791a      	ldrb	r2, [r3, #4]
 8002e40:	2394      	movs	r3, #148	; 0x94
 8002e42:	58fd      	ldr	r5, [r7, r3]
 8002e44:	b2c9      	uxtb	r1, r1
 8002e46:	78ab      	ldrb	r3, [r5, #2]
 8002e48:	7868      	ldrb	r0, [r5, #1]
 8002e4a:	021b      	lsls	r3, r3, #8
 8002e4c:	4303      	orrs	r3, r0
 8002e4e:	78e8      	ldrb	r0, [r5, #3]
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	0400      	lsls	r0, r0, #16
 8002e54:	4303      	orrs	r3, r0
 8002e56:	7928      	ldrb	r0, [r5, #4]
 8002e58:	0600      	lsls	r0, r0, #24
 8002e5a:	4318      	orrs	r0, r3
 8002e5c:	f7ff fbd2 	bl	8002604 <magnetometer_direct_register_write>
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8002e60:	593b      	ldr	r3, [r7, r4]
 8002e62:	78d9      	ldrb	r1, [r3, #3]
 8002e64:	791a      	ldrb	r2, [r3, #4]
 8002e66:	2398      	movs	r3, #152	; 0x98
 8002e68:	58fd      	ldr	r5, [r7, r3]
 8002e6a:	b2c9      	uxtb	r1, r1
 8002e6c:	78ab      	ldrb	r3, [r5, #2]
 8002e6e:	7868      	ldrb	r0, [r5, #1]
 8002e70:	021b      	lsls	r3, r3, #8
 8002e72:	4303      	orrs	r3, r0
 8002e74:	78e8      	ldrb	r0, [r5, #3]
 8002e76:	b2d2      	uxtb	r2, r2
 8002e78:	0400      	lsls	r0, r0, #16
 8002e7a:	4303      	orrs	r3, r0
 8002e7c:	7928      	ldrb	r0, [r5, #4]
 8002e7e:	0600      	lsls	r0, r0, #24
 8002e80:	4318      	orrs	r0, r3
 8002e82:	f7ff fbbf 	bl	8002604 <magnetometer_direct_register_write>
					break;
 8002e86:	2000      	movs	r0, #0
 8002e88:	593b      	ldr	r3, [r7, r4]
 8002e8a:	e76e      	b.n	8002d6a <state_machine+0x62>
					if(thisSystem->sensors[0]->sensor_status == MAGNETOMETER_FAULTY )
 8002e8c:	2390      	movs	r3, #144	; 0x90
 8002e8e:	58fb      	ldr	r3, [r7, r3]
 8002e90:	7e1b      	ldrb	r3, [r3, #24]
 8002e92:	2b50      	cmp	r3, #80	; 0x50
 8002e94:	d100      	bne.n	8002e98 <state_machine+0x190>
 8002e96:	e101      	b.n	800309c <state_machine+0x394>
					if(thisSystem->sensors[1]->sensor_status == MAGNETOMETER_FAULTY )
 8002e98:	2394      	movs	r3, #148	; 0x94
 8002e9a:	58fb      	ldr	r3, [r7, r3]
 8002e9c:	7e1b      	ldrb	r3, [r3, #24]
 8002e9e:	2b50      	cmp	r3, #80	; 0x50
 8002ea0:	d100      	bne.n	8002ea4 <state_machine+0x19c>
 8002ea2:	e0e8      	b.n	8003076 <state_machine+0x36e>
					if(thisSystem->sensors[2]->sensor_status == MAGNETOMETER_FAULTY )
 8002ea4:	2398      	movs	r3, #152	; 0x98
 8002ea6:	58fb      	ldr	r3, [r7, r3]
 8002ea8:	7e1b      	ldrb	r3, [r3, #24]
 8002eaa:	2b50      	cmp	r3, #80	; 0x50
 8002eac:	d100      	bne.n	8002eb0 <state_machine+0x1a8>
 8002eae:	e0cd      	b.n	800304c <state_machine+0x344>
					HAL_SuspendTick();
 8002eb0:	f7fd fde2 	bl	8000a78 <HAL_SuspendTick>
					break;
 8002eb4:	239c      	movs	r3, #156	; 0x9c
 8002eb6:	2000      	movs	r0, #0
 8002eb8:	58fb      	ldr	r3, [r7, r3]
 8002eba:	e756      	b.n	8002d6a <state_machine+0x62>
					thisSystem->ph_global_timer->h_timer->Instance->CNT = 0;
 8002ebc:	228c      	movs	r2, #140	; 0x8c
 8002ebe:	4640      	mov	r0, r8
 8002ec0:	58ba      	ldr	r2, [r7, r2]
 8002ec2:	6851      	ldr	r1, [r2, #4]
 8002ec4:	6809      	ldr	r1, [r1, #0]
 8002ec6:	6248      	str	r0, [r1, #36]	; 0x24
					thisSystem->ph_global_timer->overflow_counter = 0;
 8002ec8:	7010      	strb	r0, [r2, #0]
					break;
 8002eca:	2000      	movs	r0, #0
 8002ecc:	e74d      	b.n	8002d6a <state_machine+0x62>
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2180      	movs	r1, #128	; 0x80
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8002ed2:	20a0      	movs	r0, #160	; 0xa0
 8002ed4:	05c0      	lsls	r0, r0, #23
 8002ed6:	f7fd ff1f 	bl	8000d18 <HAL_GPIO_WritePin>
					break;
 8002eda:	239c      	movs	r3, #156	; 0x9c
 8002edc:	2000      	movs	r0, #0
 8002ede:	58fb      	ldr	r3, [r7, r3]
 8002ee0:	e743      	b.n	8002d6a <state_machine+0x62>
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	2140      	movs	r1, #64	; 0x40
 8002ee6:	e7f4      	b.n	8002ed2 <state_machine+0x1ca>
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 8002ee8:	2201      	movs	r2, #1
 8002eea:	2180      	movs	r1, #128	; 0x80
 8002eec:	e7f1      	b.n	8002ed2 <state_machine+0x1ca>
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 8002eee:	2200      	movs	r2, #0
 8002ef0:	2140      	movs	r1, #64	; 0x40
 8002ef2:	e7ee      	b.n	8002ed2 <state_machine+0x1ca>
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	2180      	movs	r1, #128	; 0x80
 8002ef8:	0049      	lsls	r1, r1, #1
 8002efa:	e7ea      	b.n	8002ed2 <state_machine+0x1ca>
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 8002efc:	2200      	movs	r2, #0
 8002efe:	e7fa      	b.n	8002ef6 <state_machine+0x1ee>
					 HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_SET);
 8002f00:	2180      	movs	r1, #128	; 0x80
 8002f02:	2201      	movs	r2, #1
 8002f04:	01c9      	lsls	r1, r1, #7
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_SET);
 8002f06:	4872      	ldr	r0, [pc, #456]	; (80030d0 <state_machine+0x3c8>)
 8002f08:	f7fd ff06 	bl	8000d18 <HAL_GPIO_WritePin>
					break;
 8002f0c:	239c      	movs	r3, #156	; 0x9c
 8002f0e:	2000      	movs	r0, #0
 8002f10:	58fb      	ldr	r3, [r7, r3]
 8002f12:	e72a      	b.n	8002d6a <state_machine+0x62>
					  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_RESET);
 8002f14:	2180      	movs	r1, #128	; 0x80
 8002f16:	2200      	movs	r2, #0
 8002f18:	01c9      	lsls	r1, r1, #7
 8002f1a:	e7f4      	b.n	8002f06 <state_machine+0x1fe>
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_SET);
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	0209      	lsls	r1, r1, #8
 8002f22:	e7f0      	b.n	8002f06 <state_machine+0x1fe>
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 8002f24:	2200      	movs	r2, #0
 8002f26:	e7fa      	b.n	8002f1e <state_machine+0x216>
					thisSystem->sensors[0]->b_new_data_needed = 1;
 8002f28:	2290      	movs	r2, #144	; 0x90
 8002f2a:	58b9      	ldr	r1, [r7, r2]
 8002f2c:	3a8f      	subs	r2, #143	; 0x8f
 8002f2e:	74ca      	strb	r2, [r1, #19]
					thisSystem->sensors[1]->b_new_data_needed = 1;
 8002f30:	2194      	movs	r1, #148	; 0x94
 8002f32:	5879      	ldr	r1, [r7, r1]
					break;
 8002f34:	2000      	movs	r0, #0
					thisSystem->sensors[1]->b_new_data_needed = 1;
 8002f36:	74ca      	strb	r2, [r1, #19]
					thisSystem->sensors[2]->b_new_data_needed = 1;
 8002f38:	2198      	movs	r1, #152	; 0x98
 8002f3a:	5879      	ldr	r1, [r7, r1]
 8002f3c:	74ca      	strb	r2, [r1, #19]
					break;
 8002f3e:	e714      	b.n	8002d6a <state_machine+0x62>
			switch(thisSystem->i2c_line->receiveBuffer[0])
 8002f40:	2001      	movs	r0, #1
 8002f42:	e712      	b.n	8002d6a <state_machine+0x62>
					if(magnetometer_read(thisSystem->sensors[sensor_num]))
 8002f44:	f7ff fb3a 	bl	80025bc <magnetometer_read>
 8002f48:	2800      	cmp	r0, #0
 8002f4a:	d105      	bne.n	8002f58 <state_machine+0x250>
						memcpy(thisSystem->bus_output_buffer + sensor_num * 11, zeros, 11);
 8002f4c:	220b      	movs	r2, #11
 8002f4e:	4651      	mov	r1, sl
 8002f50:	0020      	movs	r0, r4
 8002f52:	f000 f8f3 	bl	800313c <memcpy>
 8002f56:	e734      	b.n	8002dc2 <state_machine+0xba>
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8002f58:	465b      	mov	r3, fp
 8002f5a:	58fb      	ldr	r3, [r7, r3]
							this_byte = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
 8002f5c:	682a      	ldr	r2, [r5, #0]
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8002f5e:	889b      	ldrh	r3, [r3, #4]
 8002f60:	7ad0      	ldrb	r0, [r2, #11]
 8002f62:	0019      	movs	r1, r3
 8002f64:	4381      	bics	r1, r0
 8002f66:	0409      	lsls	r1, r1, #16
 8002f68:	4018      	ands	r0, r3
 8002f6a:	4301      	orrs	r1, r0
 8002f6c:	6021      	str	r1, [r4, #0]
 8002f6e:	0019      	movs	r1, r3
 8002f70:	7b10      	ldrb	r0, [r2, #12]
 8002f72:	4381      	bics	r1, r0
 8002f74:	0409      	lsls	r1, r1, #16
 8002f76:	4018      	ands	r0, r3
 8002f78:	4301      	orrs	r1, r0
 8002f7a:	6061      	str	r1, [r4, #4]
 8002f7c:	0019      	movs	r1, r3
 8002f7e:	7b50      	ldrb	r0, [r2, #13]
 8002f80:	4381      	bics	r1, r0
 8002f82:	0409      	lsls	r1, r1, #16
 8002f84:	4018      	ands	r0, r3
 8002f86:	4301      	orrs	r1, r0
 8002f88:	60a1      	str	r1, [r4, #8]
 8002f8a:	0019      	movs	r1, r3
 8002f8c:	7b90      	ldrb	r0, [r2, #14]
 8002f8e:	4381      	bics	r1, r0
 8002f90:	0409      	lsls	r1, r1, #16
 8002f92:	4018      	ands	r0, r3
 8002f94:	4301      	orrs	r1, r0
 8002f96:	60e1      	str	r1, [r4, #12]
 8002f98:	0019      	movs	r1, r3
 8002f9a:	7bd0      	ldrb	r0, [r2, #15]
 8002f9c:	4381      	bics	r1, r0
 8002f9e:	0409      	lsls	r1, r1, #16
 8002fa0:	4018      	ands	r0, r3
 8002fa2:	4301      	orrs	r1, r0
 8002fa4:	6121      	str	r1, [r4, #16]
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8002fa6:	0019      	movs	r1, r3
 8002fa8:	7950      	ldrb	r0, [r2, #5]
 8002faa:	4381      	bics	r1, r0
 8002fac:	0409      	lsls	r1, r1, #16
 8002fae:	4018      	ands	r0, r3
 8002fb0:	4301      	orrs	r1, r0
 8002fb2:	6161      	str	r1, [r4, #20]
 8002fb4:	0019      	movs	r1, r3
 8002fb6:	7990      	ldrb	r0, [r2, #6]
 8002fb8:	4381      	bics	r1, r0
 8002fba:	0409      	lsls	r1, r1, #16
 8002fbc:	4018      	ands	r0, r3
 8002fbe:	4301      	orrs	r1, r0
 8002fc0:	61a1      	str	r1, [r4, #24]
 8002fc2:	0019      	movs	r1, r3
 8002fc4:	79d0      	ldrb	r0, [r2, #7]
 8002fc6:	4381      	bics	r1, r0
 8002fc8:	0409      	lsls	r1, r1, #16
 8002fca:	4018      	ands	r0, r3
 8002fcc:	4301      	orrs	r1, r0
 8002fce:	61e1      	str	r1, [r4, #28]
 8002fd0:	0019      	movs	r1, r3
 8002fd2:	7a10      	ldrb	r0, [r2, #8]
 8002fd4:	4381      	bics	r1, r0
 8002fd6:	0409      	lsls	r1, r1, #16
 8002fd8:	4018      	ands	r0, r3
 8002fda:	4301      	orrs	r1, r0
 8002fdc:	6221      	str	r1, [r4, #32]
 8002fde:	0019      	movs	r1, r3
 8002fe0:	7a50      	ldrb	r0, [r2, #9]
 8002fe2:	4381      	bics	r1, r0
 8002fe4:	0409      	lsls	r1, r1, #16
 8002fe6:	4018      	ands	r0, r3
 8002fe8:	4301      	orrs	r1, r0
 8002fea:	6261      	str	r1, [r4, #36]	; 0x24
 8002fec:	0019      	movs	r1, r3
 8002fee:	7a90      	ldrb	r0, [r2, #10]
 8002ff0:	4381      	bics	r1, r0
 8002ff2:	0409      	lsls	r1, r1, #16
 8002ff4:	4003      	ands	r3, r0
 8002ff6:	430b      	orrs	r3, r1
 8002ff8:	62a3      	str	r3, [r4, #40]	; 0x28
						thisSystem->sensors[sensor_num]->b_new_data_needed = 0;
 8002ffa:	4643      	mov	r3, r8
 8002ffc:	74d3      	strb	r3, [r2, #19]
						MMC5983_register_write((MMC5983_t*)thisSystem->sensors[sensor_num]->magnetometer, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
 8002ffe:	7893      	ldrb	r3, [r2, #2]
 8003000:	7850      	ldrb	r0, [r2, #1]
 8003002:	021b      	lsls	r3, r3, #8
 8003004:	4303      	orrs	r3, r0
 8003006:	78d0      	ldrb	r0, [r2, #3]
 8003008:	2109      	movs	r1, #9
 800300a:	0400      	lsls	r0, r0, #16
 800300c:	4303      	orrs	r3, r0
 800300e:	7910      	ldrb	r0, [r2, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	0600      	lsls	r0, r0, #24
 8003014:	4318      	orrs	r0, r3
 8003016:	f7ff fd3d 	bl	8002a94 <MMC5983_register_write>
						thisSystem->sensors[sensor_num]->time_stamp = get_global_timer(thisSystem->ph_global_timer);
 800301a:	682b      	ldr	r3, [r5, #0]
 800301c:	4699      	mov	r9, r3
 800301e:	238c      	movs	r3, #140	; 0x8c
 8003020:	58fb      	ldr	r3, [r7, r3]
 8003022:	0018      	movs	r0, r3
 8003024:	9301      	str	r3, [sp, #4]
 8003026:	f7ff fa51 	bl	80024cc <get_global_timer>
 800302a:	464b      	mov	r3, r9
 800302c:	0a02      	lsrs	r2, r0, #8
 800302e:	731a      	strb	r2, [r3, #12]
 8003030:	0c02      	lsrs	r2, r0, #16
 8003032:	735a      	strb	r2, [r3, #13]
 8003034:	0a0a      	lsrs	r2, r1, #8
 8003036:	741a      	strb	r2, [r3, #16]
 8003038:	020a      	lsls	r2, r1, #8
 800303a:	72d8      	strb	r0, [r3, #11]
 800303c:	73d9      	strb	r1, [r3, #15]
 800303e:	0e00      	lsrs	r0, r0, #24
 8003040:	0e12      	lsrs	r2, r2, #24
 8003042:	0e09      	lsrs	r1, r1, #24
 8003044:	7398      	strb	r0, [r3, #14]
 8003046:	745a      	strb	r2, [r3, #17]
 8003048:	7499      	strb	r1, [r3, #18]
 800304a:	e6ba      	b.n	8002dc2 <state_machine+0xba>
						HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	20a0      	movs	r0, #160	; 0xa0
 8003050:	2200      	movs	r2, #0
 8003052:	0049      	lsls	r1, r1, #1
 8003054:	05c0      	lsls	r0, r0, #23
 8003056:	f7fd fe5f 	bl	8000d18 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 800305a:	20c8      	movs	r0, #200	; 0xc8
 800305c:	f7fd fcfa 	bl	8000a54 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8003060:	2180      	movs	r1, #128	; 0x80
 8003062:	20a0      	movs	r0, #160	; 0xa0
 8003064:	2201      	movs	r2, #1
 8003066:	0049      	lsls	r1, r1, #1
 8003068:	05c0      	lsls	r0, r0, #23
 800306a:	f7fd fe55 	bl	8000d18 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 800306e:	20fa      	movs	r0, #250	; 0xfa
 8003070:	f7fd fcf0 	bl	8000a54 <HAL_Delay>
 8003074:	e71c      	b.n	8002eb0 <state_machine+0x1a8>
						HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 8003076:	20a0      	movs	r0, #160	; 0xa0
 8003078:	2200      	movs	r2, #0
 800307a:	2180      	movs	r1, #128	; 0x80
 800307c:	05c0      	lsls	r0, r0, #23
 800307e:	f7fd fe4b 	bl	8000d18 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8003082:	20c8      	movs	r0, #200	; 0xc8
 8003084:	f7fd fce6 	bl	8000a54 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 8003088:	20a0      	movs	r0, #160	; 0xa0
 800308a:	2201      	movs	r2, #1
 800308c:	2180      	movs	r1, #128	; 0x80
 800308e:	05c0      	lsls	r0, r0, #23
 8003090:	f7fd fe42 	bl	8000d18 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8003094:	20fa      	movs	r0, #250	; 0xfa
 8003096:	f7fd fcdd 	bl	8000a54 <HAL_Delay>
 800309a:	e703      	b.n	8002ea4 <state_machine+0x19c>
						HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 800309c:	20a0      	movs	r0, #160	; 0xa0
 800309e:	2200      	movs	r2, #0
 80030a0:	2140      	movs	r1, #64	; 0x40
 80030a2:	05c0      	lsls	r0, r0, #23
 80030a4:	f7fd fe38 	bl	8000d18 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 80030a8:	20c8      	movs	r0, #200	; 0xc8
 80030aa:	f7fd fcd3 	bl	8000a54 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 80030ae:	20a0      	movs	r0, #160	; 0xa0
 80030b0:	2201      	movs	r2, #1
 80030b2:	2140      	movs	r1, #64	; 0x40
 80030b4:	05c0      	lsls	r0, r0, #23
 80030b6:	f7fd fe2f 	bl	8000d18 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 80030ba:	20fa      	movs	r0, #250	; 0xfa
 80030bc:	f7fd fcca 	bl	8000a54 <HAL_Delay>
 80030c0:	e6ea      	b.n	8002e98 <state_machine+0x190>
 80030c2:	46c0      	nop			; (mov r8, r8)
 80030c4:	0800327c 	.word	0x0800327c
 80030c8:	080032bc 	.word	0x080032bc
 80030cc:	ffff7fff 	.word	0xffff7fff
 80030d0:	50000800 	.word	0x50000800

080030d4 <__errno>:
 80030d4:	4b01      	ldr	r3, [pc, #4]	; (80030dc <__errno+0x8>)
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	4770      	bx	lr
 80030da:	46c0      	nop			; (mov r8, r8)
 80030dc:	2000000c 	.word	0x2000000c

080030e0 <__libc_init_array>:
 80030e0:	b570      	push	{r4, r5, r6, lr}
 80030e2:	2600      	movs	r6, #0
 80030e4:	4d0c      	ldr	r5, [pc, #48]	; (8003118 <__libc_init_array+0x38>)
 80030e6:	4c0d      	ldr	r4, [pc, #52]	; (800311c <__libc_init_array+0x3c>)
 80030e8:	1b64      	subs	r4, r4, r5
 80030ea:	10a4      	asrs	r4, r4, #2
 80030ec:	42a6      	cmp	r6, r4
 80030ee:	d109      	bne.n	8003104 <__libc_init_array+0x24>
 80030f0:	2600      	movs	r6, #0
 80030f2:	f000 f8b7 	bl	8003264 <_init>
 80030f6:	4d0a      	ldr	r5, [pc, #40]	; (8003120 <__libc_init_array+0x40>)
 80030f8:	4c0a      	ldr	r4, [pc, #40]	; (8003124 <__libc_init_array+0x44>)
 80030fa:	1b64      	subs	r4, r4, r5
 80030fc:	10a4      	asrs	r4, r4, #2
 80030fe:	42a6      	cmp	r6, r4
 8003100:	d105      	bne.n	800310e <__libc_init_array+0x2e>
 8003102:	bd70      	pop	{r4, r5, r6, pc}
 8003104:	00b3      	lsls	r3, r6, #2
 8003106:	58eb      	ldr	r3, [r5, r3]
 8003108:	4798      	blx	r3
 800310a:	3601      	adds	r6, #1
 800310c:	e7ee      	b.n	80030ec <__libc_init_array+0xc>
 800310e:	00b3      	lsls	r3, r6, #2
 8003110:	58eb      	ldr	r3, [r5, r3]
 8003112:	4798      	blx	r3
 8003114:	3601      	adds	r6, #1
 8003116:	e7f2      	b.n	80030fe <__libc_init_array+0x1e>
 8003118:	08003440 	.word	0x08003440
 800311c:	08003440 	.word	0x08003440
 8003120:	08003440 	.word	0x08003440
 8003124:	08003444 	.word	0x08003444

08003128 <malloc>:
 8003128:	b510      	push	{r4, lr}
 800312a:	4b03      	ldr	r3, [pc, #12]	; (8003138 <malloc+0x10>)
 800312c:	0001      	movs	r1, r0
 800312e:	6818      	ldr	r0, [r3, #0]
 8003130:	f000 f816 	bl	8003160 <_malloc_r>
 8003134:	bd10      	pop	{r4, pc}
 8003136:	46c0      	nop			; (mov r8, r8)
 8003138:	2000000c 	.word	0x2000000c

0800313c <memcpy>:
 800313c:	2300      	movs	r3, #0
 800313e:	b510      	push	{r4, lr}
 8003140:	429a      	cmp	r2, r3
 8003142:	d100      	bne.n	8003146 <memcpy+0xa>
 8003144:	bd10      	pop	{r4, pc}
 8003146:	5ccc      	ldrb	r4, [r1, r3]
 8003148:	54c4      	strb	r4, [r0, r3]
 800314a:	3301      	adds	r3, #1
 800314c:	e7f8      	b.n	8003140 <memcpy+0x4>

0800314e <memset>:
 800314e:	0003      	movs	r3, r0
 8003150:	1882      	adds	r2, r0, r2
 8003152:	4293      	cmp	r3, r2
 8003154:	d100      	bne.n	8003158 <memset+0xa>
 8003156:	4770      	bx	lr
 8003158:	7019      	strb	r1, [r3, #0]
 800315a:	3301      	adds	r3, #1
 800315c:	e7f9      	b.n	8003152 <memset+0x4>
	...

08003160 <_malloc_r>:
 8003160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003162:	2303      	movs	r3, #3
 8003164:	1ccd      	adds	r5, r1, #3
 8003166:	439d      	bics	r5, r3
 8003168:	3508      	adds	r5, #8
 800316a:	0006      	movs	r6, r0
 800316c:	2d0c      	cmp	r5, #12
 800316e:	d21f      	bcs.n	80031b0 <_malloc_r+0x50>
 8003170:	250c      	movs	r5, #12
 8003172:	42a9      	cmp	r1, r5
 8003174:	d81e      	bhi.n	80031b4 <_malloc_r+0x54>
 8003176:	0030      	movs	r0, r6
 8003178:	f000 f862 	bl	8003240 <__malloc_lock>
 800317c:	4925      	ldr	r1, [pc, #148]	; (8003214 <_malloc_r+0xb4>)
 800317e:	680a      	ldr	r2, [r1, #0]
 8003180:	0014      	movs	r4, r2
 8003182:	2c00      	cmp	r4, #0
 8003184:	d11a      	bne.n	80031bc <_malloc_r+0x5c>
 8003186:	4f24      	ldr	r7, [pc, #144]	; (8003218 <_malloc_r+0xb8>)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d104      	bne.n	8003198 <_malloc_r+0x38>
 800318e:	0021      	movs	r1, r4
 8003190:	0030      	movs	r0, r6
 8003192:	f000 f843 	bl	800321c <_sbrk_r>
 8003196:	6038      	str	r0, [r7, #0]
 8003198:	0029      	movs	r1, r5
 800319a:	0030      	movs	r0, r6
 800319c:	f000 f83e 	bl	800321c <_sbrk_r>
 80031a0:	1c43      	adds	r3, r0, #1
 80031a2:	d12b      	bne.n	80031fc <_malloc_r+0x9c>
 80031a4:	230c      	movs	r3, #12
 80031a6:	0030      	movs	r0, r6
 80031a8:	6033      	str	r3, [r6, #0]
 80031aa:	f000 f851 	bl	8003250 <__malloc_unlock>
 80031ae:	e003      	b.n	80031b8 <_malloc_r+0x58>
 80031b0:	2d00      	cmp	r5, #0
 80031b2:	dade      	bge.n	8003172 <_malloc_r+0x12>
 80031b4:	230c      	movs	r3, #12
 80031b6:	6033      	str	r3, [r6, #0]
 80031b8:	2000      	movs	r0, #0
 80031ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031bc:	6823      	ldr	r3, [r4, #0]
 80031be:	1b5b      	subs	r3, r3, r5
 80031c0:	d419      	bmi.n	80031f6 <_malloc_r+0x96>
 80031c2:	2b0b      	cmp	r3, #11
 80031c4:	d903      	bls.n	80031ce <_malloc_r+0x6e>
 80031c6:	6023      	str	r3, [r4, #0]
 80031c8:	18e4      	adds	r4, r4, r3
 80031ca:	6025      	str	r5, [r4, #0]
 80031cc:	e003      	b.n	80031d6 <_malloc_r+0x76>
 80031ce:	6863      	ldr	r3, [r4, #4]
 80031d0:	42a2      	cmp	r2, r4
 80031d2:	d10e      	bne.n	80031f2 <_malloc_r+0x92>
 80031d4:	600b      	str	r3, [r1, #0]
 80031d6:	0030      	movs	r0, r6
 80031d8:	f000 f83a 	bl	8003250 <__malloc_unlock>
 80031dc:	0020      	movs	r0, r4
 80031de:	2207      	movs	r2, #7
 80031e0:	300b      	adds	r0, #11
 80031e2:	1d23      	adds	r3, r4, #4
 80031e4:	4390      	bics	r0, r2
 80031e6:	1ac2      	subs	r2, r0, r3
 80031e8:	4298      	cmp	r0, r3
 80031ea:	d0e6      	beq.n	80031ba <_malloc_r+0x5a>
 80031ec:	1a1b      	subs	r3, r3, r0
 80031ee:	50a3      	str	r3, [r4, r2]
 80031f0:	e7e3      	b.n	80031ba <_malloc_r+0x5a>
 80031f2:	6053      	str	r3, [r2, #4]
 80031f4:	e7ef      	b.n	80031d6 <_malloc_r+0x76>
 80031f6:	0022      	movs	r2, r4
 80031f8:	6864      	ldr	r4, [r4, #4]
 80031fa:	e7c2      	b.n	8003182 <_malloc_r+0x22>
 80031fc:	2303      	movs	r3, #3
 80031fe:	1cc4      	adds	r4, r0, #3
 8003200:	439c      	bics	r4, r3
 8003202:	42a0      	cmp	r0, r4
 8003204:	d0e1      	beq.n	80031ca <_malloc_r+0x6a>
 8003206:	1a21      	subs	r1, r4, r0
 8003208:	0030      	movs	r0, r6
 800320a:	f000 f807 	bl	800321c <_sbrk_r>
 800320e:	1c43      	adds	r3, r0, #1
 8003210:	d1db      	bne.n	80031ca <_malloc_r+0x6a>
 8003212:	e7c7      	b.n	80031a4 <_malloc_r+0x44>
 8003214:	20000090 	.word	0x20000090
 8003218:	20000094 	.word	0x20000094

0800321c <_sbrk_r>:
 800321c:	2300      	movs	r3, #0
 800321e:	b570      	push	{r4, r5, r6, lr}
 8003220:	4d06      	ldr	r5, [pc, #24]	; (800323c <_sbrk_r+0x20>)
 8003222:	0004      	movs	r4, r0
 8003224:	0008      	movs	r0, r1
 8003226:	602b      	str	r3, [r5, #0]
 8003228:	f7fd fafc 	bl	8000824 <_sbrk>
 800322c:	1c43      	adds	r3, r0, #1
 800322e:	d103      	bne.n	8003238 <_sbrk_r+0x1c>
 8003230:	682b      	ldr	r3, [r5, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	d000      	beq.n	8003238 <_sbrk_r+0x1c>
 8003236:	6023      	str	r3, [r4, #0]
 8003238:	bd70      	pop	{r4, r5, r6, pc}
 800323a:	46c0      	nop			; (mov r8, r8)
 800323c:	2000026c 	.word	0x2000026c

08003240 <__malloc_lock>:
 8003240:	b510      	push	{r4, lr}
 8003242:	4802      	ldr	r0, [pc, #8]	; (800324c <__malloc_lock+0xc>)
 8003244:	f000 f80c 	bl	8003260 <__retarget_lock_acquire_recursive>
 8003248:	bd10      	pop	{r4, pc}
 800324a:	46c0      	nop			; (mov r8, r8)
 800324c:	20000274 	.word	0x20000274

08003250 <__malloc_unlock>:
 8003250:	b510      	push	{r4, lr}
 8003252:	4802      	ldr	r0, [pc, #8]	; (800325c <__malloc_unlock+0xc>)
 8003254:	f000 f805 	bl	8003262 <__retarget_lock_release_recursive>
 8003258:	bd10      	pop	{r4, pc}
 800325a:	46c0      	nop			; (mov r8, r8)
 800325c:	20000274 	.word	0x20000274

08003260 <__retarget_lock_acquire_recursive>:
 8003260:	4770      	bx	lr

08003262 <__retarget_lock_release_recursive>:
 8003262:	4770      	bx	lr

08003264 <_init>:
 8003264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003266:	46c0      	nop			; (mov r8, r8)
 8003268:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800326a:	bc08      	pop	{r3}
 800326c:	469e      	mov	lr, r3
 800326e:	4770      	bx	lr

08003270 <_fini>:
 8003270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003276:	bc08      	pop	{r3}
 8003278:	469e      	mov	lr, r3
 800327a:	4770      	bx	lr
