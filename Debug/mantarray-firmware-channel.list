
mantarray-firmware-channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000381c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003948  08003948  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003948  08003948  00013948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003950  08003950  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003950  08003950  00013950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003954  08003954  00013954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  20000010  08003964  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000360  08003964  00020360  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011fb4  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023c8  00000000  00000000  00031fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d0  00000000  00000000  000343b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00035480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001569d  00000000  00000000  00036468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e23  00000000  00000000  0004bb05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00084acb  00000000  00000000  0005e928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e33f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  000e3448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080038c4 	.word	0x080038c4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080038c4 	.word	0x080038c4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004a0:	f000 fcdc 	bl	8000e5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a4:	f000 f812 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004a8:	f000 fa9e 	bl	80009e8 <MX_GPIO_Init>
  MX_I2C2_Init();
 80004ac:	f000 f8f8 	bl	80006a0 <MX_I2C2_Init>
  MX_SPI1_Init();
 80004b0:	f000 f93c 	bl	800072c <MX_SPI1_Init>
  MX_ADC_Init();
 80004b4:	f000 f880 	bl	80005b8 <MX_ADC_Init>
  MX_USART2_UART_Init();
 80004b8:	f000 fa62 	bl	8000980 <MX_USART2_UART_Init>
  MX_TIM6_Init();
 80004bc:	f000 f96e 	bl	800079c <MX_TIM6_Init>
  MX_TIM21_Init();
 80004c0:	f000 f9a8 	bl	8000814 <MX_TIM21_Init>
  MX_TIM22_Init();
 80004c4:	f000 fa04 	bl	80008d0 <MX_TIM22_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <main+0x2c>
	...

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b590      	push	{r4, r7, lr}
 80004ce:	b09d      	sub	sp, #116	; 0x74
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	2438      	movs	r4, #56	; 0x38
 80004d4:	193b      	adds	r3, r7, r4
 80004d6:	0018      	movs	r0, r3
 80004d8:	2338      	movs	r3, #56	; 0x38
 80004da:	001a      	movs	r2, r3
 80004dc:	2100      	movs	r1, #0
 80004de:	f003 f9e9 	bl	80038b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e2:	2324      	movs	r3, #36	; 0x24
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	0018      	movs	r0, r3
 80004e8:	2314      	movs	r3, #20
 80004ea:	001a      	movs	r2, r3
 80004ec:	2100      	movs	r1, #0
 80004ee:	f003 f9e1 	bl	80038b4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004f2:	1d3b      	adds	r3, r7, #4
 80004f4:	0018      	movs	r0, r3
 80004f6:	2320      	movs	r3, #32
 80004f8:	001a      	movs	r2, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	f003 f9da 	bl	80038b4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000500:	4b2b      	ldr	r3, [pc, #172]	; (80005b0 <SystemClock_Config+0xe4>)
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	4a2b      	ldr	r2, [pc, #172]	; (80005b4 <SystemClock_Config+0xe8>)
 8000506:	401a      	ands	r2, r3
 8000508:	4b29      	ldr	r3, [pc, #164]	; (80005b0 <SystemClock_Config+0xe4>)
 800050a:	2180      	movs	r1, #128	; 0x80
 800050c:	0109      	lsls	r1, r1, #4
 800050e:	430a      	orrs	r2, r1
 8000510:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000512:	0021      	movs	r1, r4
 8000514:	187b      	adds	r3, r7, r1
 8000516:	2222      	movs	r2, #34	; 0x22
 8000518:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800051a:	187b      	adds	r3, r7, r1
 800051c:	2201      	movs	r2, #1
 800051e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000520:	187b      	adds	r3, r7, r1
 8000522:	2210      	movs	r2, #16
 8000524:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000526:	187b      	adds	r3, r7, r1
 8000528:	2201      	movs	r2, #1
 800052a:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800052c:	187b      	adds	r3, r7, r1
 800052e:	2202      	movs	r2, #2
 8000530:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000532:	187b      	adds	r3, r7, r1
 8000534:	2200      	movs	r2, #0
 8000536:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000538:	187b      	adds	r3, r7, r1
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	02d2      	lsls	r2, r2, #11
 800053e:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	03d2      	lsls	r2, r2, #15
 8000546:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000548:	187b      	adds	r3, r7, r1
 800054a:	0018      	movs	r0, r3
 800054c:	f001 fa9e 	bl	8001a8c <HAL_RCC_OscConfig>
 8000550:	1e03      	subs	r3, r0, #0
 8000552:	d001      	beq.n	8000558 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000554:	f000 fade 	bl	8000b14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000558:	2124      	movs	r1, #36	; 0x24
 800055a:	187b      	adds	r3, r7, r1
 800055c:	220f      	movs	r2, #15
 800055e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000560:	187b      	adds	r3, r7, r1
 8000562:	2203      	movs	r2, #3
 8000564:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	187b      	adds	r3, r7, r1
 8000568:	2200      	movs	r2, #0
 800056a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056c:	187b      	adds	r3, r7, r1
 800056e:	2200      	movs	r2, #0
 8000570:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000572:	187b      	adds	r3, r7, r1
 8000574:	2200      	movs	r2, #0
 8000576:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000578:	187b      	adds	r3, r7, r1
 800057a:	2101      	movs	r1, #1
 800057c:	0018      	movs	r0, r3
 800057e:	f001 fe49 	bl	8002214 <HAL_RCC_ClockConfig>
 8000582:	1e03      	subs	r3, r0, #0
 8000584:	d001      	beq.n	800058a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000586:	f000 fac5 	bl	8000b14 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2202      	movs	r2, #2
 800058e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000590:	1d3b      	adds	r3, r7, #4
 8000592:	2200      	movs	r2, #0
 8000594:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000596:	1d3b      	adds	r3, r7, #4
 8000598:	0018      	movs	r0, r3
 800059a:	f002 f85f 	bl	800265c <HAL_RCCEx_PeriphCLKConfig>
 800059e:	1e03      	subs	r3, r0, #0
 80005a0:	d001      	beq.n	80005a6 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80005a2:	f000 fab7 	bl	8000b14 <Error_Handler>
  }
}
 80005a6:	46c0      	nop			; (mov r8, r8)
 80005a8:	46bd      	mov	sp, r7
 80005aa:	b01d      	add	sp, #116	; 0x74
 80005ac:	bd90      	pop	{r4, r7, pc}
 80005ae:	46c0      	nop			; (mov r8, r8)
 80005b0:	40007000 	.word	0x40007000
 80005b4:	ffffe7ff 	.word	0xffffe7ff

080005b8 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005be:	003b      	movs	r3, r7
 80005c0:	0018      	movs	r0, r3
 80005c2:	2308      	movs	r3, #8
 80005c4:	001a      	movs	r2, r3
 80005c6:	2100      	movs	r1, #0
 80005c8:	f003 f974 	bl	80038b4 <memset>
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80005cc:	4b30      	ldr	r3, [pc, #192]	; (8000690 <MX_ADC_Init+0xd8>)
 80005ce:	4a31      	ldr	r2, [pc, #196]	; (8000694 <MX_ADC_Init+0xdc>)
 80005d0:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80005d2:	4b2f      	ldr	r3, [pc, #188]	; (8000690 <MX_ADC_Init+0xd8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80005d8:	4b2d      	ldr	r3, [pc, #180]	; (8000690 <MX_ADC_Init+0xd8>)
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	05d2      	lsls	r2, r2, #23
 80005de:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80005e0:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <MX_ADC_Init+0xd8>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80005e6:	4b2a      	ldr	r3, [pc, #168]	; (8000690 <MX_ADC_Init+0xd8>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80005ec:	4b28      	ldr	r3, [pc, #160]	; (8000690 <MX_ADC_Init+0xd8>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b27      	ldr	r3, [pc, #156]	; (8000690 <MX_ADC_Init+0xd8>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <MX_ADC_Init+0xd8>)
 80005fa:	2220      	movs	r2, #32
 80005fc:	2100      	movs	r1, #0
 80005fe:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <MX_ADC_Init+0xd8>)
 8000602:	2221      	movs	r2, #33	; 0x21
 8000604:	2100      	movs	r1, #0
 8000606:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000608:	4b21      	ldr	r3, [pc, #132]	; (8000690 <MX_ADC_Init+0xd8>)
 800060a:	2200      	movs	r2, #0
 800060c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800060e:	4b20      	ldr	r3, [pc, #128]	; (8000690 <MX_ADC_Init+0xd8>)
 8000610:	22c2      	movs	r2, #194	; 0xc2
 8000612:	32ff      	adds	r2, #255	; 0xff
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <MX_ADC_Init+0xd8>)
 8000618:	222c      	movs	r2, #44	; 0x2c
 800061a:	2100      	movs	r1, #0
 800061c:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <MX_ADC_Init+0xd8>)
 8000620:	2204      	movs	r2, #4
 8000622:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <MX_ADC_Init+0xd8>)
 8000626:	2200      	movs	r2, #0
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <MX_ADC_Init+0xd8>)
 800062c:	2200      	movs	r2, #0
 800062e:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <MX_ADC_Init+0xd8>)
 8000632:	2200      	movs	r2, #0
 8000634:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <MX_ADC_Init+0xd8>)
 8000638:	2200      	movs	r2, #0
 800063a:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800063c:	4b14      	ldr	r3, [pc, #80]	; (8000690 <MX_ADC_Init+0xd8>)
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fc7c 	bl	8000f3c <HAL_ADC_Init>
 8000644:	1e03      	subs	r3, r0, #0
 8000646:	d001      	beq.n	800064c <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8000648:	f000 fa64 	bl	8000b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800064c:	003b      	movs	r3, r7
 800064e:	4a12      	ldr	r2, [pc, #72]	; (8000698 <MX_ADC_Init+0xe0>)
 8000650:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000652:	003b      	movs	r3, r7
 8000654:	2280      	movs	r2, #128	; 0x80
 8000656:	0152      	lsls	r2, r2, #5
 8000658:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800065a:	003a      	movs	r2, r7
 800065c:	4b0c      	ldr	r3, [pc, #48]	; (8000690 <MX_ADC_Init+0xd8>)
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f000 fddf 	bl	8001224 <HAL_ADC_ConfigChannel>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 800066a:	f000 fa53 	bl	8000b14 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 800066e:	003b      	movs	r3, r7
 8000670:	4a0a      	ldr	r2, [pc, #40]	; (800069c <MX_ADC_Init+0xe4>)
 8000672:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000674:	003a      	movs	r2, r7
 8000676:	4b06      	ldr	r3, [pc, #24]	; (8000690 <MX_ADC_Init+0xd8>)
 8000678:	0011      	movs	r1, r2
 800067a:	0018      	movs	r0, r3
 800067c:	f000 fdd2 	bl	8001224 <HAL_ADC_ConfigChannel>
 8000680:	1e03      	subs	r3, r0, #0
 8000682:	d001      	beq.n	8000688 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8000684:	f000 fa46 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000688:	46c0      	nop			; (mov r8, r8)
 800068a:	46bd      	mov	sp, r7
 800068c:	b002      	add	sp, #8
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200002c0 	.word	0x200002c0
 8000694:	40012400 	.word	0x40012400
 8000698:	48040000 	.word	0x48040000
 800069c:	44020000 	.word	0x44020000

080006a0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80006a4:	4b1e      	ldr	r3, [pc, #120]	; (8000720 <MX_I2C2_Init+0x80>)
 80006a6:	4a1f      	ldr	r2, [pc, #124]	; (8000724 <MX_I2C2_Init+0x84>)
 80006a8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100413;
 80006aa:	4b1d      	ldr	r3, [pc, #116]	; (8000720 <MX_I2C2_Init+0x80>)
 80006ac:	4a1e      	ldr	r2, [pc, #120]	; (8000728 <MX_I2C2_Init+0x88>)
 80006ae:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 170;
 80006b0:	4b1b      	ldr	r3, [pc, #108]	; (8000720 <MX_I2C2_Init+0x80>)
 80006b2:	22aa      	movs	r2, #170	; 0xaa
 80006b4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b6:	4b1a      	ldr	r3, [pc, #104]	; (8000720 <MX_I2C2_Init+0x80>)
 80006b8:	2201      	movs	r2, #1
 80006ba:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006bc:	4b18      	ldr	r3, [pc, #96]	; (8000720 <MX_I2C2_Init+0x80>)
 80006be:	2200      	movs	r2, #0
 80006c0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80006c2:	4b17      	ldr	r3, [pc, #92]	; (8000720 <MX_I2C2_Init+0x80>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006c8:	4b15      	ldr	r3, [pc, #84]	; (8000720 <MX_I2C2_Init+0x80>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006ce:	4b14      	ldr	r3, [pc, #80]	; (8000720 <MX_I2C2_Init+0x80>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80006d4:	4b12      	ldr	r3, [pc, #72]	; (8000720 <MX_I2C2_Init+0x80>)
 80006d6:	2280      	movs	r2, #128	; 0x80
 80006d8:	0292      	lsls	r2, r2, #10
 80006da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <MX_I2C2_Init+0x80>)
 80006de:	0018      	movs	r0, r3
 80006e0:	f001 f88e 	bl	8001800 <HAL_I2C_Init>
 80006e4:	1e03      	subs	r3, r0, #0
 80006e6:	d001      	beq.n	80006ec <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80006e8:	f000 fa14 	bl	8000b14 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80006ec:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <MX_I2C2_Init+0x80>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 f91b 	bl	800192c <HAL_I2CEx_ConfigAnalogFilter>
 80006f6:	1e03      	subs	r3, r0, #0
 80006f8:	d001      	beq.n	80006fe <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 80006fa:	f000 fa0b 	bl	8000b14 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80006fe:	4b08      	ldr	r3, [pc, #32]	; (8000720 <MX_I2C2_Init+0x80>)
 8000700:	2100      	movs	r1, #0
 8000702:	0018      	movs	r0, r3
 8000704:	f001 f95e 	bl	80019c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000708:	1e03      	subs	r3, r0, #0
 800070a:	d001      	beq.n	8000710 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800070c:	f000 fa02 	bl	8000b14 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	019b      	lsls	r3, r3, #6
 8000714:	0018      	movs	r0, r3
 8000716:	f001 f9a1 	bl	8001a5c <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	200000d0 	.word	0x200000d0
 8000724:	40005800 	.word	0x40005800
 8000728:	00100413 	.word	0x00100413

0800072c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000730:	4b18      	ldr	r3, [pc, #96]	; (8000794 <MX_SPI1_Init+0x68>)
 8000732:	4a19      	ldr	r2, [pc, #100]	; (8000798 <MX_SPI1_Init+0x6c>)
 8000734:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000736:	4b17      	ldr	r3, [pc, #92]	; (8000794 <MX_SPI1_Init+0x68>)
 8000738:	2282      	movs	r2, #130	; 0x82
 800073a:	0052      	lsls	r2, r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800073e:	4b15      	ldr	r3, [pc, #84]	; (8000794 <MX_SPI1_Init+0x68>)
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000744:	4b13      	ldr	r3, [pc, #76]	; (8000794 <MX_SPI1_Init+0x68>)
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800074a:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MX_SPI1_Init+0x68>)
 800074c:	2202      	movs	r2, #2
 800074e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000750:	4b10      	ldr	r3, [pc, #64]	; (8000794 <MX_SPI1_Init+0x68>)
 8000752:	2201      	movs	r2, #1
 8000754:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <MX_SPI1_Init+0x68>)
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800075e:	4b0d      	ldr	r3, [pc, #52]	; (8000794 <MX_SPI1_Init+0x68>)
 8000760:	2210      	movs	r2, #16
 8000762:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <MX_SPI1_Init+0x68>)
 8000766:	2200      	movs	r2, #0
 8000768:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800076a:	4b0a      	ldr	r3, [pc, #40]	; (8000794 <MX_SPI1_Init+0x68>)
 800076c:	2200      	movs	r2, #0
 800076e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <MX_SPI1_Init+0x68>)
 8000772:	2200      	movs	r2, #0
 8000774:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000776:	4b07      	ldr	r3, [pc, #28]	; (8000794 <MX_SPI1_Init+0x68>)
 8000778:	2207      	movs	r2, #7
 800077a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <MX_SPI1_Init+0x68>)
 800077e:	0018      	movs	r0, r3
 8000780:	f002 f8b2 	bl	80028e8 <HAL_SPI_Init>
 8000784:	1e03      	subs	r3, r0, #0
 8000786:	d001      	beq.n	800078c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000788:	f000 f9c4 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800078c:	46c0      	nop			; (mov r8, r8)
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	200001e4 	.word	0x200001e4
 8000798:	40013000 	.word	0x40013000

0800079c <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007a2:	003b      	movs	r3, r7
 80007a4:	0018      	movs	r0, r3
 80007a6:	2308      	movs	r3, #8
 80007a8:	001a      	movs	r2, r3
 80007aa:	2100      	movs	r1, #0
 80007ac:	f003 f882 	bl	80038b4 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007b0:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <MX_TIM6_Init+0x70>)
 80007b4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 31;
 80007b6:	4b14      	ldr	r3, [pc, #80]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007b8:	221f      	movs	r2, #31
 80007ba:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007be:	2200      	movs	r2, #0
 80007c0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 80007c2:	4b11      	ldr	r3, [pc, #68]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007c4:	4a12      	ldr	r2, [pc, #72]	; (8000810 <MX_TIM6_Init+0x74>)
 80007c6:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	4b0f      	ldr	r3, [pc, #60]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007ce:	4b0e      	ldr	r3, [pc, #56]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007d0:	0018      	movs	r0, r3
 80007d2:	f002 f91d 	bl	8002a10 <HAL_TIM_Base_Init>
 80007d6:	1e03      	subs	r3, r0, #0
 80007d8:	d001      	beq.n	80007de <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 80007da:	f000 f99b 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007de:	003b      	movs	r3, r7
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	003b      	movs	r3, r7
 80007e6:	2200      	movs	r2, #0
 80007e8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007ea:	003a      	movs	r2, r7
 80007ec:	4b06      	ldr	r3, [pc, #24]	; (8000808 <MX_TIM6_Init+0x6c>)
 80007ee:	0011      	movs	r1, r2
 80007f0:	0018      	movs	r0, r3
 80007f2:	f002 fb05 	bl	8002e00 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	1e03      	subs	r3, r0, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 80007fa:	f000 f98b 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80007fe:	46c0      	nop			; (mov r8, r8)
 8000800:	46bd      	mov	sp, r7
 8000802:	b002      	add	sp, #8
 8000804:	bd80      	pop	{r7, pc}
 8000806:	46c0      	nop			; (mov r8, r8)
 8000808:	200001a4 	.word	0x200001a4
 800080c:	40001000 	.word	0x40001000
 8000810:	0000ffff 	.word	0x0000ffff

08000814 <MX_TIM21_Init>:
  * @brief TIM21 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM21_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800081a:	2308      	movs	r3, #8
 800081c:	18fb      	adds	r3, r7, r3
 800081e:	0018      	movs	r0, r3
 8000820:	2310      	movs	r3, #16
 8000822:	001a      	movs	r2, r3
 8000824:	2100      	movs	r1, #0
 8000826:	f003 f845 	bl	80038b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800082a:	003b      	movs	r3, r7
 800082c:	0018      	movs	r0, r3
 800082e:	2308      	movs	r3, #8
 8000830:	001a      	movs	r2, r3
 8000832:	2100      	movs	r1, #0
 8000834:	f003 f83e 	bl	80038b4 <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <MX_TIM21_Init+0xb0>)
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <MX_TIM21_Init+0xb4>)
 800083c:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 800083e:	4b21      	ldr	r3, [pc, #132]	; (80008c4 <MX_TIM21_Init+0xb0>)
 8000840:	2200      	movs	r2, #0
 8000842:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000844:	4b1f      	ldr	r3, [pc, #124]	; (80008c4 <MX_TIM21_Init+0xb0>)
 8000846:	2200      	movs	r2, #0
 8000848:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 800084a:	4b1e      	ldr	r3, [pc, #120]	; (80008c4 <MX_TIM21_Init+0xb0>)
 800084c:	4a1f      	ldr	r2, [pc, #124]	; (80008cc <MX_TIM21_Init+0xb8>)
 800084e:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000850:	4b1c      	ldr	r3, [pc, #112]	; (80008c4 <MX_TIM21_Init+0xb0>)
 8000852:	2200      	movs	r2, #0
 8000854:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000856:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_TIM21_Init+0xb0>)
 8000858:	2280      	movs	r2, #128	; 0x80
 800085a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800085c:	4b19      	ldr	r3, [pc, #100]	; (80008c4 <MX_TIM21_Init+0xb0>)
 800085e:	0018      	movs	r0, r3
 8000860:	f002 f8d6 	bl	8002a10 <HAL_TIM_Base_Init>
 8000864:	1e03      	subs	r3, r0, #0
 8000866:	d001      	beq.n	800086c <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000868:	f000 f954 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 800086c:	2108      	movs	r1, #8
 800086e:	187b      	adds	r3, r7, r1
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	0192      	lsls	r2, r2, #6
 8000874:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000876:	187b      	adds	r3, r7, r1
 8000878:	2200      	movs	r2, #0
 800087a:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 800087c:	187b      	adds	r3, r7, r1
 800087e:	2200      	movs	r2, #0
 8000880:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2200      	movs	r2, #0
 8000886:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000888:	187a      	adds	r2, r7, r1
 800088a:	4b0e      	ldr	r3, [pc, #56]	; (80008c4 <MX_TIM21_Init+0xb0>)
 800088c:	0011      	movs	r1, r2
 800088e:	0018      	movs	r0, r3
 8000890:	f002 f8fe 	bl	8002a90 <HAL_TIM_ConfigClockSource>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8000898:	f000 f93c 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089c:	003b      	movs	r3, r7
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 80008a8:	003a      	movs	r2, r7
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <MX_TIM21_Init+0xb0>)
 80008ac:	0011      	movs	r1, r2
 80008ae:	0018      	movs	r0, r3
 80008b0:	f002 faa6 	bl	8002e00 <HAL_TIMEx_MasterConfigSynchronization>
 80008b4:	1e03      	subs	r3, r0, #0
 80008b6:	d001      	beq.n	80008bc <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 80008b8:	f000 f92c 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 80008bc:	46c0      	nop			; (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b006      	add	sp, #24
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	2000031c 	.word	0x2000031c
 80008c8:	40010800 	.word	0x40010800
 80008cc:	0000ffff 	.word	0x0000ffff

080008d0 <MX_TIM22_Init>:
  * @brief TIM22 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM22_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM22_Init 0 */

  /* USER CODE END TIM22_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008d6:	2308      	movs	r3, #8
 80008d8:	18fb      	adds	r3, r7, r3
 80008da:	0018      	movs	r0, r3
 80008dc:	2310      	movs	r3, #16
 80008de:	001a      	movs	r2, r3
 80008e0:	2100      	movs	r1, #0
 80008e2:	f002 ffe7 	bl	80038b4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e6:	003b      	movs	r3, r7
 80008e8:	0018      	movs	r0, r3
 80008ea:	2308      	movs	r3, #8
 80008ec:	001a      	movs	r2, r3
 80008ee:	2100      	movs	r1, #0
 80008f0:	f002 ffe0 	bl	80038b4 <memset>

  /* USER CODE BEGIN TIM22_Init 1 */

  /* USER CODE END TIM22_Init 1 */
  htim22.Instance = TIM22;
 80008f4:	4b1e      	ldr	r3, [pc, #120]	; (8000970 <MX_TIM22_Init+0xa0>)
 80008f6:	4a1f      	ldr	r2, [pc, #124]	; (8000974 <MX_TIM22_Init+0xa4>)
 80008f8:	601a      	str	r2, [r3, #0]
  htim22.Init.Prescaler = 31999;
 80008fa:	4b1d      	ldr	r3, [pc, #116]	; (8000970 <MX_TIM22_Init+0xa0>)
 80008fc:	4a1e      	ldr	r2, [pc, #120]	; (8000978 <MX_TIM22_Init+0xa8>)
 80008fe:	605a      	str	r2, [r3, #4]
  htim22.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <MX_TIM22_Init+0xa0>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  htim22.Init.Period = 9999;
 8000906:	4b1a      	ldr	r3, [pc, #104]	; (8000970 <MX_TIM22_Init+0xa0>)
 8000908:	4a1c      	ldr	r2, [pc, #112]	; (800097c <MX_TIM22_Init+0xac>)
 800090a:	60da      	str	r2, [r3, #12]
  htim22.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090c:	4b18      	ldr	r3, [pc, #96]	; (8000970 <MX_TIM22_Init+0xa0>)
 800090e:	2200      	movs	r2, #0
 8000910:	611a      	str	r2, [r3, #16]
  htim22.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000912:	4b17      	ldr	r3, [pc, #92]	; (8000970 <MX_TIM22_Init+0xa0>)
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim22) != HAL_OK)
 8000918:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_TIM22_Init+0xa0>)
 800091a:	0018      	movs	r0, r3
 800091c:	f002 f878 	bl	8002a10 <HAL_TIM_Base_Init>
 8000920:	1e03      	subs	r3, r0, #0
 8000922:	d001      	beq.n	8000928 <MX_TIM22_Init+0x58>
  {
    Error_Handler();
 8000924:	f000 f8f6 	bl	8000b14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000928:	2108      	movs	r1, #8
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0152      	lsls	r2, r2, #5
 8000930:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim22, &sClockSourceConfig) != HAL_OK)
 8000932:	187a      	adds	r2, r7, r1
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_TIM22_Init+0xa0>)
 8000936:	0011      	movs	r1, r2
 8000938:	0018      	movs	r0, r3
 800093a:	f002 f8a9 	bl	8002a90 <HAL_TIM_ConfigClockSource>
 800093e:	1e03      	subs	r3, r0, #0
 8000940:	d001      	beq.n	8000946 <MX_TIM22_Init+0x76>
  {
    Error_Handler();
 8000942:	f000 f8e7 	bl	8000b14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000946:	003b      	movs	r3, r7
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	003b      	movs	r3, r7
 800094e:	2200      	movs	r2, #0
 8000950:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim22, &sMasterConfig) != HAL_OK)
 8000952:	003a      	movs	r2, r7
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <MX_TIM22_Init+0xa0>)
 8000956:	0011      	movs	r1, r2
 8000958:	0018      	movs	r0, r3
 800095a:	f002 fa51 	bl	8002e00 <HAL_TIMEx_MasterConfigSynchronization>
 800095e:	1e03      	subs	r3, r0, #0
 8000960:	d001      	beq.n	8000966 <MX_TIM22_Init+0x96>
  {
    Error_Handler();
 8000962:	f000 f8d7 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM22_Init 2 */

  /* USER CODE END TIM22_Init 2 */

}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	46bd      	mov	sp, r7
 800096a:	b006      	add	sp, #24
 800096c:	bd80      	pop	{r7, pc}
 800096e:	46c0      	nop			; (mov r8, r8)
 8000970:	2000011c 	.word	0x2000011c
 8000974:	40011400 	.word	0x40011400
 8000978:	00007cff 	.word	0x00007cff
 800097c:	0000270f 	.word	0x0000270f

08000980 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000984:	4b16      	ldr	r3, [pc, #88]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 8000986:	4a17      	ldr	r2, [pc, #92]	; (80009e4 <MX_USART2_UART_Init+0x64>)
 8000988:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800098a:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 800098c:	22e1      	movs	r2, #225	; 0xe1
 800098e:	0252      	lsls	r2, r2, #9
 8000990:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000992:	4b13      	ldr	r3, [pc, #76]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 8000994:	2200      	movs	r2, #0
 8000996:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000998:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 800099a:	2200      	movs	r2, #0
 800099c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800099e:	4b10      	ldr	r3, [pc, #64]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX;
 80009a4:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009a6:	2208      	movs	r2, #8
 80009a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009aa:	4b0d      	ldr	r3, [pc, #52]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009b6:	4b0a      	ldr	r3, [pc, #40]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_DMADISABLEONERROR_INIT;
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009be:	2220      	movs	r2, #32
 80009c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.DMADisableonRxError = UART_ADVFEATURE_DMA_DISABLEONRXERROR;
 80009c2:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009c4:	2280      	movs	r2, #128	; 0x80
 80009c6:	0192      	lsls	r2, r2, #6
 80009c8:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_HalfDuplex_Init(&huart2) != HAL_OK)
 80009ca:	4b05      	ldr	r3, [pc, #20]	; (80009e0 <MX_USART2_UART_Init+0x60>)
 80009cc:	0018      	movs	r0, r3
 80009ce:	f002 fa6f 	bl	8002eb0 <HAL_HalfDuplex_Init>
 80009d2:	1e03      	subs	r3, r0, #0
 80009d4:	d001      	beq.n	80009da <MX_USART2_UART_Init+0x5a>
  {
    Error_Handler();
 80009d6:	f000 f89d 	bl	8000b14 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	2000023c 	.word	0x2000023c
 80009e4:	40004400 	.word	0x40004400

080009e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009e8:	b590      	push	{r4, r7, lr}
 80009ea:	b089      	sub	sp, #36	; 0x24
 80009ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ee:	240c      	movs	r4, #12
 80009f0:	193b      	adds	r3, r7, r4
 80009f2:	0018      	movs	r0, r3
 80009f4:	2314      	movs	r3, #20
 80009f6:	001a      	movs	r2, r3
 80009f8:	2100      	movs	r1, #0
 80009fa:	f002 ff5b 	bl	80038b4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b40      	ldr	r3, [pc, #256]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a02:	4b3f      	ldr	r3, [pc, #252]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	430a      	orrs	r2, r1
 8000a08:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a0a:	4b3d      	ldr	r3, [pc, #244]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b3a      	ldr	r3, [pc, #232]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a1a:	4b39      	ldr	r3, [pc, #228]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a1c:	2102      	movs	r1, #2
 8000a1e:	430a      	orrs	r2, r1
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a22:	4b37      	ldr	r3, [pc, #220]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a26:	2202      	movs	r2, #2
 8000a28:	4013      	ands	r3, r2
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a2e:	4b34      	ldr	r3, [pc, #208]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000a32:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a34:	2104      	movs	r1, #4
 8000a36:	430a      	orrs	r2, r1
 8000a38:	62da      	str	r2, [r3, #44]	; 0x2c
 8000a3a:	4b31      	ldr	r3, [pc, #196]	; (8000b00 <MX_GPIO_Init+0x118>)
 8000a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a3e:	2204      	movs	r2, #4
 8000a40:	4013      	ands	r3, r2
 8000a42:	603b      	str	r3, [r7, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 8000a46:	23c0      	movs	r3, #192	; 0xc0
 8000a48:	021b      	lsls	r3, r3, #8
 8000a4a:	482e      	ldr	r0, [pc, #184]	; (8000b04 <MX_GPIO_Init+0x11c>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	0019      	movs	r1, r3
 8000a50:	f000 feb8 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 8000a54:	23e0      	movs	r3, #224	; 0xe0
 8000a56:	0059      	lsls	r1, r3, #1
 8000a58:	23a0      	movs	r3, #160	; 0xa0
 8000a5a:	05db      	lsls	r3, r3, #23
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 feb0 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUS_C0_Pin BUS_C2_Pin BUS_C1_Pin programmer_TX_line_Pin
                           programmer_RX_line_Pin BUS_CLK_Pin mag_int_c_Pin mag_int_b_Pin */
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 8000a64:	193b      	adds	r3, r7, r4
 8000a66:	4a28      	ldr	r2, [pc, #160]	; (8000b08 <MX_GPIO_Init+0x120>)
 8000a68:	601a      	str	r2, [r3, #0]
                          |programmer_RX_line_Pin|BUS_CLK_Pin|mag_int_c_Pin|mag_int_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a6a:	193b      	adds	r3, r7, r4
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	193b      	adds	r3, r7, r4
 8000a72:	2200      	movs	r2, #0
 8000a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a76:	193a      	adds	r2, r7, r4
 8000a78:	23a0      	movs	r3, #160	; 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	0011      	movs	r1, r2
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 fd2a 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : BUS4_Pin BUS7_Pin BUS3_Pin BUS6_Pin
                           mag_int_a_Pin BUS1_Pin BUS5_Pin BUS0_Pin
                           BUS2_Pin */
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	4a21      	ldr	r2, [pc, #132]	; (8000b0c <MX_GPIO_Init+0x124>)
 8000a88:	601a      	str	r2, [r3, #0]
                          |mag_int_a_Pin|BUS1_Pin|BUS5_Pin|BUS0_Pin
                          |BUS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a8a:	193b      	adds	r3, r7, r4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a90:	193b      	adds	r3, r7, r4
 8000a92:	2200      	movs	r2, #0
 8000a94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a96:	193b      	adds	r3, r7, r4
 8000a98:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <MX_GPIO_Init+0x128>)
 8000a9a:	0019      	movs	r1, r3
 8000a9c:	0010      	movs	r0, r2
 8000a9e:	f000 fd1b 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CHN_OUT_RST_Pin CHN_OUT_BT0_Pin */
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 8000aa2:	0021      	movs	r1, r4
 8000aa4:	187b      	adds	r3, r7, r1
 8000aa6:	22c0      	movs	r2, #192	; 0xc0
 8000aa8:	0212      	lsls	r2, r2, #8
 8000aaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aac:	000c      	movs	r4, r1
 8000aae:	193b      	adds	r3, r7, r4
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aba:	193b      	adds	r3, r7, r4
 8000abc:	2200      	movs	r2, #0
 8000abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ac0:	193b      	adds	r3, r7, r4
 8000ac2:	4a10      	ldr	r2, [pc, #64]	; (8000b04 <MX_GPIO_Init+0x11c>)
 8000ac4:	0019      	movs	r1, r3
 8000ac6:	0010      	movs	r0, r2
 8000ac8:	f000 fd06 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI_C_CS_Pin SPI_A_CS_Pin SPI_B_CS_Pin */
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 8000acc:	0021      	movs	r1, r4
 8000ace:	187b      	adds	r3, r7, r1
 8000ad0:	22e0      	movs	r2, #224	; 0xe0
 8000ad2:	0052      	lsls	r2, r2, #1
 8000ad4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad6:	187b      	adds	r3, r7, r1
 8000ad8:	2201      	movs	r2, #1
 8000ada:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	187b      	adds	r3, r7, r1
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	187a      	adds	r2, r7, r1
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fcf1 	bl	80014d8 <HAL_GPIO_Init>

}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b009      	add	sp, #36	; 0x24
 8000afc:	bd90      	pop	{r4, r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000
 8000b04:	50000800 	.word	0x50000800
 8000b08:	0000e619 	.word	0x0000e619
 8000b0c:	000001ff 	.word	0x000001ff
 8000b10:	50000400 	.word	0x50000400

08000b14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b1c:	e7fe      	b.n	8000b1c <Error_Handler+0x8>
	...

08000b20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b24:	4b07      	ldr	r3, [pc, #28]	; (8000b44 <HAL_MspInit+0x24>)
 8000b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x24>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	430a      	orrs	r2, r1
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b30:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <HAL_MspInit+0x24>)
 8000b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_MspInit+0x24>)
 8000b36:	2180      	movs	r1, #128	; 0x80
 8000b38:	0549      	lsls	r1, r1, #21
 8000b3a:	430a      	orrs	r2, r1
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b3e:	46c0      	nop			; (mov r8, r8)
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40021000 	.word	0x40021000

08000b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hadc->Instance==ADC1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a06      	ldr	r2, [pc, #24]	; (8000b70 <HAL_ADC_MspInit+0x28>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d106      	bne.n	8000b68 <HAL_ADC_MspInit+0x20>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b5a:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <HAL_ADC_MspInit+0x2c>)
 8000b5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b5e:	4b05      	ldr	r3, [pc, #20]	; (8000b74 <HAL_ADC_MspInit+0x2c>)
 8000b60:	2180      	movs	r1, #128	; 0x80
 8000b62:	0089      	lsls	r1, r1, #2
 8000b64:	430a      	orrs	r2, r1
 8000b66:	635a      	str	r2, [r3, #52]	; 0x34
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b68:	46c0      	nop			; (mov r8, r8)
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	b002      	add	sp, #8
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	40012400 	.word	0x40012400
 8000b74:	40021000 	.word	0x40021000

08000b78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b80:	240c      	movs	r4, #12
 8000b82:	193b      	adds	r3, r7, r4
 8000b84:	0018      	movs	r0, r3
 8000b86:	2314      	movs	r3, #20
 8000b88:	001a      	movs	r2, r3
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	f002 fe92 	bl	80038b4 <memset>
  if(hi2c->Instance==I2C2)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a18      	ldr	r2, [pc, #96]	; (8000bf8 <HAL_I2C_MspInit+0x80>)
 8000b96:	4293      	cmp	r3, r2
 8000b98:	d129      	bne.n	8000bee <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9a:	4b18      	ldr	r3, [pc, #96]	; (8000bfc <HAL_I2C_MspInit+0x84>)
 8000b9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b9e:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <HAL_I2C_MspInit+0x84>)
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	430a      	orrs	r2, r1
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba6:	4b15      	ldr	r3, [pc, #84]	; (8000bfc <HAL_I2C_MspInit+0x84>)
 8000ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000baa:	2202      	movs	r2, #2
 8000bac:	4013      	ands	r3, r2
 8000bae:	60bb      	str	r3, [r7, #8]
 8000bb0:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000bb2:	193b      	adds	r3, r7, r4
 8000bb4:	22c0      	movs	r2, #192	; 0xc0
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bba:	0021      	movs	r1, r4
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2212      	movs	r2, #18
 8000bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2203      	movs	r2, #3
 8000bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2206      	movs	r2, #6
 8000bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	4a0a      	ldr	r2, [pc, #40]	; (8000c00 <HAL_I2C_MspInit+0x88>)
 8000bd8:	0019      	movs	r1, r3
 8000bda:	0010      	movs	r0, r2
 8000bdc:	f000 fc7c 	bl	80014d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000be0:	4b06      	ldr	r3, [pc, #24]	; (8000bfc <HAL_I2C_MspInit+0x84>)
 8000be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000be4:	4b05      	ldr	r3, [pc, #20]	; (8000bfc <HAL_I2C_MspInit+0x84>)
 8000be6:	2180      	movs	r1, #128	; 0x80
 8000be8:	03c9      	lsls	r1, r1, #15
 8000bea:	430a      	orrs	r2, r1
 8000bec:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000bee:	46c0      	nop			; (mov r8, r8)
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	b009      	add	sp, #36	; 0x24
 8000bf4:	bd90      	pop	{r4, r7, pc}
 8000bf6:	46c0      	nop			; (mov r8, r8)
 8000bf8:	40005800 	.word	0x40005800
 8000bfc:	40021000 	.word	0x40021000
 8000c00:	50000400 	.word	0x50000400

08000c04 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c04:	b590      	push	{r4, r7, lr}
 8000c06:	b089      	sub	sp, #36	; 0x24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0c:	240c      	movs	r4, #12
 8000c0e:	193b      	adds	r3, r7, r4
 8000c10:	0018      	movs	r0, r3
 8000c12:	2314      	movs	r3, #20
 8000c14:	001a      	movs	r2, r3
 8000c16:	2100      	movs	r1, #0
 8000c18:	f002 fe4c 	bl	80038b4 <memset>
  if(hspi->Instance==SPI1)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a18      	ldr	r2, [pc, #96]	; (8000c84 <HAL_SPI_MspInit+0x80>)
 8000c22:	4293      	cmp	r3, r2
 8000c24:	d12a      	bne.n	8000c7c <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c26:	4b18      	ldr	r3, [pc, #96]	; (8000c88 <HAL_SPI_MspInit+0x84>)
 8000c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <HAL_SPI_MspInit+0x84>)
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0149      	lsls	r1, r1, #5
 8000c30:	430a      	orrs	r2, r1
 8000c32:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c34:	4b14      	ldr	r3, [pc, #80]	; (8000c88 <HAL_SPI_MspInit+0x84>)
 8000c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c38:	4b13      	ldr	r3, [pc, #76]	; (8000c88 <HAL_SPI_MspInit+0x84>)
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	430a      	orrs	r2, r1
 8000c3e:	62da      	str	r2, [r3, #44]	; 0x2c
 8000c40:	4b11      	ldr	r3, [pc, #68]	; (8000c88 <HAL_SPI_MspInit+0x84>)
 8000c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c44:	2201      	movs	r2, #1
 8000c46:	4013      	ands	r3, r2
 8000c48:	60bb      	str	r3, [r7, #8]
 8000c4a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 8000c4c:	193b      	adds	r3, r7, r4
 8000c4e:	22c1      	movs	r2, #193	; 0xc1
 8000c50:	0152      	lsls	r2, r2, #5
 8000c52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	0021      	movs	r1, r4
 8000c56:	187b      	adds	r3, r7, r1
 8000c58:	2202      	movs	r2, #2
 8000c5a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c62:	187b      	adds	r3, r7, r1
 8000c64:	2203      	movs	r2, #3
 8000c66:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000c68:	187b      	adds	r3, r7, r1
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6e:	187a      	adds	r2, r7, r1
 8000c70:	23a0      	movs	r3, #160	; 0xa0
 8000c72:	05db      	lsls	r3, r3, #23
 8000c74:	0011      	movs	r1, r2
 8000c76:	0018      	movs	r0, r3
 8000c78:	f000 fc2e 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b009      	add	sp, #36	; 0x24
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	40013000 	.word	0x40013000
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	230c      	movs	r3, #12
 8000c96:	18fb      	adds	r3, r7, r3
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f002 fe08 	bl	80038b4 <memset>
  if(htim_base->Instance==TIM6)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a23      	ldr	r2, [pc, #140]	; (8000d38 <HAL_TIM_Base_MspInit+0xac>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d106      	bne.n	8000cbc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000cae:	4b23      	ldr	r3, [pc, #140]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cb2:	4b22      	ldr	r3, [pc, #136]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000cb4:	2110      	movs	r1, #16
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN TIM22_MspInit 1 */

  /* USER CODE END TIM22_MspInit 1 */
  }

}
 8000cba:	e039      	b.n	8000d30 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM21)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a1f      	ldr	r2, [pc, #124]	; (8000d40 <HAL_TIM_Base_MspInit+0xb4>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d129      	bne.n	8000d1a <HAL_TIM_Base_MspInit+0x8e>
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000cc6:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000cc8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cca:	4b1c      	ldr	r3, [pc, #112]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000ccc:	2104      	movs	r1, #4
 8000cce:	430a      	orrs	r2, r1
 8000cd0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd2:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000cd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000cd8:	2101      	movs	r1, #1
 8000cda:	430a      	orrs	r2, r1
 8000cdc:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cde:	4b17      	ldr	r3, [pc, #92]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	60bb      	str	r3, [r7, #8]
 8000ce8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cea:	210c      	movs	r1, #12
 8000cec:	187b      	adds	r3, r7, r1
 8000cee:	2202      	movs	r2, #2
 8000cf0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2202      	movs	r2, #2
 8000cf6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	187b      	adds	r3, r7, r1
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfe:	187b      	adds	r3, r7, r1
 8000d00:	2200      	movs	r2, #0
 8000d02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000d04:	187b      	adds	r3, r7, r1
 8000d06:	2205      	movs	r2, #5
 8000d08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0a:	187a      	adds	r2, r7, r1
 8000d0c:	23a0      	movs	r3, #160	; 0xa0
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	0011      	movs	r1, r2
 8000d12:	0018      	movs	r0, r3
 8000d14:	f000 fbe0 	bl	80014d8 <HAL_GPIO_Init>
}
 8000d18:	e00a      	b.n	8000d30 <HAL_TIM_Base_MspInit+0xa4>
  else if(htim_base->Instance==TIM22)
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a09      	ldr	r2, [pc, #36]	; (8000d44 <HAL_TIM_Base_MspInit+0xb8>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d105      	bne.n	8000d30 <HAL_TIM_Base_MspInit+0xa4>
    __HAL_RCC_TIM22_CLK_ENABLE();
 8000d24:	4b05      	ldr	r3, [pc, #20]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000d26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <HAL_TIM_Base_MspInit+0xb0>)
 8000d2a:	2120      	movs	r1, #32
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	b008      	add	sp, #32
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40001000 	.word	0x40001000
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40011400 	.word	0x40011400

08000d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d48:	b590      	push	{r4, r7, lr}
 8000d4a:	b089      	sub	sp, #36	; 0x24
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d50:	240c      	movs	r4, #12
 8000d52:	193b      	adds	r3, r7, r4
 8000d54:	0018      	movs	r0, r3
 8000d56:	2314      	movs	r3, #20
 8000d58:	001a      	movs	r2, r3
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	f002 fdaa 	bl	80038b4 <memset>
  if(huart->Instance==USART2)
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	4a18      	ldr	r2, [pc, #96]	; (8000dc8 <HAL_UART_MspInit+0x80>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d129      	bne.n	8000dbe <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d70:	2180      	movs	r1, #128	; 0x80
 8000d72:	0289      	lsls	r1, r1, #10
 8000d74:	430a      	orrs	r2, r1
 8000d76:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d78:	4b14      	ldr	r3, [pc, #80]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000d7c:	4b13      	ldr	r3, [pc, #76]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d7e:	2101      	movs	r1, #1
 8000d80:	430a      	orrs	r2, r1
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
 8000d84:	4b11      	ldr	r3, [pc, #68]	; (8000dcc <HAL_UART_MspInit+0x84>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	2201      	movs	r2, #1
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	60bb      	str	r3, [r7, #8]
 8000d8e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = tx2_tp_Pin;
 8000d90:	0021      	movs	r1, r4
 8000d92:	187b      	adds	r3, r7, r1
 8000d94:	2204      	movs	r2, #4
 8000d96:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d98:	187b      	adds	r3, r7, r1
 8000d9a:	2212      	movs	r2, #18
 8000d9c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d9e:	187b      	adds	r3, r7, r1
 8000da0:	2201      	movs	r2, #1
 8000da2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	187b      	adds	r3, r7, r1
 8000da6:	2203      	movs	r2, #3
 8000da8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000daa:	187b      	adds	r3, r7, r1
 8000dac:	2204      	movs	r2, #4
 8000dae:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(tx2_tp_GPIO_Port, &GPIO_InitStruct);
 8000db0:	187a      	adds	r2, r7, r1
 8000db2:	23a0      	movs	r3, #160	; 0xa0
 8000db4:	05db      	lsls	r3, r3, #23
 8000db6:	0011      	movs	r1, r2
 8000db8:	0018      	movs	r0, r3
 8000dba:	f000 fb8d 	bl	80014d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000dbe:	46c0      	nop			; (mov r8, r8)
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	b009      	add	sp, #36	; 0x24
 8000dc4:	bd90      	pop	{r4, r7, pc}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	40004400 	.word	0x40004400
 8000dcc:	40021000 	.word	0x40021000

08000dd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <NMI_Handler+0x4>

08000dd6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <HardFault_Handler+0x4>

08000ddc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000df4:	f000 f886 	bl	8000f04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df8:	46c0      	nop			; (mov r8, r8)
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e02:	46c0      	nop			; (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}

08000e08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000e08:	480d      	ldr	r0, [pc, #52]	; (8000e40 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000e0a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e0c:	480d      	ldr	r0, [pc, #52]	; (8000e44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e0e:	490e      	ldr	r1, [pc, #56]	; (8000e48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e10:	4a0e      	ldr	r2, [pc, #56]	; (8000e4c <LoopForever+0xe>)
  movs r3, #0
 8000e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e14:	e002      	b.n	8000e1c <LoopCopyDataInit>

08000e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e1a:	3304      	adds	r3, #4

08000e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e20:	d3f9      	bcc.n	8000e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e22:	4a0b      	ldr	r2, [pc, #44]	; (8000e50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e24:	4c0b      	ldr	r4, [pc, #44]	; (8000e54 <LoopForever+0x16>)
  movs r3, #0
 8000e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e28:	e001      	b.n	8000e2e <LoopFillZerobss>

08000e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e2c:	3204      	adds	r2, #4

08000e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e30:	d3fb      	bcc.n	8000e2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000e32:	f7ff ffe4 	bl	8000dfe <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e36:	f002 fd19 	bl	800386c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e3a:	f7ff fb2f 	bl	800049c <main>

08000e3e <LoopForever>:

LoopForever:
    b LoopForever
 8000e3e:	e7fe      	b.n	8000e3e <LoopForever>
   ldr   r0, =_estack
 8000e40:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000e44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000e4c:	08003958 	.word	0x08003958
  ldr r2, =_sbss
 8000e50:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e54:	20000360 	.word	0x20000360

08000e58 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e58:	e7fe      	b.n	8000e58 <ADC1_COMP_IRQHandler>
	...

08000e5c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e62:	1dfb      	adds	r3, r7, #7
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <HAL_Init+0x3c>)
 8000e6a:	681a      	ldr	r2, [r3, #0]
 8000e6c:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_Init+0x3c>)
 8000e6e:	2140      	movs	r1, #64	; 0x40
 8000e70:	430a      	orrs	r2, r1
 8000e72:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f811 	bl	8000e9c <HAL_InitTick>
 8000e7a:	1e03      	subs	r3, r0, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000e7e:	1dfb      	adds	r3, r7, #7
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e001      	b.n	8000e8a <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e86:	f7ff fe4b 	bl	8000b20 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e8a:	1dfb      	adds	r3, r7, #7
 8000e8c:	781b      	ldrb	r3, [r3, #0]
}
 8000e8e:	0018      	movs	r0, r3
 8000e90:	46bd      	mov	sp, r7
 8000e92:	b002      	add	sp, #8
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	46c0      	nop			; (mov r8, r8)
 8000e98:	40022000 	.word	0x40022000

08000e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e9c:	b590      	push	{r4, r7, lr}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea4:	4b14      	ldr	r3, [pc, #80]	; (8000ef8 <HAL_InitTick+0x5c>)
 8000ea6:	681c      	ldr	r4, [r3, #0]
 8000ea8:	4b14      	ldr	r3, [pc, #80]	; (8000efc <HAL_InitTick+0x60>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	0019      	movs	r1, r3
 8000eae:	23fa      	movs	r3, #250	; 0xfa
 8000eb0:	0098      	lsls	r0, r3, #2
 8000eb2:	f7ff f929 	bl	8000108 <__udivsi3>
 8000eb6:	0003      	movs	r3, r0
 8000eb8:	0019      	movs	r1, r3
 8000eba:	0020      	movs	r0, r4
 8000ebc:	f7ff f924 	bl	8000108 <__udivsi3>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	0018      	movs	r0, r3
 8000ec4:	f000 fafb 	bl	80014be <HAL_SYSTICK_Config>
 8000ec8:	1e03      	subs	r3, r0, #0
 8000eca:	d001      	beq.n	8000ed0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e00f      	b.n	8000ef0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2b03      	cmp	r3, #3
 8000ed4:	d80b      	bhi.n	8000eee <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ed6:	6879      	ldr	r1, [r7, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	425b      	negs	r3, r3
 8000edc:	2200      	movs	r2, #0
 8000ede:	0018      	movs	r0, r3
 8000ee0:	f000 fad8 	bl	8001494 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ee4:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <HAL_InitTick+0x64>)
 8000ee6:	687a      	ldr	r2, [r7, #4]
 8000ee8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	e000      	b.n	8000ef0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
}
 8000ef0:	0018      	movs	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b003      	add	sp, #12
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	20000000 	.word	0x20000000
 8000efc:	20000008 	.word	0x20000008
 8000f00:	20000004 	.word	0x20000004

08000f04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f08:	4b05      	ldr	r3, [pc, #20]	; (8000f20 <HAL_IncTick+0x1c>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	001a      	movs	r2, r3
 8000f0e:	4b05      	ldr	r3, [pc, #20]	; (8000f24 <HAL_IncTick+0x20>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	18d2      	adds	r2, r2, r3
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_IncTick+0x20>)
 8000f16:	601a      	str	r2, [r3, #0]
}
 8000f18:	46c0      	nop			; (mov r8, r8)
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	46c0      	nop			; (mov r8, r8)
 8000f20:	20000008 	.word	0x20000008
 8000f24:	2000035c 	.word	0x2000035c

08000f28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f2c:	4b02      	ldr	r3, [pc, #8]	; (8000f38 <HAL_GetTick+0x10>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
}
 8000f30:	0018      	movs	r0, r3
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	46c0      	nop			; (mov r8, r8)
 8000f38:	2000035c 	.word	0x2000035c

08000f3c <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.  
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 
  /* Check ADC handle */
  if(hadc == NULL)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d101      	bne.n	8000f4e <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	e159      	b.n	8001202 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d10a      	bne.n	8000f6c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2200      	movs	r2, #0
 8000f5a:	659a      	str	r2, [r3, #88]	; 0x58
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2250      	movs	r2, #80	; 0x50
 8000f60:	2100      	movs	r1, #0
 8000f62:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	0018      	movs	r0, r3
 8000f68:	f7ff fdee 	bl	8000b48 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f70:	2210      	movs	r2, #16
 8000f72:	4013      	ands	r3, r2
 8000f74:	2b10      	cmp	r3, #16
 8000f76:	d005      	beq.n	8000f84 <HAL_ADC_Init+0x48>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	2204      	movs	r2, #4
 8000f80:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8000f82:	d00b      	beq.n	8000f9c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000f88:	2210      	movs	r2, #16
 8000f8a:	431a      	orrs	r2, r3
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	655a      	str	r2, [r3, #84]	; 0x54
        
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2250      	movs	r2, #80	; 0x50
 8000f94:	2100      	movs	r1, #0
 8000f96:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	e132      	b.n	8001202 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fa0:	4a9a      	ldr	r2, [pc, #616]	; (800120c <HAL_ADC_Init+0x2d0>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	2202      	movs	r2, #2
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	655a      	str	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b01      	cmp	r3, #1
 8000fb8:	d108      	bne.n	8000fcc <HAL_ADC_Init+0x90>
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d101      	bne.n	8000fcc <HAL_ADC_Init+0x90>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <HAL_ADC_Init+0x92>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d149      	bne.n	8001066 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */
   
    /* Configuration of ADC clock: clock source PCLK or asynchronous with 
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	685a      	ldr	r2, [r3, #4]
 8000fd6:	23c0      	movs	r3, #192	; 0xc0
 8000fd8:	061b      	lsls	r3, r3, #24
 8000fda:	429a      	cmp	r2, r3
 8000fdc:	d00b      	beq.n	8000ff6 <HAL_ADC_Init+0xba>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	2380      	movs	r3, #128	; 0x80
 8000fe4:	05db      	lsls	r3, r3, #23
 8000fe6:	429a      	cmp	r2, r3
 8000fe8:	d005      	beq.n	8000ff6 <HAL_ADC_Init+0xba>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	685a      	ldr	r2, [r3, #4]
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	061b      	lsls	r3, r3, #24
 8000ff2:	429a      	cmp	r2, r3
 8000ff4:	d111      	bne.n	800101a <HAL_ADC_Init+0xde>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	691a      	ldr	r2, [r3, #16]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	0092      	lsls	r2, r2, #2
 8001002:	0892      	lsrs	r2, r2, #2
 8001004:	611a      	str	r2, [r3, #16]
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	6919      	ldr	r1, [r3, #16]
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	430a      	orrs	r2, r1
 8001016:	611a      	str	r2, [r3, #16]
 8001018:	e014      	b.n	8001044 <HAL_ADC_Init+0x108>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	691a      	ldr	r2, [r3, #16]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	0092      	lsls	r2, r2, #2
 8001026:	0892      	lsrs	r2, r2, #2
 8001028:	611a      	str	r2, [r3, #16]
 800102a:	4b79      	ldr	r3, [pc, #484]	; (8001210 <HAL_ADC_Init+0x2d4>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b78      	ldr	r3, [pc, #480]	; (8001210 <HAL_ADC_Init+0x2d4>)
 8001030:	4978      	ldr	r1, [pc, #480]	; (8001214 <HAL_ADC_Init+0x2d8>)
 8001032:	400a      	ands	r2, r1
 8001034:	601a      	str	r2, [r3, #0]
 8001036:	4b76      	ldr	r3, [pc, #472]	; (8001210 <HAL_ADC_Init+0x2d4>)
 8001038:	6819      	ldr	r1, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685a      	ldr	r2, [r3, #4]
 800103e:	4b74      	ldr	r3, [pc, #464]	; (8001210 <HAL_ADC_Init+0x2d4>)
 8001040:	430a      	orrs	r2, r1
 8001042:	601a      	str	r2, [r3, #0]
    
    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	2118      	movs	r1, #24
 8001050:	438a      	bics	r2, r1
 8001052:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	68d9      	ldr	r1, [r3, #12]
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689a      	ldr	r2, [r3, #8]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	430a      	orrs	r2, r1
 8001064:	60da      	str	r2, [r3, #12]
  }
  
  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8001066:	4b6a      	ldr	r3, [pc, #424]	; (8001210 <HAL_ADC_Init+0x2d4>)
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	4b69      	ldr	r3, [pc, #420]	; (8001210 <HAL_ADC_Init+0x2d4>)
 800106c:	496a      	ldr	r1, [pc, #424]	; (8001218 <HAL_ADC_Init+0x2dc>)
 800106e:	400a      	ands	r2, r1
 8001070:	601a      	str	r2, [r3, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8001072:	4b67      	ldr	r3, [pc, #412]	; (8001210 <HAL_ADC_Init+0x2d4>)
 8001074:	6819      	ldr	r1, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800107a:	065a      	lsls	r2, r3, #25
 800107c:	4b64      	ldr	r3, [pc, #400]	; (8001210 <HAL_ADC_Init+0x2d4>)
 800107e:	430a      	orrs	r2, r1
 8001080:	601a      	str	r2, [r3, #0]
   
  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	689a      	ldr	r2, [r3, #8]
 8001088:	2380      	movs	r3, #128	; 0x80
 800108a:	055b      	lsls	r3, r3, #21
 800108c:	4013      	ands	r3, r2
 800108e:	d108      	bne.n	80010a2 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	689a      	ldr	r2, [r3, #8]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2180      	movs	r1, #128	; 0x80
 800109c:	0549      	lsls	r1, r1, #21
 800109e:	430a      	orrs	r2, r1
 80010a0:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68da      	ldr	r2, [r3, #12]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	495b      	ldr	r1, [pc, #364]	; (800121c <HAL_ADC_Init+0x2e0>)
 80010ae:	400a      	ands	r2, r1
 80010b0:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN   );
  
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	68d9      	ldr	r1, [r3, #12]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	691b      	ldr	r3, [r3, #16]
 80010c0:	2b02      	cmp	r3, #2
 80010c2:	d101      	bne.n	80010c8 <HAL_ADC_Init+0x18c>
 80010c4:	2304      	movs	r3, #4
 80010c6:	e000      	b.n	80010ca <HAL_ADC_Init+0x18e>
 80010c8:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010ca:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2020      	movs	r0, #32
 80010d0:	5c1b      	ldrb	r3, [r3, r0]
 80010d2:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 80010d4:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	202c      	movs	r0, #44	; 0x2c
 80010da:	5c1b      	ldrb	r3, [r3, r0]
 80010dc:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80010de:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80010e4:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 80010ec:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 80010f4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	430a      	orrs	r2, r1
 80010fc:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001102:	23c2      	movs	r3, #194	; 0xc2
 8001104:	33ff      	adds	r3, #255	; 0xff
 8001106:	429a      	cmp	r2, r3
 8001108:	d00b      	beq.n	8001122 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68d9      	ldr	r1, [r3, #12]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                             hadc->Init.ExternalTrigConvEdge;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8001118:	431a      	orrs	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	430a      	orrs	r2, r1
 8001120:	60da      	str	r2, [r3, #12]
  }
  
  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2221      	movs	r2, #33	; 0x21
 8001126:	5c9b      	ldrb	r3, [r3, r2]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d11a      	bne.n	8001162 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	2220      	movs	r2, #32
 8001130:	5c9b      	ldrb	r3, [r3, r2]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d109      	bne.n	800114a <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	68da      	ldr	r2, [r3, #12]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2180      	movs	r1, #128	; 0x80
 8001142:	0249      	lsls	r1, r1, #9
 8001144:	430a      	orrs	r2, r1
 8001146:	60da      	str	r2, [r3, #12]
 8001148:	e00b      	b.n	8001162 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */
      
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800114e:	2220      	movs	r2, #32
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	2201      	movs	r2, #1
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  
  if (hadc->Init.OversamplingMode == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001166:	2b01      	cmp	r3, #1
 8001168:	d11f      	bne.n	80011aa <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */
    
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	691a      	ldr	r2, [r3, #16]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	492a      	ldr	r1, [pc, #168]	; (8001220 <HAL_ADC_Init+0x2e4>)
 8001176:	400a      	ands	r2, r1
 8001178:	611a      	str	r2, [r3, #16]
                                ADC_CFGR2_OVSS |
                                ADC_CFGR2_TOVS );
    
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6919      	ldr	r1, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                               hadc->Init.Oversample.RightBitShift             |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001188:	431a      	orrs	r2, r3
                               hadc->Init.Oversample.TriggeredMode );
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                               hadc->Init.Oversample.RightBitShift             |
 800118e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	430a      	orrs	r2, r1
 8001196:	611a      	str	r2, [r3, #16]
    
    /* Enable OverSampling mode */
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	691a      	ldr	r2, [r3, #16]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2101      	movs	r1, #1
 80011a4:	430a      	orrs	r2, r1
 80011a6:	611a      	str	r2, [r3, #16]
 80011a8:	e00e      	b.n	80011c8 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	691b      	ldr	r3, [r3, #16]
 80011b0:	2201      	movs	r2, #1
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d107      	bne.n	80011c8 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	691a      	ldr	r2, [r3, #16]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2101      	movs	r1, #1
 80011c4:	438a      	bics	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]
    }
  }    
  
  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	695a      	ldr	r2, [r3, #20]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2107      	movs	r1, #7
 80011d4:	438a      	bics	r2, r1
 80011d6:	615a      	str	r2, [r3, #20]
  
  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6959      	ldr	r1, [r3, #20]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	430a      	orrs	r2, r1
 80011e8:	615a      	str	r2, [r3, #20]
  
  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	2203      	movs	r2, #3
 80011f6:	4393      	bics	r3, r2
 80011f8:	2201      	movs	r2, #1
 80011fa:	431a      	orrs	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	655a      	str	r2, [r3, #84]	; 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8001200:	2300      	movs	r3, #0
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b002      	add	sp, #8
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	fffffefd 	.word	0xfffffefd
 8001210:	40012708 	.word	0x40012708
 8001214:	ffc3ffff 	.word	0xffc3ffff
 8001218:	fdffffff 	.word	0xfdffffff
 800121c:	fffe0219 	.word	0xfffe0219
 8001220:	fffffc03 	.word	0xfffffc03

08001224 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2250      	movs	r2, #80	; 0x50
 8001232:	5c9b      	ldrb	r3, [r3, r2]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d101      	bne.n	800123c <HAL_ADC_ConfigChannel+0x18>
 8001238:	2302      	movs	r3, #2
 800123a:	e06c      	b.n	8001316 <HAL_ADC_ConfigChannel+0xf2>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2250      	movs	r2, #80	; 0x50
 8001240:	2101      	movs	r1, #1
 8001242:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	2204      	movs	r2, #4
 800124c:	4013      	ands	r3, r2
 800124e:	d00b      	beq.n	8001268 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	2220      	movs	r2, #32
 8001256:	431a      	orrs	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2250      	movs	r2, #80	; 0x50
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e056      	b.n	8001316 <HAL_ADC_ConfigChannel+0xf2>
  }
  
  if (sConfig->Rank != ADC_RANK_NONE)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	4a2c      	ldr	r2, [pc, #176]	; (8001320 <HAL_ADC_ConfigChannel+0xfc>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d028      	beq.n	80012c4 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	035b      	lsls	r3, r3, #13
 800127e:	0b5a      	lsrs	r2, r3, #13
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	629a      	str	r2, [r3, #40]	; 0x28
    /* dedicated internal buffers and path.                                     */
    
    #if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	2380      	movs	r3, #128	; 0x80
 800128e:	02db      	lsls	r3, r3, #11
 8001290:	4013      	ands	r3, r2
 8001292:	d009      	beq.n	80012a8 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;   
 8001294:	4b23      	ldr	r3, [pc, #140]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 8001296:	681a      	ldr	r2, [r3, #0]
 8001298:	4b22      	ldr	r3, [pc, #136]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 800129a:	2180      	movs	r1, #128	; 0x80
 800129c:	0409      	lsls	r1, r1, #16
 800129e:	430a      	orrs	r2, r1
 80012a0:	601a      	str	r2, [r3, #0]
      
      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 80012a2:	200a      	movs	r0, #10
 80012a4:	f000 f844 	bl	8001330 <ADC_DelayMicroSecond>
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	2380      	movs	r3, #128	; 0x80
 80012ae:	029b      	lsls	r3, r3, #10
 80012b0:	4013      	ands	r3, r2
 80012b2:	d02b      	beq.n	800130c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;   
 80012b4:	4b1b      	ldr	r3, [pc, #108]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012b6:	681a      	ldr	r2, [r3, #0]
 80012b8:	4b1a      	ldr	r3, [pc, #104]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012ba:	2180      	movs	r1, #128	; 0x80
 80012bc:	03c9      	lsls	r1, r1, #15
 80012be:	430a      	orrs	r2, r1
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	e023      	b.n	800130c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	035b      	lsls	r3, r3, #13
 80012d0:	0b5b      	lsrs	r3, r3, #13
 80012d2:	43d9      	mvns	r1, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	400a      	ands	r2, r1
 80012da:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
    #if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	2380      	movs	r3, #128	; 0x80
 80012e2:	02db      	lsls	r3, r3, #11
 80012e4:	4013      	ands	r3, r2
 80012e6:	d005      	beq.n	80012f4 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;   
 80012e8:	4b0e      	ldr	r3, [pc, #56]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b0d      	ldr	r3, [pc, #52]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 80012ee:	490e      	ldr	r1, [pc, #56]	; (8001328 <HAL_ADC_ConfigChannel+0x104>)
 80012f0:	400a      	ands	r2, r1
 80012f2:	601a      	str	r2, [r3, #0]
    }
    #endif
    
    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2380      	movs	r3, #128	; 0x80
 80012fa:	029b      	lsls	r3, r3, #10
 80012fc:	4013      	ands	r3, r2
 80012fe:	d005      	beq.n	800130c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8001300:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b07      	ldr	r3, [pc, #28]	; (8001324 <HAL_ADC_ConfigChannel+0x100>)
 8001306:	4909      	ldr	r1, [pc, #36]	; (800132c <HAL_ADC_ConfigChannel+0x108>)
 8001308:	400a      	ands	r2, r1
 800130a:	601a      	str	r2, [r3, #0]
    }
#endif
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	2250      	movs	r2, #80	; 0x50
 8001310:	2100      	movs	r1, #0
 8001312:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return HAL_OK;
 8001314:	2300      	movs	r3, #0
}
 8001316:	0018      	movs	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	b002      	add	sp, #8
 800131c:	bd80      	pop	{r7, pc}
 800131e:	46c0      	nop			; (mov r8, r8)
 8001320:	00001001 	.word	0x00001001
 8001324:	40012708 	.word	0x40012708
 8001328:	ff7fffff 	.word	0xff7fffff
 800132c:	ffbfffff 	.word	0xffbfffff

08001330 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds 
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8001338:	4b0b      	ldr	r3, [pc, #44]	; (8001368 <ADC_DelayMicroSecond+0x38>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	490b      	ldr	r1, [pc, #44]	; (800136c <ADC_DelayMicroSecond+0x3c>)
 800133e:	0018      	movs	r0, r3
 8001340:	f7fe fee2 	bl	8000108 <__udivsi3>
 8001344:	0003      	movs	r3, r0
 8001346:	001a      	movs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4353      	muls	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]

  while(waitLoopIndex != 0U)
 800134e:	e002      	b.n	8001356 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3b01      	subs	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
  while(waitLoopIndex != 0U)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d1f9      	bne.n	8001350 <ADC_DelayMicroSecond+0x20>
  } 
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	46bd      	mov	sp, r7
 8001362:	b004      	add	sp, #16
 8001364:	bd80      	pop	{r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	20000000 	.word	0x20000000
 800136c:	000f4240 	.word	0x000f4240

08001370 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001370:	b590      	push	{r4, r7, lr}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	0002      	movs	r2, r0
 8001378:	6039      	str	r1, [r7, #0]
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800137e:	1dfb      	adds	r3, r7, #7
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b7f      	cmp	r3, #127	; 0x7f
 8001384:	d828      	bhi.n	80013d8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001386:	4a2f      	ldr	r2, [pc, #188]	; (8001444 <__NVIC_SetPriority+0xd4>)
 8001388:	1dfb      	adds	r3, r7, #7
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	b25b      	sxtb	r3, r3
 800138e:	089b      	lsrs	r3, r3, #2
 8001390:	33c0      	adds	r3, #192	; 0xc0
 8001392:	009b      	lsls	r3, r3, #2
 8001394:	589b      	ldr	r3, [r3, r2]
 8001396:	1dfa      	adds	r2, r7, #7
 8001398:	7812      	ldrb	r2, [r2, #0]
 800139a:	0011      	movs	r1, r2
 800139c:	2203      	movs	r2, #3
 800139e:	400a      	ands	r2, r1
 80013a0:	00d2      	lsls	r2, r2, #3
 80013a2:	21ff      	movs	r1, #255	; 0xff
 80013a4:	4091      	lsls	r1, r2
 80013a6:	000a      	movs	r2, r1
 80013a8:	43d2      	mvns	r2, r2
 80013aa:	401a      	ands	r2, r3
 80013ac:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	019b      	lsls	r3, r3, #6
 80013b2:	22ff      	movs	r2, #255	; 0xff
 80013b4:	401a      	ands	r2, r3
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	0018      	movs	r0, r3
 80013bc:	2303      	movs	r3, #3
 80013be:	4003      	ands	r3, r0
 80013c0:	00db      	lsls	r3, r3, #3
 80013c2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013c4:	481f      	ldr	r0, [pc, #124]	; (8001444 <__NVIC_SetPriority+0xd4>)
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	b25b      	sxtb	r3, r3
 80013cc:	089b      	lsrs	r3, r3, #2
 80013ce:	430a      	orrs	r2, r1
 80013d0:	33c0      	adds	r3, #192	; 0xc0
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80013d6:	e031      	b.n	800143c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d8:	4a1b      	ldr	r2, [pc, #108]	; (8001448 <__NVIC_SetPriority+0xd8>)
 80013da:	1dfb      	adds	r3, r7, #7
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	0019      	movs	r1, r3
 80013e0:	230f      	movs	r3, #15
 80013e2:	400b      	ands	r3, r1
 80013e4:	3b08      	subs	r3, #8
 80013e6:	089b      	lsrs	r3, r3, #2
 80013e8:	3306      	adds	r3, #6
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	18d3      	adds	r3, r2, r3
 80013ee:	3304      	adds	r3, #4
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1dfa      	adds	r2, r7, #7
 80013f4:	7812      	ldrb	r2, [r2, #0]
 80013f6:	0011      	movs	r1, r2
 80013f8:	2203      	movs	r2, #3
 80013fa:	400a      	ands	r2, r1
 80013fc:	00d2      	lsls	r2, r2, #3
 80013fe:	21ff      	movs	r1, #255	; 0xff
 8001400:	4091      	lsls	r1, r2
 8001402:	000a      	movs	r2, r1
 8001404:	43d2      	mvns	r2, r2
 8001406:	401a      	ands	r2, r3
 8001408:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	019b      	lsls	r3, r3, #6
 800140e:	22ff      	movs	r2, #255	; 0xff
 8001410:	401a      	ands	r2, r3
 8001412:	1dfb      	adds	r3, r7, #7
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	0018      	movs	r0, r3
 8001418:	2303      	movs	r3, #3
 800141a:	4003      	ands	r3, r0
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001420:	4809      	ldr	r0, [pc, #36]	; (8001448 <__NVIC_SetPriority+0xd8>)
 8001422:	1dfb      	adds	r3, r7, #7
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	001c      	movs	r4, r3
 8001428:	230f      	movs	r3, #15
 800142a:	4023      	ands	r3, r4
 800142c:	3b08      	subs	r3, #8
 800142e:	089b      	lsrs	r3, r3, #2
 8001430:	430a      	orrs	r2, r1
 8001432:	3306      	adds	r3, #6
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	18c3      	adds	r3, r0, r3
 8001438:	3304      	adds	r3, #4
 800143a:	601a      	str	r2, [r3, #0]
}
 800143c:	46c0      	nop			; (mov r8, r8)
 800143e:	46bd      	mov	sp, r7
 8001440:	b003      	add	sp, #12
 8001442:	bd90      	pop	{r4, r7, pc}
 8001444:	e000e100 	.word	0xe000e100
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	1e5a      	subs	r2, r3, #1
 8001458:	2380      	movs	r3, #128	; 0x80
 800145a:	045b      	lsls	r3, r3, #17
 800145c:	429a      	cmp	r2, r3
 800145e:	d301      	bcc.n	8001464 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001460:	2301      	movs	r3, #1
 8001462:	e010      	b.n	8001486 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001464:	4b0a      	ldr	r3, [pc, #40]	; (8001490 <SysTick_Config+0x44>)
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	3a01      	subs	r2, #1
 800146a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800146c:	2301      	movs	r3, #1
 800146e:	425b      	negs	r3, r3
 8001470:	2103      	movs	r1, #3
 8001472:	0018      	movs	r0, r3
 8001474:	f7ff ff7c 	bl	8001370 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001478:	4b05      	ldr	r3, [pc, #20]	; (8001490 <SysTick_Config+0x44>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800147e:	4b04      	ldr	r3, [pc, #16]	; (8001490 <SysTick_Config+0x44>)
 8001480:	2207      	movs	r2, #7
 8001482:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001484:	2300      	movs	r3, #0
}
 8001486:	0018      	movs	r0, r3
 8001488:	46bd      	mov	sp, r7
 800148a:	b002      	add	sp, #8
 800148c:	bd80      	pop	{r7, pc}
 800148e:	46c0      	nop			; (mov r8, r8)
 8001490:	e000e010 	.word	0xe000e010

08001494 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	60b9      	str	r1, [r7, #8]
 800149c:	607a      	str	r2, [r7, #4]
 800149e:	210f      	movs	r1, #15
 80014a0:	187b      	adds	r3, r7, r1
 80014a2:	1c02      	adds	r2, r0, #0
 80014a4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80014a6:	68ba      	ldr	r2, [r7, #8]
 80014a8:	187b      	adds	r3, r7, r1
 80014aa:	781b      	ldrb	r3, [r3, #0]
 80014ac:	b25b      	sxtb	r3, r3
 80014ae:	0011      	movs	r1, r2
 80014b0:	0018      	movs	r0, r3
 80014b2:	f7ff ff5d 	bl	8001370 <__NVIC_SetPriority>
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46bd      	mov	sp, r7
 80014ba:	b004      	add	sp, #16
 80014bc:	bd80      	pop	{r7, pc}

080014be <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014be:	b580      	push	{r7, lr}
 80014c0:	b082      	sub	sp, #8
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ffbf 	bl	800144c <SysTick_Config>
 80014ce:	0003      	movs	r3, r0
}
 80014d0:	0018      	movs	r0, r3
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b002      	add	sp, #8
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014ee:	e14f      	b.n	8001790 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2101      	movs	r1, #1
 80014f6:	697a      	ldr	r2, [r7, #20]
 80014f8:	4091      	lsls	r1, r2
 80014fa:	000a      	movs	r2, r1
 80014fc:	4013      	ands	r3, r2
 80014fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d100      	bne.n	8001508 <HAL_GPIO_Init+0x30>
 8001506:	e140      	b.n	800178a <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b01      	cmp	r3, #1
 800150e:	d00b      	beq.n	8001528 <HAL_GPIO_Init+0x50>
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d007      	beq.n	8001528 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800151c:	2b11      	cmp	r3, #17
 800151e:	d003      	beq.n	8001528 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	2b12      	cmp	r3, #18
 8001526:	d130      	bne.n	800158a <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	689b      	ldr	r3, [r3, #8]
 800152c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	2203      	movs	r2, #3
 8001534:	409a      	lsls	r2, r3
 8001536:	0013      	movs	r3, r2
 8001538:	43da      	mvns	r2, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	4013      	ands	r3, r2
 800153e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68da      	ldr	r2, [r3, #12]
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	409a      	lsls	r2, r3
 800154a:	0013      	movs	r3, r2
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	4313      	orrs	r3, r2
 8001550:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155e:	2201      	movs	r2, #1
 8001560:	697b      	ldr	r3, [r7, #20]
 8001562:	409a      	lsls	r2, r3
 8001564:	0013      	movs	r3, r2
 8001566:	43da      	mvns	r2, r3
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	4013      	ands	r3, r2
 800156c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	2201      	movs	r2, #1
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	409a      	lsls	r2, r3
 800157c:	0013      	movs	r3, r2
 800157e:	693a      	ldr	r2, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	693a      	ldr	r2, [r7, #16]
 8001588:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	2203      	movs	r2, #3
 8001596:	409a      	lsls	r2, r3
 8001598:	0013      	movs	r3, r2
 800159a:	43da      	mvns	r2, r3
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	4013      	ands	r3, r2
 80015a0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	689a      	ldr	r2, [r3, #8]
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	005b      	lsls	r3, r3, #1
 80015aa:	409a      	lsls	r2, r3
 80015ac:	0013      	movs	r3, r2
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0xf2>
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b12      	cmp	r3, #18
 80015c8:	d123      	bne.n	8001612 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	08da      	lsrs	r2, r3, #3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	3208      	adds	r2, #8
 80015d2:	0092      	lsls	r2, r2, #2
 80015d4:	58d3      	ldr	r3, [r2, r3]
 80015d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	2207      	movs	r2, #7
 80015dc:	4013      	ands	r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	220f      	movs	r2, #15
 80015e2:	409a      	lsls	r2, r3
 80015e4:	0013      	movs	r3, r2
 80015e6:	43da      	mvns	r2, r3
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	4013      	ands	r3, r2
 80015ec:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	691a      	ldr	r2, [r3, #16]
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	2107      	movs	r1, #7
 80015f6:	400b      	ands	r3, r1
 80015f8:	009b      	lsls	r3, r3, #2
 80015fa:	409a      	lsls	r2, r3
 80015fc:	0013      	movs	r3, r2
 80015fe:	693a      	ldr	r2, [r7, #16]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	08da      	lsrs	r2, r3, #3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	3208      	adds	r2, #8
 800160c:	0092      	lsls	r2, r2, #2
 800160e:	6939      	ldr	r1, [r7, #16]
 8001610:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2203      	movs	r2, #3
 800161e:	409a      	lsls	r2, r3
 8001620:	0013      	movs	r3, r2
 8001622:	43da      	mvns	r2, r3
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	4013      	ands	r3, r2
 8001628:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2203      	movs	r2, #3
 8001630:	401a      	ands	r2, r3
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	409a      	lsls	r2, r3
 8001638:	0013      	movs	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	685a      	ldr	r2, [r3, #4]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	055b      	lsls	r3, r3, #21
 800164e:	4013      	ands	r3, r2
 8001650:	d100      	bne.n	8001654 <HAL_GPIO_Init+0x17c>
 8001652:	e09a      	b.n	800178a <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001654:	4b54      	ldr	r3, [pc, #336]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 8001656:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001658:	4b53      	ldr	r3, [pc, #332]	; (80017a8 <HAL_GPIO_Init+0x2d0>)
 800165a:	2101      	movs	r1, #1
 800165c:	430a      	orrs	r2, r1
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001660:	4a52      	ldr	r2, [pc, #328]	; (80017ac <HAL_GPIO_Init+0x2d4>)
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	089b      	lsrs	r3, r3, #2
 8001666:	3302      	adds	r3, #2
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	589b      	ldr	r3, [r3, r2]
 800166c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800166e:	697b      	ldr	r3, [r7, #20]
 8001670:	2203      	movs	r2, #3
 8001672:	4013      	ands	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	220f      	movs	r2, #15
 8001678:	409a      	lsls	r2, r3
 800167a:	0013      	movs	r3, r2
 800167c:	43da      	mvns	r2, r3
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	23a0      	movs	r3, #160	; 0xa0
 8001688:	05db      	lsls	r3, r3, #23
 800168a:	429a      	cmp	r2, r3
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x1ea>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a47      	ldr	r2, [pc, #284]	; (80017b0 <HAL_GPIO_Init+0x2d8>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x1e6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a46      	ldr	r2, [pc, #280]	; (80017b4 <HAL_GPIO_Init+0x2dc>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x1e2>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a45      	ldr	r2, [pc, #276]	; (80017b8 <HAL_GPIO_Init+0x2e0>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x1de>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a44      	ldr	r2, [pc, #272]	; (80017bc <HAL_GPIO_Init+0x2e4>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x1da>
 80016ae:	2305      	movs	r3, #5
 80016b0:	e008      	b.n	80016c4 <HAL_GPIO_Init+0x1ec>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e006      	b.n	80016c4 <HAL_GPIO_Init+0x1ec>
 80016b6:	2303      	movs	r3, #3
 80016b8:	e004      	b.n	80016c4 <HAL_GPIO_Init+0x1ec>
 80016ba:	2302      	movs	r3, #2
 80016bc:	e002      	b.n	80016c4 <HAL_GPIO_Init+0x1ec>
 80016be:	2301      	movs	r3, #1
 80016c0:	e000      	b.n	80016c4 <HAL_GPIO_Init+0x1ec>
 80016c2:	2300      	movs	r3, #0
 80016c4:	697a      	ldr	r2, [r7, #20]
 80016c6:	2103      	movs	r1, #3
 80016c8:	400a      	ands	r2, r1
 80016ca:	0092      	lsls	r2, r2, #2
 80016cc:	4093      	lsls	r3, r2
 80016ce:	693a      	ldr	r2, [r7, #16]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016d4:	4935      	ldr	r1, [pc, #212]	; (80017ac <HAL_GPIO_Init+0x2d4>)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	089b      	lsrs	r3, r3, #2
 80016da:	3302      	adds	r3, #2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016e2:	4b37      	ldr	r3, [pc, #220]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	43da      	mvns	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	4013      	ands	r3, r2
 80016f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016f2:	683b      	ldr	r3, [r7, #0]
 80016f4:	685a      	ldr	r2, [r3, #4]
 80016f6:	2380      	movs	r3, #128	; 0x80
 80016f8:	025b      	lsls	r3, r3, #9
 80016fa:	4013      	ands	r3, r2
 80016fc:	d003      	beq.n	8001706 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80016fe:	693a      	ldr	r2, [r7, #16]
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001706:	4b2e      	ldr	r3, [pc, #184]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800170c:	4b2c      	ldr	r3, [pc, #176]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	43da      	mvns	r2, r3
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	4013      	ands	r3, r2
 800171a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685a      	ldr	r2, [r3, #4]
 8001720:	2380      	movs	r3, #128	; 0x80
 8001722:	029b      	lsls	r3, r3, #10
 8001724:	4013      	ands	r3, r2
 8001726:	d003      	beq.n	8001730 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001728:	693a      	ldr	r2, [r7, #16]
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	4313      	orrs	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001730:	4b23      	ldr	r3, [pc, #140]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001736:	4b22      	ldr	r3, [pc, #136]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	43da      	mvns	r2, r3
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	4013      	ands	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685a      	ldr	r2, [r3, #4]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	035b      	lsls	r3, r3, #13
 800174e:	4013      	ands	r3, r2
 8001750:	d003      	beq.n	800175a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001752:	693a      	ldr	r2, [r7, #16]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4313      	orrs	r3, r2
 8001758:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800175a:	4b19      	ldr	r3, [pc, #100]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001760:	4b17      	ldr	r3, [pc, #92]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43da      	mvns	r2, r3
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	039b      	lsls	r3, r3, #14
 8001778:	4013      	ands	r3, r2
 800177a:	d003      	beq.n	8001784 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800177c:	693a      	ldr	r2, [r7, #16]
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	4313      	orrs	r3, r2
 8001782:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001784:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <HAL_GPIO_Init+0x2e8>)
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	3301      	adds	r3, #1
 800178e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	40da      	lsrs	r2, r3
 8001798:	1e13      	subs	r3, r2, #0
 800179a:	d000      	beq.n	800179e <HAL_GPIO_Init+0x2c6>
 800179c:	e6a8      	b.n	80014f0 <HAL_GPIO_Init+0x18>
  }
}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	46c0      	nop			; (mov r8, r8)
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b006      	add	sp, #24
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	40010000 	.word	0x40010000
 80017b0:	50000400 	.word	0x50000400
 80017b4:	50000800 	.word	0x50000800
 80017b8:	50000c00 	.word	0x50000c00
 80017bc:	50001c00 	.word	0x50001c00
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	0008      	movs	r0, r1
 80017ce:	0011      	movs	r1, r2
 80017d0:	1cbb      	adds	r3, r7, #2
 80017d2:	1c02      	adds	r2, r0, #0
 80017d4:	801a      	strh	r2, [r3, #0]
 80017d6:	1c7b      	adds	r3, r7, #1
 80017d8:	1c0a      	adds	r2, r1, #0
 80017da:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017dc:	1c7b      	adds	r3, r7, #1
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d004      	beq.n	80017ee <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017e4:	1cbb      	adds	r3, r7, #2
 80017e6:	881a      	ldrh	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017ec:	e003      	b.n	80017f6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017ee:	1cbb      	adds	r3, r7, #2
 80017f0:	881a      	ldrh	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b002      	add	sp, #8
 80017fc:	bd80      	pop	{r7, pc}
	...

08001800 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e082      	b.n	8001918 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2241      	movs	r2, #65	; 0x41
 8001816:	5c9b      	ldrb	r3, [r3, r2]
 8001818:	b2db      	uxtb	r3, r3
 800181a:	2b00      	cmp	r3, #0
 800181c:	d107      	bne.n	800182e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2240      	movs	r2, #64	; 0x40
 8001822:	2100      	movs	r1, #0
 8001824:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f7ff f9a5 	bl	8000b78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2241      	movs	r2, #65	; 0x41
 8001832:	2124      	movs	r1, #36	; 0x24
 8001834:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2101      	movs	r1, #1
 8001842:	438a      	bics	r2, r1
 8001844:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685a      	ldr	r2, [r3, #4]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4934      	ldr	r1, [pc, #208]	; (8001920 <HAL_I2C_Init+0x120>)
 8001850:	400a      	ands	r2, r1
 8001852:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	689a      	ldr	r2, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4931      	ldr	r1, [pc, #196]	; (8001924 <HAL_I2C_Init+0x124>)
 8001860:	400a      	ands	r2, r1
 8001862:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	2b01      	cmp	r3, #1
 800186a:	d108      	bne.n	800187e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	2180      	movs	r1, #128	; 0x80
 8001876:	0209      	lsls	r1, r1, #8
 8001878:	430a      	orrs	r2, r1
 800187a:	609a      	str	r2, [r3, #8]
 800187c:	e007      	b.n	800188e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	2184      	movs	r1, #132	; 0x84
 8001888:	0209      	lsls	r1, r1, #8
 800188a:	430a      	orrs	r2, r1
 800188c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d104      	bne.n	80018a0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2280      	movs	r2, #128	; 0x80
 800189c:	0112      	lsls	r2, r2, #4
 800189e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	685a      	ldr	r2, [r3, #4]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	491f      	ldr	r1, [pc, #124]	; (8001928 <HAL_I2C_Init+0x128>)
 80018ac:	430a      	orrs	r2, r1
 80018ae:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	68da      	ldr	r2, [r3, #12]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	491a      	ldr	r1, [pc, #104]	; (8001924 <HAL_I2C_Init+0x124>)
 80018bc:	400a      	ands	r2, r1
 80018be:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	691a      	ldr	r2, [r3, #16]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	695b      	ldr	r3, [r3, #20]
 80018c8:	431a      	orrs	r2, r3
 80018ca:	0011      	movs	r1, r2
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	699b      	ldr	r3, [r3, #24]
 80018d0:	021a      	lsls	r2, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	430a      	orrs	r2, r1
 80018d8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	69d9      	ldr	r1, [r3, #28]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	430a      	orrs	r2, r1
 80018e8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2200      	movs	r2, #0
 80018fe:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2241      	movs	r2, #65	; 0x41
 8001904:	2120      	movs	r1, #32
 8001906:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2242      	movs	r2, #66	; 0x42
 8001912:	2100      	movs	r1, #0
 8001914:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b002      	add	sp, #8
 800191e:	bd80      	pop	{r7, pc}
 8001920:	f0ffffff 	.word	0xf0ffffff
 8001924:	ffff7fff 	.word	0xffff7fff
 8001928:	02008000 	.word	0x02008000

0800192c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2241      	movs	r2, #65	; 0x41
 800193a:	5c9b      	ldrb	r3, [r3, r2]
 800193c:	b2db      	uxtb	r3, r3
 800193e:	2b20      	cmp	r3, #32
 8001940:	d138      	bne.n	80019b4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2240      	movs	r2, #64	; 0x40
 8001946:	5c9b      	ldrb	r3, [r3, r2]
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800194c:	2302      	movs	r3, #2
 800194e:	e032      	b.n	80019b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2240      	movs	r2, #64	; 0x40
 8001954:	2101      	movs	r1, #1
 8001956:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2241      	movs	r2, #65	; 0x41
 800195c:	2124      	movs	r1, #36	; 0x24
 800195e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2101      	movs	r1, #1
 800196c:	438a      	bics	r2, r1
 800196e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4911      	ldr	r1, [pc, #68]	; (80019c0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800197c:	400a      	ands	r2, r1
 800197e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6819      	ldr	r1, [r3, #0]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2101      	movs	r1, #1
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2241      	movs	r2, #65	; 0x41
 80019a4:	2120      	movs	r1, #32
 80019a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2240      	movs	r2, #64	; 0x40
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80019b0:	2300      	movs	r3, #0
 80019b2:	e000      	b.n	80019b6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80019b4:	2302      	movs	r3, #2
  }
}
 80019b6:	0018      	movs	r0, r3
 80019b8:	46bd      	mov	sp, r7
 80019ba:	b002      	add	sp, #8
 80019bc:	bd80      	pop	{r7, pc}
 80019be:	46c0      	nop			; (mov r8, r8)
 80019c0:	ffffefff 	.word	0xffffefff

080019c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	2241      	movs	r2, #65	; 0x41
 80019d2:	5c9b      	ldrb	r3, [r3, r2]
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b20      	cmp	r3, #32
 80019d8:	d139      	bne.n	8001a4e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2240      	movs	r2, #64	; 0x40
 80019de:	5c9b      	ldrb	r3, [r3, r2]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d101      	bne.n	80019e8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e033      	b.n	8001a50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2240      	movs	r2, #64	; 0x40
 80019ec:	2101      	movs	r1, #1
 80019ee:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2241      	movs	r2, #65	; 0x41
 80019f4:	2124      	movs	r1, #36	; 0x24
 80019f6:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2101      	movs	r1, #1
 8001a04:	438a      	bics	r2, r1
 8001a06:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	4a11      	ldr	r2, [pc, #68]	; (8001a58 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001a14:	4013      	ands	r3, r2
 8001a16:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	021b      	lsls	r3, r3, #8
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	681a      	ldr	r2, [r3, #0]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2101      	movs	r1, #1
 8001a36:	430a      	orrs	r2, r1
 8001a38:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2241      	movs	r2, #65	; 0x41
 8001a3e:	2120      	movs	r1, #32
 8001a40:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2240      	movs	r2, #64	; 0x40
 8001a46:	2100      	movs	r1, #0
 8001a48:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	e000      	b.n	8001a50 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001a4e:	2302      	movs	r3, #2
  }
}
 8001a50:	0018      	movs	r0, r3
 8001a52:	46bd      	mov	sp, r7
 8001a54:	b004      	add	sp, #16
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	fffff0ff 	.word	0xfffff0ff

08001a5c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001a66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001a6a:	2101      	movs	r1, #1
 8001a6c:	430a      	orrs	r2, r1
 8001a6e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 8001a70:	4b05      	ldr	r3, [pc, #20]	; (8001a88 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001a72:	6859      	ldr	r1, [r3, #4]
 8001a74:	4b04      	ldr	r3, [pc, #16]	; (8001a88 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001a76:	687a      	ldr	r2, [r7, #4]
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	605a      	str	r2, [r3, #4]
}
 8001a7c:	46c0      	nop			; (mov r8, r8)
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	b002      	add	sp, #8
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40021000 	.word	0x40021000
 8001a88:	40010000 	.word	0x40010000

08001a8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a8c:	b5b0      	push	{r4, r5, r7, lr}
 8001a8e:	b08a      	sub	sp, #40	; 0x28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d102      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f000 fbaf 	bl	80021fe <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa0:	4bcf      	ldr	r3, [pc, #828]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	220c      	movs	r2, #12
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001aaa:	4bcd      	ldr	r3, [pc, #820]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001aac:	68da      	ldr	r2, [r3, #12]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2201      	movs	r2, #1
 8001abc:	4013      	ands	r3, r2
 8001abe:	d100      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x36>
 8001ac0:	e07e      	b.n	8001bc0 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ac2:	6a3b      	ldr	r3, [r7, #32]
 8001ac4:	2b08      	cmp	r3, #8
 8001ac6:	d007      	beq.n	8001ad8 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ac8:	6a3b      	ldr	r3, [r7, #32]
 8001aca:	2b0c      	cmp	r3, #12
 8001acc:	d112      	bne.n	8001af4 <HAL_RCC_OscConfig+0x68>
 8001ace:	69fa      	ldr	r2, [r7, #28]
 8001ad0:	2380      	movs	r3, #128	; 0x80
 8001ad2:	025b      	lsls	r3, r3, #9
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d10d      	bne.n	8001af4 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad8:	4bc1      	ldr	r3, [pc, #772]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	029b      	lsls	r3, r3, #10
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d100      	bne.n	8001ae6 <HAL_RCC_OscConfig+0x5a>
 8001ae4:	e06b      	b.n	8001bbe <HAL_RCC_OscConfig+0x132>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d167      	bne.n	8001bbe <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	f000 fb85 	bl	80021fe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685a      	ldr	r2, [r3, #4]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	025b      	lsls	r3, r3, #9
 8001afc:	429a      	cmp	r2, r3
 8001afe:	d107      	bne.n	8001b10 <HAL_RCC_OscConfig+0x84>
 8001b00:	4bb7      	ldr	r3, [pc, #732]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4bb6      	ldr	r3, [pc, #728]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b06:	2180      	movs	r1, #128	; 0x80
 8001b08:	0249      	lsls	r1, r1, #9
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	601a      	str	r2, [r3, #0]
 8001b0e:	e027      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685a      	ldr	r2, [r3, #4]
 8001b14:	23a0      	movs	r3, #160	; 0xa0
 8001b16:	02db      	lsls	r3, r3, #11
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d10e      	bne.n	8001b3a <HAL_RCC_OscConfig+0xae>
 8001b1c:	4bb0      	ldr	r3, [pc, #704]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	4baf      	ldr	r3, [pc, #700]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b22:	2180      	movs	r1, #128	; 0x80
 8001b24:	02c9      	lsls	r1, r1, #11
 8001b26:	430a      	orrs	r2, r1
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	4bad      	ldr	r3, [pc, #692]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	4bac      	ldr	r3, [pc, #688]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b30:	2180      	movs	r1, #128	; 0x80
 8001b32:	0249      	lsls	r1, r1, #9
 8001b34:	430a      	orrs	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	e012      	b.n	8001b60 <HAL_RCC_OscConfig+0xd4>
 8001b3a:	4ba9      	ldr	r3, [pc, #676]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	4ba8      	ldr	r3, [pc, #672]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b40:	49a8      	ldr	r1, [pc, #672]	; (8001de4 <HAL_RCC_OscConfig+0x358>)
 8001b42:	400a      	ands	r2, r1
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	4ba6      	ldr	r3, [pc, #664]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	025b      	lsls	r3, r3, #9
 8001b4e:	4013      	ands	r3, r2
 8001b50:	60fb      	str	r3, [r7, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	4ba2      	ldr	r3, [pc, #648]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	4ba1      	ldr	r3, [pc, #644]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b5a:	49a3      	ldr	r1, [pc, #652]	; (8001de8 <HAL_RCC_OscConfig+0x35c>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d015      	beq.n	8001b94 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b68:	f7ff f9de 	bl	8000f28 <HAL_GetTick>
 8001b6c:	0003      	movs	r3, r0
 8001b6e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b70:	e009      	b.n	8001b86 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b72:	f7ff f9d9 	bl	8000f28 <HAL_GetTick>
 8001b76:	0002      	movs	r2, r0
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	2b64      	cmp	r3, #100	; 0x64
 8001b7e:	d902      	bls.n	8001b86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	f000 fb3c 	bl	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001b86:	4b96      	ldr	r3, [pc, #600]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	029b      	lsls	r3, r3, #10
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0ef      	beq.n	8001b72 <HAL_RCC_OscConfig+0xe6>
 8001b92:	e015      	b.n	8001bc0 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b94:	f7ff f9c8 	bl	8000f28 <HAL_GetTick>
 8001b98:	0003      	movs	r3, r0
 8001b9a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001b9e:	f7ff f9c3 	bl	8000f28 <HAL_GetTick>
 8001ba2:	0002      	movs	r2, r0
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b64      	cmp	r3, #100	; 0x64
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e326      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001bb0:	4b8b      	ldr	r3, [pc, #556]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	2380      	movs	r3, #128	; 0x80
 8001bb6:	029b      	lsls	r3, r3, #10
 8001bb8:	4013      	ands	r3, r2
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x112>
 8001bbc:	e000      	b.n	8001bc0 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bbe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2202      	movs	r2, #2
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d100      	bne.n	8001bcc <HAL_RCC_OscConfig+0x140>
 8001bca:	e08b      	b.n	8001ce4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001bd2:	6a3b      	ldr	r3, [r7, #32]
 8001bd4:	2b04      	cmp	r3, #4
 8001bd6:	d005      	beq.n	8001be4 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bd8:	6a3b      	ldr	r3, [r7, #32]
 8001bda:	2b0c      	cmp	r3, #12
 8001bdc:	d13e      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1d0>
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d13b      	bne.n	8001c5c <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001be4:	4b7e      	ldr	r3, [pc, #504]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2204      	movs	r2, #4
 8001bea:	4013      	ands	r3, r2
 8001bec:	d004      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x16c>
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d101      	bne.n	8001bf8 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e302      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bf8:	4b79      	ldr	r3, [pc, #484]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	4a7b      	ldr	r2, [pc, #492]	; (8001dec <HAL_RCC_OscConfig+0x360>)
 8001bfe:	4013      	ands	r3, r2
 8001c00:	0019      	movs	r1, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	021a      	lsls	r2, r3, #8
 8001c08:	4b75      	ldr	r3, [pc, #468]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c0a:	430a      	orrs	r2, r1
 8001c0c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c0e:	4b74      	ldr	r3, [pc, #464]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2209      	movs	r2, #9
 8001c14:	4393      	bics	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	4b71      	ldr	r3, [pc, #452]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c1a:	697a      	ldr	r2, [r7, #20]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c20:	f000 fc40 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8001c24:	0001      	movs	r1, r0
 8001c26:	4b6e      	ldr	r3, [pc, #440]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	091b      	lsrs	r3, r3, #4
 8001c2c:	220f      	movs	r2, #15
 8001c2e:	4013      	ands	r3, r2
 8001c30:	4a6f      	ldr	r2, [pc, #444]	; (8001df0 <HAL_RCC_OscConfig+0x364>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	000a      	movs	r2, r1
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	4b6e      	ldr	r3, [pc, #440]	; (8001df4 <HAL_RCC_OscConfig+0x368>)
 8001c3a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001c3c:	4b6e      	ldr	r3, [pc, #440]	; (8001df8 <HAL_RCC_OscConfig+0x36c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2513      	movs	r5, #19
 8001c42:	197c      	adds	r4, r7, r5
 8001c44:	0018      	movs	r0, r3
 8001c46:	f7ff f929 	bl	8000e9c <HAL_InitTick>
 8001c4a:	0003      	movs	r3, r0
 8001c4c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001c4e:	197b      	adds	r3, r7, r5
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d046      	beq.n	8001ce4 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001c56:	197b      	adds	r3, r7, r5
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	e2d0      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d027      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001c62:	4b5f      	ldr	r3, [pc, #380]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2209      	movs	r2, #9
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	4b5c      	ldr	r3, [pc, #368]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c6e:	697a      	ldr	r2, [r7, #20]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c74:	f7ff f958 	bl	8000f28 <HAL_GetTick>
 8001c78:	0003      	movs	r3, r0
 8001c7a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001c7e:	f7ff f953 	bl	8000f28 <HAL_GetTick>
 8001c82:	0002      	movs	r2, r0
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e2b6      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c90:	4b53      	ldr	r3, [pc, #332]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2204      	movs	r2, #4
 8001c96:	4013      	ands	r3, r2
 8001c98:	d0f1      	beq.n	8001c7e <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c9a:	4b51      	ldr	r3, [pc, #324]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	4a53      	ldr	r2, [pc, #332]	; (8001dec <HAL_RCC_OscConfig+0x360>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	0019      	movs	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	4b4d      	ldr	r3, [pc, #308]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001cac:	430a      	orrs	r2, r1
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	e018      	b.n	8001ce4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cb2:	4b4b      	ldr	r3, [pc, #300]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	4b4a      	ldr	r3, [pc, #296]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001cb8:	2101      	movs	r1, #1
 8001cba:	438a      	bics	r2, r1
 8001cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cbe:	f7ff f933 	bl	8000f28 <HAL_GetTick>
 8001cc2:	0003      	movs	r3, r0
 8001cc4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cc6:	e008      	b.n	8001cda <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001cc8:	f7ff f92e 	bl	8000f28 <HAL_GetTick>
 8001ccc:	0002      	movs	r2, r0
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	1ad3      	subs	r3, r2, r3
 8001cd2:	2b02      	cmp	r3, #2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e291      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001cda:	4b41      	ldr	r3, [pc, #260]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d1f1      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	4013      	ands	r3, r2
 8001cec:	d100      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x264>
 8001cee:	e0a1      	b.n	8001e34 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cf0:	6a3b      	ldr	r3, [r7, #32]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d140      	bne.n	8001d78 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cf6:	4b3a      	ldr	r3, [pc, #232]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	009b      	lsls	r3, r3, #2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d005      	beq.n	8001d0e <HAL_RCC_OscConfig+0x282>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	69db      	ldr	r3, [r3, #28]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e277      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d0e:	4b34      	ldr	r3, [pc, #208]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	4a3a      	ldr	r2, [pc, #232]	; (8001dfc <HAL_RCC_OscConfig+0x370>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	0019      	movs	r1, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d1c:	4b30      	ldr	r3, [pc, #192]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d22:	4b2f      	ldr	r3, [pc, #188]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	021b      	lsls	r3, r3, #8
 8001d28:	0a19      	lsrs	r1, r3, #8
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6a1b      	ldr	r3, [r3, #32]
 8001d2e:	061a      	lsls	r2, r3, #24
 8001d30:	4b2b      	ldr	r3, [pc, #172]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d32:	430a      	orrs	r2, r1
 8001d34:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	0b5b      	lsrs	r3, r3, #13
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	2280      	movs	r2, #128	; 0x80
 8001d40:	0212      	lsls	r2, r2, #8
 8001d42:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001d44:	4b26      	ldr	r3, [pc, #152]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	091b      	lsrs	r3, r3, #4
 8001d4a:	210f      	movs	r1, #15
 8001d4c:	400b      	ands	r3, r1
 8001d4e:	4928      	ldr	r1, [pc, #160]	; (8001df0 <HAL_RCC_OscConfig+0x364>)
 8001d50:	5ccb      	ldrb	r3, [r1, r3]
 8001d52:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001d54:	4b27      	ldr	r3, [pc, #156]	; (8001df4 <HAL_RCC_OscConfig+0x368>)
 8001d56:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001d58:	4b27      	ldr	r3, [pc, #156]	; (8001df8 <HAL_RCC_OscConfig+0x36c>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2513      	movs	r5, #19
 8001d5e:	197c      	adds	r4, r7, r5
 8001d60:	0018      	movs	r0, r3
 8001d62:	f7ff f89b 	bl	8000e9c <HAL_InitTick>
 8001d66:	0003      	movs	r3, r0
 8001d68:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001d6a:	197b      	adds	r3, r7, r5
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d060      	beq.n	8001e34 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001d72:	197b      	adds	r3, r7, r5
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	e242      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d03f      	beq.n	8001e00 <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d80:	4b17      	ldr	r3, [pc, #92]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	4b16      	ldr	r3, [pc, #88]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001d86:	2180      	movs	r1, #128	; 0x80
 8001d88:	0049      	lsls	r1, r1, #1
 8001d8a:	430a      	orrs	r2, r1
 8001d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff f8cb 	bl	8000f28 <HAL_GetTick>
 8001d92:	0003      	movs	r3, r0
 8001d94:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001d96:	e008      	b.n	8001daa <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d98:	f7ff f8c6 	bl	8000f28 <HAL_GetTick>
 8001d9c:	0002      	movs	r2, r0
 8001d9e:	69bb      	ldr	r3, [r7, #24]
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	2b02      	cmp	r3, #2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e229      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001daa:	4b0d      	ldr	r3, [pc, #52]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	2380      	movs	r3, #128	; 0x80
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4013      	ands	r3, r2
 8001db4:	d0f0      	beq.n	8001d98 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db6:	4b0a      	ldr	r3, [pc, #40]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	4a10      	ldr	r2, [pc, #64]	; (8001dfc <HAL_RCC_OscConfig+0x370>)
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	0019      	movs	r1, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dca:	4b05      	ldr	r3, [pc, #20]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	021b      	lsls	r3, r3, #8
 8001dd0:	0a19      	lsrs	r1, r3, #8
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a1b      	ldr	r3, [r3, #32]
 8001dd6:	061a      	lsls	r2, r3, #24
 8001dd8:	4b01      	ldr	r3, [pc, #4]	; (8001de0 <HAL_RCC_OscConfig+0x354>)
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
 8001dde:	e029      	b.n	8001e34 <HAL_RCC_OscConfig+0x3a8>
 8001de0:	40021000 	.word	0x40021000
 8001de4:	fffeffff 	.word	0xfffeffff
 8001de8:	fffbffff 	.word	0xfffbffff
 8001dec:	ffffe0ff 	.word	0xffffe0ff
 8001df0:	080038dc 	.word	0x080038dc
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000004 	.word	0x20000004
 8001dfc:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001e00:	4bbd      	ldr	r3, [pc, #756]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4bbc      	ldr	r3, [pc, #752]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e06:	49bd      	ldr	r1, [pc, #756]	; (80020fc <HAL_RCC_OscConfig+0x670>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff f88c 	bl	8000f28 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e16:	f7ff f887 	bl	8000f28 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e1ea      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001e28:	4bb3      	ldr	r3, [pc, #716]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	; 0x80
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4013      	ands	r3, r2
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d036      	beq.n	8001eac <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d019      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e46:	4bac      	ldr	r3, [pc, #688]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e4a:	4bab      	ldr	r3, [pc, #684]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e4c:	2101      	movs	r1, #1
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e52:	f7ff f869 	bl	8000f28 <HAL_GetTick>
 8001e56:	0003      	movs	r3, r0
 8001e58:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f864 	bl	8000f28 <HAL_GetTick>
 8001e60:	0002      	movs	r2, r0
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e1c7      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001e6e:	4ba2      	ldr	r3, [pc, #648]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e72:	2202      	movs	r2, #2
 8001e74:	4013      	ands	r3, r2
 8001e76:	d0f1      	beq.n	8001e5c <HAL_RCC_OscConfig+0x3d0>
 8001e78:	e018      	b.n	8001eac <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7a:	4b9f      	ldr	r3, [pc, #636]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e7e:	4b9e      	ldr	r3, [pc, #632]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001e80:	2101      	movs	r1, #1
 8001e82:	438a      	bics	r2, r1
 8001e84:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e86:	f7ff f84f 	bl	8000f28 <HAL_GetTick>
 8001e8a:	0003      	movs	r3, r0
 8001e8c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e8e:	e008      	b.n	8001ea2 <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e90:	f7ff f84a 	bl	8000f28 <HAL_GetTick>
 8001e94:	0002      	movs	r2, r0
 8001e96:	69bb      	ldr	r3, [r7, #24]
 8001e98:	1ad3      	subs	r3, r2, r3
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e1ad      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001ea2:	4b95      	ldr	r3, [pc, #596]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001ea4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d1f1      	bne.n	8001e90 <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2204      	movs	r2, #4
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d100      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x42c>
 8001eb6:	e0ae      	b.n	8002016 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb8:	2027      	movs	r0, #39	; 0x27
 8001eba:	183b      	adds	r3, r7, r0
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ec0:	4b8d      	ldr	r3, [pc, #564]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001ec2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ec4:	2380      	movs	r3, #128	; 0x80
 8001ec6:	055b      	lsls	r3, r3, #21
 8001ec8:	4013      	ands	r3, r2
 8001eca:	d109      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ecc:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001ece:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001ed0:	4b89      	ldr	r3, [pc, #548]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001ed2:	2180      	movs	r1, #128	; 0x80
 8001ed4:	0549      	lsls	r1, r1, #21
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001eda:	183b      	adds	r3, r7, r0
 8001edc:	2201      	movs	r2, #1
 8001ede:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee0:	4b87      	ldr	r3, [pc, #540]	; (8002100 <HAL_RCC_OscConfig+0x674>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	2380      	movs	r3, #128	; 0x80
 8001ee6:	005b      	lsls	r3, r3, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	d11a      	bne.n	8001f22 <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001eec:	4b84      	ldr	r3, [pc, #528]	; (8002100 <HAL_RCC_OscConfig+0x674>)
 8001eee:	681a      	ldr	r2, [r3, #0]
 8001ef0:	4b83      	ldr	r3, [pc, #524]	; (8002100 <HAL_RCC_OscConfig+0x674>)
 8001ef2:	2180      	movs	r1, #128	; 0x80
 8001ef4:	0049      	lsls	r1, r1, #1
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efa:	f7ff f815 	bl	8000f28 <HAL_GetTick>
 8001efe:	0003      	movs	r3, r0
 8001f00:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f02:	e008      	b.n	8001f16 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f04:	f7ff f810 	bl	8000f28 <HAL_GetTick>
 8001f08:	0002      	movs	r2, r0
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	2b64      	cmp	r3, #100	; 0x64
 8001f10:	d901      	bls.n	8001f16 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001f12:	2303      	movs	r3, #3
 8001f14:	e173      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f16:	4b7a      	ldr	r3, [pc, #488]	; (8002100 <HAL_RCC_OscConfig+0x674>)
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	4013      	ands	r3, r2
 8001f20:	d0f0      	beq.n	8001f04 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	689a      	ldr	r2, [r3, #8]
 8001f26:	2380      	movs	r3, #128	; 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	429a      	cmp	r2, r3
 8001f2c:	d107      	bne.n	8001f3e <HAL_RCC_OscConfig+0x4b2>
 8001f2e:	4b72      	ldr	r3, [pc, #456]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f30:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f32:	4b71      	ldr	r3, [pc, #452]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f34:	2180      	movs	r1, #128	; 0x80
 8001f36:	0049      	lsls	r1, r1, #1
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	651a      	str	r2, [r3, #80]	; 0x50
 8001f3c:	e031      	b.n	8001fa2 <HAL_RCC_OscConfig+0x516>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10c      	bne.n	8001f60 <HAL_RCC_OscConfig+0x4d4>
 8001f46:	4b6c      	ldr	r3, [pc, #432]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f4a:	4b6b      	ldr	r3, [pc, #428]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f4c:	496b      	ldr	r1, [pc, #428]	; (80020fc <HAL_RCC_OscConfig+0x670>)
 8001f4e:	400a      	ands	r2, r1
 8001f50:	651a      	str	r2, [r3, #80]	; 0x50
 8001f52:	4b69      	ldr	r3, [pc, #420]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f58:	496a      	ldr	r1, [pc, #424]	; (8002104 <HAL_RCC_OscConfig+0x678>)
 8001f5a:	400a      	ands	r2, r1
 8001f5c:	651a      	str	r2, [r3, #80]	; 0x50
 8001f5e:	e020      	b.n	8001fa2 <HAL_RCC_OscConfig+0x516>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689a      	ldr	r2, [r3, #8]
 8001f64:	23a0      	movs	r3, #160	; 0xa0
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d10e      	bne.n	8001f8a <HAL_RCC_OscConfig+0x4fe>
 8001f6c:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f70:	4b61      	ldr	r3, [pc, #388]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f72:	2180      	movs	r1, #128	; 0x80
 8001f74:	00c9      	lsls	r1, r1, #3
 8001f76:	430a      	orrs	r2, r1
 8001f78:	651a      	str	r2, [r3, #80]	; 0x50
 8001f7a:	4b5f      	ldr	r3, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f7e:	4b5e      	ldr	r3, [pc, #376]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f80:	2180      	movs	r1, #128	; 0x80
 8001f82:	0049      	lsls	r1, r1, #1
 8001f84:	430a      	orrs	r2, r1
 8001f86:	651a      	str	r2, [r3, #80]	; 0x50
 8001f88:	e00b      	b.n	8001fa2 <HAL_RCC_OscConfig+0x516>
 8001f8a:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f8c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f8e:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f90:	495a      	ldr	r1, [pc, #360]	; (80020fc <HAL_RCC_OscConfig+0x670>)
 8001f92:	400a      	ands	r2, r1
 8001f94:	651a      	str	r2, [r3, #80]	; 0x50
 8001f96:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001f9a:	4b57      	ldr	r3, [pc, #348]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001f9c:	4959      	ldr	r1, [pc, #356]	; (8002104 <HAL_RCC_OscConfig+0x678>)
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d015      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001faa:	f7fe ffbd 	bl	8000f28 <HAL_GetTick>
 8001fae:	0003      	movs	r3, r0
 8001fb0:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fb2:	e009      	b.n	8001fc8 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fb4:	f7fe ffb8 	bl	8000f28 <HAL_GetTick>
 8001fb8:	0002      	movs	r2, r0
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	1ad3      	subs	r3, r2, r3
 8001fbe:	4a52      	ldr	r2, [pc, #328]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d901      	bls.n	8001fc8 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e11a      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001fca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001fcc:	2380      	movs	r3, #128	; 0x80
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	d0ef      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x528>
 8001fd4:	e014      	b.n	8002000 <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd6:	f7fe ffa7 	bl	8000f28 <HAL_GetTick>
 8001fda:	0003      	movs	r3, r0
 8001fdc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001fde:	e009      	b.n	8001ff4 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fe0:	f7fe ffa2 	bl	8000f28 <HAL_GetTick>
 8001fe4:	0002      	movs	r2, r0
 8001fe6:	69bb      	ldr	r3, [r7, #24]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	4a47      	ldr	r2, [pc, #284]	; (8002108 <HAL_RCC_OscConfig+0x67c>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e104      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001ff4:	4b40      	ldr	r3, [pc, #256]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8001ff6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d1ef      	bne.n	8001fe0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002000:	2327      	movs	r3, #39	; 0x27
 8002002:	18fb      	adds	r3, r7, r3
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	2b01      	cmp	r3, #1
 8002008:	d105      	bne.n	8002016 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800200a:	4b3b      	ldr	r3, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 800200c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800200e:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8002010:	493e      	ldr	r1, [pc, #248]	; (800210c <HAL_RCC_OscConfig+0x680>)
 8002012:	400a      	ands	r2, r1
 8002014:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	2220      	movs	r2, #32
 800201c:	4013      	ands	r3, r2
 800201e:	d049      	beq.n	80020b4 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d026      	beq.n	8002076 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8002028:	4b33      	ldr	r3, [pc, #204]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 800202a:	689a      	ldr	r2, [r3, #8]
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 800202e:	2101      	movs	r1, #1
 8002030:	430a      	orrs	r2, r1
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	4b30      	ldr	r3, [pc, #192]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8002036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002038:	4b2f      	ldr	r3, [pc, #188]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 800203a:	2101      	movs	r1, #1
 800203c:	430a      	orrs	r2, r1
 800203e:	635a      	str	r2, [r3, #52]	; 0x34
 8002040:	4b33      	ldr	r3, [pc, #204]	; (8002110 <HAL_RCC_OscConfig+0x684>)
 8002042:	6a1a      	ldr	r2, [r3, #32]
 8002044:	4b32      	ldr	r3, [pc, #200]	; (8002110 <HAL_RCC_OscConfig+0x684>)
 8002046:	2180      	movs	r1, #128	; 0x80
 8002048:	0189      	lsls	r1, r1, #6
 800204a:	430a      	orrs	r2, r1
 800204c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204e:	f7fe ff6b 	bl	8000f28 <HAL_GetTick>
 8002052:	0003      	movs	r3, r0
 8002054:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002058:	f7fe ff66 	bl	8000f28 <HAL_GetTick>
 800205c:	0002      	movs	r2, r0
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e0c9      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	2202      	movs	r2, #2
 8002070:	4013      	ands	r3, r2
 8002072:	d0f1      	beq.n	8002058 <HAL_RCC_OscConfig+0x5cc>
 8002074:	e01e      	b.n	80020b4 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8002076:	4b20      	ldr	r3, [pc, #128]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 8002078:	689a      	ldr	r2, [r3, #8]
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 800207c:	2101      	movs	r1, #1
 800207e:	438a      	bics	r2, r1
 8002080:	609a      	str	r2, [r3, #8]
 8002082:	4b23      	ldr	r3, [pc, #140]	; (8002110 <HAL_RCC_OscConfig+0x684>)
 8002084:	6a1a      	ldr	r2, [r3, #32]
 8002086:	4b22      	ldr	r3, [pc, #136]	; (8002110 <HAL_RCC_OscConfig+0x684>)
 8002088:	4922      	ldr	r1, [pc, #136]	; (8002114 <HAL_RCC_OscConfig+0x688>)
 800208a:	400a      	ands	r2, r1
 800208c:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208e:	f7fe ff4b 	bl	8000f28 <HAL_GetTick>
 8002092:	0003      	movs	r3, r0
 8002094:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002098:	f7fe ff46 	bl	8000f28 <HAL_GetTick>
 800209c:	0002      	movs	r2, r0
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e0a9      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80020aa:	4b13      	ldr	r3, [pc, #76]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	2202      	movs	r2, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d1f1      	bne.n	8002098 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d100      	bne.n	80020be <HAL_RCC_OscConfig+0x632>
 80020bc:	e09e      	b.n	80021fc <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020be:	6a3b      	ldr	r3, [r7, #32]
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	d100      	bne.n	80020c6 <HAL_RCC_OscConfig+0x63a>
 80020c4:	e077      	b.n	80021b6 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d158      	bne.n	8002180 <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ce:	4b0a      	ldr	r3, [pc, #40]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	4b09      	ldr	r3, [pc, #36]	; (80020f8 <HAL_RCC_OscConfig+0x66c>)
 80020d4:	4910      	ldr	r1, [pc, #64]	; (8002118 <HAL_RCC_OscConfig+0x68c>)
 80020d6:	400a      	ands	r2, r1
 80020d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020da:	f7fe ff25 	bl	8000f28 <HAL_GetTick>
 80020de:	0003      	movs	r3, r0
 80020e0:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80020e2:	e01b      	b.n	800211c <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020e4:	f7fe ff20 	bl	8000f28 <HAL_GetTick>
 80020e8:	0002      	movs	r2, r0
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d914      	bls.n	800211c <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e083      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
 80020f6:	46c0      	nop			; (mov r8, r8)
 80020f8:	40021000 	.word	0x40021000
 80020fc:	fffffeff 	.word	0xfffffeff
 8002100:	40007000 	.word	0x40007000
 8002104:	fffffbff 	.word	0xfffffbff
 8002108:	00001388 	.word	0x00001388
 800210c:	efffffff 	.word	0xefffffff
 8002110:	40010000 	.word	0x40010000
 8002114:	ffffdfff 	.word	0xffffdfff
 8002118:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800211c:	4b3a      	ldr	r3, [pc, #232]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	2380      	movs	r3, #128	; 0x80
 8002122:	049b      	lsls	r3, r3, #18
 8002124:	4013      	ands	r3, r2
 8002126:	d1dd      	bne.n	80020e4 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002128:	4b37      	ldr	r3, [pc, #220]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a37      	ldr	r2, [pc, #220]	; (800220c <HAL_RCC_OscConfig+0x780>)
 800212e:	4013      	ands	r3, r2
 8002130:	0019      	movs	r1, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	431a      	orrs	r2, r3
 8002142:	4b31      	ldr	r3, [pc, #196]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b2f      	ldr	r3, [pc, #188]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b2e      	ldr	r3, [pc, #184]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0449      	lsls	r1, r1, #17
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002156:	f7fe fee7 	bl	8000f28 <HAL_GetTick>
 800215a:	0003      	movs	r3, r0
 800215c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800215e:	e008      	b.n	8002172 <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002160:	f7fe fee2 	bl	8000f28 <HAL_GetTick>
 8002164:	0002      	movs	r2, r0
 8002166:	69bb      	ldr	r3, [r7, #24]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	2b02      	cmp	r3, #2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e045      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8002172:	4b25      	ldr	r3, [pc, #148]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	2380      	movs	r3, #128	; 0x80
 8002178:	049b      	lsls	r3, r3, #18
 800217a:	4013      	ands	r3, r2
 800217c:	d0f0      	beq.n	8002160 <HAL_RCC_OscConfig+0x6d4>
 800217e:	e03d      	b.n	80021fc <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002180:	4b21      	ldr	r3, [pc, #132]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	4b20      	ldr	r3, [pc, #128]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 8002186:	4922      	ldr	r1, [pc, #136]	; (8002210 <HAL_RCC_OscConfig+0x784>)
 8002188:	400a      	ands	r2, r1
 800218a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800218c:	f7fe fecc 	bl	8000f28 <HAL_GetTick>
 8002190:	0003      	movs	r3, r0
 8002192:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8002194:	e008      	b.n	80021a8 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002196:	f7fe fec7 	bl	8000f28 <HAL_GetTick>
 800219a:	0002      	movs	r2, r0
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	2b02      	cmp	r3, #2
 80021a2:	d901      	bls.n	80021a8 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 80021a4:	2303      	movs	r3, #3
 80021a6:	e02a      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 80021aa:	681a      	ldr	r2, [r3, #0]
 80021ac:	2380      	movs	r3, #128	; 0x80
 80021ae:	049b      	lsls	r3, r3, #18
 80021b0:	4013      	ands	r3, r2
 80021b2:	d1f0      	bne.n	8002196 <HAL_RCC_OscConfig+0x70a>
 80021b4:	e022      	b.n	80021fc <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d101      	bne.n	80021c2 <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	e01d      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <HAL_RCC_OscConfig+0x77c>)
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	2380      	movs	r3, #128	; 0x80
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	401a      	ands	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d4:	429a      	cmp	r2, r3
 80021d6:	d10f      	bne.n	80021f8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021d8:	69fa      	ldr	r2, [r7, #28]
 80021da:	23f0      	movs	r3, #240	; 0xf0
 80021dc:	039b      	lsls	r3, r3, #14
 80021de:	401a      	ands	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d107      	bne.n	80021f8 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80021e8:	69fa      	ldr	r2, [r7, #28]
 80021ea:	23c0      	movs	r3, #192	; 0xc0
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	401a      	ands	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d001      	beq.n	80021fc <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 80021f8:	2301      	movs	r3, #1
 80021fa:	e000      	b.n	80021fe <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 80021fc:	2300      	movs	r3, #0
}
 80021fe:	0018      	movs	r0, r3
 8002200:	46bd      	mov	sp, r7
 8002202:	b00a      	add	sp, #40	; 0x28
 8002204:	bdb0      	pop	{r4, r5, r7, pc}
 8002206:	46c0      	nop			; (mov r8, r8)
 8002208:	40021000 	.word	0x40021000
 800220c:	ff02ffff 	.word	0xff02ffff
 8002210:	feffffff 	.word	0xfeffffff

08002214 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002214:	b5b0      	push	{r4, r5, r7, lr}
 8002216:	b084      	sub	sp, #16
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
 800221c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e128      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002228:	4b96      	ldr	r3, [pc, #600]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	2201      	movs	r2, #1
 800222e:	4013      	ands	r3, r2
 8002230:	683a      	ldr	r2, [r7, #0]
 8002232:	429a      	cmp	r2, r3
 8002234:	d91e      	bls.n	8002274 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002236:	4b93      	ldr	r3, [pc, #588]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	2201      	movs	r2, #1
 800223c:	4393      	bics	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	4b90      	ldr	r3, [pc, #576]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	430a      	orrs	r2, r1
 8002246:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002248:	f7fe fe6e 	bl	8000f28 <HAL_GetTick>
 800224c:	0003      	movs	r3, r0
 800224e:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002250:	e009      	b.n	8002266 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002252:	f7fe fe69 	bl	8000f28 <HAL_GetTick>
 8002256:	0002      	movs	r2, r0
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	4a8a      	ldr	r2, [pc, #552]	; (8002488 <HAL_RCC_ClockConfig+0x274>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e109      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002266:	4b87      	ldr	r3, [pc, #540]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2201      	movs	r2, #1
 800226c:	4013      	ands	r3, r2
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	429a      	cmp	r2, r3
 8002272:	d1ee      	bne.n	8002252 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d009      	beq.n	8002292 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800227e:	4b83      	ldr	r3, [pc, #524]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	22f0      	movs	r2, #240	; 0xf0
 8002284:	4393      	bics	r3, r2
 8002286:	0019      	movs	r1, r3
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	4b7f      	ldr	r3, [pc, #508]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 800228e:	430a      	orrs	r2, r1
 8002290:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2201      	movs	r2, #1
 8002298:	4013      	ands	r3, r2
 800229a:	d100      	bne.n	800229e <HAL_RCC_ClockConfig+0x8a>
 800229c:	e089      	b.n	80023b2 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d107      	bne.n	80022b6 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022a6:	4b79      	ldr	r3, [pc, #484]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	2380      	movs	r3, #128	; 0x80
 80022ac:	029b      	lsls	r3, r3, #10
 80022ae:	4013      	ands	r3, r2
 80022b0:	d120      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022b2:	2301      	movs	r3, #1
 80022b4:	e0e1      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022be:	4b73      	ldr	r3, [pc, #460]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	2380      	movs	r3, #128	; 0x80
 80022c4:	049b      	lsls	r3, r3, #18
 80022c6:	4013      	ands	r3, r2
 80022c8:	d114      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e0d5      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d106      	bne.n	80022e4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80022d6:	4b6d      	ldr	r3, [pc, #436]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	2204      	movs	r2, #4
 80022dc:	4013      	ands	r3, r2
 80022de:	d109      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022e0:	2301      	movs	r3, #1
 80022e2:	e0ca      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80022e4:	4b69      	ldr	r3, [pc, #420]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	2380      	movs	r3, #128	; 0x80
 80022ea:	009b      	lsls	r3, r3, #2
 80022ec:	4013      	ands	r3, r2
 80022ee:	d101      	bne.n	80022f4 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	e0c2      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022f4:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	2203      	movs	r2, #3
 80022fa:	4393      	bics	r3, r2
 80022fc:	0019      	movs	r1, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	685a      	ldr	r2, [r3, #4]
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002304:	430a      	orrs	r2, r1
 8002306:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002308:	f7fe fe0e 	bl	8000f28 <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b02      	cmp	r3, #2
 8002316:	d111      	bne.n	800233c <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002318:	e009      	b.n	800232e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800231a:	f7fe fe05 	bl	8000f28 <HAL_GetTick>
 800231e:	0002      	movs	r2, r0
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	4a58      	ldr	r2, [pc, #352]	; (8002488 <HAL_RCC_ClockConfig+0x274>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d901      	bls.n	800232e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e0a5      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800232e:	4b57      	ldr	r3, [pc, #348]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	220c      	movs	r2, #12
 8002334:	4013      	ands	r3, r2
 8002336:	2b08      	cmp	r3, #8
 8002338:	d1ef      	bne.n	800231a <HAL_RCC_ClockConfig+0x106>
 800233a:	e03a      	b.n	80023b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b03      	cmp	r3, #3
 8002342:	d111      	bne.n	8002368 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002344:	e009      	b.n	800235a <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002346:	f7fe fdef 	bl	8000f28 <HAL_GetTick>
 800234a:	0002      	movs	r2, r0
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	1ad3      	subs	r3, r2, r3
 8002350:	4a4d      	ldr	r2, [pc, #308]	; (8002488 <HAL_RCC_ClockConfig+0x274>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d901      	bls.n	800235a <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e08f      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800235a:	4b4c      	ldr	r3, [pc, #304]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	220c      	movs	r2, #12
 8002360:	4013      	ands	r3, r2
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d1ef      	bne.n	8002346 <HAL_RCC_ClockConfig+0x132>
 8002366:	e024      	b.n	80023b2 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d11b      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002370:	e009      	b.n	8002386 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002372:	f7fe fdd9 	bl	8000f28 <HAL_GetTick>
 8002376:	0002      	movs	r2, r0
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	1ad3      	subs	r3, r2, r3
 800237c:	4a42      	ldr	r2, [pc, #264]	; (8002488 <HAL_RCC_ClockConfig+0x274>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d901      	bls.n	8002386 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	e079      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002386:	4b41      	ldr	r3, [pc, #260]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	220c      	movs	r2, #12
 800238c:	4013      	ands	r3, r2
 800238e:	2b04      	cmp	r3, #4
 8002390:	d1ef      	bne.n	8002372 <HAL_RCC_ClockConfig+0x15e>
 8002392:	e00e      	b.n	80023b2 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002394:	f7fe fdc8 	bl	8000f28 <HAL_GetTick>
 8002398:	0002      	movs	r2, r0
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	4a3a      	ldr	r2, [pc, #232]	; (8002488 <HAL_RCC_ClockConfig+0x274>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d901      	bls.n	80023a8 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80023a4:	2303      	movs	r3, #3
 80023a6:	e068      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80023a8:	4b38      	ldr	r3, [pc, #224]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	220c      	movs	r2, #12
 80023ae:	4013      	ands	r3, r2
 80023b0:	d1f0      	bne.n	8002394 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80023b2:	4b34      	ldr	r3, [pc, #208]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	2201      	movs	r2, #1
 80023b8:	4013      	ands	r3, r2
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	429a      	cmp	r2, r3
 80023be:	d21e      	bcs.n	80023fe <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2201      	movs	r2, #1
 80023c6:	4393      	bics	r3, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	4b2e      	ldr	r3, [pc, #184]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	430a      	orrs	r2, r1
 80023d0:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d2:	f7fe fda9 	bl	8000f28 <HAL_GetTick>
 80023d6:	0003      	movs	r3, r0
 80023d8:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023da:	e009      	b.n	80023f0 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023dc:	f7fe fda4 	bl	8000f28 <HAL_GetTick>
 80023e0:	0002      	movs	r2, r0
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	4a28      	ldr	r2, [pc, #160]	; (8002488 <HAL_RCC_ClockConfig+0x274>)
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e044      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f0:	4b24      	ldr	r3, [pc, #144]	; (8002484 <HAL_RCC_ClockConfig+0x270>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2201      	movs	r2, #1
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	429a      	cmp	r2, r3
 80023fc:	d1ee      	bne.n	80023dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	4013      	ands	r3, r2
 8002406:	d009      	beq.n	800241c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002408:	4b20      	ldr	r3, [pc, #128]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	4a20      	ldr	r2, [pc, #128]	; (8002490 <HAL_RCC_ClockConfig+0x27c>)
 800240e:	4013      	ands	r3, r2
 8002410:	0019      	movs	r1, r3
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	4b1d      	ldr	r3, [pc, #116]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002418:	430a      	orrs	r2, r1
 800241a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	4013      	ands	r3, r2
 8002424:	d00a      	beq.n	800243c <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002426:	4b19      	ldr	r3, [pc, #100]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	4a1a      	ldr	r2, [pc, #104]	; (8002494 <HAL_RCC_ClockConfig+0x280>)
 800242c:	4013      	ands	r3, r2
 800242e:	0019      	movs	r1, r3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	00da      	lsls	r2, r3, #3
 8002436:	4b15      	ldr	r3, [pc, #84]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002438:	430a      	orrs	r2, r1
 800243a:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800243c:	f000 f832 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8002440:	0001      	movs	r1, r0
 8002442:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_RCC_ClockConfig+0x278>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	220f      	movs	r2, #15
 800244a:	4013      	ands	r3, r2
 800244c:	4a12      	ldr	r2, [pc, #72]	; (8002498 <HAL_RCC_ClockConfig+0x284>)
 800244e:	5cd3      	ldrb	r3, [r2, r3]
 8002450:	000a      	movs	r2, r1
 8002452:	40da      	lsrs	r2, r3
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <HAL_RCC_ClockConfig+0x288>)
 8002456:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002458:	4b11      	ldr	r3, [pc, #68]	; (80024a0 <HAL_RCC_ClockConfig+0x28c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	250b      	movs	r5, #11
 800245e:	197c      	adds	r4, r7, r5
 8002460:	0018      	movs	r0, r3
 8002462:	f7fe fd1b 	bl	8000e9c <HAL_InitTick>
 8002466:	0003      	movs	r3, r0
 8002468:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800246a:	197b      	adds	r3, r7, r5
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d002      	beq.n	8002478 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002472:	197b      	adds	r3, r7, r5
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	e000      	b.n	800247a <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8002478:	2300      	movs	r3, #0
}
 800247a:	0018      	movs	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	b004      	add	sp, #16
 8002480:	bdb0      	pop	{r4, r5, r7, pc}
 8002482:	46c0      	nop			; (mov r8, r8)
 8002484:	40022000 	.word	0x40022000
 8002488:	00001388 	.word	0x00001388
 800248c:	40021000 	.word	0x40021000
 8002490:	fffff8ff 	.word	0xfffff8ff
 8002494:	ffffc7ff 	.word	0xffffc7ff
 8002498:	080038dc 	.word	0x080038dc
 800249c:	20000000 	.word	0x20000000
 80024a0:	20000004 	.word	0x20000004

080024a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a4:	b5b0      	push	{r4, r5, r7, lr}
 80024a6:	b08e      	sub	sp, #56	; 0x38
 80024a8:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80024aa:	4b4c      	ldr	r3, [pc, #304]	; (80025dc <HAL_RCC_GetSysClockFreq+0x138>)
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024b2:	230c      	movs	r3, #12
 80024b4:	4013      	ands	r3, r2
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d014      	beq.n	80024e4 <HAL_RCC_GetSysClockFreq+0x40>
 80024ba:	d900      	bls.n	80024be <HAL_RCC_GetSysClockFreq+0x1a>
 80024bc:	e07b      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x112>
 80024be:	2b04      	cmp	r3, #4
 80024c0:	d002      	beq.n	80024c8 <HAL_RCC_GetSysClockFreq+0x24>
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_GetSysClockFreq+0x3a>
 80024c6:	e076      	b.n	80025b6 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80024c8:	4b44      	ldr	r3, [pc, #272]	; (80025dc <HAL_RCC_GetSysClockFreq+0x138>)
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	2210      	movs	r2, #16
 80024ce:	4013      	ands	r3, r2
 80024d0:	d002      	beq.n	80024d8 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80024d2:	4b43      	ldr	r3, [pc, #268]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 80024d4:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80024d6:	e07c      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80024d8:	4b42      	ldr	r3, [pc, #264]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x140>)
 80024da:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024dc:	e079      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024de:	4b42      	ldr	r3, [pc, #264]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x144>)
 80024e0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024e2:	e076      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80024e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e6:	0c9a      	lsrs	r2, r3, #18
 80024e8:	230f      	movs	r3, #15
 80024ea:	401a      	ands	r2, r3
 80024ec:	4b3f      	ldr	r3, [pc, #252]	; (80025ec <HAL_RCC_GetSysClockFreq+0x148>)
 80024ee:	5c9b      	ldrb	r3, [r3, r2]
 80024f0:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80024f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024f4:	0d9a      	lsrs	r2, r3, #22
 80024f6:	2303      	movs	r3, #3
 80024f8:	4013      	ands	r3, r2
 80024fa:	3301      	adds	r3, #1
 80024fc:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80024fe:	4b37      	ldr	r3, [pc, #220]	; (80025dc <HAL_RCC_GetSysClockFreq+0x138>)
 8002500:	68da      	ldr	r2, [r3, #12]
 8002502:	2380      	movs	r3, #128	; 0x80
 8002504:	025b      	lsls	r3, r3, #9
 8002506:	4013      	ands	r3, r2
 8002508:	d01a      	beq.n	8002540 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	61bb      	str	r3, [r7, #24]
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
 8002512:	4a35      	ldr	r2, [pc, #212]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x144>)
 8002514:	2300      	movs	r3, #0
 8002516:	69b8      	ldr	r0, [r7, #24]
 8002518:	69f9      	ldr	r1, [r7, #28]
 800251a:	f7fd fea1 	bl	8000260 <__aeabi_lmul>
 800251e:	0002      	movs	r2, r0
 8002520:	000b      	movs	r3, r1
 8002522:	0010      	movs	r0, r2
 8002524:	0019      	movs	r1, r3
 8002526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002528:	613b      	str	r3, [r7, #16]
 800252a:	2300      	movs	r3, #0
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	693a      	ldr	r2, [r7, #16]
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f7fd fe75 	bl	8000220 <__aeabi_uldivmod>
 8002536:	0002      	movs	r2, r0
 8002538:	000b      	movs	r3, r1
 800253a:	0013      	movs	r3, r2
 800253c:	637b      	str	r3, [r7, #52]	; 0x34
 800253e:	e037      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002540:	4b26      	ldr	r3, [pc, #152]	; (80025dc <HAL_RCC_GetSysClockFreq+0x138>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	2210      	movs	r2, #16
 8002546:	4013      	ands	r3, r2
 8002548:	d01a      	beq.n	8002580 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800254a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254c:	60bb      	str	r3, [r7, #8]
 800254e:	2300      	movs	r3, #0
 8002550:	60fb      	str	r3, [r7, #12]
 8002552:	4a23      	ldr	r2, [pc, #140]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002554:	2300      	movs	r3, #0
 8002556:	68b8      	ldr	r0, [r7, #8]
 8002558:	68f9      	ldr	r1, [r7, #12]
 800255a:	f7fd fe81 	bl	8000260 <__aeabi_lmul>
 800255e:	0002      	movs	r2, r0
 8002560:	000b      	movs	r3, r1
 8002562:	0010      	movs	r0, r2
 8002564:	0019      	movs	r1, r3
 8002566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002568:	603b      	str	r3, [r7, #0]
 800256a:	2300      	movs	r3, #0
 800256c:	607b      	str	r3, [r7, #4]
 800256e:	683a      	ldr	r2, [r7, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	f7fd fe55 	bl	8000220 <__aeabi_uldivmod>
 8002576:	0002      	movs	r2, r0
 8002578:	000b      	movs	r3, r1
 800257a:	0013      	movs	r3, r2
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
 800257e:	e017      	b.n	80025b0 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002582:	0018      	movs	r0, r3
 8002584:	2300      	movs	r3, #0
 8002586:	0019      	movs	r1, r3
 8002588:	4a16      	ldr	r2, [pc, #88]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x140>)
 800258a:	2300      	movs	r3, #0
 800258c:	f7fd fe68 	bl	8000260 <__aeabi_lmul>
 8002590:	0002      	movs	r2, r0
 8002592:	000b      	movs	r3, r1
 8002594:	0010      	movs	r0, r2
 8002596:	0019      	movs	r1, r3
 8002598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259a:	001c      	movs	r4, r3
 800259c:	2300      	movs	r3, #0
 800259e:	001d      	movs	r5, r3
 80025a0:	0022      	movs	r2, r4
 80025a2:	002b      	movs	r3, r5
 80025a4:	f7fd fe3c 	bl	8000220 <__aeabi_uldivmod>
 80025a8:	0002      	movs	r2, r0
 80025aa:	000b      	movs	r3, r1
 80025ac:	0013      	movs	r3, r2
 80025ae:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80025b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025b2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025b4:	e00d      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80025b6:	4b09      	ldr	r3, [pc, #36]	; (80025dc <HAL_RCC_GetSysClockFreq+0x138>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	0b5b      	lsrs	r3, r3, #13
 80025bc:	2207      	movs	r2, #7
 80025be:	4013      	ands	r3, r2
 80025c0:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80025c2:	6a3b      	ldr	r3, [r7, #32]
 80025c4:	3301      	adds	r3, #1
 80025c6:	2280      	movs	r2, #128	; 0x80
 80025c8:	0212      	lsls	r2, r2, #8
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80025d0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80025d4:	0018      	movs	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	b00e      	add	sp, #56	; 0x38
 80025da:	bdb0      	pop	{r4, r5, r7, pc}
 80025dc:	40021000 	.word	0x40021000
 80025e0:	003d0900 	.word	0x003d0900
 80025e4:	00f42400 	.word	0x00f42400
 80025e8:	007a1200 	.word	0x007a1200
 80025ec:	080038f4 	.word	0x080038f4

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b02      	ldr	r3, [pc, #8]	; (8002600 <HAL_RCC_GetHCLKFreq+0x10>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	0018      	movs	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	20000000 	.word	0x20000000

08002604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002608:	f7ff fff2 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 800260c:	0001      	movs	r1, r0
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002610:	68db      	ldr	r3, [r3, #12]
 8002612:	0a1b      	lsrs	r3, r3, #8
 8002614:	2207      	movs	r2, #7
 8002616:	4013      	ands	r3, r2
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <HAL_RCC_GetPCLK1Freq+0x28>)
 800261a:	5cd3      	ldrb	r3, [r2, r3]
 800261c:	40d9      	lsrs	r1, r3
 800261e:	000b      	movs	r3, r1
}
 8002620:	0018      	movs	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	bd80      	pop	{r7, pc}
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	40021000 	.word	0x40021000
 800262c:	080038ec 	.word	0x080038ec

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffdc 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002638:	0001      	movs	r1, r0
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	0adb      	lsrs	r3, r3, #11
 8002640:	2207      	movs	r2, #7
 8002642:	4013      	ands	r3, r2
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	40d9      	lsrs	r1, r3
 800264a:	000b      	movs	r3, r1
}
 800264c:	0018      	movs	r0, r3
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	46c0      	nop			; (mov r8, r8)
 8002654:	40021000 	.word	0x40021000
 8002658:	080038ec 	.word	0x080038ec

0800265c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002664:	2017      	movs	r0, #23
 8002666:	183b      	adds	r3, r7, r0
 8002668:	2200      	movs	r2, #0
 800266a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2220      	movs	r2, #32
 8002672:	4013      	ands	r3, r2
 8002674:	d100      	bne.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8002676:	e0c2      	b.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002678:	4b90      	ldr	r3, [pc, #576]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800267c:	2380      	movs	r3, #128	; 0x80
 800267e:	055b      	lsls	r3, r3, #21
 8002680:	4013      	ands	r3, r2
 8002682:	d109      	bne.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002684:	4b8d      	ldr	r3, [pc, #564]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002686:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002688:	4b8c      	ldr	r3, [pc, #560]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0549      	lsls	r1, r1, #21
 800268e:	430a      	orrs	r2, r1
 8002690:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002692:	183b      	adds	r3, r7, r0
 8002694:	2201      	movs	r2, #1
 8002696:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002698:	4b89      	ldr	r3, [pc, #548]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	2380      	movs	r3, #128	; 0x80
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4013      	ands	r3, r2
 80026a2:	d11a      	bne.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026a4:	4b86      	ldr	r3, [pc, #536]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026a6:	681a      	ldr	r2, [r3, #0]
 80026a8:	4b85      	ldr	r3, [pc, #532]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026aa:	2180      	movs	r1, #128	; 0x80
 80026ac:	0049      	lsls	r1, r1, #1
 80026ae:	430a      	orrs	r2, r1
 80026b0:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026b2:	f7fe fc39 	bl	8000f28 <HAL_GetTick>
 80026b6:	0003      	movs	r3, r0
 80026b8:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ba:	e008      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026bc:	f7fe fc34 	bl	8000f28 <HAL_GetTick>
 80026c0:	0002      	movs	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e0f2      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ce:	4b7c      	ldr	r3, [pc, #496]	; (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	2380      	movs	r3, #128	; 0x80
 80026d4:	005b      	lsls	r3, r3, #1
 80026d6:	4013      	ands	r3, r2
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80026da:	4b78      	ldr	r3, [pc, #480]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	23c0      	movs	r3, #192	; 0xc0
 80026e0:	039b      	lsls	r3, r3, #14
 80026e2:	4013      	ands	r3, r2
 80026e4:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685a      	ldr	r2, [r3, #4]
 80026ea:	23c0      	movs	r3, #192	; 0xc0
 80026ec:	039b      	lsls	r3, r3, #14
 80026ee:	4013      	ands	r3, r2
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d013      	beq.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	685a      	ldr	r2, [r3, #4]
 80026fa:	23c0      	movs	r3, #192	; 0xc0
 80026fc:	029b      	lsls	r3, r3, #10
 80026fe:	401a      	ands	r2, r3
 8002700:	23c0      	movs	r3, #192	; 0xc0
 8002702:	029b      	lsls	r3, r3, #10
 8002704:	429a      	cmp	r2, r3
 8002706:	d10a      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8002708:	4b6c      	ldr	r3, [pc, #432]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	2380      	movs	r3, #128	; 0x80
 800270e:	029b      	lsls	r3, r3, #10
 8002710:	401a      	ands	r2, r3
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	029b      	lsls	r3, r3, #10
 8002716:	429a      	cmp	r2, r3
 8002718:	d101      	bne.n	800271e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e0ca      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800271e:	4b67      	ldr	r3, [pc, #412]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002720:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002722:	23c0      	movs	r3, #192	; 0xc0
 8002724:	029b      	lsls	r3, r3, #10
 8002726:	4013      	ands	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d03b      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685a      	ldr	r2, [r3, #4]
 8002734:	23c0      	movs	r3, #192	; 0xc0
 8002736:	029b      	lsls	r3, r3, #10
 8002738:	4013      	ands	r3, r2
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	429a      	cmp	r2, r3
 800273e:	d033      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2220      	movs	r2, #32
 8002746:	4013      	ands	r3, r2
 8002748:	d02e      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800274a:	4b5c      	ldr	r3, [pc, #368]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800274c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800274e:	4a5d      	ldr	r2, [pc, #372]	; (80028c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002750:	4013      	ands	r3, r2
 8002752:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002754:	4b59      	ldr	r3, [pc, #356]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002756:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002758:	4b58      	ldr	r3, [pc, #352]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275a:	2180      	movs	r1, #128	; 0x80
 800275c:	0309      	lsls	r1, r1, #12
 800275e:	430a      	orrs	r2, r1
 8002760:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002766:	4b55      	ldr	r3, [pc, #340]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002768:	4957      	ldr	r1, [pc, #348]	; (80028c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800276a:	400a      	ands	r2, r1
 800276c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800276e:	4b53      	ldr	r3, [pc, #332]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002770:	68fa      	ldr	r2, [r7, #12]
 8002772:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002774:	68fa      	ldr	r2, [r7, #12]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	005b      	lsls	r3, r3, #1
 800277a:	4013      	ands	r3, r2
 800277c:	d014      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800277e:	f7fe fbd3 	bl	8000f28 <HAL_GetTick>
 8002782:	0003      	movs	r3, r0
 8002784:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002786:	e009      	b.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002788:	f7fe fbce 	bl	8000f28 <HAL_GetTick>
 800278c:	0002      	movs	r2, r0
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	4a4e      	ldr	r2, [pc, #312]	; (80028cc <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d901      	bls.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e08b      	b.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800279c:	4b47      	ldr	r3, [pc, #284]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800279e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80027a0:	2380      	movs	r3, #128	; 0x80
 80027a2:	009b      	lsls	r3, r3, #2
 80027a4:	4013      	ands	r3, r2
 80027a6:	d0ef      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685a      	ldr	r2, [r3, #4]
 80027ac:	23c0      	movs	r3, #192	; 0xc0
 80027ae:	029b      	lsls	r3, r3, #10
 80027b0:	401a      	ands	r2, r3
 80027b2:	23c0      	movs	r3, #192	; 0xc0
 80027b4:	029b      	lsls	r3, r3, #10
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d10c      	bne.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x178>
 80027ba:	4b40      	ldr	r3, [pc, #256]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a44      	ldr	r2, [pc, #272]	; (80028d0 <HAL_RCCEx_PeriphCLKConfig+0x274>)
 80027c0:	4013      	ands	r3, r2
 80027c2:	0019      	movs	r1, r3
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	23c0      	movs	r3, #192	; 0xc0
 80027ca:	039b      	lsls	r3, r3, #14
 80027cc:	401a      	ands	r2, r3
 80027ce:	4b3b      	ldr	r3, [pc, #236]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d0:	430a      	orrs	r2, r1
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	4b39      	ldr	r3, [pc, #228]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d6:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	23c0      	movs	r3, #192	; 0xc0
 80027de:	029b      	lsls	r3, r3, #10
 80027e0:	401a      	ands	r2, r3
 80027e2:	4b36      	ldr	r3, [pc, #216]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027e4:	430a      	orrs	r2, r1
 80027e6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027e8:	2317      	movs	r3, #23
 80027ea:	18fb      	adds	r3, r7, r3
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d105      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f2:	4b32      	ldr	r3, [pc, #200]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027f6:	4b31      	ldr	r3, [pc, #196]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027f8:	4936      	ldr	r1, [pc, #216]	; (80028d4 <HAL_RCCEx_PeriphCLKConfig+0x278>)
 80027fa:	400a      	ands	r2, r1
 80027fc:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	2201      	movs	r2, #1
 8002804:	4013      	ands	r3, r2
 8002806:	d009      	beq.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002808:	4b2c      	ldr	r3, [pc, #176]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800280a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280c:	2203      	movs	r2, #3
 800280e:	4393      	bics	r3, r2
 8002810:	0019      	movs	r1, r3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	689a      	ldr	r2, [r3, #8]
 8002816:	4b29      	ldr	r3, [pc, #164]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002818:	430a      	orrs	r2, r1
 800281a:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	2202      	movs	r2, #2
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002826:	4b25      	ldr	r3, [pc, #148]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	220c      	movs	r2, #12
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68da      	ldr	r2, [r3, #12]
 8002834:	4b21      	ldr	r3, [pc, #132]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002836:	430a      	orrs	r2, r1
 8002838:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2204      	movs	r2, #4
 8002840:	4013      	ands	r3, r2
 8002842:	d009      	beq.n	8002858 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002844:	4b1d      	ldr	r3, [pc, #116]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002848:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800284a:	4013      	ands	r3, r2
 800284c:	0019      	movs	r1, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	4b1a      	ldr	r3, [pc, #104]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002854:	430a      	orrs	r2, r1
 8002856:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	2208      	movs	r2, #8
 800285e:	4013      	ands	r3, r2
 8002860:	d009      	beq.n	8002876 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002862:	4b16      	ldr	r3, [pc, #88]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002866:	4a1d      	ldr	r2, [pc, #116]	; (80028dc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002868:	4013      	ands	r3, r2
 800286a:	0019      	movs	r1, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	695a      	ldr	r2, [r3, #20]
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002872:	430a      	orrs	r2, r1
 8002874:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2240      	movs	r2, #64	; 0x40
 800287c:	4013      	ands	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002880:	4b0e      	ldr	r3, [pc, #56]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002884:	4a16      	ldr	r2, [pc, #88]	; (80028e0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69da      	ldr	r2, [r3, #28]
 800288e:	4b0b      	ldr	r3, [pc, #44]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002890:	430a      	orrs	r2, r1
 8002892:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2280      	movs	r2, #128	; 0x80
 800289a:	4013      	ands	r3, r2
 800289c:	d009      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800289e:	4b07      	ldr	r3, [pc, #28]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a2:	4a10      	ldr	r2, [pc, #64]	; (80028e4 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80028a4:	4013      	ands	r3, r2
 80028a6:	0019      	movs	r1, r3
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	4b03      	ldr	r3, [pc, #12]	; (80028bc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ae:	430a      	orrs	r2, r1
 80028b0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	0018      	movs	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	b006      	add	sp, #24
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40021000 	.word	0x40021000
 80028c0:	40007000 	.word	0x40007000
 80028c4:	fffcffff 	.word	0xfffcffff
 80028c8:	fff7ffff 	.word	0xfff7ffff
 80028cc:	00001388 	.word	0x00001388
 80028d0:	ffcfffff 	.word	0xffcfffff
 80028d4:	efffffff 	.word	0xefffffff
 80028d8:	fffff3ff 	.word	0xfffff3ff
 80028dc:	ffffcfff 	.word	0xffffcfff
 80028e0:	fbffffff 	.word	0xfbffffff
 80028e4:	fff3ffff 	.word	0xfff3ffff

080028e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b082      	sub	sp, #8
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80028f6:	2301      	movs	r3, #1
 80028f8:	e083      	b.n	8002a02 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	685a      	ldr	r2, [r3, #4]
 8002906:	2382      	movs	r3, #130	; 0x82
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	429a      	cmp	r2, r3
 800290c:	d009      	beq.n	8002922 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2200      	movs	r2, #0
 8002912:	61da      	str	r2, [r3, #28]
 8002914:	e005      	b.n	8002922 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2200      	movs	r2, #0
 800291a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2200      	movs	r2, #0
 8002926:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2251      	movs	r2, #81	; 0x51
 800292c:	5c9b      	ldrb	r3, [r3, r2]
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2250      	movs	r2, #80	; 0x50
 8002938:	2100      	movs	r1, #0
 800293a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	0018      	movs	r0, r3
 8002940:	f7fe f960 	bl	8000c04 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2251      	movs	r2, #81	; 0x51
 8002948:	2102      	movs	r1, #2
 800294a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2140      	movs	r1, #64	; 0x40
 8002958:	438a      	bics	r2, r1
 800295a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	685a      	ldr	r2, [r3, #4]
 8002960:	2382      	movs	r3, #130	; 0x82
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	401a      	ands	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6899      	ldr	r1, [r3, #8]
 800296a:	2384      	movs	r3, #132	; 0x84
 800296c:	021b      	lsls	r3, r3, #8
 800296e:	400b      	ands	r3, r1
 8002970:	431a      	orrs	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	68d9      	ldr	r1, [r3, #12]
 8002976:	2380      	movs	r3, #128	; 0x80
 8002978:	011b      	lsls	r3, r3, #4
 800297a:	400b      	ands	r3, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	2102      	movs	r1, #2
 8002984:	400b      	ands	r3, r1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	695b      	ldr	r3, [r3, #20]
 800298c:	2101      	movs	r1, #1
 800298e:	400b      	ands	r3, r1
 8002990:	431a      	orrs	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6999      	ldr	r1, [r3, #24]
 8002996:	2380      	movs	r3, #128	; 0x80
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	400b      	ands	r3, r1
 800299c:	431a      	orrs	r2, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	69db      	ldr	r3, [r3, #28]
 80029a2:	2138      	movs	r1, #56	; 0x38
 80029a4:	400b      	ands	r3, r1
 80029a6:	431a      	orrs	r2, r3
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	2180      	movs	r1, #128	; 0x80
 80029ae:	400b      	ands	r3, r1
 80029b0:	431a      	orrs	r2, r3
 80029b2:	0011      	movs	r1, r2
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029b8:	2380      	movs	r3, #128	; 0x80
 80029ba:	019b      	lsls	r3, r3, #6
 80029bc:	401a      	ands	r2, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	430a      	orrs	r2, r1
 80029c4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	0c1b      	lsrs	r3, r3, #16
 80029cc:	2204      	movs	r2, #4
 80029ce:	4013      	ands	r3, r2
 80029d0:	0019      	movs	r1, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d6:	2210      	movs	r2, #16
 80029d8:	401a      	ands	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	69da      	ldr	r2, [r3, #28]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <HAL_SPI_Init+0x124>)
 80029ee:	400a      	ands	r2, r1
 80029f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2251      	movs	r2, #81	; 0x51
 80029fc:	2101      	movs	r1, #1
 80029fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	0018      	movs	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	b002      	add	sp, #8
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	46c0      	nop			; (mov r8, r8)
 8002a0c:	fffff7ff 	.word	0xfffff7ff

08002a10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e032      	b.n	8002a88 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2239      	movs	r2, #57	; 0x39
 8002a26:	5c9b      	ldrb	r3, [r3, r2]
 8002a28:	b2db      	uxtb	r3, r3
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d107      	bne.n	8002a3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2238      	movs	r2, #56	; 0x38
 8002a32:	2100      	movs	r1, #0
 8002a34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	0018      	movs	r0, r3
 8002a3a:	f7fe f927 	bl	8000c8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2239      	movs	r2, #57	; 0x39
 8002a42:	2102      	movs	r1, #2
 8002a44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	0019      	movs	r1, r3
 8002a50:	0010      	movs	r0, r2
 8002a52:	f000 f8e7 	bl	8002c24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	223e      	movs	r2, #62	; 0x3e
 8002a5a:	2101      	movs	r1, #1
 8002a5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	223a      	movs	r2, #58	; 0x3a
 8002a62:	2101      	movs	r1, #1
 8002a64:	5499      	strb	r1, [r3, r2]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	223b      	movs	r2, #59	; 0x3b
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	5499      	strb	r1, [r3, r2]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	223c      	movs	r2, #60	; 0x3c
 8002a72:	2101      	movs	r1, #1
 8002a74:	5499      	strb	r1, [r3, r2]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	223d      	movs	r2, #61	; 0x3d
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2239      	movs	r2, #57	; 0x39
 8002a82:	2101      	movs	r1, #1
 8002a84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	0018      	movs	r0, r3
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	b002      	add	sp, #8
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2238      	movs	r2, #56	; 0x38
 8002a9e:	5c9b      	ldrb	r3, [r3, r2]
 8002aa0:	2b01      	cmp	r3, #1
 8002aa2:	d101      	bne.n	8002aa8 <HAL_TIM_ConfigClockSource+0x18>
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	e0b7      	b.n	8002c18 <HAL_TIM_ConfigClockSource+0x188>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2238      	movs	r2, #56	; 0x38
 8002aac:	2101      	movs	r1, #1
 8002aae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2239      	movs	r2, #57	; 0x39
 8002ab4:	2102      	movs	r1, #2
 8002ab6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2277      	movs	r2, #119	; 0x77
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	4a55      	ldr	r2, [pc, #340]	; (8002c20 <HAL_TIM_ConfigClockSource+0x190>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	2280      	movs	r2, #128	; 0x80
 8002ade:	0192      	lsls	r2, r2, #6
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d040      	beq.n	8002b66 <HAL_TIM_ConfigClockSource+0xd6>
 8002ae4:	2280      	movs	r2, #128	; 0x80
 8002ae6:	0192      	lsls	r2, r2, #6
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d900      	bls.n	8002aee <HAL_TIM_ConfigClockSource+0x5e>
 8002aec:	e088      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002aee:	2280      	movs	r2, #128	; 0x80
 8002af0:	0152      	lsls	r2, r2, #5
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d100      	bne.n	8002af8 <HAL_TIM_ConfigClockSource+0x68>
 8002af6:	e085      	b.n	8002c04 <HAL_TIM_ConfigClockSource+0x174>
 8002af8:	2280      	movs	r2, #128	; 0x80
 8002afa:	0152      	lsls	r2, r2, #5
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d900      	bls.n	8002b02 <HAL_TIM_ConfigClockSource+0x72>
 8002b00:	e07e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b02:	2b70      	cmp	r3, #112	; 0x70
 8002b04:	d018      	beq.n	8002b38 <HAL_TIM_ConfigClockSource+0xa8>
 8002b06:	d900      	bls.n	8002b0a <HAL_TIM_ConfigClockSource+0x7a>
 8002b08:	e07a      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b0a:	2b60      	cmp	r3, #96	; 0x60
 8002b0c:	d04f      	beq.n	8002bae <HAL_TIM_ConfigClockSource+0x11e>
 8002b0e:	d900      	bls.n	8002b12 <HAL_TIM_ConfigClockSource+0x82>
 8002b10:	e076      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b12:	2b50      	cmp	r3, #80	; 0x50
 8002b14:	d03b      	beq.n	8002b8e <HAL_TIM_ConfigClockSource+0xfe>
 8002b16:	d900      	bls.n	8002b1a <HAL_TIM_ConfigClockSource+0x8a>
 8002b18:	e072      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b1a:	2b40      	cmp	r3, #64	; 0x40
 8002b1c:	d057      	beq.n	8002bce <HAL_TIM_ConfigClockSource+0x13e>
 8002b1e:	d900      	bls.n	8002b22 <HAL_TIM_ConfigClockSource+0x92>
 8002b20:	e06e      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b22:	2b30      	cmp	r3, #48	; 0x30
 8002b24:	d063      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15e>
 8002b26:	d86b      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b28:	2b20      	cmp	r3, #32
 8002b2a:	d060      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15e>
 8002b2c:	d868      	bhi.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d05d      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15e>
 8002b32:	2b10      	cmp	r3, #16
 8002b34:	d05b      	beq.n	8002bee <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002b36:	e063      	b.n	8002c00 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	6899      	ldr	r1, [r3, #8]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	685a      	ldr	r2, [r3, #4]
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	f000 f93a 	bl	8002dc0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2277      	movs	r2, #119	; 0x77
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68fa      	ldr	r2, [r7, #12]
 8002b62:	609a      	str	r2, [r3, #8]
      break;
 8002b64:	e04f      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6818      	ldr	r0, [r3, #0]
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	6899      	ldr	r1, [r3, #8]
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685a      	ldr	r2, [r3, #4]
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f000 f923 	bl	8002dc0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689a      	ldr	r2, [r3, #8]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2180      	movs	r1, #128	; 0x80
 8002b86:	01c9      	lsls	r1, r1, #7
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	609a      	str	r2, [r3, #8]
      break;
 8002b8c:	e03b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6818      	ldr	r0, [r3, #0]
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	001a      	movs	r2, r3
 8002b9c:	f000 f896 	bl	8002ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2150      	movs	r1, #80	; 0x50
 8002ba6:	0018      	movs	r0, r3
 8002ba8:	f000 f8f0 	bl	8002d8c <TIM_ITRx_SetConfig>
      break;
 8002bac:	e02b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6818      	ldr	r0, [r3, #0]
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	6859      	ldr	r1, [r3, #4]
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	001a      	movs	r2, r3
 8002bbc:	f000 f8b4 	bl	8002d28 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2160      	movs	r1, #96	; 0x60
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	f000 f8e0 	bl	8002d8c <TIM_ITRx_SetConfig>
      break;
 8002bcc:	e01b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6818      	ldr	r0, [r3, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	6859      	ldr	r1, [r3, #4]
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	001a      	movs	r2, r3
 8002bdc:	f000 f876 	bl	8002ccc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2140      	movs	r1, #64	; 0x40
 8002be6:	0018      	movs	r0, r3
 8002be8:	f000 f8d0 	bl	8002d8c <TIM_ITRx_SetConfig>
      break;
 8002bec:	e00b      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	0019      	movs	r1, r3
 8002bf8:	0010      	movs	r0, r2
 8002bfa:	f000 f8c7 	bl	8002d8c <TIM_ITRx_SetConfig>
        break;
 8002bfe:	e002      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002c00:	46c0      	nop			; (mov r8, r8)
 8002c02:	e000      	b.n	8002c06 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002c04:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2239      	movs	r2, #57	; 0x39
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2238      	movs	r2, #56	; 0x38
 8002c12:	2100      	movs	r1, #0
 8002c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c16:	2300      	movs	r3, #0
}
 8002c18:	0018      	movs	r0, r3
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	b004      	add	sp, #16
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	ffff00ff 	.word	0xffff00ff

08002c24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b084      	sub	sp, #16
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	2380      	movs	r3, #128	; 0x80
 8002c38:	05db      	lsls	r3, r3, #23
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d007      	beq.n	8002c4e <TIM_Base_SetConfig+0x2a>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <TIM_Base_SetConfig+0x9c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d003      	beq.n	8002c4e <TIM_Base_SetConfig+0x2a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a1e      	ldr	r2, [pc, #120]	; (8002cc4 <TIM_Base_SetConfig+0xa0>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d108      	bne.n	8002c60 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2270      	movs	r2, #112	; 0x70
 8002c52:	4393      	bics	r3, r2
 8002c54:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c60:	687a      	ldr	r2, [r7, #4]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	05db      	lsls	r3, r3, #23
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d007      	beq.n	8002c7a <TIM_Base_SetConfig+0x56>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <TIM_Base_SetConfig+0x9c>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d003      	beq.n	8002c7a <TIM_Base_SetConfig+0x56>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <TIM_Base_SetConfig+0xa0>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d108      	bne.n	8002c8c <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4a12      	ldr	r2, [pc, #72]	; (8002cc8 <TIM_Base_SetConfig+0xa4>)
 8002c7e:	4013      	ands	r3, r2
 8002c80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	4313      	orrs	r3, r2
 8002c8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	2280      	movs	r2, #128	; 0x80
 8002c90:	4393      	bics	r3, r2
 8002c92:	001a      	movs	r2, r3
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	615a      	str	r2, [r3, #20]
}
 8002cb8:	46c0      	nop			; (mov r8, r8)
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	b004      	add	sp, #16
 8002cbe:	bd80      	pop	{r7, pc}
 8002cc0:	40010800 	.word	0x40010800
 8002cc4:	40011400 	.word	0x40011400
 8002cc8:	fffffcff 	.word	0xfffffcff

08002ccc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a1b      	ldr	r3, [r3, #32]
 8002cdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	4393      	bics	r3, r2
 8002ce6:	001a      	movs	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	22f0      	movs	r2, #240	; 0xf0
 8002cf6:	4393      	bics	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	011b      	lsls	r3, r3, #4
 8002cfe:	693a      	ldr	r2, [r7, #16]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	220a      	movs	r2, #10
 8002d08:	4393      	bics	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d0c:	697a      	ldr	r2, [r7, #20]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	4313      	orrs	r3, r2
 8002d12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	693a      	ldr	r2, [r7, #16]
 8002d18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	621a      	str	r2, [r3, #32]
}
 8002d20:	46c0      	nop			; (mov r8, r8)
 8002d22:	46bd      	mov	sp, r7
 8002d24:	b006      	add	sp, #24
 8002d26:	bd80      	pop	{r7, pc}

08002d28 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b086      	sub	sp, #24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a1b      	ldr	r3, [r3, #32]
 8002d38:	2210      	movs	r2, #16
 8002d3a:	4393      	bics	r3, r2
 8002d3c:	001a      	movs	r2, r3
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	699b      	ldr	r3, [r3, #24]
 8002d46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	6a1b      	ldr	r3, [r3, #32]
 8002d4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d4e:	697b      	ldr	r3, [r7, #20]
 8002d50:	4a0d      	ldr	r2, [pc, #52]	; (8002d88 <TIM_TI2_ConfigInputStage+0x60>)
 8002d52:	4013      	ands	r3, r2
 8002d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	031b      	lsls	r3, r3, #12
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	22a0      	movs	r2, #160	; 0xa0
 8002d64:	4393      	bics	r3, r2
 8002d66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	693a      	ldr	r2, [r7, #16]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	697a      	ldr	r2, [r7, #20]
 8002d76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	693a      	ldr	r2, [r7, #16]
 8002d7c:	621a      	str	r2, [r3, #32]
}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b006      	add	sp, #24
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	46c0      	nop			; (mov r8, r8)
 8002d88:	ffff0fff 	.word	0xffff0fff

08002d8c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2270      	movs	r2, #112	; 0x70
 8002da0:	4393      	bics	r3, r2
 8002da2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002da4:	683a      	ldr	r2, [r7, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	2207      	movs	r2, #7
 8002dac:	4313      	orrs	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68fa      	ldr	r2, [r7, #12]
 8002db4:	609a      	str	r2, [r3, #8]
}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	46bd      	mov	sp, r7
 8002dba:	b004      	add	sp, #16
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
 8002dcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	4a09      	ldr	r2, [pc, #36]	; (8002dfc <TIM_ETR_SetConfig+0x3c>)
 8002dd8:	4013      	ands	r3, r2
 8002dda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	021a      	lsls	r2, r3, #8
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	431a      	orrs	r2, r3
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	697a      	ldr	r2, [r7, #20]
 8002df2:	609a      	str	r2, [r3, #8]
}
 8002df4:	46c0      	nop			; (mov r8, r8)
 8002df6:	46bd      	mov	sp, r7
 8002df8:	b006      	add	sp, #24
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	ffff00ff 	.word	0xffff00ff

08002e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2238      	movs	r2, #56	; 0x38
 8002e0e:	5c9b      	ldrb	r3, [r3, r2]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d101      	bne.n	8002e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e14:	2302      	movs	r3, #2
 8002e16:	e042      	b.n	8002e9e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2238      	movs	r2, #56	; 0x38
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2239      	movs	r2, #57	; 0x39
 8002e24:	2102      	movs	r1, #2
 8002e26:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	689b      	ldr	r3, [r3, #8]
 8002e36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2270      	movs	r2, #112	; 0x70
 8002e3c:	4393      	bics	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68fa      	ldr	r2, [r7, #12]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	05db      	lsls	r3, r3, #23
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d009      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d004      	beq.n	8002e72 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0f      	ldr	r2, [pc, #60]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d10c      	bne.n	8002e8c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	2280      	movs	r2, #128	; 0x80
 8002e76:	4393      	bics	r3, r2
 8002e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2239      	movs	r2, #57	; 0x39
 8002e90:	2101      	movs	r1, #1
 8002e92:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2238      	movs	r2, #56	; 0x38
 8002e98:	2100      	movs	r1, #0
 8002e9a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9c:	2300      	movs	r3, #0
}
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	b004      	add	sp, #16
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	40010800 	.word	0x40010800
 8002eac:	40011400 	.word	0x40011400

08002eb0 <HAL_HalfDuplex_Init>:
  *        parameters in the UART_InitTypeDef and creates the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HalfDuplex_Init(UART_HandleTypeDef *huart)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_HalfDuplex_Init+0x12>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e04c      	b.n	8002f5c <HAL_HalfDuplex_Init+0xac>
  }

  /* Check UART instance */
  assert_param(IS_UART_HALFDUPLEX_INSTANCE(huart->Instance));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d107      	bne.n	8002eda <HAL_HalfDuplex_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2274      	movs	r2, #116	; 0x74
 8002ece:	2100      	movs	r1, #0
 8002ed0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7fd ff37 	bl	8000d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2224      	movs	r2, #36	; 0x24
 8002ede:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681a      	ldr	r2, [r3, #0]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	2101      	movs	r1, #1
 8002eec:	438a      	bics	r2, r1
 8002eee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	f000 f838 	bl	8002f68 <UART_SetConfig>
 8002ef8:	0003      	movs	r3, r0
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d101      	bne.n	8002f02 <HAL_HalfDuplex_Init+0x52>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e02c      	b.n	8002f5c <HAL_HalfDuplex_Init+0xac>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_HalfDuplex_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	0018      	movs	r0, r3
 8002f0e:	f000 facb 	bl	80034a8 <UART_AdvFeatureConfig>
  }

  /* In half-duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4911      	ldr	r1, [pc, #68]	; (8002f64 <HAL_HalfDuplex_Init+0xb4>)
 8002f1e:	400a      	ands	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_IREN | USART_CR3_SCEN));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	689a      	ldr	r2, [r3, #8]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2122      	movs	r1, #34	; 0x22
 8002f2e:	438a      	bics	r2, r1
 8002f30:	609a      	str	r2, [r3, #8]

  /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	689a      	ldr	r2, [r3, #8]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	430a      	orrs	r2, r1
 8002f40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	2101      	movs	r1, #1
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	0018      	movs	r0, r3
 8002f56:	f000 fb5b 	bl	8003610 <UART_CheckIdleState>
 8002f5a:	0003      	movs	r3, r0
}
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	b002      	add	sp, #8
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	ffffb7ff 	.word	0xffffb7ff

08002f68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f68:	b5b0      	push	{r4, r5, r7, lr}
 8002f6a:	b08e      	sub	sp, #56	; 0x38
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f70:	231a      	movs	r3, #26
 8002f72:	2218      	movs	r2, #24
 8002f74:	4694      	mov	ip, r2
 8002f76:	44bc      	add	ip, r7
 8002f78:	4463      	add	r3, ip
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	431a      	orrs	r2, r3
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	695b      	ldr	r3, [r3, #20]
 8002f8c:	431a      	orrs	r2, r3
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	69db      	ldr	r3, [r3, #28]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4ac1      	ldr	r2, [pc, #772]	; (80032a4 <UART_SetConfig+0x33c>)
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	69fb      	ldr	r3, [r7, #28]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	4abd      	ldr	r2, [pc, #756]	; (80032a8 <UART_SetConfig+0x340>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	0019      	movs	r1, r3
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	699b      	ldr	r3, [r3, #24]
 8002fc8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4ab7      	ldr	r2, [pc, #732]	; (80032ac <UART_SetConfig+0x344>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d004      	beq.n	8002fde <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fd4:	69fb      	ldr	r3, [r7, #28]
 8002fd6:	6a1b      	ldr	r3, [r3, #32]
 8002fd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4ab2      	ldr	r2, [pc, #712]	; (80032b0 <UART_SetConfig+0x348>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4aae      	ldr	r2, [pc, #696]	; (80032b4 <UART_SetConfig+0x34c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d136      	bne.n	800306c <UART_SetConfig+0x104>
 8002ffe:	4bae      	ldr	r3, [pc, #696]	; (80032b8 <UART_SetConfig+0x350>)
 8003000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003002:	2203      	movs	r2, #3
 8003004:	4013      	ands	r3, r2
 8003006:	2b03      	cmp	r3, #3
 8003008:	d020      	beq.n	800304c <UART_SetConfig+0xe4>
 800300a:	d827      	bhi.n	800305c <UART_SetConfig+0xf4>
 800300c:	2b02      	cmp	r3, #2
 800300e:	d00d      	beq.n	800302c <UART_SetConfig+0xc4>
 8003010:	d824      	bhi.n	800305c <UART_SetConfig+0xf4>
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <UART_SetConfig+0xb4>
 8003016:	2b01      	cmp	r3, #1
 8003018:	d010      	beq.n	800303c <UART_SetConfig+0xd4>
 800301a:	e01f      	b.n	800305c <UART_SetConfig+0xf4>
 800301c:	231b      	movs	r3, #27
 800301e:	2218      	movs	r2, #24
 8003020:	4694      	mov	ip, r2
 8003022:	44bc      	add	ip, r7
 8003024:	4463      	add	r3, ip
 8003026:	2201      	movs	r2, #1
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e0ab      	b.n	8003184 <UART_SetConfig+0x21c>
 800302c:	231b      	movs	r3, #27
 800302e:	2218      	movs	r2, #24
 8003030:	4694      	mov	ip, r2
 8003032:	44bc      	add	ip, r7
 8003034:	4463      	add	r3, ip
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]
 800303a:	e0a3      	b.n	8003184 <UART_SetConfig+0x21c>
 800303c:	231b      	movs	r3, #27
 800303e:	2218      	movs	r2, #24
 8003040:	4694      	mov	ip, r2
 8003042:	44bc      	add	ip, r7
 8003044:	4463      	add	r3, ip
 8003046:	2204      	movs	r2, #4
 8003048:	701a      	strb	r2, [r3, #0]
 800304a:	e09b      	b.n	8003184 <UART_SetConfig+0x21c>
 800304c:	231b      	movs	r3, #27
 800304e:	2218      	movs	r2, #24
 8003050:	4694      	mov	ip, r2
 8003052:	44bc      	add	ip, r7
 8003054:	4463      	add	r3, ip
 8003056:	2208      	movs	r2, #8
 8003058:	701a      	strb	r2, [r3, #0]
 800305a:	e093      	b.n	8003184 <UART_SetConfig+0x21c>
 800305c:	231b      	movs	r3, #27
 800305e:	2218      	movs	r2, #24
 8003060:	4694      	mov	ip, r2
 8003062:	44bc      	add	ip, r7
 8003064:	4463      	add	r3, ip
 8003066:	2210      	movs	r2, #16
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e08b      	b.n	8003184 <UART_SetConfig+0x21c>
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a92      	ldr	r2, [pc, #584]	; (80032bc <UART_SetConfig+0x354>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d136      	bne.n	80030e4 <UART_SetConfig+0x17c>
 8003076:	4b90      	ldr	r3, [pc, #576]	; (80032b8 <UART_SetConfig+0x350>)
 8003078:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800307a:	220c      	movs	r2, #12
 800307c:	4013      	ands	r3, r2
 800307e:	2b0c      	cmp	r3, #12
 8003080:	d020      	beq.n	80030c4 <UART_SetConfig+0x15c>
 8003082:	d827      	bhi.n	80030d4 <UART_SetConfig+0x16c>
 8003084:	2b08      	cmp	r3, #8
 8003086:	d00d      	beq.n	80030a4 <UART_SetConfig+0x13c>
 8003088:	d824      	bhi.n	80030d4 <UART_SetConfig+0x16c>
 800308a:	2b00      	cmp	r3, #0
 800308c:	d002      	beq.n	8003094 <UART_SetConfig+0x12c>
 800308e:	2b04      	cmp	r3, #4
 8003090:	d010      	beq.n	80030b4 <UART_SetConfig+0x14c>
 8003092:	e01f      	b.n	80030d4 <UART_SetConfig+0x16c>
 8003094:	231b      	movs	r3, #27
 8003096:	2218      	movs	r2, #24
 8003098:	4694      	mov	ip, r2
 800309a:	44bc      	add	ip, r7
 800309c:	4463      	add	r3, ip
 800309e:	2200      	movs	r2, #0
 80030a0:	701a      	strb	r2, [r3, #0]
 80030a2:	e06f      	b.n	8003184 <UART_SetConfig+0x21c>
 80030a4:	231b      	movs	r3, #27
 80030a6:	2218      	movs	r2, #24
 80030a8:	4694      	mov	ip, r2
 80030aa:	44bc      	add	ip, r7
 80030ac:	4463      	add	r3, ip
 80030ae:	2202      	movs	r2, #2
 80030b0:	701a      	strb	r2, [r3, #0]
 80030b2:	e067      	b.n	8003184 <UART_SetConfig+0x21c>
 80030b4:	231b      	movs	r3, #27
 80030b6:	2218      	movs	r2, #24
 80030b8:	4694      	mov	ip, r2
 80030ba:	44bc      	add	ip, r7
 80030bc:	4463      	add	r3, ip
 80030be:	2204      	movs	r2, #4
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e05f      	b.n	8003184 <UART_SetConfig+0x21c>
 80030c4:	231b      	movs	r3, #27
 80030c6:	2218      	movs	r2, #24
 80030c8:	4694      	mov	ip, r2
 80030ca:	44bc      	add	ip, r7
 80030cc:	4463      	add	r3, ip
 80030ce:	2208      	movs	r2, #8
 80030d0:	701a      	strb	r2, [r3, #0]
 80030d2:	e057      	b.n	8003184 <UART_SetConfig+0x21c>
 80030d4:	231b      	movs	r3, #27
 80030d6:	2218      	movs	r2, #24
 80030d8:	4694      	mov	ip, r2
 80030da:	44bc      	add	ip, r7
 80030dc:	4463      	add	r3, ip
 80030de:	2210      	movs	r2, #16
 80030e0:	701a      	strb	r2, [r3, #0]
 80030e2:	e04f      	b.n	8003184 <UART_SetConfig+0x21c>
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a70      	ldr	r2, [pc, #448]	; (80032ac <UART_SetConfig+0x344>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d143      	bne.n	8003176 <UART_SetConfig+0x20e>
 80030ee:	4b72      	ldr	r3, [pc, #456]	; (80032b8 <UART_SetConfig+0x350>)
 80030f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030f2:	23c0      	movs	r3, #192	; 0xc0
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	4013      	ands	r3, r2
 80030f8:	22c0      	movs	r2, #192	; 0xc0
 80030fa:	0112      	lsls	r2, r2, #4
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d02a      	beq.n	8003156 <UART_SetConfig+0x1ee>
 8003100:	22c0      	movs	r2, #192	; 0xc0
 8003102:	0112      	lsls	r2, r2, #4
 8003104:	4293      	cmp	r3, r2
 8003106:	d82e      	bhi.n	8003166 <UART_SetConfig+0x1fe>
 8003108:	2280      	movs	r2, #128	; 0x80
 800310a:	0112      	lsls	r2, r2, #4
 800310c:	4293      	cmp	r3, r2
 800310e:	d012      	beq.n	8003136 <UART_SetConfig+0x1ce>
 8003110:	2280      	movs	r2, #128	; 0x80
 8003112:	0112      	lsls	r2, r2, #4
 8003114:	4293      	cmp	r3, r2
 8003116:	d826      	bhi.n	8003166 <UART_SetConfig+0x1fe>
 8003118:	2b00      	cmp	r3, #0
 800311a:	d004      	beq.n	8003126 <UART_SetConfig+0x1be>
 800311c:	2280      	movs	r2, #128	; 0x80
 800311e:	00d2      	lsls	r2, r2, #3
 8003120:	4293      	cmp	r3, r2
 8003122:	d010      	beq.n	8003146 <UART_SetConfig+0x1de>
 8003124:	e01f      	b.n	8003166 <UART_SetConfig+0x1fe>
 8003126:	231b      	movs	r3, #27
 8003128:	2218      	movs	r2, #24
 800312a:	4694      	mov	ip, r2
 800312c:	44bc      	add	ip, r7
 800312e:	4463      	add	r3, ip
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
 8003134:	e026      	b.n	8003184 <UART_SetConfig+0x21c>
 8003136:	231b      	movs	r3, #27
 8003138:	2218      	movs	r2, #24
 800313a:	4694      	mov	ip, r2
 800313c:	44bc      	add	ip, r7
 800313e:	4463      	add	r3, ip
 8003140:	2202      	movs	r2, #2
 8003142:	701a      	strb	r2, [r3, #0]
 8003144:	e01e      	b.n	8003184 <UART_SetConfig+0x21c>
 8003146:	231b      	movs	r3, #27
 8003148:	2218      	movs	r2, #24
 800314a:	4694      	mov	ip, r2
 800314c:	44bc      	add	ip, r7
 800314e:	4463      	add	r3, ip
 8003150:	2204      	movs	r2, #4
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	e016      	b.n	8003184 <UART_SetConfig+0x21c>
 8003156:	231b      	movs	r3, #27
 8003158:	2218      	movs	r2, #24
 800315a:	4694      	mov	ip, r2
 800315c:	44bc      	add	ip, r7
 800315e:	4463      	add	r3, ip
 8003160:	2208      	movs	r2, #8
 8003162:	701a      	strb	r2, [r3, #0]
 8003164:	e00e      	b.n	8003184 <UART_SetConfig+0x21c>
 8003166:	231b      	movs	r3, #27
 8003168:	2218      	movs	r2, #24
 800316a:	4694      	mov	ip, r2
 800316c:	44bc      	add	ip, r7
 800316e:	4463      	add	r3, ip
 8003170:	2210      	movs	r2, #16
 8003172:	701a      	strb	r2, [r3, #0]
 8003174:	e006      	b.n	8003184 <UART_SetConfig+0x21c>
 8003176:	231b      	movs	r3, #27
 8003178:	2218      	movs	r2, #24
 800317a:	4694      	mov	ip, r2
 800317c:	44bc      	add	ip, r7
 800317e:	4463      	add	r3, ip
 8003180:	2210      	movs	r2, #16
 8003182:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a48      	ldr	r2, [pc, #288]	; (80032ac <UART_SetConfig+0x344>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d000      	beq.n	8003190 <UART_SetConfig+0x228>
 800318e:	e09b      	b.n	80032c8 <UART_SetConfig+0x360>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003190:	231b      	movs	r3, #27
 8003192:	2218      	movs	r2, #24
 8003194:	4694      	mov	ip, r2
 8003196:	44bc      	add	ip, r7
 8003198:	4463      	add	r3, ip
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	2b08      	cmp	r3, #8
 800319e:	d01d      	beq.n	80031dc <UART_SetConfig+0x274>
 80031a0:	dc20      	bgt.n	80031e4 <UART_SetConfig+0x27c>
 80031a2:	2b04      	cmp	r3, #4
 80031a4:	d015      	beq.n	80031d2 <UART_SetConfig+0x26a>
 80031a6:	dc1d      	bgt.n	80031e4 <UART_SetConfig+0x27c>
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <UART_SetConfig+0x24a>
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d005      	beq.n	80031bc <UART_SetConfig+0x254>
 80031b0:	e018      	b.n	80031e4 <UART_SetConfig+0x27c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b2:	f7ff fa27 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 80031b6:	0003      	movs	r3, r0
 80031b8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031ba:	e01d      	b.n	80031f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031bc:	4b3e      	ldr	r3, [pc, #248]	; (80032b8 <UART_SetConfig+0x350>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2210      	movs	r2, #16
 80031c2:	4013      	ands	r3, r2
 80031c4:	d002      	beq.n	80031cc <UART_SetConfig+0x264>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80031c6:	4b3e      	ldr	r3, [pc, #248]	; (80032c0 <UART_SetConfig+0x358>)
 80031c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80031ca:	e015      	b.n	80031f8 <UART_SetConfig+0x290>
          pclk = (uint32_t) HSI_VALUE;
 80031cc:	4b3d      	ldr	r3, [pc, #244]	; (80032c4 <UART_SetConfig+0x35c>)
 80031ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031d0:	e012      	b.n	80031f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d2:	f7ff f967 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 80031d6:	0003      	movs	r3, r0
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031da:	e00d      	b.n	80031f8 <UART_SetConfig+0x290>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031dc:	2380      	movs	r3, #128	; 0x80
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80031e2:	e009      	b.n	80031f8 <UART_SetConfig+0x290>
      default:
        pclk = 0U;
 80031e4:	2300      	movs	r3, #0
 80031e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80031e8:	231a      	movs	r3, #26
 80031ea:	2218      	movs	r2, #24
 80031ec:	4694      	mov	ip, r2
 80031ee:	44bc      	add	ip, r7
 80031f0:	4463      	add	r3, ip
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
        break;
 80031f6:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d100      	bne.n	8003200 <UART_SetConfig+0x298>
 80031fe:	e139      	b.n	8003474 <UART_SetConfig+0x50c>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003200:	69fb      	ldr	r3, [r7, #28]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	0013      	movs	r3, r2
 8003206:	005b      	lsls	r3, r3, #1
 8003208:	189b      	adds	r3, r3, r2
 800320a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800320c:	429a      	cmp	r2, r3
 800320e:	d305      	bcc.n	800321c <UART_SetConfig+0x2b4>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003216:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003218:	429a      	cmp	r2, r3
 800321a:	d907      	bls.n	800322c <UART_SetConfig+0x2c4>
      {
        ret = HAL_ERROR;
 800321c:	231a      	movs	r3, #26
 800321e:	2218      	movs	r2, #24
 8003220:	4694      	mov	ip, r2
 8003222:	44bc      	add	ip, r7
 8003224:	4463      	add	r3, ip
 8003226:	2201      	movs	r2, #1
 8003228:	701a      	strb	r2, [r3, #0]
 800322a:	e123      	b.n	8003474 <UART_SetConfig+0x50c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800322e:	613b      	str	r3, [r7, #16]
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	6939      	ldr	r1, [r7, #16]
 8003236:	697a      	ldr	r2, [r7, #20]
 8003238:	000b      	movs	r3, r1
 800323a:	0e1b      	lsrs	r3, r3, #24
 800323c:	0010      	movs	r0, r2
 800323e:	0205      	lsls	r5, r0, #8
 8003240:	431d      	orrs	r5, r3
 8003242:	000b      	movs	r3, r1
 8003244:	021c      	lsls	r4, r3, #8
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	085b      	lsrs	r3, r3, #1
 800324c:	60bb      	str	r3, [r7, #8]
 800324e:	2300      	movs	r3, #0
 8003250:	60fb      	str	r3, [r7, #12]
 8003252:	68b8      	ldr	r0, [r7, #8]
 8003254:	68f9      	ldr	r1, [r7, #12]
 8003256:	1900      	adds	r0, r0, r4
 8003258:	4169      	adcs	r1, r5
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	603b      	str	r3, [r7, #0]
 8003260:	2300      	movs	r3, #0
 8003262:	607b      	str	r3, [r7, #4]
 8003264:	683a      	ldr	r2, [r7, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f7fc ffda 	bl	8000220 <__aeabi_uldivmod>
 800326c:	0002      	movs	r2, r0
 800326e:	000b      	movs	r3, r1
 8003270:	0013      	movs	r3, r2
 8003272:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003274:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003276:	23c0      	movs	r3, #192	; 0xc0
 8003278:	009b      	lsls	r3, r3, #2
 800327a:	429a      	cmp	r2, r3
 800327c:	d309      	bcc.n	8003292 <UART_SetConfig+0x32a>
 800327e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003280:	2380      	movs	r3, #128	; 0x80
 8003282:	035b      	lsls	r3, r3, #13
 8003284:	429a      	cmp	r2, r3
 8003286:	d204      	bcs.n	8003292 <UART_SetConfig+0x32a>
        {
          huart->Instance->BRR = usartdiv;
 8003288:	69fb      	ldr	r3, [r7, #28]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	e0f0      	b.n	8003474 <UART_SetConfig+0x50c>
        }
        else
        {
          ret = HAL_ERROR;
 8003292:	231a      	movs	r3, #26
 8003294:	2218      	movs	r2, #24
 8003296:	4694      	mov	ip, r2
 8003298:	44bc      	add	ip, r7
 800329a:	4463      	add	r3, ip
 800329c:	2201      	movs	r2, #1
 800329e:	701a      	strb	r2, [r3, #0]
 80032a0:	e0e8      	b.n	8003474 <UART_SetConfig+0x50c>
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	efff69f3 	.word	0xefff69f3
 80032a8:	ffffcfff 	.word	0xffffcfff
 80032ac:	40004800 	.word	0x40004800
 80032b0:	fffff4ff 	.word	0xfffff4ff
 80032b4:	40013800 	.word	0x40013800
 80032b8:	40021000 	.word	0x40021000
 80032bc:	40004400 	.word	0x40004400
 80032c0:	003d0900 	.word	0x003d0900
 80032c4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	69da      	ldr	r2, [r3, #28]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	021b      	lsls	r3, r3, #8
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d000      	beq.n	80032d6 <UART_SetConfig+0x36e>
 80032d4:	e074      	b.n	80033c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80032d6:	231b      	movs	r3, #27
 80032d8:	2218      	movs	r2, #24
 80032da:	4694      	mov	ip, r2
 80032dc:	44bc      	add	ip, r7
 80032de:	4463      	add	r3, ip
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b08      	cmp	r3, #8
 80032e4:	d822      	bhi.n	800332c <UART_SetConfig+0x3c4>
 80032e6:	009a      	lsls	r2, r3, #2
 80032e8:	4b6a      	ldr	r3, [pc, #424]	; (8003494 <UART_SetConfig+0x52c>)
 80032ea:	18d3      	adds	r3, r2, r3
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032f0:	f7ff f988 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 80032f4:	0003      	movs	r3, r0
 80032f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80032f8:	e022      	b.n	8003340 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032fa:	f7ff f999 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80032fe:	0003      	movs	r3, r0
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003302:	e01d      	b.n	8003340 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003304:	4b64      	ldr	r3, [pc, #400]	; (8003498 <UART_SetConfig+0x530>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2210      	movs	r2, #16
 800330a:	4013      	ands	r3, r2
 800330c:	d002      	beq.n	8003314 <UART_SetConfig+0x3ac>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800330e:	4b63      	ldr	r3, [pc, #396]	; (800349c <UART_SetConfig+0x534>)
 8003310:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003312:	e015      	b.n	8003340 <UART_SetConfig+0x3d8>
          pclk = (uint32_t) HSI_VALUE;
 8003314:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <UART_SetConfig+0x538>)
 8003316:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003318:	e012      	b.n	8003340 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800331a:	f7ff f8c3 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 800331e:	0003      	movs	r3, r0
 8003320:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003322:	e00d      	b.n	8003340 <UART_SetConfig+0x3d8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003324:	2380      	movs	r3, #128	; 0x80
 8003326:	021b      	lsls	r3, r3, #8
 8003328:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800332a:	e009      	b.n	8003340 <UART_SetConfig+0x3d8>
      default:
        pclk = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8003330:	231a      	movs	r3, #26
 8003332:	2218      	movs	r2, #24
 8003334:	4694      	mov	ip, r2
 8003336:	44bc      	add	ip, r7
 8003338:	4463      	add	r3, ip
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
        break;
 800333e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003342:	2b00      	cmp	r3, #0
 8003344:	d100      	bne.n	8003348 <UART_SetConfig+0x3e0>
 8003346:	e095      	b.n	8003474 <UART_SetConfig+0x50c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800334a:	005a      	lsls	r2, r3, #1
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	085b      	lsrs	r3, r3, #1
 8003352:	18d2      	adds	r2, r2, r3
 8003354:	69fb      	ldr	r3, [r7, #28]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	0019      	movs	r1, r3
 800335a:	0010      	movs	r0, r2
 800335c:	f7fc fed4 	bl	8000108 <__udivsi3>
 8003360:	0003      	movs	r3, r0
 8003362:	b29b      	uxth	r3, r3
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003368:	2b0f      	cmp	r3, #15
 800336a:	d921      	bls.n	80033b0 <UART_SetConfig+0x448>
 800336c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800336e:	2380      	movs	r3, #128	; 0x80
 8003370:	025b      	lsls	r3, r3, #9
 8003372:	429a      	cmp	r2, r3
 8003374:	d21c      	bcs.n	80033b0 <UART_SetConfig+0x448>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003378:	b29a      	uxth	r2, r3
 800337a:	200e      	movs	r0, #14
 800337c:	2418      	movs	r4, #24
 800337e:	193b      	adds	r3, r7, r4
 8003380:	181b      	adds	r3, r3, r0
 8003382:	210f      	movs	r1, #15
 8003384:	438a      	bics	r2, r1
 8003386:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800338a:	085b      	lsrs	r3, r3, #1
 800338c:	b29b      	uxth	r3, r3
 800338e:	2207      	movs	r2, #7
 8003390:	4013      	ands	r3, r2
 8003392:	b299      	uxth	r1, r3
 8003394:	193b      	adds	r3, r7, r4
 8003396:	181b      	adds	r3, r3, r0
 8003398:	193a      	adds	r2, r7, r4
 800339a:	1812      	adds	r2, r2, r0
 800339c:	8812      	ldrh	r2, [r2, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	193a      	adds	r2, r7, r4
 80033a8:	1812      	adds	r2, r2, r0
 80033aa:	8812      	ldrh	r2, [r2, #0]
 80033ac:	60da      	str	r2, [r3, #12]
 80033ae:	e061      	b.n	8003474 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 80033b0:	231a      	movs	r3, #26
 80033b2:	2218      	movs	r2, #24
 80033b4:	4694      	mov	ip, r2
 80033b6:	44bc      	add	ip, r7
 80033b8:	4463      	add	r3, ip
 80033ba:	2201      	movs	r2, #1
 80033bc:	701a      	strb	r2, [r3, #0]
 80033be:	e059      	b.n	8003474 <UART_SetConfig+0x50c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80033c0:	231b      	movs	r3, #27
 80033c2:	2218      	movs	r2, #24
 80033c4:	4694      	mov	ip, r2
 80033c6:	44bc      	add	ip, r7
 80033c8:	4463      	add	r3, ip
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d822      	bhi.n	8003416 <UART_SetConfig+0x4ae>
 80033d0:	009a      	lsls	r2, r3, #2
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <UART_SetConfig+0x53c>)
 80033d4:	18d3      	adds	r3, r2, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80033da:	f7ff f913 	bl	8002604 <HAL_RCC_GetPCLK1Freq>
 80033de:	0003      	movs	r3, r0
 80033e0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033e2:	e022      	b.n	800342a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80033e4:	f7ff f924 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 80033e8:	0003      	movs	r3, r0
 80033ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80033ec:	e01d      	b.n	800342a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033ee:	4b2a      	ldr	r3, [pc, #168]	; (8003498 <UART_SetConfig+0x530>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2210      	movs	r2, #16
 80033f4:	4013      	ands	r3, r2
 80033f6:	d002      	beq.n	80033fe <UART_SetConfig+0x496>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80033f8:	4b28      	ldr	r3, [pc, #160]	; (800349c <UART_SetConfig+0x534>)
 80033fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80033fc:	e015      	b.n	800342a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80033fe:	4b28      	ldr	r3, [pc, #160]	; (80034a0 <UART_SetConfig+0x538>)
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003402:	e012      	b.n	800342a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003404:	f7ff f84e 	bl	80024a4 <HAL_RCC_GetSysClockFreq>
 8003408:	0003      	movs	r3, r0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800340c:	e00d      	b.n	800342a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800340e:	2380      	movs	r3, #128	; 0x80
 8003410:	021b      	lsls	r3, r3, #8
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8003414:	e009      	b.n	800342a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800341a:	231a      	movs	r3, #26
 800341c:	2218      	movs	r2, #24
 800341e:	4694      	mov	ip, r2
 8003420:	44bc      	add	ip, r7
 8003422:	4463      	add	r3, ip
 8003424:	2201      	movs	r2, #1
 8003426:	701a      	strb	r2, [r3, #0]
        break;
 8003428:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800342a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800342c:	2b00      	cmp	r3, #0
 800342e:	d021      	beq.n	8003474 <UART_SetConfig+0x50c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	085a      	lsrs	r2, r3, #1
 8003436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003438:	18d2      	adds	r2, r2, r3
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	0019      	movs	r1, r3
 8003440:	0010      	movs	r0, r2
 8003442:	f7fc fe61 	bl	8000108 <__udivsi3>
 8003446:	0003      	movs	r3, r0
 8003448:	b29b      	uxth	r3, r3
 800344a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800344c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800344e:	2b0f      	cmp	r3, #15
 8003450:	d909      	bls.n	8003466 <UART_SetConfig+0x4fe>
 8003452:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003454:	2380      	movs	r3, #128	; 0x80
 8003456:	025b      	lsls	r3, r3, #9
 8003458:	429a      	cmp	r2, r3
 800345a:	d204      	bcs.n	8003466 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = usartdiv;
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e006      	b.n	8003474 <UART_SetConfig+0x50c>
      }
      else
      {
        ret = HAL_ERROR;
 8003466:	231a      	movs	r3, #26
 8003468:	2218      	movs	r2, #24
 800346a:	4694      	mov	ip, r2
 800346c:	44bc      	add	ip, r7
 800346e:	4463      	add	r3, ip
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003474:	69fb      	ldr	r3, [r7, #28]
 8003476:	2200      	movs	r2, #0
 8003478:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	2200      	movs	r2, #0
 800347e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003480:	231a      	movs	r3, #26
 8003482:	2218      	movs	r2, #24
 8003484:	4694      	mov	ip, r2
 8003486:	44bc      	add	ip, r7
 8003488:	4463      	add	r3, ip
 800348a:	781b      	ldrb	r3, [r3, #0]
}
 800348c:	0018      	movs	r0, r3
 800348e:	46bd      	mov	sp, r7
 8003490:	b00e      	add	sp, #56	; 0x38
 8003492:	bdb0      	pop	{r4, r5, r7, pc}
 8003494:	08003900 	.word	0x08003900
 8003498:	40021000 	.word	0x40021000
 800349c:	003d0900 	.word	0x003d0900
 80034a0:	00f42400 	.word	0x00f42400
 80034a4:	08003924 	.word	0x08003924

080034a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034b4:	2201      	movs	r2, #1
 80034b6:	4013      	ands	r3, r2
 80034b8:	d00b      	beq.n	80034d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	4a4a      	ldr	r2, [pc, #296]	; (80035ec <UART_AdvFeatureConfig+0x144>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	0019      	movs	r1, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	430a      	orrs	r2, r1
 80034d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	2202      	movs	r2, #2
 80034d8:	4013      	ands	r3, r2
 80034da:	d00b      	beq.n	80034f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	685b      	ldr	r3, [r3, #4]
 80034e2:	4a43      	ldr	r2, [pc, #268]	; (80035f0 <UART_AdvFeatureConfig+0x148>)
 80034e4:	4013      	ands	r3, r2
 80034e6:	0019      	movs	r1, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	2204      	movs	r2, #4
 80034fa:	4013      	ands	r3, r2
 80034fc:	d00b      	beq.n	8003516 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	4a3b      	ldr	r2, [pc, #236]	; (80035f4 <UART_AdvFeatureConfig+0x14c>)
 8003506:	4013      	ands	r3, r2
 8003508:	0019      	movs	r1, r3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	2208      	movs	r2, #8
 800351c:	4013      	ands	r3, r2
 800351e:	d00b      	beq.n	8003538 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a34      	ldr	r2, [pc, #208]	; (80035f8 <UART_AdvFeatureConfig+0x150>)
 8003528:	4013      	ands	r3, r2
 800352a:	0019      	movs	r1, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353c:	2210      	movs	r2, #16
 800353e:	4013      	ands	r3, r2
 8003540:	d00b      	beq.n	800355a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a2c      	ldr	r2, [pc, #176]	; (80035fc <UART_AdvFeatureConfig+0x154>)
 800354a:	4013      	ands	r3, r2
 800354c:	0019      	movs	r1, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355e:	2220      	movs	r2, #32
 8003560:	4013      	ands	r3, r2
 8003562:	d00b      	beq.n	800357c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689b      	ldr	r3, [r3, #8]
 800356a:	4a25      	ldr	r2, [pc, #148]	; (8003600 <UART_AdvFeatureConfig+0x158>)
 800356c:	4013      	ands	r3, r2
 800356e:	0019      	movs	r1, r3
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	430a      	orrs	r2, r1
 800357a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003580:	2240      	movs	r2, #64	; 0x40
 8003582:	4013      	ands	r3, r2
 8003584:	d01d      	beq.n	80035c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <UART_AdvFeatureConfig+0x15c>)
 800358e:	4013      	ands	r3, r2
 8003590:	0019      	movs	r1, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	430a      	orrs	r2, r1
 800359c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	035b      	lsls	r3, r3, #13
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d10b      	bne.n	80035c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	4a15      	ldr	r2, [pc, #84]	; (8003608 <UART_AdvFeatureConfig+0x160>)
 80035b2:	4013      	ands	r3, r2
 80035b4:	0019      	movs	r1, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c6:	2280      	movs	r2, #128	; 0x80
 80035c8:	4013      	ands	r3, r2
 80035ca:	d00b      	beq.n	80035e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	4a0e      	ldr	r2, [pc, #56]	; (800360c <UART_AdvFeatureConfig+0x164>)
 80035d4:	4013      	ands	r3, r2
 80035d6:	0019      	movs	r1, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]
  }
}
 80035e4:	46c0      	nop			; (mov r8, r8)
 80035e6:	46bd      	mov	sp, r7
 80035e8:	b002      	add	sp, #8
 80035ea:	bd80      	pop	{r7, pc}
 80035ec:	fffdffff 	.word	0xfffdffff
 80035f0:	fffeffff 	.word	0xfffeffff
 80035f4:	fffbffff 	.word	0xfffbffff
 80035f8:	ffff7fff 	.word	0xffff7fff
 80035fc:	ffffefff 	.word	0xffffefff
 8003600:	ffffdfff 	.word	0xffffdfff
 8003604:	ffefffff 	.word	0xffefffff
 8003608:	ff9fffff 	.word	0xff9fffff
 800360c:	fff7ffff 	.word	0xfff7ffff

08003610 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b086      	sub	sp, #24
 8003614:	af02      	add	r7, sp, #8
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2280      	movs	r2, #128	; 0x80
 800361c:	2100      	movs	r1, #0
 800361e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003620:	f7fd fc82 	bl	8000f28 <HAL_GetTick>
 8003624:	0003      	movs	r3, r0
 8003626:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2208      	movs	r2, #8
 8003630:	4013      	ands	r3, r2
 8003632:	2b08      	cmp	r3, #8
 8003634:	d10c      	bne.n	8003650 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2280      	movs	r2, #128	; 0x80
 800363a:	0391      	lsls	r1, r2, #14
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4a17      	ldr	r2, [pc, #92]	; (800369c <UART_CheckIdleState+0x8c>)
 8003640:	9200      	str	r2, [sp, #0]
 8003642:	2200      	movs	r2, #0
 8003644:	f000 f82c 	bl	80036a0 <UART_WaitOnFlagUntilTimeout>
 8003648:	1e03      	subs	r3, r0, #0
 800364a:	d001      	beq.n	8003650 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e021      	b.n	8003694 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	2204      	movs	r2, #4
 8003658:	4013      	ands	r3, r2
 800365a:	2b04      	cmp	r3, #4
 800365c:	d10c      	bne.n	8003678 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2280      	movs	r2, #128	; 0x80
 8003662:	03d1      	lsls	r1, r2, #15
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	4a0d      	ldr	r2, [pc, #52]	; (800369c <UART_CheckIdleState+0x8c>)
 8003668:	9200      	str	r2, [sp, #0]
 800366a:	2200      	movs	r2, #0
 800366c:	f000 f818 	bl	80036a0 <UART_WaitOnFlagUntilTimeout>
 8003670:	1e03      	subs	r3, r0, #0
 8003672:	d001      	beq.n	8003678 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003674:	2303      	movs	r3, #3
 8003676:	e00d      	b.n	8003694 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2220      	movs	r2, #32
 800367c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	2220      	movs	r2, #32
 8003682:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2274      	movs	r2, #116	; 0x74
 800368e:	2100      	movs	r1, #0
 8003690:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	0018      	movs	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	b004      	add	sp, #16
 800369a:	bd80      	pop	{r7, pc}
 800369c:	01ffffff 	.word	0x01ffffff

080036a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b084      	sub	sp, #16
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	60f8      	str	r0, [r7, #12]
 80036a8:	60b9      	str	r1, [r7, #8]
 80036aa:	603b      	str	r3, [r7, #0]
 80036ac:	1dfb      	adds	r3, r7, #7
 80036ae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036b0:	e05e      	b.n	8003770 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	3301      	adds	r3, #1
 80036b6:	d05b      	beq.n	8003770 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fd fc36 	bl	8000f28 <HAL_GetTick>
 80036bc:	0002      	movs	r2, r0
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <UART_WaitOnFlagUntilTimeout+0x2e>
 80036c8:	69bb      	ldr	r3, [r7, #24]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d11b      	bne.n	8003706 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	492f      	ldr	r1, [pc, #188]	; (8003798 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80036da:	400a      	ands	r2, r1
 80036dc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2101      	movs	r1, #1
 80036ea:	438a      	bics	r2, r1
 80036ec:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2220      	movs	r2, #32
 80036f2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2274      	movs	r2, #116	; 0x74
 80036fe:	2100      	movs	r1, #0
 8003700:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e044      	b.n	8003790 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2204      	movs	r2, #4
 800370e:	4013      	ands	r3, r2
 8003710:	d02e      	beq.n	8003770 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	2380      	movs	r3, #128	; 0x80
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	401a      	ands	r2, r3
 800371e:	2380      	movs	r3, #128	; 0x80
 8003720:	011b      	lsls	r3, r3, #4
 8003722:	429a      	cmp	r2, r3
 8003724:	d124      	bne.n	8003770 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	0112      	lsls	r2, r2, #4
 800372e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	681a      	ldr	r2, [r3, #0]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4917      	ldr	r1, [pc, #92]	; (8003798 <UART_WaitOnFlagUntilTimeout+0xf8>)
 800373c:	400a      	ands	r2, r1
 800373e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2101      	movs	r1, #1
 800374c:	438a      	bics	r2, r1
 800374e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	2220      	movs	r2, #32
 8003754:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	2220      	movs	r2, #32
 800375a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2280      	movs	r2, #128	; 0x80
 8003760:	2120      	movs	r1, #32
 8003762:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2274      	movs	r2, #116	; 0x74
 8003768:	2100      	movs	r1, #0
 800376a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e00f      	b.n	8003790 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4013      	ands	r3, r2
 800377a:	68ba      	ldr	r2, [r7, #8]
 800377c:	1ad3      	subs	r3, r2, r3
 800377e:	425a      	negs	r2, r3
 8003780:	4153      	adcs	r3, r2
 8003782:	b2db      	uxtb	r3, r3
 8003784:	001a      	movs	r2, r3
 8003786:	1dfb      	adds	r3, r7, #7
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d091      	beq.n	80036b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800378e:	2300      	movs	r3, #0
}
 8003790:	0018      	movs	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	b004      	add	sp, #16
 8003796:	bd80      	pop	{r7, pc}
 8003798:	fffffe5f 	.word	0xfffffe5f

0800379c <I2C2_IRQHandler>:
	//uint8_t test = *(uint8_t*) I2C_ADDR;
	//HAL_I2C_Slave_Receive_IT(&hi2c2, thisI2C->receiveBuffer, I2C_RECEIVE_LENGTH);
}

void I2C2_IRQHandler(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b084      	sub	sp, #16
 80037a0:	af00      	add	r7, sp, #0
	uint8_t newData;
	uint32_t ITFlags   = READ_REG(hi2c2.Instance->ISR);
 80037a2:	4b2f      	ldr	r3, [pc, #188]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	60fb      	str	r3, [r7, #12]
	uint32_t ITSources = READ_REG(hi2c2.Instance->CR1);
 80037aa:	4b2d      	ldr	r3, [pc, #180]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	60bb      	str	r3, [r7, #8]
	if ((I2C_CHECK_FLAG(hi2c2.Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(hi2c2.Instance->CR1, I2C_IT_STOPI) != RESET))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	2220      	movs	r2, #32
 80037ba:	4013      	ands	r3, r2
 80037bc:	2b20      	cmp	r3, #32
 80037be:	d114      	bne.n	80037ea <I2C2_IRQHandler+0x4e>
 80037c0:	4b27      	ldr	r3, [pc, #156]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2220      	movs	r2, #32
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b20      	cmp	r3, #32
 80037cc:	d10d      	bne.n	80037ea <I2C2_IRQHandler+0x4e>
	{
		GPIOC->BSRR = GPIO_PIN_0;
 80037ce:	4b25      	ldr	r3, [pc, #148]	; (8003864 <I2C2_IRQHandler+0xc8>)
 80037d0:	2201      	movs	r2, #1
 80037d2:	619a      	str	r2, [r3, #24]
		GPIOC->BRR = GPIO_PIN_0;
 80037d4:	4b23      	ldr	r3, [pc, #140]	; (8003864 <I2C2_IRQHandler+0xc8>)
 80037d6:	2201      	movs	r2, #1
 80037d8:	629a      	str	r2, [r3, #40]	; 0x28
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(&hi2c2, I2C_FLAG_STOPF);
 80037da:	4b21      	ldr	r3, [pc, #132]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	2220      	movs	r2, #32
 80037e0:	61da      	str	r2, [r3, #28]
		my_sys.BUS_FLAG = 1;
 80037e2:	4b21      	ldr	r3, [pc, #132]	; (8003868 <I2C2_IRQHandler+0xcc>)
 80037e4:	223c      	movs	r2, #60	; 0x3c
 80037e6:	2101      	movs	r1, #1
 80037e8:	5499      	strb	r1, [r3, r2]
	}
	if ((I2C_CHECK_FLAG(hi2c2.Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(hi2c2.Instance->CR1, I2C_IT_RXI) != RESET))
 80037ea:	4b1d      	ldr	r3, [pc, #116]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	699b      	ldr	r3, [r3, #24]
 80037f0:	2204      	movs	r2, #4
 80037f2:	4013      	ands	r3, r2
 80037f4:	2b04      	cmp	r3, #4
 80037f6:	d115      	bne.n	8003824 <I2C2_IRQHandler+0x88>
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <I2C2_IRQHandler+0xc4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	2204      	movs	r2, #4
 8003800:	4013      	ands	r3, r2
 8003802:	2b04      	cmp	r3, #4
 8003804:	d10e      	bne.n	8003824 <I2C2_IRQHandler+0x88>
	{
		GPIOC->BSRR = GPIO_PIN_0;
 8003806:	4b17      	ldr	r3, [pc, #92]	; (8003864 <I2C2_IRQHandler+0xc8>)
 8003808:	2201      	movs	r2, #1
 800380a:	619a      	str	r2, [r3, #24]
		GPIOC->BRR = GPIO_PIN_0;
 800380c:	4b15      	ldr	r3, [pc, #84]	; (8003864 <I2C2_IRQHandler+0xc8>)
 800380e:	2201      	movs	r2, #1
 8003810:	629a      	str	r2, [r3, #40]	; 0x28
		__HAL_I2C_CLEAR_FLAG(&hi2c2, I2C_FLAG_RXNE);
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <I2C2_IRQHandler+0xc4>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	2204      	movs	r2, #4
 8003818:	61da      	str	r2, [r3, #28]
		newData = (uint8_t)hi2c2.Instance->RXDR;
 800381a:	4b11      	ldr	r3, [pc, #68]	; (8003860 <I2C2_IRQHandler+0xc4>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	701a      	strb	r2, [r3, #0]
	}
	if ((I2C_CHECK_FLAG(hi2c2.Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(hi2c2.Instance->CR1, I2C_IT_ADDRI) != RESET))
 8003824:	4b0e      	ldr	r3, [pc, #56]	; (8003860 <I2C2_IRQHandler+0xc4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	699b      	ldr	r3, [r3, #24]
 800382a:	2208      	movs	r2, #8
 800382c:	4013      	ands	r3, r2
 800382e:	2b08      	cmp	r3, #8
 8003830:	d111      	bne.n	8003856 <I2C2_IRQHandler+0xba>
 8003832:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <I2C2_IRQHandler+0xc4>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2208      	movs	r2, #8
 800383a:	4013      	ands	r3, r2
 800383c:	2b08      	cmp	r3, #8
 800383e:	d10a      	bne.n	8003856 <I2C2_IRQHandler+0xba>
	{
		GPIOC->BSRR = GPIO_PIN_0;
 8003840:	4b08      	ldr	r3, [pc, #32]	; (8003864 <I2C2_IRQHandler+0xc8>)
 8003842:	2201      	movs	r2, #1
 8003844:	619a      	str	r2, [r3, #24]
		GPIOC->BRR = GPIO_PIN_0;
 8003846:	4b07      	ldr	r3, [pc, #28]	; (8003864 <I2C2_IRQHandler+0xc8>)
 8003848:	2201      	movs	r2, #1
 800384a:	629a      	str	r2, [r3, #40]	; 0x28
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(&hi2c2, I2C_FLAG_ADDR);
 800384c:	4b04      	ldr	r3, [pc, #16]	; (8003860 <I2C2_IRQHandler+0xc4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2208      	movs	r2, #8
 8003852:	61da      	str	r2, [r3, #28]
	}
	return;
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46c0      	nop			; (mov r8, r8)
}
 8003858:	46bd      	mov	sp, r7
 800385a:	b004      	add	sp, #16
 800385c:	bd80      	pop	{r7, pc}
 800385e:	46c0      	nop			; (mov r8, r8)
 8003860:	200000d0 	.word	0x200000d0
 8003864:	50000800 	.word	0x50000800
 8003868:	20000030 	.word	0x20000030

0800386c <__libc_init_array>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	2600      	movs	r6, #0
 8003870:	4d0c      	ldr	r5, [pc, #48]	; (80038a4 <__libc_init_array+0x38>)
 8003872:	4c0d      	ldr	r4, [pc, #52]	; (80038a8 <__libc_init_array+0x3c>)
 8003874:	1b64      	subs	r4, r4, r5
 8003876:	10a4      	asrs	r4, r4, #2
 8003878:	42a6      	cmp	r6, r4
 800387a:	d109      	bne.n	8003890 <__libc_init_array+0x24>
 800387c:	2600      	movs	r6, #0
 800387e:	f000 f821 	bl	80038c4 <_init>
 8003882:	4d0a      	ldr	r5, [pc, #40]	; (80038ac <__libc_init_array+0x40>)
 8003884:	4c0a      	ldr	r4, [pc, #40]	; (80038b0 <__libc_init_array+0x44>)
 8003886:	1b64      	subs	r4, r4, r5
 8003888:	10a4      	asrs	r4, r4, #2
 800388a:	42a6      	cmp	r6, r4
 800388c:	d105      	bne.n	800389a <__libc_init_array+0x2e>
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	00b3      	lsls	r3, r6, #2
 8003892:	58eb      	ldr	r3, [r5, r3]
 8003894:	4798      	blx	r3
 8003896:	3601      	adds	r6, #1
 8003898:	e7ee      	b.n	8003878 <__libc_init_array+0xc>
 800389a:	00b3      	lsls	r3, r6, #2
 800389c:	58eb      	ldr	r3, [r5, r3]
 800389e:	4798      	blx	r3
 80038a0:	3601      	adds	r6, #1
 80038a2:	e7f2      	b.n	800388a <__libc_init_array+0x1e>
 80038a4:	08003950 	.word	0x08003950
 80038a8:	08003950 	.word	0x08003950
 80038ac:	08003950 	.word	0x08003950
 80038b0:	08003954 	.word	0x08003954

080038b4 <memset>:
 80038b4:	0003      	movs	r3, r0
 80038b6:	1882      	adds	r2, r0, r2
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d100      	bne.n	80038be <memset+0xa>
 80038bc:	4770      	bx	lr
 80038be:	7019      	strb	r1, [r3, #0]
 80038c0:	3301      	adds	r3, #1
 80038c2:	e7f9      	b.n	80038b8 <memset+0x4>

080038c4 <_init>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	46c0      	nop			; (mov r8, r8)
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr

080038d0 <_fini>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	46c0      	nop			; (mov r8, r8)
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr
