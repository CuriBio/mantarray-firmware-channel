
mantarray-firmware-channel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004598  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000198  08004658  08004658  00014658  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080047f0  080047f0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080047f0  080047f0  000147f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080047f8  080047f8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080047f8  080047f8  000147f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080047fc  080047fc  000147fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004800  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000070  08004870  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000027c  08004870  0002027c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000184b5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003436  00000000  00000000  0003854d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  0003b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  0003c838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016e7e  00000000  00000000  0003d540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000157c6  00000000  00000000  000543be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007cd7f  00000000  00000000  00069b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e6903  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003478  00000000  00000000  000e6958  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004640 	.word	0x08004640

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004640 	.word	0x08004640

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b089      	sub	sp, #36	; 0x24
 80004a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004a2:	240c      	movs	r4, #12
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2314      	movs	r3, #20
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f004 f83d 	bl	800452c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004b2:	4b40      	ldr	r3, [pc, #256]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004b6:	4b3f      	ldr	r3, [pc, #252]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004b8:	2101      	movs	r1, #1
 80004ba:	430a      	orrs	r2, r1
 80004bc:	62da      	str	r2, [r3, #44]	; 0x2c
 80004be:	4b3d      	ldr	r3, [pc, #244]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004c2:	2201      	movs	r2, #1
 80004c4:	4013      	ands	r3, r2
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004ca:	4b3a      	ldr	r3, [pc, #232]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004ce:	4b39      	ldr	r3, [pc, #228]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004d0:	2102      	movs	r1, #2
 80004d2:	430a      	orrs	r2, r1
 80004d4:	62da      	str	r2, [r3, #44]	; 0x2c
 80004d6:	4b37      	ldr	r3, [pc, #220]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004da:	2202      	movs	r2, #2
 80004dc:	4013      	ands	r3, r2
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e2:	4b34      	ldr	r3, [pc, #208]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004e6:	4b33      	ldr	r3, [pc, #204]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004e8:	2104      	movs	r1, #4
 80004ea:	430a      	orrs	r2, r1
 80004ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ee:	4b31      	ldr	r3, [pc, #196]	; (80005b4 <MX_GPIO_Init+0x118>)
 80004f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004f2:	2204      	movs	r2, #4
 80004f4:	4013      	ands	r3, r2
 80004f6:	603b      	str	r3, [r7, #0]
 80004f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 80004fa:	23c0      	movs	r3, #192	; 0xc0
 80004fc:	021b      	lsls	r3, r3, #8
 80004fe:	482e      	ldr	r0, [pc, #184]	; (80005b8 <MX_GPIO_Init+0x11c>)
 8000500:	2200      	movs	r2, #0
 8000502:	0019      	movs	r1, r3
 8000504:	f000 fe34 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin, GPIO_PIN_RESET);
 8000508:	23e0      	movs	r3, #224	; 0xe0
 800050a:	0059      	lsls	r1, r3, #1
 800050c:	23a0      	movs	r3, #160	; 0xa0
 800050e:	05db      	lsls	r3, r3, #23
 8000510:	2200      	movs	r2, #0
 8000512:	0018      	movs	r0, r3
 8000514:	f000 fe2c 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin
                           PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = BUS_C0_Pin|BUS_C2_Pin|BUS_C1_Pin|programmer_TX_line_Pin
 8000518:	193b      	adds	r3, r7, r4
 800051a:	4a28      	ldr	r2, [pc, #160]	; (80005bc <MX_GPIO_Init+0x120>)
 800051c:	601a      	str	r2, [r3, #0]
                          |programmer_RX_line_Pin|BUS_CLK_Pin|mag_int_c_Pin|mag_int_b_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2200      	movs	r2, #0
 8000522:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052a:	193a      	adds	r2, r7, r4
 800052c:	23a0      	movs	r3, #160	; 0xa0
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	0011      	movs	r1, r2
 8000532:	0018      	movs	r0, r3
 8000534:	f000 fca6 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = BUS4_Pin|BUS7_Pin|BUS3_Pin|BUS6_Pin
 8000538:	193b      	adds	r3, r7, r4
 800053a:	4a21      	ldr	r2, [pc, #132]	; (80005c0 <MX_GPIO_Init+0x124>)
 800053c:	601a      	str	r2, [r3, #0]
                          |mag_int_a_Pin|BUS1_Pin|BUS5_Pin|BUS0_Pin
                          |BUS2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800053e:	193b      	adds	r3, r7, r4
 8000540:	2200      	movs	r2, #0
 8000542:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000544:	193b      	adds	r3, r7, r4
 8000546:	2200      	movs	r2, #0
 8000548:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800054a:	193b      	adds	r3, r7, r4
 800054c:	4a1d      	ldr	r2, [pc, #116]	; (80005c4 <MX_GPIO_Init+0x128>)
 800054e:	0019      	movs	r1, r3
 8000550:	0010      	movs	r0, r2
 8000552:	f000 fc97 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = CHN_OUT_RST_Pin|CHN_OUT_BT0_Pin;
 8000556:	0021      	movs	r1, r4
 8000558:	187b      	adds	r3, r7, r1
 800055a:	22c0      	movs	r2, #192	; 0xc0
 800055c:	0212      	lsls	r2, r2, #8
 800055e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	000c      	movs	r4, r1
 8000562:	193b      	adds	r3, r7, r4
 8000564:	2201      	movs	r2, #1
 8000566:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000568:	193b      	adds	r3, r7, r4
 800056a:	2200      	movs	r2, #0
 800056c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800056e:	193b      	adds	r3, r7, r4
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000574:	193b      	adds	r3, r7, r4
 8000576:	4a10      	ldr	r2, [pc, #64]	; (80005b8 <MX_GPIO_Init+0x11c>)
 8000578:	0019      	movs	r1, r3
 800057a:	0010      	movs	r0, r2
 800057c:	f000 fc82 	bl	8000e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SPI_C_CS_Pin|SPI_A_CS_Pin|SPI_B_CS_Pin;
 8000580:	0021      	movs	r1, r4
 8000582:	187b      	adds	r3, r7, r1
 8000584:	22e0      	movs	r2, #224	; 0xe0
 8000586:	0052      	lsls	r2, r2, #1
 8000588:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2201      	movs	r2, #1
 800058e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800059c:	187a      	adds	r2, r7, r1
 800059e:	23a0      	movs	r3, #160	; 0xa0
 80005a0:	05db      	lsls	r3, r3, #23
 80005a2:	0011      	movs	r1, r2
 80005a4:	0018      	movs	r0, r3
 80005a6:	f000 fc6d 	bl	8000e84 <HAL_GPIO_Init>

}
 80005aa:	46c0      	nop			; (mov r8, r8)
 80005ac:	46bd      	mov	sp, r7
 80005ae:	b009      	add	sp, #36	; 0x24
 80005b0:	bd90      	pop	{r4, r7, pc}
 80005b2:	46c0      	nop			; (mov r8, r8)
 80005b4:	40021000 	.word	0x40021000
 80005b8:	50000800 	.word	0x50000800
 80005bc:	0000e619 	.word	0x0000e619
 80005c0:	000001ff 	.word	0x000001ff
 80005c4:	50000400 	.word	0x50000400

080005c8 <MX_I2C2_Init>:

I2C_HandleTypeDef hi2c2;

/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <MX_I2C2_Init+0x84>)
 80005ce:	4a20      	ldr	r2, [pc, #128]	; (8000650 <MX_I2C2_Init+0x88>)
 80005d0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00100413;
 80005d2:	4b1e      	ldr	r3, [pc, #120]	; (800064c <MX_I2C2_Init+0x84>)
 80005d4:	4a1f      	ldr	r2, [pc, #124]	; (8000654 <MX_I2C2_Init+0x8c>)
 80005d6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 200;
 80005d8:	4b1c      	ldr	r3, [pc, #112]	; (800064c <MX_I2C2_Init+0x84>)
 80005da:	22c8      	movs	r2, #200	; 0xc8
 80005dc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005de:	4b1b      	ldr	r3, [pc, #108]	; (800064c <MX_I2C2_Init+0x84>)
 80005e0:	2201      	movs	r2, #1
 80005e2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005e4:	4b19      	ldr	r3, [pc, #100]	; (800064c <MX_I2C2_Init+0x84>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80005ea:	4b18      	ldr	r3, [pc, #96]	; (800064c <MX_I2C2_Init+0x84>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80005f0:	4b16      	ldr	r3, [pc, #88]	; (800064c <MX_I2C2_Init+0x84>)
 80005f2:	2200      	movs	r2, #0
 80005f4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_ENABLE;
 80005f6:	4b15      	ldr	r3, [pc, #84]	; (800064c <MX_I2C2_Init+0x84>)
 80005f8:	2280      	movs	r2, #128	; 0x80
 80005fa:	0312      	lsls	r2, r2, #12
 80005fc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 80005fe:	4b13      	ldr	r3, [pc, #76]	; (800064c <MX_I2C2_Init+0x84>)
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	0292      	lsls	r2, r2, #10
 8000604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000606:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_I2C2_Init+0x84>)
 8000608:	0018      	movs	r0, r3
 800060a:	f000 fdcf 	bl	80011ac <HAL_I2C_Init>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000612:	f000 f8ef 	bl	80007f4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000616:	4b0d      	ldr	r3, [pc, #52]	; (800064c <MX_I2C2_Init+0x84>)
 8000618:	2100      	movs	r1, #0
 800061a:	0018      	movs	r0, r3
 800061c:	f000 fe5c 	bl	80012d8 <HAL_I2CEx_ConfigAnalogFilter>
 8000620:	1e03      	subs	r3, r0, #0
 8000622:	d001      	beq.n	8000628 <MX_I2C2_Init+0x60>
  {
    Error_Handler();
 8000624:	f000 f8e6 	bl	80007f4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_I2C2_Init+0x84>)
 800062a:	2100      	movs	r1, #0
 800062c:	0018      	movs	r0, r3
 800062e:	f000 fe9f 	bl	8001370 <HAL_I2CEx_ConfigDigitalFilter>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_I2C2_Init+0x72>
  {
    Error_Handler();
 8000636:	f000 f8dd 	bl	80007f4 <Error_Handler>
  }
  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C2);
 800063a:	2380      	movs	r3, #128	; 0x80
 800063c:	019b      	lsls	r3, r3, #6
 800063e:	0018      	movs	r0, r3
 8000640:	f000 fee2 	bl	8001408 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000644:	46c0      	nop			; (mov r8, r8)
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	20000098 	.word	0x20000098
 8000650:	40005800 	.word	0x40005800
 8000654:	00100413 	.word	0x00100413

08000658 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000658:	b590      	push	{r4, r7, lr}
 800065a:	b089      	sub	sp, #36	; 0x24
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000660:	240c      	movs	r4, #12
 8000662:	193b      	adds	r3, r7, r4
 8000664:	0018      	movs	r0, r3
 8000666:	2314      	movs	r3, #20
 8000668:	001a      	movs	r2, r3
 800066a:	2100      	movs	r1, #0
 800066c:	f003 ff5e 	bl	800452c <memset>
  if(i2cHandle->Instance==I2C2)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <HAL_I2C_MspInit+0x90>)
 8000676:	4293      	cmp	r3, r2
 8000678:	d131      	bne.n	80006de <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <HAL_I2C_MspInit+0x94>)
 800067c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800067e:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <HAL_I2C_MspInit+0x94>)
 8000680:	2102      	movs	r1, #2
 8000682:	430a      	orrs	r2, r1
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <HAL_I2C_MspInit+0x94>)
 8000688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800068a:	2202      	movs	r2, #2
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
    /**I2C2 GPIO Configuration
    PB11     ------> I2C2_SDA
    PB10     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000692:	193b      	adds	r3, r7, r4
 8000694:	22c0      	movs	r2, #192	; 0xc0
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800069a:	0021      	movs	r1, r4
 800069c:	187b      	adds	r3, r7, r1
 800069e:	2212      	movs	r2, #18
 80006a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2201      	movs	r2, #1
 80006a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a8:	187b      	adds	r3, r7, r1
 80006aa:	2203      	movs	r2, #3
 80006ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80006ae:	187b      	adds	r3, r7, r1
 80006b0:	2206      	movs	r2, #6
 80006b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b4:	187b      	adds	r3, r7, r1
 80006b6:	4a0e      	ldr	r2, [pc, #56]	; (80006f0 <HAL_I2C_MspInit+0x98>)
 80006b8:	0019      	movs	r1, r3
 80006ba:	0010      	movs	r0, r2
 80006bc:	f000 fbe2 	bl	8000e84 <HAL_GPIO_Init>

    /* I2C2 clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <HAL_I2C_MspInit+0x94>)
 80006c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <HAL_I2C_MspInit+0x94>)
 80006c6:	2180      	movs	r1, #128	; 0x80
 80006c8:	03c9      	lsls	r1, r1, #15
 80006ca:	430a      	orrs	r2, r1
 80006cc:	639a      	str	r2, [r3, #56]	; 0x38

    /* I2C2 interrupt Init */
    HAL_NVIC_SetPriority(I2C2_IRQn, 0, 0);
 80006ce:	2200      	movs	r2, #0
 80006d0:	2100      	movs	r1, #0
 80006d2:	2018      	movs	r0, #24
 80006d4:	f000 fba4 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_IRQn);
 80006d8:	2018      	movs	r0, #24
 80006da:	f000 fbb6 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b009      	add	sp, #36	; 0x24
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40005800 	.word	0x40005800
 80006ec:	40021000 	.word	0x40021000
 80006f0:	50000400 	.word	0x50000400

080006f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006f8:	f000 fa44 	bl	8000b84 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006fc:	f000 f81c 	bl	8000738 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000700:	f7ff fecc 	bl	800049c <MX_GPIO_Init>
  MX_I2C2_Init();
 8000704:	f7ff ff60 	bl	80005c8 <MX_I2C2_Init>
  MX_SPI1_Init();
 8000708:	f000 f87a 	bl	8000800 <MX_SPI1_Init>
  MX_TIM21_Init();
 800070c:	f000 f968 	bl	80009e0 <MX_TIM21_Init>
  /* USER CODE BEGIN 2 */

  module_system_init(&my_sys, &hspi1, &hi2c2, &htim21);
 8000710:	4b05      	ldr	r3, [pc, #20]	; (8000728 <main+0x34>)
 8000712:	4a06      	ldr	r2, [pc, #24]	; (800072c <main+0x38>)
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <main+0x3c>)
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <main+0x40>)
 8000718:	f003 fb30 	bl	8003d7c <module_system_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  state_machine(&my_sys);
 800071c:	4b05      	ldr	r3, [pc, #20]	; (8000734 <main+0x40>)
 800071e:	0018      	movs	r0, r3
 8000720:	f003 fba4 	bl	8003e6c <state_machine>
 8000724:	e7fa      	b.n	800071c <main+0x28>
 8000726:	46c0      	nop			; (mov r8, r8)
 8000728:	20000228 	.word	0x20000228
 800072c:	20000098 	.word	0x20000098
 8000730:	200001d0 	.word	0x200001d0
 8000734:	200000e4 	.word	0x200000e4

08000738 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b095      	sub	sp, #84	; 0x54
 800073c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800073e:	2418      	movs	r4, #24
 8000740:	193b      	adds	r3, r7, r4
 8000742:	0018      	movs	r0, r3
 8000744:	2338      	movs	r3, #56	; 0x38
 8000746:	001a      	movs	r2, r3
 8000748:	2100      	movs	r1, #0
 800074a:	f003 feef 	bl	800452c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	0018      	movs	r0, r3
 8000752:	2314      	movs	r3, #20
 8000754:	001a      	movs	r2, r3
 8000756:	2100      	movs	r1, #0
 8000758:	f003 fee8 	bl	800452c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800075c:	4b23      	ldr	r3, [pc, #140]	; (80007ec <SystemClock_Config+0xb4>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	4a23      	ldr	r2, [pc, #140]	; (80007f0 <SystemClock_Config+0xb8>)
 8000762:	401a      	ands	r2, r3
 8000764:	4b21      	ldr	r3, [pc, #132]	; (80007ec <SystemClock_Config+0xb4>)
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	0109      	lsls	r1, r1, #4
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800076e:	0021      	movs	r1, r4
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2222      	movs	r2, #34	; 0x22
 8000774:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2201      	movs	r2, #1
 800077a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800077c:	187b      	adds	r3, r7, r1
 800077e:	2210      	movs	r2, #16
 8000780:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000782:	187b      	adds	r3, r7, r1
 8000784:	2201      	movs	r2, #1
 8000786:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000788:	187b      	adds	r3, r7, r1
 800078a:	2202      	movs	r2, #2
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078e:	187b      	adds	r3, r7, r1
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 8000794:	187b      	adds	r3, r7, r1
 8000796:	2280      	movs	r2, #128	; 0x80
 8000798:	02d2      	lsls	r2, r2, #11
 800079a:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a4:	187b      	adds	r3, r7, r1
 80007a6:	0018      	movs	r0, r3
 80007a8:	f000 fe46 	bl	8001438 <HAL_RCC_OscConfig>
 80007ac:	1e03      	subs	r3, r0, #0
 80007ae:	d001      	beq.n	80007b4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80007b0:	f000 f820 	bl	80007f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	220f      	movs	r2, #15
 80007b8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	1d3b      	adds	r3, r7, #4
 80007bc:	2203      	movs	r2, #3
 80007be:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	2200      	movs	r2, #0
 80007c4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c6:	1d3b      	adds	r3, r7, #4
 80007c8:	2200      	movs	r2, #0
 80007ca:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	2200      	movs	r2, #0
 80007d0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2101      	movs	r1, #1
 80007d6:	0018      	movs	r0, r3
 80007d8:	f001 f9f2 	bl	8001bc0 <HAL_RCC_ClockConfig>
 80007dc:	1e03      	subs	r3, r0, #0
 80007de:	d001      	beq.n	80007e4 <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007e0:	f000 f808 	bl	80007f4 <Error_Handler>
  }
}
 80007e4:	46c0      	nop			; (mov r8, r8)
 80007e6:	46bd      	mov	sp, r7
 80007e8:	b015      	add	sp, #84	; 0x54
 80007ea:	bd90      	pop	{r4, r7, pc}
 80007ec:	40007000 	.word	0x40007000
 80007f0:	ffffe7ff 	.word	0xffffe7ff

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000804:	4b18      	ldr	r3, [pc, #96]	; (8000868 <MX_SPI1_Init+0x68>)
 8000806:	4a19      	ldr	r2, [pc, #100]	; (800086c <MX_SPI1_Init+0x6c>)
 8000808:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800080a:	4b17      	ldr	r3, [pc, #92]	; (8000868 <MX_SPI1_Init+0x68>)
 800080c:	2282      	movs	r2, #130	; 0x82
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_SPI1_Init+0x68>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_SPI1_Init+0x68>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_SPI1_Init+0x68>)
 8000820:	2202      	movs	r2, #2
 8000822:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_SPI1_Init+0x68>)
 8000826:	2201      	movs	r2, #1
 8000828:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_SPI1_Init+0x68>)
 800082c:	2280      	movs	r2, #128	; 0x80
 800082e:	0092      	lsls	r2, r2, #2
 8000830:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000832:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_SPI1_Init+0x68>)
 8000834:	2208      	movs	r2, #8
 8000836:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000838:	4b0b      	ldr	r3, [pc, #44]	; (8000868 <MX_SPI1_Init+0x68>)
 800083a:	2200      	movs	r2, #0
 800083c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800083e:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_SPI1_Init+0x68>)
 8000840:	2200      	movs	r2, #0
 8000842:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000844:	4b08      	ldr	r3, [pc, #32]	; (8000868 <MX_SPI1_Init+0x68>)
 8000846:	2200      	movs	r2, #0
 8000848:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800084a:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_SPI1_Init+0x68>)
 800084c:	2207      	movs	r2, #7
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <MX_SPI1_Init+0x68>)
 8000852:	0018      	movs	r0, r3
 8000854:	f001 fba2 	bl	8001f9c <HAL_SPI_Init>
 8000858:	1e03      	subs	r3, r0, #0
 800085a:	d001      	beq.n	8000860 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800085c:	f7ff ffca 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	200001d0 	.word	0x200001d0
 800086c:	40013000 	.word	0x40013000

08000870 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000870:	b590      	push	{r4, r7, lr}
 8000872:	b089      	sub	sp, #36	; 0x24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000878:	240c      	movs	r4, #12
 800087a:	193b      	adds	r3, r7, r4
 800087c:	0018      	movs	r0, r3
 800087e:	2314      	movs	r3, #20
 8000880:	001a      	movs	r2, r3
 8000882:	2100      	movs	r1, #0
 8000884:	f003 fe52 	bl	800452c <memset>
  if(spiHandle->Instance==SPI1)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	4a18      	ldr	r2, [pc, #96]	; (80008f0 <HAL_SPI_MspInit+0x80>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d12a      	bne.n	80008e8 <HAL_SPI_MspInit+0x78>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000892:	4b18      	ldr	r3, [pc, #96]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 8000894:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000896:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 8000898:	2180      	movs	r1, #128	; 0x80
 800089a:	0149      	lsls	r1, r1, #5
 800089c:	430a      	orrs	r2, r1
 800089e:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a0:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80008a4:	4b13      	ldr	r3, [pc, #76]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	430a      	orrs	r2, r1
 80008aa:	62da      	str	r2, [r3, #44]	; 0x2c
 80008ac:	4b11      	ldr	r3, [pc, #68]	; (80008f4 <HAL_SPI_MspInit+0x84>)
 80008ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008b0:	2201      	movs	r2, #1
 80008b2:	4013      	ands	r3, r2
 80008b4:	60bb      	str	r3, [r7, #8]
 80008b6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA12     ------> SPI1_MOSI
    PA11     ------> SPI1_MISO
    PA5     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_5;
 80008b8:	193b      	adds	r3, r7, r4
 80008ba:	22c1      	movs	r2, #193	; 0xc1
 80008bc:	0152      	lsls	r2, r2, #5
 80008be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c0:	0021      	movs	r1, r4
 80008c2:	187b      	adds	r3, r7, r1
 80008c4:	2202      	movs	r2, #2
 80008c6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	187b      	adds	r3, r7, r1
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ce:	187b      	adds	r3, r7, r1
 80008d0:	2203      	movs	r2, #3
 80008d2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80008d4:	187b      	adds	r3, r7, r1
 80008d6:	2200      	movs	r2, #0
 80008d8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008da:	187a      	adds	r2, r7, r1
 80008dc:	23a0      	movs	r3, #160	; 0xa0
 80008de:	05db      	lsls	r3, r3, #23
 80008e0:	0011      	movs	r1, r2
 80008e2:	0018      	movs	r0, r3
 80008e4:	f000 face 	bl	8000e84 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80008e8:	46c0      	nop			; (mov r8, r8)
 80008ea:	46bd      	mov	sp, r7
 80008ec:	b009      	add	sp, #36	; 0x24
 80008ee:	bd90      	pop	{r4, r7, pc}
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008fc:	4b07      	ldr	r3, [pc, #28]	; (800091c <HAL_MspInit+0x24>)
 80008fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000900:	4b06      	ldr	r3, [pc, #24]	; (800091c <HAL_MspInit+0x24>)
 8000902:	2101      	movs	r1, #1
 8000904:	430a      	orrs	r2, r1
 8000906:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000908:	4b04      	ldr	r3, [pc, #16]	; (800091c <HAL_MspInit+0x24>)
 800090a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_MspInit+0x24>)
 800090e:	2180      	movs	r1, #128	; 0x80
 8000910:	0549      	lsls	r1, r1, #21
 8000912:	430a      	orrs	r2, r1
 8000914:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	46c0      	nop			; (mov r8, r8)
 8000918:	46bd      	mov	sp, r7
 800091a:	bd80      	pop	{r7, pc}
 800091c:	40021000 	.word	0x40021000

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000930:	46c0      	nop			; (mov r8, r8)
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b580      	push	{r7, lr}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	46c0      	nop			; (mov r8, r8)
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}

08000940 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000944:	f000 f972 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 8000954:	4b03      	ldr	r3, [pc, #12]	; (8000964 <TIM21_IRQHandler+0x14>)
 8000956:	0018      	movs	r0, r3
 8000958:	f002 f826 	bl	80029a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	20000228 	.word	0x20000228

08000968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b086      	sub	sp, #24
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000970:	4a14      	ldr	r2, [pc, #80]	; (80009c4 <_sbrk+0x5c>)
 8000972:	4b15      	ldr	r3, [pc, #84]	; (80009c8 <_sbrk+0x60>)
 8000974:	1ad3      	subs	r3, r2, r3
 8000976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <_sbrk+0x64>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000984:	4b11      	ldr	r3, [pc, #68]	; (80009cc <_sbrk+0x64>)
 8000986:	4a12      	ldr	r2, [pc, #72]	; (80009d0 <_sbrk+0x68>)
 8000988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <_sbrk+0x64>)
 800098c:	681a      	ldr	r2, [r3, #0]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	18d3      	adds	r3, r2, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	429a      	cmp	r2, r3
 8000996:	d207      	bcs.n	80009a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000998:	f003 fd94 	bl	80044c4 <__errno>
 800099c:	0003      	movs	r3, r0
 800099e:	220c      	movs	r2, #12
 80009a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a2:	2301      	movs	r3, #1
 80009a4:	425b      	negs	r3, r3
 80009a6:	e009      	b.n	80009bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009a8:	4b08      	ldr	r3, [pc, #32]	; (80009cc <_sbrk+0x64>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009ae:	4b07      	ldr	r3, [pc, #28]	; (80009cc <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	18d2      	adds	r2, r2, r3
 80009b6:	4b05      	ldr	r3, [pc, #20]	; (80009cc <_sbrk+0x64>)
 80009b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80009ba:	68fb      	ldr	r3, [r7, #12]
}
 80009bc:	0018      	movs	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	b006      	add	sp, #24
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	20002000 	.word	0x20002000
 80009c8:	00000400 	.word	0x00000400
 80009cc:	2000008c 	.word	0x2000008c
 80009d0:	20000280 	.word	0x20000280

080009d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009d8:	46c0      	nop			; (mov r8, r8)
 80009da:	46bd      	mov	sp, r7
 80009dc:	bd80      	pop	{r7, pc}
	...

080009e0 <MX_TIM21_Init>:

TIM_HandleTypeDef htim21;

/* TIM21 init function */
void MX_TIM21_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM21_Init 0 */

  /* USER CODE END TIM21_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009e6:	2308      	movs	r3, #8
 80009e8:	18fb      	adds	r3, r7, r3
 80009ea:	0018      	movs	r0, r3
 80009ec:	2310      	movs	r3, #16
 80009ee:	001a      	movs	r2, r3
 80009f0:	2100      	movs	r1, #0
 80009f2:	f003 fd9b 	bl	800452c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009f6:	003b      	movs	r3, r7
 80009f8:	0018      	movs	r0, r3
 80009fa:	2308      	movs	r3, #8
 80009fc:	001a      	movs	r2, r3
 80009fe:	2100      	movs	r1, #0
 8000a00:	f003 fd94 	bl	800452c <memset>

  /* USER CODE BEGIN TIM21_Init 1 */

  /* USER CODE END TIM21_Init 1 */
  htim21.Instance = TIM21;
 8000a04:	4b22      	ldr	r3, [pc, #136]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a06:	4a23      	ldr	r2, [pc, #140]	; (8000a94 <MX_TIM21_Init+0xb4>)
 8000a08:	601a      	str	r2, [r3, #0]
  htim21.Init.Prescaler = 0;
 8000a0a:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a10:	4b1f      	ldr	r3, [pc, #124]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  htim21.Init.Period = 65535;
 8000a16:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a18:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <MX_TIM21_Init+0xb8>)
 8000a1a:	60da      	str	r2, [r3, #12]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a24:	2280      	movs	r2, #128	; 0x80
 8000a26:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f001 ff30 	bl	8002890 <HAL_TIM_Base_Init>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM21_Init+0x58>
  {
    Error_Handler();
 8000a34:	f7ff fede 	bl	80007f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_ETRMODE2;
 8000a38:	2108      	movs	r1, #8
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2280      	movs	r2, #128	; 0x80
 8000a3e:	0192      	lsls	r2, r2, #6
 8000a40:	601a      	str	r2, [r3, #0]
  sClockSourceConfig.ClockPolarity = TIM_CLOCKPOLARITY_NONINVERTED;
 8000a42:	187b      	adds	r3, r7, r1
 8000a44:	2200      	movs	r2, #0
 8000a46:	605a      	str	r2, [r3, #4]
  sClockSourceConfig.ClockPrescaler = TIM_CLOCKPRESCALER_DIV1;
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  sClockSourceConfig.ClockFilter = 0;
 8000a4e:	187b      	adds	r3, r7, r1
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8000a54:	187a      	adds	r2, r7, r1
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a58:	0011      	movs	r1, r2
 8000a5a:	0018      	movs	r0, r3
 8000a5c:	f002 f88c 	bl	8002b78 <HAL_TIM_ConfigClockSource>
 8000a60:	1e03      	subs	r3, r0, #0
 8000a62:	d001      	beq.n	8000a68 <MX_TIM21_Init+0x88>
  {
    Error_Handler();
 8000a64:	f7ff fec6 	bl	80007f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a68:	003b      	movs	r3, r7
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	003b      	movs	r3, r7
 8000a70:	2200      	movs	r2, #0
 8000a72:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8000a74:	003a      	movs	r2, r7
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_TIM21_Init+0xb0>)
 8000a78:	0011      	movs	r1, r2
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	f002 fa54 	bl	8002f28 <HAL_TIMEx_MasterConfigSynchronization>
 8000a80:	1e03      	subs	r3, r0, #0
 8000a82:	d001      	beq.n	8000a88 <MX_TIM21_Init+0xa8>
  {
    Error_Handler();
 8000a84:	f7ff feb6 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM21_Init 2 */

  /* USER CODE END TIM21_Init 2 */

}
 8000a88:	46c0      	nop			; (mov r8, r8)
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	b006      	add	sp, #24
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000228 	.word	0x20000228
 8000a94:	40010800 	.word	0x40010800
 8000a98:	0000ffff 	.word	0x0000ffff

08000a9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b089      	sub	sp, #36	; 0x24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	240c      	movs	r4, #12
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f003 fd3c 	bl	800452c <memset>
  if(tim_baseHandle->Instance==TIM21)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a1b      	ldr	r2, [pc, #108]	; (8000b28 <HAL_TIM_Base_MspInit+0x8c>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d130      	bne.n	8000b20 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM21_MspInit 0 */

  /* USER CODE END TIM21_MspInit 0 */
    /* TIM21 clock enable */
    __HAL_RCC_TIM21_CLK_ENABLE();
 8000abe:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ac0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	635a      	str	r2, [r3, #52]	; 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aca:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ad0:	2101      	movs	r1, #1
 8000ad2:	430a      	orrs	r2, r1
 8000ad4:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ad6:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <HAL_TIM_Base_MspInit+0x90>)
 8000ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ada:	2201      	movs	r2, #1
 8000adc:	4013      	ands	r3, r2
 8000ade:	60bb      	str	r3, [r7, #8]
 8000ae0:	68bb      	ldr	r3, [r7, #8]
    /**TIM21 GPIO Configuration
    PA1     ------> TIM21_ETR
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae2:	0021      	movs	r1, r4
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	2202      	movs	r2, #2
 8000aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af6:	187b      	adds	r3, r7, r1
 8000af8:	2200      	movs	r2, #0
 8000afa:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM21;
 8000afc:	187b      	adds	r3, r7, r1
 8000afe:	2205      	movs	r2, #5
 8000b00:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	187a      	adds	r2, r7, r1
 8000b04:	23a0      	movs	r3, #160	; 0xa0
 8000b06:	05db      	lsls	r3, r3, #23
 8000b08:	0011      	movs	r1, r2
 8000b0a:	0018      	movs	r0, r3
 8000b0c:	f000 f9ba 	bl	8000e84 <HAL_GPIO_Init>

    /* TIM21 interrupt Init */
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2100      	movs	r1, #0
 8000b14:	2014      	movs	r0, #20
 8000b16:	f000 f983 	bl	8000e20 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 8000b1a:	2014      	movs	r0, #20
 8000b1c:	f000 f995 	bl	8000e4a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b009      	add	sp, #36	; 0x24
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	40010800 	.word	0x40010800
 8000b2c:	40021000 	.word	0x40021000

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000b30:	480d      	ldr	r0, [pc, #52]	; (8000b68 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000b32:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopForever+0x6>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopForever+0xe>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopForever+0x16>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b5a:	f7ff ff3b 	bl	80009d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f003 fcb7 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fdc7 	bl	80006f4 <main>

08000b66 <LoopForever>:

LoopForever:
    b LoopForever
 8000b66:	e7fe      	b.n	8000b66 <LoopForever>
   ldr   r0, =_estack
 8000b68:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b74:	08004800 	.word	0x08004800
  ldr r2, =_sbss
 8000b78:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b7c:	2000027c 	.word	0x2000027c

08000b80 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC1_COMP_IRQHandler>
	...

08000b84 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b8a:	1dfb      	adds	r3, r7, #7
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000b90:	4b0b      	ldr	r3, [pc, #44]	; (8000bc0 <HAL_Init+0x3c>)
 8000b92:	681a      	ldr	r2, [r3, #0]
 8000b94:	4b0a      	ldr	r3, [pc, #40]	; (8000bc0 <HAL_Init+0x3c>)
 8000b96:	2140      	movs	r1, #64	; 0x40
 8000b98:	430a      	orrs	r2, r1
 8000b9a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b9c:	2000      	movs	r0, #0
 8000b9e:	f000 f811 	bl	8000bc4 <HAL_InitTick>
 8000ba2:	1e03      	subs	r3, r0, #0
 8000ba4:	d003      	beq.n	8000bae <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	2201      	movs	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	e001      	b.n	8000bb2 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000bae:	f7ff fea3 	bl	80008f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bb2:	1dfb      	adds	r3, r7, #7
 8000bb4:	781b      	ldrb	r3, [r3, #0]
}
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	b002      	add	sp, #8
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	40022000 	.word	0x40022000

08000bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b083      	sub	sp, #12
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_InitTick+0x5c>)
 8000bce:	681c      	ldr	r4, [r3, #0]
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_InitTick+0x60>)
 8000bd2:	781b      	ldrb	r3, [r3, #0]
 8000bd4:	0019      	movs	r1, r3
 8000bd6:	23fa      	movs	r3, #250	; 0xfa
 8000bd8:	0098      	lsls	r0, r3, #2
 8000bda:	f7ff fa95 	bl	8000108 <__udivsi3>
 8000bde:	0003      	movs	r3, r0
 8000be0:	0019      	movs	r1, r3
 8000be2:	0020      	movs	r0, r4
 8000be4:	f7ff fa90 	bl	8000108 <__udivsi3>
 8000be8:	0003      	movs	r3, r0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 f93d 	bl	8000e6a <HAL_SYSTICK_Config>
 8000bf0:	1e03      	subs	r3, r0, #0
 8000bf2:	d001      	beq.n	8000bf8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e00f      	b.n	8000c18 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2b03      	cmp	r3, #3
 8000bfc:	d80b      	bhi.n	8000c16 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bfe:	6879      	ldr	r1, [r7, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	425b      	negs	r3, r3
 8000c04:	2200      	movs	r2, #0
 8000c06:	0018      	movs	r0, r3
 8000c08:	f000 f90a 	bl	8000e20 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <HAL_InitTick+0x64>)
 8000c0e:	687a      	ldr	r2, [r7, #4]
 8000c10:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	0018      	movs	r0, r3
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	b003      	add	sp, #12
 8000c1e:	bd90      	pop	{r4, r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	; (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	001a      	movs	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	18d2      	adds	r2, r2, r3
 8000c3c:	4b03      	ldr	r3, [pc, #12]	; (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	601a      	str	r2, [r3, #0]
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	46c0      	nop			; (mov r8, r8)
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	20000268 	.word	0x20000268

08000c50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	; (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	0018      	movs	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	20000268 	.word	0x20000268

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff fff0 	bl	8000c50 <HAL_GetTick>
 8000c70:	0003      	movs	r3, r0
 8000c72:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	001a      	movs	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	189b      	adds	r3, r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	f7ff ffe0 	bl	8000c50 <HAL_GetTick>
 8000c90:	0002      	movs	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	46c0      	nop			; (mov r8, r8)
 8000c9e:	46c0      	nop			; (mov r8, r8)
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	b004      	add	sp, #16
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	46c0      	nop			; (mov r8, r8)
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000cb0:	4b04      	ldr	r3, [pc, #16]	; (8000cc4 <HAL_SuspendTick+0x18>)
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	4b03      	ldr	r3, [pc, #12]	; (8000cc4 <HAL_SuspendTick+0x18>)
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	438a      	bics	r2, r1
 8000cba:	601a      	str	r2, [r3, #0]
}
 8000cbc:	46c0      	nop			; (mov r8, r8)
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	46c0      	nop			; (mov r8, r8)
 8000cc4:	e000e010 	.word	0xe000e010

08000cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	0002      	movs	r2, r0
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b7f      	cmp	r3, #127	; 0x7f
 8000cda:	d809      	bhi.n	8000cf0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cdc:	1dfb      	adds	r3, r7, #7
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	001a      	movs	r2, r3
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	401a      	ands	r2, r3
 8000ce6:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <__NVIC_EnableIRQ+0x30>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	4091      	lsls	r1, r2
 8000cec:	000a      	movs	r2, r1
 8000cee:	601a      	str	r2, [r3, #0]
  }
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b002      	add	sp, #8
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	e000e100 	.word	0xe000e100

08000cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b590      	push	{r4, r7, lr}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	0002      	movs	r2, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	1dfb      	adds	r3, r7, #7
 8000d08:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d0a:	1dfb      	adds	r3, r7, #7
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b7f      	cmp	r3, #127	; 0x7f
 8000d10:	d828      	bhi.n	8000d64 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d12:	4a2f      	ldr	r2, [pc, #188]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	781b      	ldrb	r3, [r3, #0]
 8000d18:	b25b      	sxtb	r3, r3
 8000d1a:	089b      	lsrs	r3, r3, #2
 8000d1c:	33c0      	adds	r3, #192	; 0xc0
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	589b      	ldr	r3, [r3, r2]
 8000d22:	1dfa      	adds	r2, r7, #7
 8000d24:	7812      	ldrb	r2, [r2, #0]
 8000d26:	0011      	movs	r1, r2
 8000d28:	2203      	movs	r2, #3
 8000d2a:	400a      	ands	r2, r1
 8000d2c:	00d2      	lsls	r2, r2, #3
 8000d2e:	21ff      	movs	r1, #255	; 0xff
 8000d30:	4091      	lsls	r1, r2
 8000d32:	000a      	movs	r2, r1
 8000d34:	43d2      	mvns	r2, r2
 8000d36:	401a      	ands	r2, r3
 8000d38:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	019b      	lsls	r3, r3, #6
 8000d3e:	22ff      	movs	r2, #255	; 0xff
 8000d40:	401a      	ands	r2, r3
 8000d42:	1dfb      	adds	r3, r7, #7
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	0018      	movs	r0, r3
 8000d48:	2303      	movs	r3, #3
 8000d4a:	4003      	ands	r3, r0
 8000d4c:	00db      	lsls	r3, r3, #3
 8000d4e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d50:	481f      	ldr	r0, [pc, #124]	; (8000dd0 <__NVIC_SetPriority+0xd4>)
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	b25b      	sxtb	r3, r3
 8000d58:	089b      	lsrs	r3, r3, #2
 8000d5a:	430a      	orrs	r2, r1
 8000d5c:	33c0      	adds	r3, #192	; 0xc0
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d62:	e031      	b.n	8000dc8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d64:	4a1b      	ldr	r2, [pc, #108]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000d66:	1dfb      	adds	r3, r7, #7
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	0019      	movs	r1, r3
 8000d6c:	230f      	movs	r3, #15
 8000d6e:	400b      	ands	r3, r1
 8000d70:	3b08      	subs	r3, #8
 8000d72:	089b      	lsrs	r3, r3, #2
 8000d74:	3306      	adds	r3, #6
 8000d76:	009b      	lsls	r3, r3, #2
 8000d78:	18d3      	adds	r3, r2, r3
 8000d7a:	3304      	adds	r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	1dfa      	adds	r2, r7, #7
 8000d80:	7812      	ldrb	r2, [r2, #0]
 8000d82:	0011      	movs	r1, r2
 8000d84:	2203      	movs	r2, #3
 8000d86:	400a      	ands	r2, r1
 8000d88:	00d2      	lsls	r2, r2, #3
 8000d8a:	21ff      	movs	r1, #255	; 0xff
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	43d2      	mvns	r2, r2
 8000d92:	401a      	ands	r2, r3
 8000d94:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	019b      	lsls	r3, r3, #6
 8000d9a:	22ff      	movs	r2, #255	; 0xff
 8000d9c:	401a      	ands	r2, r3
 8000d9e:	1dfb      	adds	r3, r7, #7
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	2303      	movs	r3, #3
 8000da6:	4003      	ands	r3, r0
 8000da8:	00db      	lsls	r3, r3, #3
 8000daa:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dac:	4809      	ldr	r0, [pc, #36]	; (8000dd4 <__NVIC_SetPriority+0xd8>)
 8000dae:	1dfb      	adds	r3, r7, #7
 8000db0:	781b      	ldrb	r3, [r3, #0]
 8000db2:	001c      	movs	r4, r3
 8000db4:	230f      	movs	r3, #15
 8000db6:	4023      	ands	r3, r4
 8000db8:	3b08      	subs	r3, #8
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	430a      	orrs	r2, r1
 8000dbe:	3306      	adds	r3, #6
 8000dc0:	009b      	lsls	r3, r3, #2
 8000dc2:	18c3      	adds	r3, r0, r3
 8000dc4:	3304      	adds	r3, #4
 8000dc6:	601a      	str	r2, [r3, #0]
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b003      	add	sp, #12
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	1e5a      	subs	r2, r3, #1
 8000de4:	2380      	movs	r3, #128	; 0x80
 8000de6:	045b      	lsls	r3, r3, #17
 8000de8:	429a      	cmp	r2, r3
 8000dea:	d301      	bcc.n	8000df0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dec:	2301      	movs	r3, #1
 8000dee:	e010      	b.n	8000e12 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000df0:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <SysTick_Config+0x44>)
 8000df2:	687a      	ldr	r2, [r7, #4]
 8000df4:	3a01      	subs	r2, #1
 8000df6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df8:	2301      	movs	r3, #1
 8000dfa:	425b      	negs	r3, r3
 8000dfc:	2103      	movs	r1, #3
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f7ff ff7c 	bl	8000cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e04:	4b05      	ldr	r3, [pc, #20]	; (8000e1c <SysTick_Config+0x44>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e0a:	4b04      	ldr	r3, [pc, #16]	; (8000e1c <SysTick_Config+0x44>)
 8000e0c:	2207      	movs	r2, #7
 8000e0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e10:	2300      	movs	r3, #0
}
 8000e12:	0018      	movs	r0, r3
 8000e14:	46bd      	mov	sp, r7
 8000e16:	b002      	add	sp, #8
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	e000e010 	.word	0xe000e010

08000e20 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b084      	sub	sp, #16
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	210f      	movs	r1, #15
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	1c02      	adds	r2, r0, #0
 8000e30:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000e32:	68ba      	ldr	r2, [r7, #8]
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <__NVIC_SetPriority>
}
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	46bd      	mov	sp, r7
 8000e46:	b004      	add	sp, #16
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	0002      	movs	r2, r0
 8000e52:	1dfb      	adds	r3, r7, #7
 8000e54:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e56:	1dfb      	adds	r3, r7, #7
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	b25b      	sxtb	r3, r3
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	f7ff ff33 	bl	8000cc8 <__NVIC_EnableIRQ>
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b002      	add	sp, #8
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b082      	sub	sp, #8
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	0018      	movs	r0, r3
 8000e76:	f7ff ffaf 	bl	8000dd8 <SysTick_Config>
 8000e7a:	0003      	movs	r3, r0
}
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	b002      	add	sp, #8
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e92:	2300      	movs	r3, #0
 8000e94:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e96:	2300      	movs	r3, #0
 8000e98:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e9a:	e14f      	b.n	800113c <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2101      	movs	r1, #1
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4091      	lsls	r1, r2
 8000ea6:	000a      	movs	r2, r1
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d100      	bne.n	8000eb4 <HAL_GPIO_Init+0x30>
 8000eb2:	e140      	b.n	8001136 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d00b      	beq.n	8000ed4 <HAL_GPIO_Init+0x50>
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	2b02      	cmp	r3, #2
 8000ec2:	d007      	beq.n	8000ed4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000ec8:	2b11      	cmp	r3, #17
 8000eca:	d003      	beq.n	8000ed4 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	2b12      	cmp	r3, #18
 8000ed2:	d130      	bne.n	8000f36 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	005b      	lsls	r3, r3, #1
 8000ede:	2203      	movs	r2, #3
 8000ee0:	409a      	lsls	r2, r3
 8000ee2:	0013      	movs	r3, r2
 8000ee4:	43da      	mvns	r2, r3
 8000ee6:	693b      	ldr	r3, [r7, #16]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	68da      	ldr	r2, [r3, #12]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	409a      	lsls	r2, r3
 8000ef6:	0013      	movs	r3, r2
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
 8000f10:	0013      	movs	r3, r2
 8000f12:	43da      	mvns	r2, r3
 8000f14:	693b      	ldr	r3, [r7, #16]
 8000f16:	4013      	ands	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	091b      	lsrs	r3, r3, #4
 8000f20:	2201      	movs	r2, #1
 8000f22:	401a      	ands	r2, r3
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	409a      	lsls	r2, r3
 8000f28:	0013      	movs	r3, r2
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	693a      	ldr	r2, [r7, #16]
 8000f34:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f3c:	697b      	ldr	r3, [r7, #20]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	2203      	movs	r2, #3
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	43da      	mvns	r2, r3
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	4013      	ands	r3, r2
 8000f4c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	689a      	ldr	r2, [r3, #8]
 8000f52:	697b      	ldr	r3, [r7, #20]
 8000f54:	005b      	lsls	r3, r3, #1
 8000f56:	409a      	lsls	r2, r3
 8000f58:	0013      	movs	r3, r2
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	685b      	ldr	r3, [r3, #4]
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d003      	beq.n	8000f76 <HAL_GPIO_Init+0xf2>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	2b12      	cmp	r3, #18
 8000f74:	d123      	bne.n	8000fbe <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	08da      	lsrs	r2, r3, #3
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3208      	adds	r2, #8
 8000f7e:	0092      	lsls	r2, r2, #2
 8000f80:	58d3      	ldr	r3, [r2, r3]
 8000f82:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	2207      	movs	r2, #7
 8000f88:	4013      	ands	r3, r2
 8000f8a:	009b      	lsls	r3, r3, #2
 8000f8c:	220f      	movs	r2, #15
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	693b      	ldr	r3, [r7, #16]
 8000f96:	4013      	ands	r3, r2
 8000f98:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	691a      	ldr	r2, [r3, #16]
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	2107      	movs	r1, #7
 8000fa2:	400b      	ands	r3, r1
 8000fa4:	009b      	lsls	r3, r3, #2
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	08da      	lsrs	r2, r3, #3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	3208      	adds	r2, #8
 8000fb8:	0092      	lsls	r2, r2, #2
 8000fba:	6939      	ldr	r1, [r7, #16]
 8000fbc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	693b      	ldr	r3, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2203      	movs	r2, #3
 8000fdc:	401a      	ands	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	409a      	lsls	r2, r3
 8000fe4:	0013      	movs	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	2380      	movs	r3, #128	; 0x80
 8000ff8:	055b      	lsls	r3, r3, #21
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	d100      	bne.n	8001000 <HAL_GPIO_Init+0x17c>
 8000ffe:	e09a      	b.n	8001136 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001000:	4b54      	ldr	r3, [pc, #336]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001002:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001004:	4b53      	ldr	r3, [pc, #332]	; (8001154 <HAL_GPIO_Init+0x2d0>)
 8001006:	2101      	movs	r1, #1
 8001008:	430a      	orrs	r2, r1
 800100a:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800100c:	4a52      	ldr	r2, [pc, #328]	; (8001158 <HAL_GPIO_Init+0x2d4>)
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	089b      	lsrs	r3, r3, #2
 8001012:	3302      	adds	r3, #2
 8001014:	009b      	lsls	r3, r3, #2
 8001016:	589b      	ldr	r3, [r3, r2]
 8001018:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	2203      	movs	r2, #3
 800101e:	4013      	ands	r3, r2
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	220f      	movs	r2, #15
 8001024:	409a      	lsls	r2, r3
 8001026:	0013      	movs	r3, r2
 8001028:	43da      	mvns	r2, r3
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001030:	687a      	ldr	r2, [r7, #4]
 8001032:	23a0      	movs	r3, #160	; 0xa0
 8001034:	05db      	lsls	r3, r3, #23
 8001036:	429a      	cmp	r2, r3
 8001038:	d019      	beq.n	800106e <HAL_GPIO_Init+0x1ea>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a47      	ldr	r2, [pc, #284]	; (800115c <HAL_GPIO_Init+0x2d8>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d013      	beq.n	800106a <HAL_GPIO_Init+0x1e6>
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4a46      	ldr	r2, [pc, #280]	; (8001160 <HAL_GPIO_Init+0x2dc>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d00d      	beq.n	8001066 <HAL_GPIO_Init+0x1e2>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	4a45      	ldr	r2, [pc, #276]	; (8001164 <HAL_GPIO_Init+0x2e0>)
 800104e:	4293      	cmp	r3, r2
 8001050:	d007      	beq.n	8001062 <HAL_GPIO_Init+0x1de>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4a44      	ldr	r2, [pc, #272]	; (8001168 <HAL_GPIO_Init+0x2e4>)
 8001056:	4293      	cmp	r3, r2
 8001058:	d101      	bne.n	800105e <HAL_GPIO_Init+0x1da>
 800105a:	2305      	movs	r3, #5
 800105c:	e008      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 800105e:	2306      	movs	r3, #6
 8001060:	e006      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001062:	2303      	movs	r3, #3
 8001064:	e004      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 8001066:	2302      	movs	r3, #2
 8001068:	e002      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 800106a:	2301      	movs	r3, #1
 800106c:	e000      	b.n	8001070 <HAL_GPIO_Init+0x1ec>
 800106e:	2300      	movs	r3, #0
 8001070:	697a      	ldr	r2, [r7, #20]
 8001072:	2103      	movs	r1, #3
 8001074:	400a      	ands	r2, r1
 8001076:	0092      	lsls	r2, r2, #2
 8001078:	4093      	lsls	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001080:	4935      	ldr	r1, [pc, #212]	; (8001158 <HAL_GPIO_Init+0x2d4>)
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	089b      	lsrs	r3, r3, #2
 8001086:	3302      	adds	r3, #2
 8001088:	009b      	lsls	r3, r3, #2
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800108e:	4b37      	ldr	r3, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	43da      	mvns	r2, r3
 8001098:	693b      	ldr	r3, [r7, #16]
 800109a:	4013      	ands	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	2380      	movs	r3, #128	; 0x80
 80010a4:	025b      	lsls	r3, r3, #9
 80010a6:	4013      	ands	r3, r2
 80010a8:	d003      	beq.n	80010b2 <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80010aa:	693a      	ldr	r2, [r7, #16]
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4313      	orrs	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80010b2:	4b2e      	ldr	r3, [pc, #184]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 80010b8:	4b2c      	ldr	r3, [pc, #176]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	43da      	mvns	r2, r3
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	2380      	movs	r3, #128	; 0x80
 80010ce:	029b      	lsls	r3, r3, #10
 80010d0:	4013      	ands	r3, r2
 80010d2:	d003      	beq.n	80010dc <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80010d4:	693a      	ldr	r2, [r7, #16]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4313      	orrs	r3, r2
 80010da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010dc:	4b23      	ldr	r3, [pc, #140]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010de:	693a      	ldr	r2, [r7, #16]
 80010e0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010e2:	4b22      	ldr	r3, [pc, #136]	; (800116c <HAL_GPIO_Init+0x2e8>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	43da      	mvns	r2, r3
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	685a      	ldr	r2, [r3, #4]
 80010f6:	2380      	movs	r3, #128	; 0x80
 80010f8:	035b      	lsls	r3, r3, #13
 80010fa:	4013      	ands	r3, r2
 80010fc:	d003      	beq.n	8001106 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800110c:	4b17      	ldr	r3, [pc, #92]	; (800116c <HAL_GPIO_Init+0x2e8>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	43da      	mvns	r2, r3
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	4013      	ands	r3, r2
 800111a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	2380      	movs	r3, #128	; 0x80
 8001122:	039b      	lsls	r3, r3, #14
 8001124:	4013      	ands	r3, r2
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	4313      	orrs	r3, r2
 800112e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_GPIO_Init+0x2e8>)
 8001132:	693a      	ldr	r2, [r7, #16]
 8001134:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	3301      	adds	r3, #1
 800113a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	40da      	lsrs	r2, r3
 8001144:	1e13      	subs	r3, r2, #0
 8001146:	d000      	beq.n	800114a <HAL_GPIO_Init+0x2c6>
 8001148:	e6a8      	b.n	8000e9c <HAL_GPIO_Init+0x18>
  }
}
 800114a:	46c0      	nop			; (mov r8, r8)
 800114c:	46c0      	nop			; (mov r8, r8)
 800114e:	46bd      	mov	sp, r7
 8001150:	b006      	add	sp, #24
 8001152:	bd80      	pop	{r7, pc}
 8001154:	40021000 	.word	0x40021000
 8001158:	40010000 	.word	0x40010000
 800115c:	50000400 	.word	0x50000400
 8001160:	50000800 	.word	0x50000800
 8001164:	50000c00 	.word	0x50000c00
 8001168:	50001c00 	.word	0x50001c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	0008      	movs	r0, r1
 800117a:	0011      	movs	r1, r2
 800117c:	1cbb      	adds	r3, r7, #2
 800117e:	1c02      	adds	r2, r0, #0
 8001180:	801a      	strh	r2, [r3, #0]
 8001182:	1c7b      	adds	r3, r7, #1
 8001184:	1c0a      	adds	r2, r1, #0
 8001186:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	1c7b      	adds	r3, r7, #1
 800118a:	781b      	ldrb	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d004      	beq.n	800119a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001190:	1cbb      	adds	r3, r7, #2
 8001192:	881a      	ldrh	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8001198:	e003      	b.n	80011a2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800119a:	1cbb      	adds	r3, r7, #2
 800119c:	881a      	ldrh	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a2:	46c0      	nop			; (mov r8, r8)
 80011a4:	46bd      	mov	sp, r7
 80011a6:	b002      	add	sp, #8
 80011a8:	bd80      	pop	{r7, pc}
	...

080011ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e082      	b.n	80012c4 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	2241      	movs	r2, #65	; 0x41
 80011c2:	5c9b      	ldrb	r3, [r3, r2]
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d107      	bne.n	80011da <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	2100      	movs	r1, #0
 80011d0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0018      	movs	r0, r3
 80011d6:	f7ff fa3f 	bl	8000658 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2241      	movs	r2, #65	; 0x41
 80011de:	2124      	movs	r1, #36	; 0x24
 80011e0:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	438a      	bics	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	685a      	ldr	r2, [r3, #4]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4934      	ldr	r1, [pc, #208]	; (80012cc <HAL_I2C_Init+0x120>)
 80011fc:	400a      	ands	r2, r1
 80011fe:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	689a      	ldr	r2, [r3, #8]
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4931      	ldr	r1, [pc, #196]	; (80012d0 <HAL_I2C_Init+0x124>)
 800120c:	400a      	ands	r2, r1
 800120e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	68db      	ldr	r3, [r3, #12]
 8001214:	2b01      	cmp	r3, #1
 8001216:	d108      	bne.n	800122a <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2180      	movs	r1, #128	; 0x80
 8001222:	0209      	lsls	r1, r1, #8
 8001224:	430a      	orrs	r2, r1
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	e007      	b.n	800123a <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2184      	movs	r1, #132	; 0x84
 8001234:	0209      	lsls	r1, r1, #8
 8001236:	430a      	orrs	r2, r1
 8001238:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	68db      	ldr	r3, [r3, #12]
 800123e:	2b02      	cmp	r3, #2
 8001240:	d104      	bne.n	800124c <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2280      	movs	r2, #128	; 0x80
 8001248:	0112      	lsls	r2, r2, #4
 800124a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	685a      	ldr	r2, [r3, #4]
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	491f      	ldr	r1, [pc, #124]	; (80012d4 <HAL_I2C_Init+0x128>)
 8001258:	430a      	orrs	r2, r1
 800125a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68da      	ldr	r2, [r3, #12]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	491a      	ldr	r1, [pc, #104]	; (80012d0 <HAL_I2C_Init+0x124>)
 8001268:	400a      	ands	r2, r1
 800126a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	691a      	ldr	r2, [r3, #16]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	695b      	ldr	r3, [r3, #20]
 8001274:	431a      	orrs	r2, r3
 8001276:	0011      	movs	r1, r2
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	699b      	ldr	r3, [r3, #24]
 800127c:	021a      	lsls	r2, r3, #8
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	430a      	orrs	r2, r1
 8001284:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	69d9      	ldr	r1, [r3, #28]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6a1a      	ldr	r2, [r3, #32]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	430a      	orrs	r2, r1
 8001294:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	430a      	orrs	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2241      	movs	r2, #65	; 0x41
 80012b0:	2120      	movs	r1, #32
 80012b2:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2242      	movs	r2, #66	; 0x42
 80012be:	2100      	movs	r1, #0
 80012c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012c2:	2300      	movs	r3, #0
}
 80012c4:	0018      	movs	r0, r3
 80012c6:	46bd      	mov	sp, r7
 80012c8:	b002      	add	sp, #8
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	f0ffffff 	.word	0xf0ffffff
 80012d0:	ffff7fff 	.word	0xffff7fff
 80012d4:	02008000 	.word	0x02008000

080012d8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
 80012e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2241      	movs	r2, #65	; 0x41
 80012e6:	5c9b      	ldrb	r3, [r3, r2]
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b20      	cmp	r3, #32
 80012ec:	d138      	bne.n	8001360 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2240      	movs	r2, #64	; 0x40
 80012f2:	5c9b      	ldrb	r3, [r3, r2]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d101      	bne.n	80012fc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80012f8:	2302      	movs	r3, #2
 80012fa:	e032      	b.n	8001362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2240      	movs	r2, #64	; 0x40
 8001300:	2101      	movs	r1, #1
 8001302:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2241      	movs	r2, #65	; 0x41
 8001308:	2124      	movs	r1, #36	; 0x24
 800130a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2101      	movs	r1, #1
 8001318:	438a      	bics	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4911      	ldr	r1, [pc, #68]	; (800136c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001328:	400a      	ands	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6819      	ldr	r1, [r3, #0]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	683a      	ldr	r2, [r7, #0]
 8001338:	430a      	orrs	r2, r1
 800133a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2101      	movs	r1, #1
 8001348:	430a      	orrs	r2, r1
 800134a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2241      	movs	r2, #65	; 0x41
 8001350:	2120      	movs	r1, #32
 8001352:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2240      	movs	r2, #64	; 0x40
 8001358:	2100      	movs	r1, #0
 800135a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800135c:	2300      	movs	r3, #0
 800135e:	e000      	b.n	8001362 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001360:	2302      	movs	r3, #2
  }
}
 8001362:	0018      	movs	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	b002      	add	sp, #8
 8001368:	bd80      	pop	{r7, pc}
 800136a:	46c0      	nop			; (mov r8, r8)
 800136c:	ffffefff 	.word	0xffffefff

08001370 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
 8001378:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2241      	movs	r2, #65	; 0x41
 800137e:	5c9b      	ldrb	r3, [r3, r2]
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b20      	cmp	r3, #32
 8001384:	d139      	bne.n	80013fa <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2240      	movs	r2, #64	; 0x40
 800138a:	5c9b      	ldrb	r3, [r3, r2]
 800138c:	2b01      	cmp	r3, #1
 800138e:	d101      	bne.n	8001394 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001390:	2302      	movs	r3, #2
 8001392:	e033      	b.n	80013fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2240      	movs	r2, #64	; 0x40
 8001398:	2101      	movs	r1, #1
 800139a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2241      	movs	r2, #65	; 0x41
 80013a0:	2124      	movs	r1, #36	; 0x24
 80013a2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	681a      	ldr	r2, [r3, #0]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	2101      	movs	r1, #1
 80013b0:	438a      	bics	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	4a11      	ldr	r2, [pc, #68]	; (8001404 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80013c0:	4013      	ands	r3, r2
 80013c2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	68fa      	ldr	r2, [r7, #12]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	68fa      	ldr	r2, [r7, #12]
 80013d4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2101      	movs	r1, #1
 80013e2:	430a      	orrs	r2, r1
 80013e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2241      	movs	r2, #65	; 0x41
 80013ea:	2120      	movs	r1, #32
 80013ec:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2240      	movs	r2, #64	; 0x40
 80013f2:	2100      	movs	r1, #0
 80013f4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80013f6:	2300      	movs	r3, #0
 80013f8:	e000      	b.n	80013fc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80013fa:	2302      	movs	r3, #2
  }
}
 80013fc:	0018      	movs	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	b004      	add	sp, #16
 8001402:	bd80      	pop	{r7, pc}
 8001404:	fffff0ff 	.word	0xfffff0ff

08001408 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C3 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C3 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001410:	4b07      	ldr	r3, [pc, #28]	; (8001430 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001412:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001414:	4b06      	ldr	r3, [pc, #24]	; (8001430 <HAL_I2CEx_EnableFastModePlus+0x28>)
 8001416:	2101      	movs	r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR2, (uint32_t)ConfigFastModePlus);
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 800141e:	6859      	ldr	r1, [r3, #4]
 8001420:	4b04      	ldr	r3, [pc, #16]	; (8001434 <HAL_I2CEx_EnableFastModePlus+0x2c>)
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	430a      	orrs	r2, r1
 8001426:	605a      	str	r2, [r3, #4]
}
 8001428:	46c0      	nop			; (mov r8, r8)
 800142a:	46bd      	mov	sp, r7
 800142c:	b002      	add	sp, #8
 800142e:	bd80      	pop	{r7, pc}
 8001430:	40021000 	.word	0x40021000
 8001434:	40010000 	.word	0x40010000

08001438 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b5b0      	push	{r4, r5, r7, lr}
 800143a:	b08a      	sub	sp, #40	; 0x28
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f000 fbaf 	bl	8001baa <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144c:	4bcf      	ldr	r3, [pc, #828]	; (800178c <HAL_RCC_OscConfig+0x354>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	220c      	movs	r2, #12
 8001452:	4013      	ands	r3, r2
 8001454:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001456:	4bcd      	ldr	r3, [pc, #820]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001458:	68da      	ldr	r2, [r3, #12]
 800145a:	2380      	movs	r3, #128	; 0x80
 800145c:	025b      	lsls	r3, r3, #9
 800145e:	4013      	ands	r3, r2
 8001460:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	2201      	movs	r2, #1
 8001468:	4013      	ands	r3, r2
 800146a:	d100      	bne.n	800146e <HAL_RCC_OscConfig+0x36>
 800146c:	e07e      	b.n	800156c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800146e:	6a3b      	ldr	r3, [r7, #32]
 8001470:	2b08      	cmp	r3, #8
 8001472:	d007      	beq.n	8001484 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001474:	6a3b      	ldr	r3, [r7, #32]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d112      	bne.n	80014a0 <HAL_RCC_OscConfig+0x68>
 800147a:	69fa      	ldr	r2, [r7, #28]
 800147c:	2380      	movs	r3, #128	; 0x80
 800147e:	025b      	lsls	r3, r3, #9
 8001480:	429a      	cmp	r2, r3
 8001482:	d10d      	bne.n	80014a0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001484:	4bc1      	ldr	r3, [pc, #772]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	2380      	movs	r3, #128	; 0x80
 800148a:	029b      	lsls	r3, r3, #10
 800148c:	4013      	ands	r3, r2
 800148e:	d100      	bne.n	8001492 <HAL_RCC_OscConfig+0x5a>
 8001490:	e06b      	b.n	800156a <HAL_RCC_OscConfig+0x132>
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d167      	bne.n	800156a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800149a:	2301      	movs	r3, #1
 800149c:	f000 fb85 	bl	8001baa <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	2380      	movs	r3, #128	; 0x80
 80014a6:	025b      	lsls	r3, r3, #9
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d107      	bne.n	80014bc <HAL_RCC_OscConfig+0x84>
 80014ac:	4bb7      	ldr	r3, [pc, #732]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	4bb6      	ldr	r3, [pc, #728]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014b2:	2180      	movs	r1, #128	; 0x80
 80014b4:	0249      	lsls	r1, r1, #9
 80014b6:	430a      	orrs	r2, r1
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	e027      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685a      	ldr	r2, [r3, #4]
 80014c0:	23a0      	movs	r3, #160	; 0xa0
 80014c2:	02db      	lsls	r3, r3, #11
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d10e      	bne.n	80014e6 <HAL_RCC_OscConfig+0xae>
 80014c8:	4bb0      	ldr	r3, [pc, #704]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4baf      	ldr	r3, [pc, #700]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014ce:	2180      	movs	r1, #128	; 0x80
 80014d0:	02c9      	lsls	r1, r1, #11
 80014d2:	430a      	orrs	r2, r1
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	4bad      	ldr	r3, [pc, #692]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4bac      	ldr	r3, [pc, #688]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014dc:	2180      	movs	r1, #128	; 0x80
 80014de:	0249      	lsls	r1, r1, #9
 80014e0:	430a      	orrs	r2, r1
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	e012      	b.n	800150c <HAL_RCC_OscConfig+0xd4>
 80014e6:	4ba9      	ldr	r3, [pc, #676]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	4ba8      	ldr	r3, [pc, #672]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014ec:	49a8      	ldr	r1, [pc, #672]	; (8001790 <HAL_RCC_OscConfig+0x358>)
 80014ee:	400a      	ands	r2, r1
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	4ba6      	ldr	r3, [pc, #664]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80014f4:	681a      	ldr	r2, [r3, #0]
 80014f6:	2380      	movs	r3, #128	; 0x80
 80014f8:	025b      	lsls	r3, r3, #9
 80014fa:	4013      	ands	r3, r2
 80014fc:	60fb      	str	r3, [r7, #12]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	4ba2      	ldr	r3, [pc, #648]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	4ba1      	ldr	r3, [pc, #644]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001506:	49a3      	ldr	r1, [pc, #652]	; (8001794 <HAL_RCC_OscConfig+0x35c>)
 8001508:	400a      	ands	r2, r1
 800150a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d015      	beq.n	8001540 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fb9c 	bl	8000c50 <HAL_GetTick>
 8001518:	0003      	movs	r3, r0
 800151a:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800151c:	e009      	b.n	8001532 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800151e:	f7ff fb97 	bl	8000c50 <HAL_GetTick>
 8001522:	0002      	movs	r2, r0
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	1ad3      	subs	r3, r2, r3
 8001528:	2b64      	cmp	r3, #100	; 0x64
 800152a:	d902      	bls.n	8001532 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800152c:	2303      	movs	r3, #3
 800152e:	f000 fb3c 	bl	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001532:	4b96      	ldr	r3, [pc, #600]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	2380      	movs	r3, #128	; 0x80
 8001538:	029b      	lsls	r3, r3, #10
 800153a:	4013      	ands	r3, r2
 800153c:	d0ef      	beq.n	800151e <HAL_RCC_OscConfig+0xe6>
 800153e:	e015      	b.n	800156c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001540:	f7ff fb86 	bl	8000c50 <HAL_GetTick>
 8001544:	0003      	movs	r3, r0
 8001546:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001548:	e008      	b.n	800155c <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800154a:	f7ff fb81 	bl	8000c50 <HAL_GetTick>
 800154e:	0002      	movs	r2, r0
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	1ad3      	subs	r3, r2, r3
 8001554:	2b64      	cmp	r3, #100	; 0x64
 8001556:	d901      	bls.n	800155c <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8001558:	2303      	movs	r3, #3
 800155a:	e326      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800155c:	4b8b      	ldr	r3, [pc, #556]	; (800178c <HAL_RCC_OscConfig+0x354>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	2380      	movs	r3, #128	; 0x80
 8001562:	029b      	lsls	r3, r3, #10
 8001564:	4013      	ands	r3, r2
 8001566:	d1f0      	bne.n	800154a <HAL_RCC_OscConfig+0x112>
 8001568:	e000      	b.n	800156c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800156a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2202      	movs	r2, #2
 8001572:	4013      	ands	r3, r2
 8001574:	d100      	bne.n	8001578 <HAL_RCC_OscConfig+0x140>
 8001576:	e08b      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	68db      	ldr	r3, [r3, #12]
 800157c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800157e:	6a3b      	ldr	r3, [r7, #32]
 8001580:	2b04      	cmp	r3, #4
 8001582:	d005      	beq.n	8001590 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	2b0c      	cmp	r3, #12
 8001588:	d13e      	bne.n	8001608 <HAL_RCC_OscConfig+0x1d0>
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d13b      	bne.n	8001608 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001590:	4b7e      	ldr	r3, [pc, #504]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2204      	movs	r2, #4
 8001596:	4013      	ands	r3, r2
 8001598:	d004      	beq.n	80015a4 <HAL_RCC_OscConfig+0x16c>
 800159a:	697b      	ldr	r3, [r7, #20]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d101      	bne.n	80015a4 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e302      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015a4:	4b79      	ldr	r3, [pc, #484]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x360>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	0019      	movs	r1, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	691b      	ldr	r3, [r3, #16]
 80015b2:	021a      	lsls	r2, r3, #8
 80015b4:	4b75      	ldr	r3, [pc, #468]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80015b6:	430a      	orrs	r2, r1
 80015b8:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80015ba:	4b74      	ldr	r3, [pc, #464]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	2209      	movs	r2, #9
 80015c0:	4393      	bics	r3, r2
 80015c2:	0019      	movs	r1, r3
 80015c4:	4b71      	ldr	r3, [pc, #452]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015cc:	f000 fc40 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 80015d0:	0001      	movs	r1, r0
 80015d2:	4b6e      	ldr	r3, [pc, #440]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	091b      	lsrs	r3, r3, #4
 80015d8:	220f      	movs	r2, #15
 80015da:	4013      	ands	r3, r2
 80015dc:	4a6f      	ldr	r2, [pc, #444]	; (800179c <HAL_RCC_OscConfig+0x364>)
 80015de:	5cd3      	ldrb	r3, [r2, r3]
 80015e0:	000a      	movs	r2, r1
 80015e2:	40da      	lsrs	r2, r3
 80015e4:	4b6e      	ldr	r3, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x368>)
 80015e6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80015e8:	4b6e      	ldr	r3, [pc, #440]	; (80017a4 <HAL_RCC_OscConfig+0x36c>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	2513      	movs	r5, #19
 80015ee:	197c      	adds	r4, r7, r5
 80015f0:	0018      	movs	r0, r3
 80015f2:	f7ff fae7 	bl	8000bc4 <HAL_InitTick>
 80015f6:	0003      	movs	r3, r0
 80015f8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80015fa:	197b      	adds	r3, r7, r5
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d046      	beq.n	8001690 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001602:	197b      	adds	r3, r7, r5
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	e2d0      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d027      	beq.n	800165e <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800160e:	4b5f      	ldr	r3, [pc, #380]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2209      	movs	r2, #9
 8001614:	4393      	bics	r3, r2
 8001616:	0019      	movs	r1, r3
 8001618:	4b5c      	ldr	r3, [pc, #368]	; (800178c <HAL_RCC_OscConfig+0x354>)
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001620:	f7ff fb16 	bl	8000c50 <HAL_GetTick>
 8001624:	0003      	movs	r3, r0
 8001626:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001628:	e008      	b.n	800163c <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800162a:	f7ff fb11 	bl	8000c50 <HAL_GetTick>
 800162e:	0002      	movs	r2, r0
 8001630:	69bb      	ldr	r3, [r7, #24]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b02      	cmp	r3, #2
 8001636:	d901      	bls.n	800163c <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001638:	2303      	movs	r3, #3
 800163a:	e2b6      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800163c:	4b53      	ldr	r3, [pc, #332]	; (800178c <HAL_RCC_OscConfig+0x354>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2204      	movs	r2, #4
 8001642:	4013      	ands	r3, r2
 8001644:	d0f1      	beq.n	800162a <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001646:	4b51      	ldr	r3, [pc, #324]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4a53      	ldr	r2, [pc, #332]	; (8001798 <HAL_RCC_OscConfig+0x360>)
 800164c:	4013      	ands	r3, r2
 800164e:	0019      	movs	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	021a      	lsls	r2, r3, #8
 8001656:	4b4d      	ldr	r3, [pc, #308]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001658:	430a      	orrs	r2, r1
 800165a:	605a      	str	r2, [r3, #4]
 800165c:	e018      	b.n	8001690 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800165e:	4b4b      	ldr	r3, [pc, #300]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	4b4a      	ldr	r3, [pc, #296]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001664:	2101      	movs	r1, #1
 8001666:	438a      	bics	r2, r1
 8001668:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800166a:	f7ff faf1 	bl	8000c50 <HAL_GetTick>
 800166e:	0003      	movs	r3, r0
 8001670:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001672:	e008      	b.n	8001686 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001674:	f7ff faec 	bl	8000c50 <HAL_GetTick>
 8001678:	0002      	movs	r2, r0
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e291      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001686:	4b41      	ldr	r3, [pc, #260]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2204      	movs	r2, #4
 800168c:	4013      	ands	r3, r2
 800168e:	d1f1      	bne.n	8001674 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2210      	movs	r2, #16
 8001696:	4013      	ands	r3, r2
 8001698:	d100      	bne.n	800169c <HAL_RCC_OscConfig+0x264>
 800169a:	e0a1      	b.n	80017e0 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d140      	bne.n	8001724 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016a2:	4b3a      	ldr	r3, [pc, #232]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4013      	ands	r3, r2
 80016ac:	d005      	beq.n	80016ba <HAL_RCC_OscConfig+0x282>
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	69db      	ldr	r3, [r3, #28]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e277      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ba:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	4a3a      	ldr	r2, [pc, #232]	; (80017a8 <HAL_RCC_OscConfig+0x370>)
 80016c0:	4013      	ands	r3, r2
 80016c2:	0019      	movs	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016c8:	4b30      	ldr	r3, [pc, #192]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016ca:	430a      	orrs	r2, r1
 80016cc:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016ce:	4b2f      	ldr	r3, [pc, #188]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	021b      	lsls	r3, r3, #8
 80016d4:	0a19      	lsrs	r1, r3, #8
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	061a      	lsls	r2, r3, #24
 80016dc:	4b2b      	ldr	r3, [pc, #172]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016de:	430a      	orrs	r2, r1
 80016e0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016e6:	0b5b      	lsrs	r3, r3, #13
 80016e8:	3301      	adds	r3, #1
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	0212      	lsls	r2, r2, #8
 80016ee:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_RCC_OscConfig+0x354>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	091b      	lsrs	r3, r3, #4
 80016f6:	210f      	movs	r1, #15
 80016f8:	400b      	ands	r3, r1
 80016fa:	4928      	ldr	r1, [pc, #160]	; (800179c <HAL_RCC_OscConfig+0x364>)
 80016fc:	5ccb      	ldrb	r3, [r1, r3]
 80016fe:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x368>)
 8001702:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <HAL_RCC_OscConfig+0x36c>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2513      	movs	r5, #19
 800170a:	197c      	adds	r4, r7, r5
 800170c:	0018      	movs	r0, r3
 800170e:	f7ff fa59 	bl	8000bc4 <HAL_InitTick>
 8001712:	0003      	movs	r3, r0
 8001714:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001716:	197b      	adds	r3, r7, r5
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d060      	beq.n	80017e0 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 800171e:	197b      	adds	r3, r7, r5
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	e242      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	69db      	ldr	r3, [r3, #28]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d03f      	beq.n	80017ac <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800172c:	4b17      	ldr	r3, [pc, #92]	; (800178c <HAL_RCC_OscConfig+0x354>)
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001732:	2180      	movs	r1, #128	; 0x80
 8001734:	0049      	lsls	r1, r1, #1
 8001736:	430a      	orrs	r2, r1
 8001738:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800173a:	f7ff fa89 	bl	8000c50 <HAL_GetTick>
 800173e:	0003      	movs	r3, r0
 8001740:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001742:	e008      	b.n	8001756 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001744:	f7ff fa84 	bl	8000c50 <HAL_GetTick>
 8001748:	0002      	movs	r2, r0
 800174a:	69bb      	ldr	r3, [r7, #24]
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	2b02      	cmp	r3, #2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e229      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001756:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001758:	681a      	ldr	r2, [r3, #0]
 800175a:	2380      	movs	r3, #128	; 0x80
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4013      	ands	r3, r2
 8001760:	d0f0      	beq.n	8001744 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	4a10      	ldr	r2, [pc, #64]	; (80017a8 <HAL_RCC_OscConfig+0x370>)
 8001768:	4013      	ands	r3, r2
 800176a:	0019      	movs	r1, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001772:	430a      	orrs	r2, r1
 8001774:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001776:	4b05      	ldr	r3, [pc, #20]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	021b      	lsls	r3, r3, #8
 800177c:	0a19      	lsrs	r1, r3, #8
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a1b      	ldr	r3, [r3, #32]
 8001782:	061a      	lsls	r2, r3, #24
 8001784:	4b01      	ldr	r3, [pc, #4]	; (800178c <HAL_RCC_OscConfig+0x354>)
 8001786:	430a      	orrs	r2, r1
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	e029      	b.n	80017e0 <HAL_RCC_OscConfig+0x3a8>
 800178c:	40021000 	.word	0x40021000
 8001790:	fffeffff 	.word	0xfffeffff
 8001794:	fffbffff 	.word	0xfffbffff
 8001798:	ffffe0ff 	.word	0xffffe0ff
 800179c:	08004658 	.word	0x08004658
 80017a0:	20000000 	.word	0x20000000
 80017a4:	20000004 	.word	0x20000004
 80017a8:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017ac:	4bbd      	ldr	r3, [pc, #756]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4bbc      	ldr	r3, [pc, #752]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80017b2:	49bd      	ldr	r1, [pc, #756]	; (8001aa8 <HAL_RCC_OscConfig+0x670>)
 80017b4:	400a      	ands	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b8:	f7ff fa4a 	bl	8000c50 <HAL_GetTick>
 80017bc:	0003      	movs	r3, r0
 80017be:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017c0:	e008      	b.n	80017d4 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017c2:	f7ff fa45 	bl	8000c50 <HAL_GetTick>
 80017c6:	0002      	movs	r2, r0
 80017c8:	69bb      	ldr	r3, [r7, #24]
 80017ca:	1ad3      	subs	r3, r2, r3
 80017cc:	2b02      	cmp	r3, #2
 80017ce:	d901      	bls.n	80017d4 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 80017d0:	2303      	movs	r3, #3
 80017d2:	e1ea      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80017d4:	4bb3      	ldr	r3, [pc, #716]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	2380      	movs	r3, #128	; 0x80
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4013      	ands	r3, r2
 80017de:	d1f0      	bne.n	80017c2 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2208      	movs	r2, #8
 80017e6:	4013      	ands	r3, r2
 80017e8:	d036      	beq.n	8001858 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	695b      	ldr	r3, [r3, #20]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d019      	beq.n	8001826 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f2:	4bac      	ldr	r3, [pc, #688]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80017f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017f6:	4bab      	ldr	r3, [pc, #684]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80017f8:	2101      	movs	r1, #1
 80017fa:	430a      	orrs	r2, r1
 80017fc:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa27 	bl	8000c50 <HAL_GetTick>
 8001802:	0003      	movs	r3, r0
 8001804:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001806:	e008      	b.n	800181a <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff fa22 	bl	8000c50 <HAL_GetTick>
 800180c:	0002      	movs	r2, r0
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b02      	cmp	r3, #2
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e1c7      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800181a:	4ba2      	ldr	r3, [pc, #648]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800181c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800181e:	2202      	movs	r2, #2
 8001820:	4013      	ands	r3, r2
 8001822:	d0f1      	beq.n	8001808 <HAL_RCC_OscConfig+0x3d0>
 8001824:	e018      	b.n	8001858 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001826:	4b9f      	ldr	r3, [pc, #636]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001828:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800182a:	4b9e      	ldr	r3, [pc, #632]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800182c:	2101      	movs	r1, #1
 800182e:	438a      	bics	r2, r1
 8001830:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001832:	f7ff fa0d 	bl	8000c50 <HAL_GetTick>
 8001836:	0003      	movs	r3, r0
 8001838:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800183a:	e008      	b.n	800184e <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800183c:	f7ff fa08 	bl	8000c50 <HAL_GetTick>
 8001840:	0002      	movs	r2, r0
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	1ad3      	subs	r3, r2, r3
 8001846:	2b02      	cmp	r3, #2
 8001848:	d901      	bls.n	800184e <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 800184a:	2303      	movs	r3, #3
 800184c:	e1ad      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800184e:	4b95      	ldr	r3, [pc, #596]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001852:	2202      	movs	r2, #2
 8001854:	4013      	ands	r3, r2
 8001856:	d1f1      	bne.n	800183c <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2204      	movs	r2, #4
 800185e:	4013      	ands	r3, r2
 8001860:	d100      	bne.n	8001864 <HAL_RCC_OscConfig+0x42c>
 8001862:	e0ae      	b.n	80019c2 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001864:	2027      	movs	r0, #39	; 0x27
 8001866:	183b      	adds	r3, r7, r0
 8001868:	2200      	movs	r2, #0
 800186a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186c:	4b8d      	ldr	r3, [pc, #564]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800186e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001870:	2380      	movs	r3, #128	; 0x80
 8001872:	055b      	lsls	r3, r3, #21
 8001874:	4013      	ands	r3, r2
 8001876:	d109      	bne.n	800188c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001878:	4b8a      	ldr	r3, [pc, #552]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800187a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800187c:	4b89      	ldr	r3, [pc, #548]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800187e:	2180      	movs	r1, #128	; 0x80
 8001880:	0549      	lsls	r1, r1, #21
 8001882:	430a      	orrs	r2, r1
 8001884:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001886:	183b      	adds	r3, r7, r0
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800188c:	4b87      	ldr	r3, [pc, #540]	; (8001aac <HAL_RCC_OscConfig+0x674>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	4013      	ands	r3, r2
 8001896:	d11a      	bne.n	80018ce <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001898:	4b84      	ldr	r3, [pc, #528]	; (8001aac <HAL_RCC_OscConfig+0x674>)
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	4b83      	ldr	r3, [pc, #524]	; (8001aac <HAL_RCC_OscConfig+0x674>)
 800189e:	2180      	movs	r1, #128	; 0x80
 80018a0:	0049      	lsls	r1, r1, #1
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018a6:	f7ff f9d3 	bl	8000c50 <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b0:	f7ff f9ce 	bl	8000c50 <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b64      	cmp	r3, #100	; 0x64
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e173      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c2:	4b7a      	ldr	r3, [pc, #488]	; (8001aac <HAL_RCC_OscConfig+0x674>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	d0f0      	beq.n	80018b0 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	689a      	ldr	r2, [r3, #8]
 80018d2:	2380      	movs	r3, #128	; 0x80
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d107      	bne.n	80018ea <HAL_RCC_OscConfig+0x4b2>
 80018da:	4b72      	ldr	r3, [pc, #456]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80018dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018de:	4b71      	ldr	r3, [pc, #452]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80018e0:	2180      	movs	r1, #128	; 0x80
 80018e2:	0049      	lsls	r1, r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	651a      	str	r2, [r3, #80]	; 0x50
 80018e8:	e031      	b.n	800194e <HAL_RCC_OscConfig+0x516>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d10c      	bne.n	800190c <HAL_RCC_OscConfig+0x4d4>
 80018f2:	4b6c      	ldr	r3, [pc, #432]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80018f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80018f6:	4b6b      	ldr	r3, [pc, #428]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80018f8:	496b      	ldr	r1, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x670>)
 80018fa:	400a      	ands	r2, r1
 80018fc:	651a      	str	r2, [r3, #80]	; 0x50
 80018fe:	4b69      	ldr	r3, [pc, #420]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001900:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001902:	4b68      	ldr	r3, [pc, #416]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001904:	496a      	ldr	r1, [pc, #424]	; (8001ab0 <HAL_RCC_OscConfig+0x678>)
 8001906:	400a      	ands	r2, r1
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
 800190a:	e020      	b.n	800194e <HAL_RCC_OscConfig+0x516>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	23a0      	movs	r3, #160	; 0xa0
 8001912:	00db      	lsls	r3, r3, #3
 8001914:	429a      	cmp	r2, r3
 8001916:	d10e      	bne.n	8001936 <HAL_RCC_OscConfig+0x4fe>
 8001918:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800191a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800191c:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800191e:	2180      	movs	r1, #128	; 0x80
 8001920:	00c9      	lsls	r1, r1, #3
 8001922:	430a      	orrs	r2, r1
 8001924:	651a      	str	r2, [r3, #80]	; 0x50
 8001926:	4b5f      	ldr	r3, [pc, #380]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001928:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800192a:	4b5e      	ldr	r3, [pc, #376]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800192c:	2180      	movs	r1, #128	; 0x80
 800192e:	0049      	lsls	r1, r1, #1
 8001930:	430a      	orrs	r2, r1
 8001932:	651a      	str	r2, [r3, #80]	; 0x50
 8001934:	e00b      	b.n	800194e <HAL_RCC_OscConfig+0x516>
 8001936:	4b5b      	ldr	r3, [pc, #364]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001938:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 800193c:	495a      	ldr	r1, [pc, #360]	; (8001aa8 <HAL_RCC_OscConfig+0x670>)
 800193e:	400a      	ands	r2, r1
 8001940:	651a      	str	r2, [r3, #80]	; 0x50
 8001942:	4b58      	ldr	r3, [pc, #352]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001944:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001946:	4b57      	ldr	r3, [pc, #348]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001948:	4959      	ldr	r1, [pc, #356]	; (8001ab0 <HAL_RCC_OscConfig+0x678>)
 800194a:	400a      	ands	r2, r1
 800194c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d015      	beq.n	8001982 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001956:	f7ff f97b 	bl	8000c50 <HAL_GetTick>
 800195a:	0003      	movs	r3, r0
 800195c:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800195e:	e009      	b.n	8001974 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001960:	f7ff f976 	bl	8000c50 <HAL_GetTick>
 8001964:	0002      	movs	r2, r0
 8001966:	69bb      	ldr	r3, [r7, #24]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	4a52      	ldr	r2, [pc, #328]	; (8001ab4 <HAL_RCC_OscConfig+0x67c>)
 800196c:	4293      	cmp	r3, r2
 800196e:	d901      	bls.n	8001974 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001970:	2303      	movs	r3, #3
 8001972:	e11a      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001974:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001976:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001978:	2380      	movs	r3, #128	; 0x80
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	4013      	ands	r3, r2
 800197e:	d0ef      	beq.n	8001960 <HAL_RCC_OscConfig+0x528>
 8001980:	e014      	b.n	80019ac <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f965 	bl	8000c50 <HAL_GetTick>
 8001986:	0003      	movs	r3, r0
 8001988:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800198a:	e009      	b.n	80019a0 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800198c:	f7ff f960 	bl	8000c50 <HAL_GetTick>
 8001990:	0002      	movs	r2, r0
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	4a47      	ldr	r2, [pc, #284]	; (8001ab4 <HAL_RCC_OscConfig+0x67c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e104      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019a0:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80019a4:	2380      	movs	r3, #128	; 0x80
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4013      	ands	r3, r2
 80019aa:	d1ef      	bne.n	800198c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80019ac:	2327      	movs	r3, #39	; 0x27
 80019ae:	18fb      	adds	r3, r7, r3
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d105      	bne.n	80019c2 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b6:	4b3b      	ldr	r3, [pc, #236]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80019ba:	4b3a      	ldr	r3, [pc, #232]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019bc:	493e      	ldr	r1, [pc, #248]	; (8001ab8 <HAL_RCC_OscConfig+0x680>)
 80019be:	400a      	ands	r2, r1
 80019c0:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2220      	movs	r2, #32
 80019c8:	4013      	ands	r3, r2
 80019ca:	d049      	beq.n	8001a60 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d026      	beq.n	8001a22 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80019d4:	4b33      	ldr	r3, [pc, #204]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	4b32      	ldr	r3, [pc, #200]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019da:	2101      	movs	r1, #1
 80019dc:	430a      	orrs	r2, r1
 80019de:	609a      	str	r2, [r3, #8]
 80019e0:	4b30      	ldr	r3, [pc, #192]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e4:	4b2f      	ldr	r3, [pc, #188]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	430a      	orrs	r2, r1
 80019ea:	635a      	str	r2, [r3, #52]	; 0x34
 80019ec:	4b33      	ldr	r3, [pc, #204]	; (8001abc <HAL_RCC_OscConfig+0x684>)
 80019ee:	6a1a      	ldr	r2, [r3, #32]
 80019f0:	4b32      	ldr	r3, [pc, #200]	; (8001abc <HAL_RCC_OscConfig+0x684>)
 80019f2:	2180      	movs	r1, #128	; 0x80
 80019f4:	0189      	lsls	r1, r1, #6
 80019f6:	430a      	orrs	r2, r1
 80019f8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff f929 	bl	8000c50 <HAL_GetTick>
 80019fe:	0003      	movs	r3, r0
 8001a00:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a02:	e008      	b.n	8001a16 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a04:	f7ff f924 	bl	8000c50 <HAL_GetTick>
 8001a08:	0002      	movs	r2, r0
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	2b02      	cmp	r3, #2
 8001a10:	d901      	bls.n	8001a16 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001a12:	2303      	movs	r3, #3
 8001a14:	e0c9      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001a16:	4b23      	ldr	r3, [pc, #140]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2202      	movs	r2, #2
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d0f1      	beq.n	8001a04 <HAL_RCC_OscConfig+0x5cc>
 8001a20:	e01e      	b.n	8001a60 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a22:	4b20      	ldr	r3, [pc, #128]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	4b1f      	ldr	r3, [pc, #124]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001a28:	2101      	movs	r1, #1
 8001a2a:	438a      	bics	r2, r1
 8001a2c:	609a      	str	r2, [r3, #8]
 8001a2e:	4b23      	ldr	r3, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0x684>)
 8001a30:	6a1a      	ldr	r2, [r3, #32]
 8001a32:	4b22      	ldr	r3, [pc, #136]	; (8001abc <HAL_RCC_OscConfig+0x684>)
 8001a34:	4922      	ldr	r1, [pc, #136]	; (8001ac0 <HAL_RCC_OscConfig+0x688>)
 8001a36:	400a      	ands	r2, r1
 8001a38:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a3a:	f7ff f909 	bl	8000c50 <HAL_GetTick>
 8001a3e:	0003      	movs	r3, r0
 8001a40:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a42:	e008      	b.n	8001a56 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a44:	f7ff f904 	bl	8000c50 <HAL_GetTick>
 8001a48:	0002      	movs	r2, r0
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d901      	bls.n	8001a56 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001a52:	2303      	movs	r3, #3
 8001a54:	e0a9      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a56:	4b13      	ldr	r3, [pc, #76]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	d1f1      	bne.n	8001a44 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x632>
 8001a68:	e09e      	b.n	8001ba8 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a6a:	6a3b      	ldr	r3, [r7, #32]
 8001a6c:	2b0c      	cmp	r3, #12
 8001a6e:	d100      	bne.n	8001a72 <HAL_RCC_OscConfig+0x63a>
 8001a70:	e077      	b.n	8001b62 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d158      	bne.n	8001b2c <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a7a:	4b0a      	ldr	r3, [pc, #40]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <HAL_RCC_OscConfig+0x66c>)
 8001a80:	4910      	ldr	r1, [pc, #64]	; (8001ac4 <HAL_RCC_OscConfig+0x68c>)
 8001a82:	400a      	ands	r2, r1
 8001a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a86:	f7ff f8e3 	bl	8000c50 <HAL_GetTick>
 8001a8a:	0003      	movs	r3, r0
 8001a8c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001a8e:	e01b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a90:	f7ff f8de 	bl	8000c50 <HAL_GetTick>
 8001a94:	0002      	movs	r2, r0
 8001a96:	69bb      	ldr	r3, [r7, #24]
 8001a98:	1ad3      	subs	r3, r2, r3
 8001a9a:	2b02      	cmp	r3, #2
 8001a9c:	d914      	bls.n	8001ac8 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e083      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
 8001aa2:	46c0      	nop			; (mov r8, r8)
 8001aa4:	40021000 	.word	0x40021000
 8001aa8:	fffffeff 	.word	0xfffffeff
 8001aac:	40007000 	.word	0x40007000
 8001ab0:	fffffbff 	.word	0xfffffbff
 8001ab4:	00001388 	.word	0x00001388
 8001ab8:	efffffff 	.word	0xefffffff
 8001abc:	40010000 	.word	0x40010000
 8001ac0:	ffffdfff 	.word	0xffffdfff
 8001ac4:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ac8:	4b3a      	ldr	r3, [pc, #232]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	049b      	lsls	r3, r3, #18
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	d1dd      	bne.n	8001a90 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ad4:	4b37      	ldr	r3, [pc, #220]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4a37      	ldr	r2, [pc, #220]	; (8001bb8 <HAL_RCC_OscConfig+0x780>)
 8001ada:	4013      	ands	r3, r2
 8001adc:	0019      	movs	r1, r3
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae6:	431a      	orrs	r2, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	431a      	orrs	r2, r3
 8001aee:	4b31      	ldr	r3, [pc, #196]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001af0:	430a      	orrs	r2, r1
 8001af2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af4:	4b2f      	ldr	r3, [pc, #188]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	4b2e      	ldr	r3, [pc, #184]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001afa:	2180      	movs	r1, #128	; 0x80
 8001afc:	0449      	lsls	r1, r1, #17
 8001afe:	430a      	orrs	r2, r1
 8001b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b02:	f7ff f8a5 	bl	8000c50 <HAL_GetTick>
 8001b06:	0003      	movs	r3, r0
 8001b08:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b0a:	e008      	b.n	8001b1e <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b0c:	f7ff f8a0 	bl	8000c50 <HAL_GetTick>
 8001b10:	0002      	movs	r2, r0
 8001b12:	69bb      	ldr	r3, [r7, #24]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d901      	bls.n	8001b1e <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e045      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001b1e:	4b25      	ldr	r3, [pc, #148]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	2380      	movs	r3, #128	; 0x80
 8001b24:	049b      	lsls	r3, r3, #18
 8001b26:	4013      	ands	r3, r2
 8001b28:	d0f0      	beq.n	8001b0c <HAL_RCC_OscConfig+0x6d4>
 8001b2a:	e03d      	b.n	8001ba8 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	4b21      	ldr	r3, [pc, #132]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	4b20      	ldr	r3, [pc, #128]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001b32:	4922      	ldr	r1, [pc, #136]	; (8001bbc <HAL_RCC_OscConfig+0x784>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b38:	f7ff f88a 	bl	8000c50 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b42:	f7ff f885 	bl	8000c50 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b02      	cmp	r3, #2
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e02a      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001b54:	4b17      	ldr	r3, [pc, #92]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	049b      	lsls	r3, r3, #18
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0x70a>
 8001b60:	e022      	b.n	8001ba8 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d101      	bne.n	8001b6e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e01d      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b6e:	4b11      	ldr	r3, [pc, #68]	; (8001bb4 <HAL_RCC_OscConfig+0x77c>)
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b74:	69fa      	ldr	r2, [r7, #28]
 8001b76:	2380      	movs	r3, #128	; 0x80
 8001b78:	025b      	lsls	r3, r3, #9
 8001b7a:	401a      	ands	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d10f      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001b84:	69fa      	ldr	r2, [r7, #28]
 8001b86:	23f0      	movs	r3, #240	; 0xf0
 8001b88:	039b      	lsls	r3, r3, #14
 8001b8a:	401a      	ands	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d107      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001b94:	69fa      	ldr	r2, [r7, #28]
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	041b      	lsls	r3, r3, #16
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d001      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	0018      	movs	r0, r3
 8001bac:	46bd      	mov	sp, r7
 8001bae:	b00a      	add	sp, #40	; 0x28
 8001bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb2:	46c0      	nop			; (mov r8, r8)
 8001bb4:	40021000 	.word	0x40021000
 8001bb8:	ff02ffff 	.word	0xff02ffff
 8001bbc:	feffffff 	.word	0xfeffffff

08001bc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bd0:	2301      	movs	r3, #1
 8001bd2:	e128      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bd4:	4b96      	ldr	r3, [pc, #600]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d91e      	bls.n	8001c20 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001be2:	4b93      	ldr	r3, [pc, #588]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	2201      	movs	r2, #1
 8001be8:	4393      	bics	r3, r2
 8001bea:	0019      	movs	r1, r3
 8001bec:	4b90      	ldr	r3, [pc, #576]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001bee:	683a      	ldr	r2, [r7, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f82c 	bl	8000c50 <HAL_GetTick>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfc:	e009      	b.n	8001c12 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfe:	f7ff f827 	bl	8000c50 <HAL_GetTick>
 8001c02:	0002      	movs	r2, r0
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	1ad3      	subs	r3, r2, r3
 8001c08:	4a8a      	ldr	r2, [pc, #552]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e109      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b87      	ldr	r3, [pc, #540]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	2201      	movs	r2, #1
 8001c18:	4013      	ands	r3, r2
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d1ee      	bne.n	8001bfe <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	2202      	movs	r2, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d009      	beq.n	8001c3e <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c2a:	4b83      	ldr	r3, [pc, #524]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	22f0      	movs	r2, #240	; 0xf0
 8001c30:	4393      	bics	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689a      	ldr	r2, [r3, #8]
 8001c38:	4b7f      	ldr	r3, [pc, #508]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4013      	ands	r3, r2
 8001c46:	d100      	bne.n	8001c4a <HAL_RCC_ClockConfig+0x8a>
 8001c48:	e089      	b.n	8001d5e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d107      	bne.n	8001c62 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c52:	4b79      	ldr	r3, [pc, #484]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	029b      	lsls	r3, r3, #10
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d120      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0e1      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b03      	cmp	r3, #3
 8001c68:	d107      	bne.n	8001c7a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c6a:	4b73      	ldr	r3, [pc, #460]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	049b      	lsls	r3, r3, #18
 8001c72:	4013      	ands	r3, r2
 8001c74:	d114      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e0d5      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d106      	bne.n	8001c90 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001c82:	4b6d      	ldr	r3, [pc, #436]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2204      	movs	r2, #4
 8001c88:	4013      	ands	r3, r2
 8001c8a:	d109      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e0ca      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c90:	4b69      	ldr	r3, [pc, #420]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4013      	ands	r3, r2
 8001c9a:	d101      	bne.n	8001ca0 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e0c2      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ca0:	4b65      	ldr	r3, [pc, #404]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	2203      	movs	r2, #3
 8001ca6:	4393      	bics	r3, r2
 8001ca8:	0019      	movs	r1, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4b62      	ldr	r3, [pc, #392]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cb4:	f7fe ffcc 	bl	8000c50 <HAL_GetTick>
 8001cb8:	0003      	movs	r3, r0
 8001cba:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d111      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cc4:	e009      	b.n	8001cda <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc6:	f7fe ffc3 	bl	8000c50 <HAL_GetTick>
 8001cca:	0002      	movs	r2, r0
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e0a5      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001cda:	4b57      	ldr	r3, [pc, #348]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	220c      	movs	r2, #12
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d1ef      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0x106>
 8001ce6:	e03a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d111      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001cf0:	e009      	b.n	8001d06 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cf2:	f7fe ffad 	bl	8000c50 <HAL_GetTick>
 8001cf6:	0002      	movs	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e08f      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d06:	4b4c      	ldr	r3, [pc, #304]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	220c      	movs	r2, #12
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	2b0c      	cmp	r3, #12
 8001d10:	d1ef      	bne.n	8001cf2 <HAL_RCC_ClockConfig+0x132>
 8001d12:	e024      	b.n	8001d5e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d11b      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d1c:	e009      	b.n	8001d32 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d1e:	f7fe ff97 	bl	8000c50 <HAL_GetTick>
 8001d22:	0002      	movs	r2, r0
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	1ad3      	subs	r3, r2, r3
 8001d28:	4a42      	ldr	r2, [pc, #264]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d901      	bls.n	8001d32 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	e079      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d32:	4b41      	ldr	r3, [pc, #260]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	220c      	movs	r2, #12
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d1ef      	bne.n	8001d1e <HAL_RCC_ClockConfig+0x15e>
 8001d3e:	e00e      	b.n	8001d5e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d40:	f7fe ff86 	bl	8000c50 <HAL_GetTick>
 8001d44:	0002      	movs	r2, r0
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	4a3a      	ldr	r2, [pc, #232]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e068      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001d54:	4b38      	ldr	r3, [pc, #224]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	220c      	movs	r2, #12
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d5e:	4b34      	ldr	r3, [pc, #208]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	2201      	movs	r2, #1
 8001d64:	4013      	ands	r3, r2
 8001d66:	683a      	ldr	r2, [r7, #0]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d21e      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d6c:	4b30      	ldr	r3, [pc, #192]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2201      	movs	r2, #1
 8001d72:	4393      	bics	r3, r2
 8001d74:	0019      	movs	r1, r3
 8001d76:	4b2e      	ldr	r3, [pc, #184]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001d78:	683a      	ldr	r2, [r7, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe ff67 	bl	8000c50 <HAL_GetTick>
 8001d82:	0003      	movs	r3, r0
 8001d84:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	e009      	b.n	8001d9c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d88:	f7fe ff62 	bl	8000c50 <HAL_GetTick>
 8001d8c:	0002      	movs	r2, r0
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	4a28      	ldr	r2, [pc, #160]	; (8001e34 <HAL_RCC_ClockConfig+0x274>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e044      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d9c:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <HAL_RCC_ClockConfig+0x270>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2201      	movs	r2, #1
 8001da2:	4013      	ands	r3, r2
 8001da4:	683a      	ldr	r2, [r7, #0]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d1ee      	bne.n	8001d88 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db4:	4b20      	ldr	r3, [pc, #128]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_RCC_ClockConfig+0x27c>)
 8001dba:	4013      	ands	r3, r2
 8001dbc:	0019      	movs	r1, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68da      	ldr	r2, [r3, #12]
 8001dc2:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2208      	movs	r2, #8
 8001dce:	4013      	ands	r3, r2
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001dd2:	4b19      	ldr	r3, [pc, #100]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001dd4:	68db      	ldr	r3, [r3, #12]
 8001dd6:	4a1a      	ldr	r2, [pc, #104]	; (8001e40 <HAL_RCC_ClockConfig+0x280>)
 8001dd8:	4013      	ands	r3, r2
 8001dda:	0019      	movs	r1, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	00da      	lsls	r2, r3, #3
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001de4:	430a      	orrs	r2, r1
 8001de6:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001de8:	f000 f832 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001dec:	0001      	movs	r1, r0
 8001dee:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_RCC_ClockConfig+0x278>)
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	220f      	movs	r2, #15
 8001df6:	4013      	ands	r3, r2
 8001df8:	4a12      	ldr	r2, [pc, #72]	; (8001e44 <HAL_RCC_ClockConfig+0x284>)
 8001dfa:	5cd3      	ldrb	r3, [r2, r3]
 8001dfc:	000a      	movs	r2, r1
 8001dfe:	40da      	lsrs	r2, r3
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <HAL_RCC_ClockConfig+0x288>)
 8001e02:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <HAL_RCC_ClockConfig+0x28c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	250b      	movs	r5, #11
 8001e0a:	197c      	adds	r4, r7, r5
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f7fe fed9 	bl	8000bc4 <HAL_InitTick>
 8001e12:	0003      	movs	r3, r0
 8001e14:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001e16:	197b      	adds	r3, r7, r5
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d002      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001e1e:	197b      	adds	r3, r7, r5
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	e000      	b.n	8001e26 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	0018      	movs	r0, r3
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	b004      	add	sp, #16
 8001e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	40022000 	.word	0x40022000
 8001e34:	00001388 	.word	0x00001388
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	fffff8ff 	.word	0xfffff8ff
 8001e40:	ffffc7ff 	.word	0xffffc7ff
 8001e44:	08004658 	.word	0x08004658
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b5b0      	push	{r4, r5, r7, lr}
 8001e52:	b08e      	sub	sp, #56	; 0x38
 8001e54:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001e56:	4b4c      	ldr	r3, [pc, #304]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e5c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e5e:	230c      	movs	r3, #12
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d014      	beq.n	8001e90 <HAL_RCC_GetSysClockFreq+0x40>
 8001e66:	d900      	bls.n	8001e6a <HAL_RCC_GetSysClockFreq+0x1a>
 8001e68:	e07b      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x112>
 8001e6a:	2b04      	cmp	r3, #4
 8001e6c:	d002      	beq.n	8001e74 <HAL_RCC_GetSysClockFreq+0x24>
 8001e6e:	2b08      	cmp	r3, #8
 8001e70:	d00b      	beq.n	8001e8a <HAL_RCC_GetSysClockFreq+0x3a>
 8001e72:	e076      	b.n	8001f62 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001e74:	4b44      	ldr	r3, [pc, #272]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2210      	movs	r2, #16
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d002      	beq.n	8001e84 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001e7e:	4b43      	ldr	r3, [pc, #268]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e80:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001e82:	e07c      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001e84:	4b42      	ldr	r3, [pc, #264]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x140>)
 8001e86:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e88:	e079      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e8a:	4b42      	ldr	r3, [pc, #264]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x144>)
 8001e8c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e8e:	e076      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e92:	0c9a      	lsrs	r2, r3, #18
 8001e94:	230f      	movs	r3, #15
 8001e96:	401a      	ands	r2, r3
 8001e98:	4b3f      	ldr	r3, [pc, #252]	; (8001f98 <HAL_RCC_GetSysClockFreq+0x148>)
 8001e9a:	5c9b      	ldrb	r3, [r3, r2]
 8001e9c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ea0:	0d9a      	lsrs	r2, r3, #22
 8001ea2:	2303      	movs	r3, #3
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eaa:	4b37      	ldr	r3, [pc, #220]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001eac:	68da      	ldr	r2, [r3, #12]
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	025b      	lsls	r3, r3, #9
 8001eb2:	4013      	ands	r3, r2
 8001eb4:	d01a      	beq.n	8001eec <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
 8001ebe:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <HAL_RCC_GetSysClockFreq+0x144>)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	69b8      	ldr	r0, [r7, #24]
 8001ec4:	69f9      	ldr	r1, [r7, #28]
 8001ec6:	f7fe f9cb 	bl	8000260 <__aeabi_lmul>
 8001eca:	0002      	movs	r2, r0
 8001ecc:	000b      	movs	r3, r1
 8001ece:	0010      	movs	r0, r2
 8001ed0:	0019      	movs	r1, r3
 8001ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed4:	613b      	str	r3, [r7, #16]
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	f7fe f99f 	bl	8000220 <__aeabi_uldivmod>
 8001ee2:	0002      	movs	r2, r0
 8001ee4:	000b      	movs	r3, r1
 8001ee6:	0013      	movs	r3, r2
 8001ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8001eea:	e037      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001eec:	4b26      	ldr	r3, [pc, #152]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	d01a      	beq.n	8001f2c <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001ef6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	2300      	movs	r3, #0
 8001efc:	60fb      	str	r3, [r7, #12]
 8001efe:	4a23      	ldr	r2, [pc, #140]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f00:	2300      	movs	r3, #0
 8001f02:	68b8      	ldr	r0, [r7, #8]
 8001f04:	68f9      	ldr	r1, [r7, #12]
 8001f06:	f7fe f9ab 	bl	8000260 <__aeabi_lmul>
 8001f0a:	0002      	movs	r2, r0
 8001f0c:	000b      	movs	r3, r1
 8001f0e:	0010      	movs	r0, r2
 8001f10:	0019      	movs	r1, r3
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	607b      	str	r3, [r7, #4]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f7fe f97f 	bl	8000220 <__aeabi_uldivmod>
 8001f22:	0002      	movs	r2, r0
 8001f24:	000b      	movs	r3, r1
 8001f26:	0013      	movs	r3, r2
 8001f28:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2a:	e017      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f2e:	0018      	movs	r0, r3
 8001f30:	2300      	movs	r3, #0
 8001f32:	0019      	movs	r1, r3
 8001f34:	4a16      	ldr	r2, [pc, #88]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x140>)
 8001f36:	2300      	movs	r3, #0
 8001f38:	f7fe f992 	bl	8000260 <__aeabi_lmul>
 8001f3c:	0002      	movs	r2, r0
 8001f3e:	000b      	movs	r3, r1
 8001f40:	0010      	movs	r0, r2
 8001f42:	0019      	movs	r1, r3
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	001c      	movs	r4, r3
 8001f48:	2300      	movs	r3, #0
 8001f4a:	001d      	movs	r5, r3
 8001f4c:	0022      	movs	r2, r4
 8001f4e:	002b      	movs	r3, r5
 8001f50:	f7fe f966 	bl	8000220 <__aeabi_uldivmod>
 8001f54:	0002      	movs	r2, r0
 8001f56:	000b      	movs	r3, r1
 8001f58:	0013      	movs	r3, r2
 8001f5a:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f5e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f60:	e00d      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	0b5b      	lsrs	r3, r3, #13
 8001f68:	2207      	movs	r2, #7
 8001f6a:	4013      	ands	r3, r2
 8001f6c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001f6e:	6a3b      	ldr	r3, [r7, #32]
 8001f70:	3301      	adds	r3, #1
 8001f72:	2280      	movs	r2, #128	; 0x80
 8001f74:	0212      	lsls	r2, r2, #8
 8001f76:	409a      	lsls	r2, r3
 8001f78:	0013      	movs	r3, r2
 8001f7a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f7c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b00e      	add	sp, #56	; 0x38
 8001f86:	bdb0      	pop	{r4, r5, r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	003d0900 	.word	0x003d0900
 8001f90:	00f42400 	.word	0x00f42400
 8001f94:	007a1200 	.word	0x007a1200
 8001f98:	08004668 	.word	0x08004668

08001f9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d101      	bne.n	8001fae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001faa:	2301      	movs	r3, #1
 8001fac:	e083      	b.n	80020b6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685a      	ldr	r2, [r3, #4]
 8001fba:	2382      	movs	r3, #130	; 0x82
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d009      	beq.n	8001fd6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	61da      	str	r2, [r3, #28]
 8001fc8:	e005      	b.n	8001fd6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2251      	movs	r2, #81	; 0x51
 8001fe0:	5c9b      	ldrb	r3, [r3, r2]
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d107      	bne.n	8001ff8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2250      	movs	r2, #80	; 0x50
 8001fec:	2100      	movs	r1, #0
 8001fee:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	0018      	movs	r0, r3
 8001ff4:	f7fe fc3c 	bl	8000870 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2251      	movs	r2, #81	; 0x51
 8001ffc:	2102      	movs	r1, #2
 8001ffe:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	2140      	movs	r1, #64	; 0x40
 800200c:	438a      	bics	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	685a      	ldr	r2, [r3, #4]
 8002014:	2382      	movs	r3, #130	; 0x82
 8002016:	005b      	lsls	r3, r3, #1
 8002018:	401a      	ands	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	2384      	movs	r3, #132	; 0x84
 8002020:	021b      	lsls	r3, r3, #8
 8002022:	400b      	ands	r3, r1
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	68d9      	ldr	r1, [r3, #12]
 800202a:	2380      	movs	r3, #128	; 0x80
 800202c:	011b      	lsls	r3, r3, #4
 800202e:	400b      	ands	r3, r1
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2102      	movs	r1, #2
 8002038:	400b      	ands	r3, r1
 800203a:	431a      	orrs	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	695b      	ldr	r3, [r3, #20]
 8002040:	2101      	movs	r1, #1
 8002042:	400b      	ands	r3, r1
 8002044:	431a      	orrs	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6999      	ldr	r1, [r3, #24]
 800204a:	2380      	movs	r3, #128	; 0x80
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	400b      	ands	r3, r1
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	2138      	movs	r1, #56	; 0x38
 8002058:	400b      	ands	r3, r1
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6a1b      	ldr	r3, [r3, #32]
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	400b      	ands	r3, r1
 8002064:	431a      	orrs	r2, r3
 8002066:	0011      	movs	r1, r2
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800206c:	2380      	movs	r3, #128	; 0x80
 800206e:	019b      	lsls	r3, r3, #6
 8002070:	401a      	ands	r2, r3
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	430a      	orrs	r2, r1
 8002078:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	699b      	ldr	r3, [r3, #24]
 800207e:	0c1b      	lsrs	r3, r3, #16
 8002080:	2204      	movs	r2, #4
 8002082:	4013      	ands	r3, r2
 8002084:	0019      	movs	r1, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800208a:	2210      	movs	r2, #16
 800208c:	401a      	ands	r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	69da      	ldr	r2, [r3, #28]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4907      	ldr	r1, [pc, #28]	; (80020c0 <HAL_SPI_Init+0x124>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2251      	movs	r2, #81	; 0x51
 80020b0:	2101      	movs	r1, #1
 80020b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020b4:	2300      	movs	r3, #0
}
 80020b6:	0018      	movs	r0, r3
 80020b8:	46bd      	mov	sp, r7
 80020ba:	b002      	add	sp, #8
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	46c0      	nop			; (mov r8, r8)
 80020c0:	fffff7ff 	.word	0xfffff7ff

080020c4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b088      	sub	sp, #32
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	603b      	str	r3, [r7, #0]
 80020d0:	1dbb      	adds	r3, r7, #6
 80020d2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80020d4:	231f      	movs	r3, #31
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	2200      	movs	r2, #0
 80020da:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	2250      	movs	r2, #80	; 0x50
 80020e0:	5c9b      	ldrb	r3, [r3, r2]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d101      	bne.n	80020ea <HAL_SPI_Transmit+0x26>
 80020e6:	2302      	movs	r3, #2
 80020e8:	e13e      	b.n	8002368 <HAL_SPI_Transmit+0x2a4>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2250      	movs	r2, #80	; 0x50
 80020ee:	2101      	movs	r1, #1
 80020f0:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020f2:	f7fe fdad 	bl	8000c50 <HAL_GetTick>
 80020f6:	0003      	movs	r3, r0
 80020f8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80020fa:	2316      	movs	r3, #22
 80020fc:	18fb      	adds	r3, r7, r3
 80020fe:	1dba      	adds	r2, r7, #6
 8002100:	8812      	ldrh	r2, [r2, #0]
 8002102:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	2251      	movs	r2, #81	; 0x51
 8002108:	5c9b      	ldrb	r3, [r3, r2]
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d004      	beq.n	800211a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002110:	231f      	movs	r3, #31
 8002112:	18fb      	adds	r3, r7, r3
 8002114:	2202      	movs	r2, #2
 8002116:	701a      	strb	r2, [r3, #0]
    goto error;
 8002118:	e11b      	b.n	8002352 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d003      	beq.n	8002128 <HAL_SPI_Transmit+0x64>
 8002120:	1dbb      	adds	r3, r7, #6
 8002122:	881b      	ldrh	r3, [r3, #0]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d104      	bne.n	8002132 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002128:	231f      	movs	r3, #31
 800212a:	18fb      	adds	r3, r7, r3
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002130:	e10f      	b.n	8002352 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2251      	movs	r2, #81	; 0x51
 8002136:	2103      	movs	r1, #3
 8002138:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	1dba      	adds	r2, r7, #6
 800214a:	8812      	ldrh	r2, [r2, #0]
 800214c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	1dba      	adds	r2, r7, #6
 8002152:	8812      	ldrh	r2, [r2, #0]
 8002154:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2200      	movs	r2, #0
 8002160:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2200      	movs	r2, #0
 8002166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2200      	movs	r2, #0
 800216c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2200      	movs	r2, #0
 8002172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	689a      	ldr	r2, [r3, #8]
 8002178:	2380      	movs	r3, #128	; 0x80
 800217a:	021b      	lsls	r3, r3, #8
 800217c:	429a      	cmp	r2, r3
 800217e:	d110      	bne.n	80021a2 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2140      	movs	r1, #64	; 0x40
 800218c:	438a      	bics	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2180      	movs	r1, #128	; 0x80
 800219c:	01c9      	lsls	r1, r1, #7
 800219e:	430a      	orrs	r2, r1
 80021a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2240      	movs	r2, #64	; 0x40
 80021aa:	4013      	ands	r3, r2
 80021ac:	2b40      	cmp	r3, #64	; 0x40
 80021ae:	d007      	beq.n	80021c0 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2140      	movs	r1, #64	; 0x40
 80021bc:	430a      	orrs	r2, r1
 80021be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	68da      	ldr	r2, [r3, #12]
 80021c4:	2380      	movs	r3, #128	; 0x80
 80021c6:	011b      	lsls	r3, r3, #4
 80021c8:	429a      	cmp	r2, r3
 80021ca:	d14e      	bne.n	800226a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <HAL_SPI_Transmit+0x11a>
 80021d4:	2316      	movs	r3, #22
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	881b      	ldrh	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d13f      	bne.n	800225e <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	881a      	ldrh	r2, [r3, #0]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	1c9a      	adds	r2, r3, #2
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002202:	e02c      	b.n	800225e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	2202      	movs	r2, #2
 800220c:	4013      	ands	r3, r2
 800220e:	2b02      	cmp	r3, #2
 8002210:	d112      	bne.n	8002238 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	881a      	ldrh	r2, [r3, #0]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	1c9a      	adds	r2, r3, #2
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800222c:	b29b      	uxth	r3, r3
 800222e:	3b01      	subs	r3, #1
 8002230:	b29a      	uxth	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	86da      	strh	r2, [r3, #54]	; 0x36
 8002236:	e012      	b.n	800225e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002238:	f7fe fd0a 	bl	8000c50 <HAL_GetTick>
 800223c:	0002      	movs	r2, r0
 800223e:	69bb      	ldr	r3, [r7, #24]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d802      	bhi.n	800224e <HAL_SPI_Transmit+0x18a>
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	3301      	adds	r3, #1
 800224c:	d102      	bne.n	8002254 <HAL_SPI_Transmit+0x190>
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d104      	bne.n	800225e <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 8002254:	231f      	movs	r3, #31
 8002256:	18fb      	adds	r3, r7, r3
 8002258:	2203      	movs	r2, #3
 800225a:	701a      	strb	r2, [r3, #0]
          goto error;
 800225c:	e079      	b.n	8002352 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002262:	b29b      	uxth	r3, r3
 8002264:	2b00      	cmp	r3, #0
 8002266:	d1cd      	bne.n	8002204 <HAL_SPI_Transmit+0x140>
 8002268:	e04f      	b.n	800230a <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_SPI_Transmit+0x1b8>
 8002272:	2316      	movs	r3, #22
 8002274:	18fb      	adds	r3, r7, r3
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d141      	bne.n	8002300 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	330c      	adds	r3, #12
 8002286:	7812      	ldrb	r2, [r2, #0]
 8002288:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800228e:	1c5a      	adds	r2, r3, #1
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002298:	b29b      	uxth	r3, r3
 800229a:	3b01      	subs	r3, #1
 800229c:	b29a      	uxth	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80022a2:	e02d      	b.n	8002300 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	2202      	movs	r2, #2
 80022ac:	4013      	ands	r3, r2
 80022ae:	2b02      	cmp	r3, #2
 80022b0:	d113      	bne.n	80022da <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	330c      	adds	r3, #12
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	1c5a      	adds	r2, r3, #1
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	3b01      	subs	r3, #1
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	86da      	strh	r2, [r3, #54]	; 0x36
 80022d8:	e012      	b.n	8002300 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022da:	f7fe fcb9 	bl	8000c50 <HAL_GetTick>
 80022de:	0002      	movs	r2, r0
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	429a      	cmp	r2, r3
 80022e8:	d802      	bhi.n	80022f0 <HAL_SPI_Transmit+0x22c>
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	3301      	adds	r3, #1
 80022ee:	d102      	bne.n	80022f6 <HAL_SPI_Transmit+0x232>
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d104      	bne.n	8002300 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 80022f6:	231f      	movs	r3, #31
 80022f8:	18fb      	adds	r3, r7, r3
 80022fa:	2203      	movs	r2, #3
 80022fc:	701a      	strb	r2, [r3, #0]
          goto error;
 80022fe:	e028      	b.n	8002352 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002304:	b29b      	uxth	r3, r3
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1cc      	bne.n	80022a4 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800230a:	69ba      	ldr	r2, [r7, #24]
 800230c:	6839      	ldr	r1, [r7, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	0018      	movs	r0, r3
 8002312:	f000 fa77 	bl	8002804 <SPI_EndRxTxTransaction>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d002      	beq.n	8002320 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	689b      	ldr	r3, [r3, #8]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d10a      	bne.n	800233e <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002328:	2300      	movs	r3, #0
 800232a:	613b      	str	r3, [r7, #16]
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	613b      	str	r3, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	613b      	str	r3, [r7, #16]
 800233c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	2b00      	cmp	r3, #0
 8002344:	d004      	beq.n	8002350 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 8002346:	231f      	movs	r3, #31
 8002348:	18fb      	adds	r3, r7, r3
 800234a:	2201      	movs	r2, #1
 800234c:	701a      	strb	r2, [r3, #0]
 800234e:	e000      	b.n	8002352 <HAL_SPI_Transmit+0x28e>
  }

error:
 8002350:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2251      	movs	r2, #81	; 0x51
 8002356:	2101      	movs	r1, #1
 8002358:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2250      	movs	r2, #80	; 0x50
 800235e:	2100      	movs	r1, #0
 8002360:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002362:	231f      	movs	r3, #31
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	781b      	ldrb	r3, [r3, #0]
}
 8002368:	0018      	movs	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	b008      	add	sp, #32
 800236e:	bd80      	pop	{r7, pc}

08002370 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b08c      	sub	sp, #48	; 0x30
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	001a      	movs	r2, r3
 800237e:	1cbb      	adds	r3, r7, #2
 8002380:	801a      	strh	r2, [r3, #0]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002382:	2301      	movs	r3, #1
 8002384:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002386:	232b      	movs	r3, #43	; 0x2b
 8002388:	18fb      	adds	r3, r7, r3
 800238a:	2200      	movs	r2, #0
 800238c:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2250      	movs	r2, #80	; 0x50
 8002392:	5c9b      	ldrb	r3, [r3, r2]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d101      	bne.n	800239c <HAL_SPI_TransmitReceive+0x2c>
 8002398:	2302      	movs	r3, #2
 800239a:	e1a0      	b.n	80026de <HAL_SPI_TransmitReceive+0x36e>
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2250      	movs	r2, #80	; 0x50
 80023a0:	2101      	movs	r1, #1
 80023a2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80023a4:	f7fe fc54 	bl	8000c50 <HAL_GetTick>
 80023a8:	0003      	movs	r3, r0
 80023aa:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80023ac:	2023      	movs	r0, #35	; 0x23
 80023ae:	183b      	adds	r3, r7, r0
 80023b0:	68fa      	ldr	r2, [r7, #12]
 80023b2:	2151      	movs	r1, #81	; 0x51
 80023b4:	5c52      	ldrb	r2, [r2, r1]
 80023b6:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80023be:	231a      	movs	r3, #26
 80023c0:	18fb      	adds	r3, r7, r3
 80023c2:	1cba      	adds	r2, r7, #2
 80023c4:	8812      	ldrh	r2, [r2, #0]
 80023c6:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80023c8:	183b      	adds	r3, r7, r0
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d011      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0x84>
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	2382      	movs	r3, #130	; 0x82
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d107      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	689b      	ldr	r3, [r3, #8]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d103      	bne.n	80023ea <HAL_SPI_TransmitReceive+0x7a>
 80023e2:	183b      	adds	r3, r7, r0
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	2b04      	cmp	r3, #4
 80023e8:	d004      	beq.n	80023f4 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 80023ea:	232b      	movs	r3, #43	; 0x2b
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
    goto error;
 80023f2:	e169      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x98>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d003      	beq.n	8002408 <HAL_SPI_TransmitReceive+0x98>
 8002400:	1cbb      	adds	r3, r7, #2
 8002402:	881b      	ldrh	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d104      	bne.n	8002412 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002408:	232b      	movs	r3, #43	; 0x2b
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2201      	movs	r2, #1
 800240e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002410:	e15a      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2251      	movs	r2, #81	; 0x51
 8002416:	5c9b      	ldrb	r3, [r3, r2]
 8002418:	b2db      	uxtb	r3, r3
 800241a:	2b04      	cmp	r3, #4
 800241c:	d003      	beq.n	8002426 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2251      	movs	r2, #81	; 0x51
 8002422:	2105      	movs	r1, #5
 8002424:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	687a      	ldr	r2, [r7, #4]
 8002430:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	1cba      	adds	r2, r7, #2
 8002436:	8812      	ldrh	r2, [r2, #0]
 8002438:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1cba      	adds	r2, r7, #2
 800243e:	8812      	ldrh	r2, [r2, #0]
 8002440:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	68ba      	ldr	r2, [r7, #8]
 8002446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1cba      	adds	r2, r7, #2
 800244c:	8812      	ldrh	r2, [r2, #0]
 800244e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	1cba      	adds	r2, r7, #2
 8002454:	8812      	ldrh	r2, [r2, #0]
 8002456:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	2200      	movs	r2, #0
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2200      	movs	r2, #0
 8002462:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2240      	movs	r2, #64	; 0x40
 800246c:	4013      	ands	r3, r2
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	d007      	beq.n	8002482 <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681a      	ldr	r2, [r3, #0]
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	2140      	movs	r1, #64	; 0x40
 800247e:	430a      	orrs	r2, r1
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68da      	ldr	r2, [r3, #12]
 8002486:	2380      	movs	r3, #128	; 0x80
 8002488:	011b      	lsls	r3, r3, #4
 800248a:	429a      	cmp	r2, r3
 800248c:	d000      	beq.n	8002490 <HAL_SPI_TransmitReceive+0x120>
 800248e:	e07a      	b.n	8002586 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_SPI_TransmitReceive+0x132>
 8002498:	231a      	movs	r3, #26
 800249a:	18fb      	adds	r3, r7, r3
 800249c:	881b      	ldrh	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d166      	bne.n	8002570 <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a6:	881a      	ldrh	r2, [r3, #0]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	1c9a      	adds	r2, r3, #2
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024bc:	b29b      	uxth	r3, r3
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80024c6:	e053      	b.n	8002570 <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	2202      	movs	r2, #2
 80024d0:	4013      	ands	r3, r2
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d11b      	bne.n	800250e <HAL_SPI_TransmitReceive+0x19e>
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80024da:	b29b      	uxth	r3, r3
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d016      	beq.n	800250e <HAL_SPI_TransmitReceive+0x19e>
 80024e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d113      	bne.n	800250e <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	881a      	ldrh	r2, [r3, #0]
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	1c9a      	adds	r2, r3, #2
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002500:	b29b      	uxth	r3, r3
 8002502:	3b01      	subs	r3, #1
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	2201      	movs	r2, #1
 8002516:	4013      	ands	r3, r2
 8002518:	2b01      	cmp	r3, #1
 800251a:	d119      	bne.n	8002550 <HAL_SPI_TransmitReceive+0x1e0>
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d014      	beq.n	8002550 <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	68da      	ldr	r2, [r3, #12]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002530:	b292      	uxth	r2, r2
 8002532:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002538:	1c9a      	adds	r2, r3, #2
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002542:	b29b      	uxth	r3, r3
 8002544:	3b01      	subs	r3, #1
 8002546:	b29a      	uxth	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800254c:	2301      	movs	r3, #1
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002550:	f7fe fb7e 	bl	8000c50 <HAL_GetTick>
 8002554:	0002      	movs	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800255c:	429a      	cmp	r2, r3
 800255e:	d807      	bhi.n	8002570 <HAL_SPI_TransmitReceive+0x200>
 8002560:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002562:	3301      	adds	r3, #1
 8002564:	d004      	beq.n	8002570 <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8002566:	232b      	movs	r3, #43	; 0x2b
 8002568:	18fb      	adds	r3, r7, r3
 800256a:	2203      	movs	r2, #3
 800256c:	701a      	strb	r2, [r3, #0]
        goto error;
 800256e:	e0ab      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002574:	b29b      	uxth	r3, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1a6      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x158>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800257e:	b29b      	uxth	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1a1      	bne.n	80024c8 <HAL_SPI_TransmitReceive+0x158>
 8002584:	e07f      	b.n	8002686 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <HAL_SPI_TransmitReceive+0x22a>
 800258e:	231a      	movs	r3, #26
 8002590:	18fb      	adds	r3, r7, r3
 8002592:	881b      	ldrh	r3, [r3, #0]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d000      	beq.n	800259a <HAL_SPI_TransmitReceive+0x22a>
 8002598:	e06b      	b.n	8002672 <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	330c      	adds	r3, #12
 80025a4:	7812      	ldrb	r2, [r2, #0]
 80025a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ac:	1c5a      	adds	r2, r3, #1
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025c0:	e057      	b.n	8002672 <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2202      	movs	r2, #2
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d11c      	bne.n	800260a <HAL_SPI_TransmitReceive+0x29a>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d017      	beq.n	800260a <HAL_SPI_TransmitReceive+0x29a>
 80025da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d114      	bne.n	800260a <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	330c      	adds	r3, #12
 80025ea:	7812      	ldrb	r2, [r2, #0]
 80025ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	1c5a      	adds	r2, r3, #1
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	3b01      	subs	r3, #1
 8002600:	b29a      	uxth	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002606:	2300      	movs	r3, #0
 8002608:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	2201      	movs	r2, #1
 8002612:	4013      	ands	r3, r2
 8002614:	2b01      	cmp	r3, #1
 8002616:	d119      	bne.n	800264c <HAL_SPI_TransmitReceive+0x2dc>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800261c:	b29b      	uxth	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d014      	beq.n	800264c <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800263e:	b29b      	uxth	r3, r3
 8002640:	3b01      	subs	r3, #1
 8002642:	b29a      	uxth	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002648:	2301      	movs	r3, #1
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800264c:	f7fe fb00 	bl	8000c50 <HAL_GetTick>
 8002650:	0002      	movs	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002658:	429a      	cmp	r2, r3
 800265a:	d802      	bhi.n	8002662 <HAL_SPI_TransmitReceive+0x2f2>
 800265c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800265e:	3301      	adds	r3, #1
 8002660:	d102      	bne.n	8002668 <HAL_SPI_TransmitReceive+0x2f8>
 8002662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002664:	2b00      	cmp	r3, #0
 8002666:	d104      	bne.n	8002672 <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002668:	232b      	movs	r3, #43	; 0x2b
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2203      	movs	r2, #3
 800266e:	701a      	strb	r2, [r3, #0]
        goto error;
 8002670:	e02a      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002676:	b29b      	uxth	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1a2      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x252>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002680:	b29b      	uxth	r3, r3
 8002682:	2b00      	cmp	r3, #0
 8002684:	d19d      	bne.n	80025c2 <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002688:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	0018      	movs	r0, r3
 800268e:	f000 f8b9 	bl	8002804 <SPI_EndRxTxTransaction>
 8002692:	1e03      	subs	r3, r0, #0
 8002694:	d007      	beq.n	80026a6 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8002696:	232b      	movs	r3, #43	; 0x2b
 8002698:	18fb      	adds	r3, r7, r3
 800269a:	2201      	movs	r2, #1
 800269c:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	2220      	movs	r2, #32
 80026a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80026a4:	e010      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d10b      	bne.n	80026c6 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80026ae:	2300      	movs	r3, #0
 80026b0:	617b      	str	r3, [r7, #20]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	617b      	str	r3, [r7, #20]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	e000      	b.n	80026c8 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 80026c6:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2251      	movs	r2, #81	; 0x51
 80026cc:	2101      	movs	r1, #1
 80026ce:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2250      	movs	r2, #80	; 0x50
 80026d4:	2100      	movs	r1, #0
 80026d6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80026d8:	232b      	movs	r3, #43	; 0x2b
 80026da:	18fb      	adds	r3, r7, r3
 80026dc:	781b      	ldrb	r3, [r3, #0]
}
 80026de:	0018      	movs	r0, r3
 80026e0:	46bd      	mov	sp, r7
 80026e2:	b00c      	add	sp, #48	; 0x30
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b088      	sub	sp, #32
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	60f8      	str	r0, [r7, #12]
 80026f0:	60b9      	str	r1, [r7, #8]
 80026f2:	603b      	str	r3, [r7, #0]
 80026f4:	1dfb      	adds	r3, r7, #7
 80026f6:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80026f8:	f7fe faaa 	bl	8000c50 <HAL_GetTick>
 80026fc:	0002      	movs	r2, r0
 80026fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002700:	1a9b      	subs	r3, r3, r2
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	18d3      	adds	r3, r2, r3
 8002706:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002708:	f7fe faa2 	bl	8000c50 <HAL_GetTick>
 800270c:	0003      	movs	r3, r0
 800270e:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002710:	4b3a      	ldr	r3, [pc, #232]	; (80027fc <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	015b      	lsls	r3, r3, #5
 8002716:	0d1b      	lsrs	r3, r3, #20
 8002718:	69fa      	ldr	r2, [r7, #28]
 800271a:	4353      	muls	r3, r2
 800271c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800271e:	e058      	b.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	3301      	adds	r3, #1
 8002724:	d055      	beq.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002726:	f7fe fa93 	bl	8000c50 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	69fa      	ldr	r2, [r7, #28]
 8002732:	429a      	cmp	r2, r3
 8002734:	d902      	bls.n	800273c <SPI_WaitFlagStateUntilTimeout+0x54>
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d142      	bne.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	21e0      	movs	r1, #224	; 0xe0
 8002748:	438a      	bics	r2, r1
 800274a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	2382      	movs	r3, #130	; 0x82
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	429a      	cmp	r2, r3
 8002756:	d113      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	2380      	movs	r3, #128	; 0x80
 800275e:	021b      	lsls	r3, r3, #8
 8002760:	429a      	cmp	r2, r3
 8002762:	d005      	beq.n	8002770 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	429a      	cmp	r2, r3
 800276e:	d107      	bne.n	8002780 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2140      	movs	r1, #64	; 0x40
 800277c:	438a      	bics	r2, r1
 800277e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	019b      	lsls	r3, r3, #6
 8002788:	429a      	cmp	r2, r3
 800278a:	d110      	bne.n	80027ae <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	491a      	ldr	r1, [pc, #104]	; (8002800 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002798:	400a      	ands	r2, r1
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2180      	movs	r1, #128	; 0x80
 80027a8:	0189      	lsls	r1, r1, #6
 80027aa:	430a      	orrs	r2, r1
 80027ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2251      	movs	r2, #81	; 0x51
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2250      	movs	r2, #80	; 0x50
 80027ba:	2100      	movs	r1, #0
 80027bc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e017      	b.n	80027f2 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80027c8:	2300      	movs	r3, #0
 80027ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80027cc:	697b      	ldr	r3, [r7, #20]
 80027ce:	3b01      	subs	r3, #1
 80027d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	68ba      	ldr	r2, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	425a      	negs	r2, r3
 80027e2:	4153      	adcs	r3, r2
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	001a      	movs	r2, r3
 80027e8:	1dfb      	adds	r3, r7, #7
 80027ea:	781b      	ldrb	r3, [r3, #0]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d197      	bne.n	8002720 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	b008      	add	sp, #32
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	20000000 	.word	0x20000000
 8002800:	ffffdfff 	.word	0xffffdfff

08002804 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b088      	sub	sp, #32
 8002808:	af02      	add	r7, sp, #8
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002810:	4b1d      	ldr	r3, [pc, #116]	; (8002888 <SPI_EndRxTxTransaction+0x84>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	491d      	ldr	r1, [pc, #116]	; (800288c <SPI_EndRxTxTransaction+0x88>)
 8002816:	0018      	movs	r0, r3
 8002818:	f7fd fc76 	bl	8000108 <__udivsi3>
 800281c:	0003      	movs	r3, r0
 800281e:	001a      	movs	r2, r3
 8002820:	0013      	movs	r3, r2
 8002822:	015b      	lsls	r3, r3, #5
 8002824:	1a9b      	subs	r3, r3, r2
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	189b      	adds	r3, r3, r2
 800282a:	00db      	lsls	r3, r3, #3
 800282c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	2382      	movs	r3, #130	; 0x82
 8002834:	005b      	lsls	r3, r3, #1
 8002836:	429a      	cmp	r2, r3
 8002838:	d112      	bne.n	8002860 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	68f8      	ldr	r0, [r7, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	0013      	movs	r3, r2
 8002844:	2200      	movs	r2, #0
 8002846:	2180      	movs	r1, #128	; 0x80
 8002848:	f7ff ff4e 	bl	80026e8 <SPI_WaitFlagStateUntilTimeout>
 800284c:	1e03      	subs	r3, r0, #0
 800284e:	d016      	beq.n	800287e <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002854:	2220      	movs	r2, #32
 8002856:	431a      	orrs	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e00f      	b.n	8002880 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	2b00      	cmp	r3, #0
 8002864:	d00a      	beq.n	800287c <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 8002866:	697b      	ldr	r3, [r7, #20]
 8002868:	3b01      	subs	r3, #1
 800286a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	2280      	movs	r2, #128	; 0x80
 8002874:	4013      	ands	r3, r2
 8002876:	2b80      	cmp	r3, #128	; 0x80
 8002878:	d0f2      	beq.n	8002860 <SPI_EndRxTxTransaction+0x5c>
 800287a:	e000      	b.n	800287e <SPI_EndRxTxTransaction+0x7a>
        break;
 800287c:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	b006      	add	sp, #24
 8002886:	bd80      	pop	{r7, pc}
 8002888:	20000000 	.word	0x20000000
 800288c:	016e3600 	.word	0x016e3600

08002890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d101      	bne.n	80028a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800289e:	2301      	movs	r3, #1
 80028a0:	e032      	b.n	8002908 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2239      	movs	r2, #57	; 0x39
 80028a6:	5c9b      	ldrb	r3, [r3, r2]
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d107      	bne.n	80028be <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2238      	movs	r2, #56	; 0x38
 80028b2:	2100      	movs	r1, #0
 80028b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	0018      	movs	r0, r3
 80028ba:	f7fe f8ef 	bl	8000a9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2239      	movs	r2, #57	; 0x39
 80028c2:	2102      	movs	r1, #2
 80028c4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681a      	ldr	r2, [r3, #0]
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	3304      	adds	r3, #4
 80028ce:	0019      	movs	r1, r3
 80028d0:	0010      	movs	r0, r2
 80028d2:	f000 fa3b 	bl	8002d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	223e      	movs	r2, #62	; 0x3e
 80028da:	2101      	movs	r1, #1
 80028dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	223a      	movs	r2, #58	; 0x3a
 80028e2:	2101      	movs	r1, #1
 80028e4:	5499      	strb	r1, [r3, r2]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	223b      	movs	r2, #59	; 0x3b
 80028ea:	2101      	movs	r1, #1
 80028ec:	5499      	strb	r1, [r3, r2]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	223c      	movs	r2, #60	; 0x3c
 80028f2:	2101      	movs	r1, #1
 80028f4:	5499      	strb	r1, [r3, r2]
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	223d      	movs	r2, #61	; 0x3d
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2239      	movs	r2, #57	; 0x39
 8002902:	2101      	movs	r1, #1
 8002904:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002906:	2300      	movs	r3, #0
}
 8002908:	0018      	movs	r0, r3
 800290a:	46bd      	mov	sp, r7
 800290c:	b002      	add	sp, #8
 800290e:	bd80      	pop	{r7, pc}

08002910 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b084      	sub	sp, #16
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2239      	movs	r2, #57	; 0x39
 800291c:	5c9b      	ldrb	r3, [r3, r2]
 800291e:	b2db      	uxtb	r3, r3
 8002920:	2b01      	cmp	r3, #1
 8002922:	d001      	beq.n	8002928 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e036      	b.n	8002996 <HAL_TIM_Base_Start_IT+0x86>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2239      	movs	r2, #57	; 0x39
 800292c:	2102      	movs	r1, #2
 800292e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	68da      	ldr	r2, [r3, #12]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2101      	movs	r1, #1
 800293c:	430a      	orrs	r2, r1
 800293e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681a      	ldr	r2, [r3, #0]
 8002944:	2380      	movs	r3, #128	; 0x80
 8002946:	05db      	lsls	r3, r3, #23
 8002948:	429a      	cmp	r2, r3
 800294a:	d009      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x50>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a13      	ldr	r2, [pc, #76]	; (80029a0 <HAL_TIM_Base_Start_IT+0x90>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d004      	beq.n	8002960 <HAL_TIM_Base_Start_IT+0x50>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_TIM_Base_Start_IT+0x94>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d111      	bne.n	8002984 <HAL_TIM_Base_Start_IT+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	2207      	movs	r2, #7
 8002968:	4013      	ands	r3, r2
 800296a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2b06      	cmp	r3, #6
 8002970:	d010      	beq.n	8002994 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2101      	movs	r1, #1
 800297e:	430a      	orrs	r2, r1
 8002980:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002982:	e007      	b.n	8002994 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681a      	ldr	r2, [r3, #0]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2101      	movs	r1, #1
 8002990:	430a      	orrs	r2, r1
 8002992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002994:	2300      	movs	r3, #0
}
 8002996:	0018      	movs	r0, r3
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	40010800 	.word	0x40010800
 80029a4:	40011400 	.word	0x40011400

080029a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d124      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	2202      	movs	r2, #2
 80029c6:	4013      	ands	r3, r2
 80029c8:	2b02      	cmp	r3, #2
 80029ca:	d11d      	bne.n	8002a08 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2203      	movs	r2, #3
 80029d2:	4252      	negs	r2, r2
 80029d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2201      	movs	r2, #1
 80029da:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2203      	movs	r2, #3
 80029e4:	4013      	ands	r3, r2
 80029e6:	d004      	beq.n	80029f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	0018      	movs	r0, r3
 80029ec:	f000 f996 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 80029f0:	e007      	b.n	8002a02 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	0018      	movs	r0, r3
 80029f6:	f000 f989 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	0018      	movs	r0, r3
 80029fe:	f000 f995 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b04      	cmp	r3, #4
 8002a14:	d125      	bne.n	8002a62 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	2204      	movs	r2, #4
 8002a1e:	4013      	ands	r3, r2
 8002a20:	2b04      	cmp	r3, #4
 8002a22:	d11e      	bne.n	8002a62 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	2205      	movs	r2, #5
 8002a2a:	4252      	negs	r2, r2
 8002a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2202      	movs	r2, #2
 8002a32:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699a      	ldr	r2, [r3, #24]
 8002a3a:	23c0      	movs	r3, #192	; 0xc0
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	0018      	movs	r0, r3
 8002a46:	f000 f969 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8002a4a:	e007      	b.n	8002a5c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	0018      	movs	r0, r3
 8002a50:	f000 f95c 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	0018      	movs	r0, r3
 8002a58:	f000 f968 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	691b      	ldr	r3, [r3, #16]
 8002a68:	2208      	movs	r2, #8
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d124      	bne.n	8002aba <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	2208      	movs	r2, #8
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b08      	cmp	r3, #8
 8002a7c:	d11d      	bne.n	8002aba <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	2209      	movs	r2, #9
 8002a84:	4252      	negs	r2, r2
 8002a86:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2204      	movs	r2, #4
 8002a8c:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	2203      	movs	r2, #3
 8002a96:	4013      	ands	r3, r2
 8002a98:	d004      	beq.n	8002aa4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	f000 f93d 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8002aa2:	e007      	b.n	8002ab4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f000 f930 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	0018      	movs	r0, r3
 8002ab0:	f000 f93c 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	2210      	movs	r2, #16
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d125      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	2210      	movs	r2, #16
 8002ad0:	4013      	ands	r3, r2
 8002ad2:	2b10      	cmp	r3, #16
 8002ad4:	d11e      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2211      	movs	r2, #17
 8002adc:	4252      	negs	r2, r2
 8002ade:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	69da      	ldr	r2, [r3, #28]
 8002aec:	23c0      	movs	r3, #192	; 0xc0
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	4013      	ands	r3, r2
 8002af2:	d004      	beq.n	8002afe <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	0018      	movs	r0, r3
 8002af8:	f000 f910 	bl	8002d1c <HAL_TIM_IC_CaptureCallback>
 8002afc:	e007      	b.n	8002b0e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	0018      	movs	r0, r3
 8002b02:	f000 f903 	bl	8002d0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	0018      	movs	r0, r3
 8002b0a:	f000 f90f 	bl	8002d2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d10f      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	2201      	movs	r2, #1
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d108      	bne.n	8002b42 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2202      	movs	r2, #2
 8002b36:	4252      	negs	r2, r2
 8002b38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f000 fee9 	bl	8003914 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	2240      	movs	r2, #64	; 0x40
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	2b40      	cmp	r3, #64	; 0x40
 8002b4e:	d10f      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d108      	bne.n	8002b70 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	2241      	movs	r2, #65	; 0x41
 8002b64:	4252      	negs	r2, r2
 8002b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	0018      	movs	r0, r3
 8002b6c:	f000 f8e6 	bl	8002d3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b70:	46c0      	nop			; (mov r8, r8)
 8002b72:	46bd      	mov	sp, r7
 8002b74:	b002      	add	sp, #8
 8002b76:	bd80      	pop	{r7, pc}

08002b78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2238      	movs	r2, #56	; 0x38
 8002b86:	5c9b      	ldrb	r3, [r3, r2]
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d101      	bne.n	8002b90 <HAL_TIM_ConfigClockSource+0x18>
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	e0b7      	b.n	8002d00 <HAL_TIM_ConfigClockSource+0x188>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2238      	movs	r2, #56	; 0x38
 8002b94:	2101      	movs	r1, #1
 8002b96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2239      	movs	r2, #57	; 0x39
 8002b9c:	2102      	movs	r1, #2
 8002b9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	689b      	ldr	r3, [r3, #8]
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2277      	movs	r2, #119	; 0x77
 8002bac:	4393      	bics	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	4a55      	ldr	r2, [pc, #340]	; (8002d08 <HAL_TIM_ConfigClockSource+0x190>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68fa      	ldr	r2, [r7, #12]
 8002bbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2280      	movs	r2, #128	; 0x80
 8002bc6:	0192      	lsls	r2, r2, #6
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d040      	beq.n	8002c4e <HAL_TIM_ConfigClockSource+0xd6>
 8002bcc:	2280      	movs	r2, #128	; 0x80
 8002bce:	0192      	lsls	r2, r2, #6
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d900      	bls.n	8002bd6 <HAL_TIM_ConfigClockSource+0x5e>
 8002bd4:	e088      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002bd6:	2280      	movs	r2, #128	; 0x80
 8002bd8:	0152      	lsls	r2, r2, #5
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d100      	bne.n	8002be0 <HAL_TIM_ConfigClockSource+0x68>
 8002bde:	e085      	b.n	8002cec <HAL_TIM_ConfigClockSource+0x174>
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	0152      	lsls	r2, r2, #5
 8002be4:	4293      	cmp	r3, r2
 8002be6:	d900      	bls.n	8002bea <HAL_TIM_ConfigClockSource+0x72>
 8002be8:	e07e      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002bea:	2b70      	cmp	r3, #112	; 0x70
 8002bec:	d018      	beq.n	8002c20 <HAL_TIM_ConfigClockSource+0xa8>
 8002bee:	d900      	bls.n	8002bf2 <HAL_TIM_ConfigClockSource+0x7a>
 8002bf0:	e07a      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002bf2:	2b60      	cmp	r3, #96	; 0x60
 8002bf4:	d04f      	beq.n	8002c96 <HAL_TIM_ConfigClockSource+0x11e>
 8002bf6:	d900      	bls.n	8002bfa <HAL_TIM_ConfigClockSource+0x82>
 8002bf8:	e076      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002bfa:	2b50      	cmp	r3, #80	; 0x50
 8002bfc:	d03b      	beq.n	8002c76 <HAL_TIM_ConfigClockSource+0xfe>
 8002bfe:	d900      	bls.n	8002c02 <HAL_TIM_ConfigClockSource+0x8a>
 8002c00:	e072      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002c02:	2b40      	cmp	r3, #64	; 0x40
 8002c04:	d057      	beq.n	8002cb6 <HAL_TIM_ConfigClockSource+0x13e>
 8002c06:	d900      	bls.n	8002c0a <HAL_TIM_ConfigClockSource+0x92>
 8002c08:	e06e      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002c0a:	2b30      	cmp	r3, #48	; 0x30
 8002c0c:	d063      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c0e:	d86b      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002c10:	2b20      	cmp	r3, #32
 8002c12:	d060      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c14:	d868      	bhi.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d05d      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15e>
 8002c1a:	2b10      	cmp	r3, #16
 8002c1c:	d05b      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002c1e:	e063      	b.n	8002ce8 <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6818      	ldr	r0, [r3, #0]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6899      	ldr	r1, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685a      	ldr	r2, [r3, #4]
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f000 f95a 	bl	8002ee8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2277      	movs	r2, #119	; 0x77
 8002c40:	4313      	orrs	r3, r2
 8002c42:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	609a      	str	r2, [r3, #8]
      break;
 8002c4c:	e04f      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6818      	ldr	r0, [r3, #0]
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685a      	ldr	r2, [r3, #4]
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	68db      	ldr	r3, [r3, #12]
 8002c5e:	f000 f943 	bl	8002ee8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2180      	movs	r1, #128	; 0x80
 8002c6e:	01c9      	lsls	r1, r1, #7
 8002c70:	430a      	orrs	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
      break;
 8002c74:	e03b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6818      	ldr	r0, [r3, #0]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	001a      	movs	r2, r3
 8002c84:	f000 f8b6 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2150      	movs	r1, #80	; 0x50
 8002c8e:	0018      	movs	r0, r3
 8002c90:	f000 f910 	bl	8002eb4 <TIM_ITRx_SetConfig>
      break;
 8002c94:	e02b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	001a      	movs	r2, r3
 8002ca4:	f000 f8d4 	bl	8002e50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2160      	movs	r1, #96	; 0x60
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f000 f900 	bl	8002eb4 <TIM_ITRx_SetConfig>
      break;
 8002cb4:	e01b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6859      	ldr	r1, [r3, #4]
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	001a      	movs	r2, r3
 8002cc4:	f000 f896 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2140      	movs	r1, #64	; 0x40
 8002cce:	0018      	movs	r0, r3
 8002cd0:	f000 f8f0 	bl	8002eb4 <TIM_ITRx_SetConfig>
      break;
 8002cd4:	e00b      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	0019      	movs	r1, r3
 8002ce0:	0010      	movs	r0, r2
 8002ce2:	f000 f8e7 	bl	8002eb4 <TIM_ITRx_SetConfig>
        break;
 8002ce6:	e002      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002ce8:	46c0      	nop			; (mov r8, r8)
 8002cea:	e000      	b.n	8002cee <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002cec:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2239      	movs	r2, #57	; 0x39
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2238      	movs	r2, #56	; 0x38
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	0018      	movs	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b004      	add	sp, #16
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	ffff00ff 	.word	0xffff00ff

08002d0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b082      	sub	sp, #8
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d14:	46c0      	nop			; (mov r8, r8)
 8002d16:	46bd      	mov	sp, r7
 8002d18:	b002      	add	sp, #8
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d24:	46c0      	nop			; (mov r8, r8)
 8002d26:	46bd      	mov	sp, r7
 8002d28:	b002      	add	sp, #8
 8002d2a:	bd80      	pop	{r7, pc}

08002d2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d34:	46c0      	nop			; (mov r8, r8)
 8002d36:	46bd      	mov	sp, r7
 8002d38:	b002      	add	sp, #8
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d44:	46c0      	nop			; (mov r8, r8)
 8002d46:	46bd      	mov	sp, r7
 8002d48:	b002      	add	sp, #8
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	2380      	movs	r3, #128	; 0x80
 8002d60:	05db      	lsls	r3, r3, #23
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d007      	beq.n	8002d76 <TIM_Base_SetConfig+0x2a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a1f      	ldr	r2, [pc, #124]	; (8002de8 <TIM_Base_SetConfig+0x9c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d003      	beq.n	8002d76 <TIM_Base_SetConfig+0x2a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a1e      	ldr	r2, [pc, #120]	; (8002dec <TIM_Base_SetConfig+0xa0>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d108      	bne.n	8002d88 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2270      	movs	r2, #112	; 0x70
 8002d7a:	4393      	bics	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	2380      	movs	r3, #128	; 0x80
 8002d8c:	05db      	lsls	r3, r3, #23
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d007      	beq.n	8002da2 <TIM_Base_SetConfig+0x56>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <TIM_Base_SetConfig+0x9c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_Base_SetConfig+0x56>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a13      	ldr	r2, [pc, #76]	; (8002dec <TIM_Base_SetConfig+0xa0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	4a12      	ldr	r2, [pc, #72]	; (8002df0 <TIM_Base_SetConfig+0xa4>)
 8002da6:	4013      	ands	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2280      	movs	r2, #128	; 0x80
 8002db8:	4393      	bics	r3, r2
 8002dba:	001a      	movs	r2, r3
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	691b      	ldr	r3, [r3, #16]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	615a      	str	r2, [r3, #20]
}
 8002de0:	46c0      	nop			; (mov r8, r8)
 8002de2:	46bd      	mov	sp, r7
 8002de4:	b004      	add	sp, #16
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	40010800 	.word	0x40010800
 8002dec:	40011400 	.word	0x40011400
 8002df0:	fffffcff 	.word	0xfffffcff

08002df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	4393      	bics	r3, r2
 8002e0e:	001a      	movs	r2, r3
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	699b      	ldr	r3, [r3, #24]
 8002e18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	22f0      	movs	r2, #240	; 0xf0
 8002e1e:	4393      	bics	r3, r2
 8002e20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	220a      	movs	r2, #10
 8002e30:	4393      	bics	r3, r2
 8002e32:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e34:	697a      	ldr	r2, [r7, #20]
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	621a      	str	r2, [r3, #32]
}
 8002e48:	46c0      	nop			; (mov r8, r8)
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	b006      	add	sp, #24
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a1b      	ldr	r3, [r3, #32]
 8002e60:	2210      	movs	r2, #16
 8002e62:	4393      	bics	r3, r2
 8002e64:	001a      	movs	r2, r3
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	699b      	ldr	r3, [r3, #24]
 8002e6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	4a0d      	ldr	r2, [pc, #52]	; (8002eb0 <TIM_TI2_ConfigInputStage+0x60>)
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	031b      	lsls	r3, r3, #12
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	22a0      	movs	r2, #160	; 0xa0
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	693a      	ldr	r2, [r7, #16]
 8002e96:	4313      	orrs	r3, r2
 8002e98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	621a      	str	r2, [r3, #32]
}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	b006      	add	sp, #24
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	ffff0fff 	.word	0xffff0fff

08002eb4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b084      	sub	sp, #16
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	689b      	ldr	r3, [r3, #8]
 8002ec2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2270      	movs	r2, #112	; 0x70
 8002ec8:	4393      	bics	r3, r2
 8002eca:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ecc:	683a      	ldr	r2, [r7, #0]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	2207      	movs	r2, #7
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	68fa      	ldr	r2, [r7, #12]
 8002edc:	609a      	str	r2, [r3, #8]
}
 8002ede:	46c0      	nop			; (mov r8, r8)
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	b004      	add	sp, #16
 8002ee4:	bd80      	pop	{r7, pc}
	...

08002ee8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	4a09      	ldr	r2, [pc, #36]	; (8002f24 <TIM_ETR_SetConfig+0x3c>)
 8002f00:	4013      	ands	r3, r2
 8002f02:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	021a      	lsls	r2, r3, #8
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	697a      	ldr	r2, [r7, #20]
 8002f12:	4313      	orrs	r3, r2
 8002f14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	609a      	str	r2, [r3, #8]
}
 8002f1c:	46c0      	nop			; (mov r8, r8)
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	b006      	add	sp, #24
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	ffff00ff 	.word	0xffff00ff

08002f28 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2238      	movs	r2, #56	; 0x38
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e042      	b.n	8002fc6 <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2238      	movs	r2, #56	; 0x38
 8002f44:	2101      	movs	r1, #1
 8002f46:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2239      	movs	r2, #57	; 0x39
 8002f4c:	2102      	movs	r1, #2
 8002f4e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	689b      	ldr	r3, [r3, #8]
 8002f5e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2270      	movs	r2, #112	; 0x70
 8002f64:	4393      	bics	r3, r2
 8002f66:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	2380      	movs	r3, #128	; 0x80
 8002f80:	05db      	lsls	r3, r3, #23
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d009      	beq.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a11      	ldr	r2, [pc, #68]	; (8002fd0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d004      	beq.n	8002f9a <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d10c      	bne.n	8002fb4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2280      	movs	r2, #128	; 0x80
 8002f9e:	4393      	bics	r3, r2
 8002fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	68ba      	ldr	r2, [r7, #8]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2239      	movs	r2, #57	; 0x39
 8002fb8:	2101      	movs	r1, #1
 8002fba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2238      	movs	r2, #56	; 0x38
 8002fc0:	2100      	movs	r1, #0
 8002fc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002fc4:	2300      	movs	r3, #0
}
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	b004      	add	sp, #16
 8002fcc:	bd80      	pop	{r7, pc}
 8002fce:	46c0      	nop			; (mov r8, r8)
 8002fd0:	40010800 	.word	0x40010800
 8002fd4:	40011400 	.word	0x40011400

08002fd8 <internal_bus_create>:
#include "Bus.h"

InternalBus_t * internal_bus_create(GPIO_TypeDef *bus_line,uint16_t bus_pins,GPIO_TypeDef *cl_bus,uint16_t cl_pin,GPIO_TypeDef *ak_bus,uint16_t ak_pin)
{
 8002fd8:	b5b0      	push	{r4, r5, r7, lr}
 8002fda:	b088      	sub	sp, #32
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	60f8      	str	r0, [r7, #12]
 8002fe0:	0008      	movs	r0, r1
 8002fe2:	607a      	str	r2, [r7, #4]
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	240a      	movs	r4, #10
 8002fe8:	193b      	adds	r3, r7, r4
 8002fea:	1c02      	adds	r2, r0, #0
 8002fec:	801a      	strh	r2, [r3, #0]
 8002fee:	2508      	movs	r5, #8
 8002ff0:	197b      	adds	r3, r7, r5
 8002ff2:	1c0a      	adds	r2, r1, #0
 8002ff4:	801a      	strh	r2, [r3, #0]
	InternalBus_t * thisInternalBus = (InternalBus_t *) malloc(sizeof(InternalBus_t));
 8002ff6:	203c      	movs	r0, #60	; 0x3c
 8002ff8:	f001 fa8e 	bl	8004518 <malloc>
 8002ffc:	0003      	movs	r3, r0
 8002ffe:	61bb      	str	r3, [r7, #24]
	if(thisInternalBus != NULL)
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d100      	bne.n	8003008 <internal_bus_create+0x30>
 8003006:	e14d      	b.n	80032a4 <internal_bus_create+0x2cc>
	{
		//assign desired value for clock pin and other bus  so this bus will now which pins assigned for clock ack and bus line it self
		//everything else in this lib should use this data for other settings
		thisInternalBus->bus = bus_line;
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	68fa      	ldr	r2, [r7, #12]
 800300c:	601a      	str	r2, [r3, #0]
		thisInternalBus->bus_mask = bus_pins;
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	193a      	adds	r2, r7, r4
 8003012:	8812      	ldrh	r2, [r2, #0]
 8003014:	809a      	strh	r2, [r3, #4]
		thisInternalBus->BUS_BUSMASK32 = 0;
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2200      	movs	r2, #0
 800301a:	609a      	str	r2, [r3, #8]
		thisInternalBus->BUS_BUSMODER = 0;
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2200      	movs	r2, #0
 8003020:	60da      	str	r2, [r3, #12]
		thisInternalBus->BUS_BUSOSPEEDR = 0;
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	2200      	movs	r2, #0
 8003026:	611a      	str	r2, [r3, #16]

		thisInternalBus->bus_clk = cl_bus;
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	615a      	str	r2, [r3, #20]
		thisInternalBus->bus_clk_mask = cl_pin;
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	197a      	adds	r2, r7, r5
 8003032:	8812      	ldrh	r2, [r2, #0]
 8003034:	831a      	strh	r2, [r3, #24]
		thisInternalBus->BUS_CLKMASK32 = 0;
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	2200      	movs	r2, #0
 800303a:	61da      	str	r2, [r3, #28]
		thisInternalBus->BUS_CLKMODER = 0;
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2200      	movs	r2, #0
 8003040:	621a      	str	r2, [r3, #32]
		thisInternalBus->BUS_CLKOSPEEDR = 0;
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	2200      	movs	r2, #0
 8003046:	625a      	str	r2, [r3, #36]	; 0x24

		thisInternalBus->bus_ack = ak_bus;
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800304c:	629a      	str	r2, [r3, #40]	; 0x28
		thisInternalBus->bus_ack_mask = ak_pin;
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	222c      	movs	r2, #44	; 0x2c
 8003052:	2108      	movs	r1, #8
 8003054:	468c      	mov	ip, r1
 8003056:	44bc      	add	ip, r7
 8003058:	4462      	add	r2, ip
 800305a:	8812      	ldrh	r2, [r2, #0]
 800305c:	859a      	strh	r2, [r3, #44]	; 0x2c
		thisInternalBus->BUS_ACKMASK32 = 0;
 800305e:	69bb      	ldr	r3, [r7, #24]
 8003060:	2200      	movs	r2, #0
 8003062:	631a      	str	r2, [r3, #48]	; 0x30
		thisInternalBus->BUS_ACKMODER = 0;
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2200      	movs	r2, #0
 8003068:	635a      	str	r2, [r3, #52]	; 0x34
		thisInternalBus->BUS_ACKOSPEEDR = 0;
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	2200      	movs	r2, #0
 800306e:	639a      	str	r2, [r3, #56]	; 0x38

		uint32_t pinShifter = 0;
 8003070:	2300      	movs	r3, #0
 8003072:	61fb      	str	r3, [r7, #28]
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
 8003074:	2300      	movs	r3, #0
 8003076:	61fb      	str	r3, [r7, #28]
 8003078:	e07a      	b.n	8003170 <internal_bus_create+0x198>
		{
			if (bus_pins & (1 << pinShifter))
 800307a:	230a      	movs	r3, #10
 800307c:	18fb      	adds	r3, r7, r3
 800307e:	881a      	ldrh	r2, [r3, #0]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	411a      	asrs	r2, r3
 8003084:	0013      	movs	r3, r2
 8003086:	2201      	movs	r2, #1
 8003088:	4013      	ands	r3, r2
 800308a:	d01d      	beq.n	80030c8 <internal_bus_create+0xf0>
			{
				thisInternalBus->BUS_BUSMASK32  |= (0b11 << (pinShifter * 2));
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	69fa      	ldr	r2, [r7, #28]
 8003092:	0052      	lsls	r2, r2, #1
 8003094:	2103      	movs	r1, #3
 8003096:	4091      	lsls	r1, r2
 8003098:	000a      	movs	r2, r1
 800309a:	431a      	orrs	r2, r3
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	609a      	str	r2, [r3, #8]
				thisInternalBus->BUS_BUSMODER   |= (0b01 << (pinShifter * 2));
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	69fa      	ldr	r2, [r7, #28]
 80030a6:	0052      	lsls	r2, r2, #1
 80030a8:	2101      	movs	r1, #1
 80030aa:	4091      	lsls	r1, r2
 80030ac:	000a      	movs	r2, r1
 80030ae:	431a      	orrs	r2, r3
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	60da      	str	r2, [r3, #12]
				thisInternalBus->BUS_BUSOSPEEDR |= (0b11 << (pinShifter * 2));
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	691b      	ldr	r3, [r3, #16]
 80030b8:	69fa      	ldr	r2, [r7, #28]
 80030ba:	0052      	lsls	r2, r2, #1
 80030bc:	2103      	movs	r1, #3
 80030be:	4091      	lsls	r1, r2
 80030c0:	000a      	movs	r2, r1
 80030c2:	431a      	orrs	r2, r3
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	611a      	str	r2, [r3, #16]
			}
			if (cl_pin & (1 << pinShifter))
 80030c8:	2308      	movs	r3, #8
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	881a      	ldrh	r2, [r3, #0]
 80030ce:	69fb      	ldr	r3, [r7, #28]
 80030d0:	411a      	asrs	r2, r3
 80030d2:	0013      	movs	r3, r2
 80030d4:	2201      	movs	r2, #1
 80030d6:	4013      	ands	r3, r2
 80030d8:	d01d      	beq.n	8003116 <internal_bus_create+0x13e>
			{
				thisInternalBus->BUS_CLKMASK32  |= (0b11 << (pinShifter * 2));
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	0052      	lsls	r2, r2, #1
 80030e2:	2103      	movs	r1, #3
 80030e4:	4091      	lsls	r1, r2
 80030e6:	000a      	movs	r2, r1
 80030e8:	431a      	orrs	r2, r3
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	61da      	str	r2, [r3, #28]
				thisInternalBus->BUS_CLKMODER   |= (0b01 << (pinShifter * 2));
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	69fa      	ldr	r2, [r7, #28]
 80030f4:	0052      	lsls	r2, r2, #1
 80030f6:	2101      	movs	r1, #1
 80030f8:	4091      	lsls	r1, r2
 80030fa:	000a      	movs	r2, r1
 80030fc:	431a      	orrs	r2, r3
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	621a      	str	r2, [r3, #32]
				thisInternalBus->BUS_CLKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	69fa      	ldr	r2, [r7, #28]
 8003108:	0052      	lsls	r2, r2, #1
 800310a:	2103      	movs	r1, #3
 800310c:	4091      	lsls	r1, r2
 800310e:	000a      	movs	r2, r1
 8003110:	431a      	orrs	r2, r3
 8003112:	69bb      	ldr	r3, [r7, #24]
 8003114:	625a      	str	r2, [r3, #36]	; 0x24
			}
			if (ak_pin & (1 << pinShifter))
 8003116:	232c      	movs	r3, #44	; 0x2c
 8003118:	2208      	movs	r2, #8
 800311a:	4694      	mov	ip, r2
 800311c:	44bc      	add	ip, r7
 800311e:	4463      	add	r3, ip
 8003120:	881a      	ldrh	r2, [r3, #0]
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	411a      	asrs	r2, r3
 8003126:	0013      	movs	r3, r2
 8003128:	2201      	movs	r2, #1
 800312a:	4013      	ands	r3, r2
 800312c:	d01d      	beq.n	800316a <internal_bus_create+0x192>
			{
				thisInternalBus->BUS_ACKMASK32  |= (0b11 << (pinShifter * 2));
 800312e:	69bb      	ldr	r3, [r7, #24]
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	69fa      	ldr	r2, [r7, #28]
 8003134:	0052      	lsls	r2, r2, #1
 8003136:	2103      	movs	r1, #3
 8003138:	4091      	lsls	r1, r2
 800313a:	000a      	movs	r2, r1
 800313c:	431a      	orrs	r2, r3
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	631a      	str	r2, [r3, #48]	; 0x30
				thisInternalBus->BUS_ACKMODER   |= (0b01 << (pinShifter * 2));
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003146:	69fa      	ldr	r2, [r7, #28]
 8003148:	0052      	lsls	r2, r2, #1
 800314a:	2101      	movs	r1, #1
 800314c:	4091      	lsls	r1, r2
 800314e:	000a      	movs	r2, r1
 8003150:	431a      	orrs	r2, r3
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
				thisInternalBus->BUS_ACKOSPEEDR |= (0b11 << (pinShifter * 2));
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800315a:	69fa      	ldr	r2, [r7, #28]
 800315c:	0052      	lsls	r2, r2, #1
 800315e:	2103      	movs	r1, #3
 8003160:	4091      	lsls	r1, r2
 8003162:	000a      	movs	r2, r1
 8003164:	431a      	orrs	r2, r3
 8003166:	69bb      	ldr	r3, [r7, #24]
 8003168:	639a      	str	r2, [r3, #56]	; 0x38
		for (pinShifter = 0; pinShifter < BUS_GPIO_PINS_PER_BUS; pinShifter++)
 800316a:	69fb      	ldr	r3, [r7, #28]
 800316c:	3301      	adds	r3, #1
 800316e:	61fb      	str	r3, [r7, #28]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d800      	bhi.n	8003178 <internal_bus_create+0x1a0>
 8003176:	e780      	b.n	800307a <internal_bus_create+0xa2>
			}
		}

		uint32_t temp = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	617b      	str	r3, [r7, #20]
		//Set main bus output speed to very high
		temp = thisInternalBus->bus->OSPEEDR;
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	689b      	ldr	r3, [r3, #8]
 8003182:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 8003184:	69bb      	ldr	r3, [r7, #24]
 8003186:	689b      	ldr	r3, [r3, #8]
 8003188:	43da      	mvns	r2, r3
 800318a:	697b      	ldr	r3, [r7, #20]
 800318c:	4013      	ands	r3, r2
 800318e:	617b      	str	r3, [r7, #20]
		temp |= thisInternalBus->BUS_BUSOSPEEDR;
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	691b      	ldr	r3, [r3, #16]
 8003194:	697a      	ldr	r2, [r7, #20]
 8003196:	4313      	orrs	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus->OSPEEDR = temp;
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	697a      	ldr	r2, [r7, #20]
 80031a0:	609a      	str	r2, [r3, #8]
		//Set main bus output type to output push-pull
		temp = thisInternalBus->bus->OTYPER;
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->bus_mask;
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	889b      	ldrh	r3, [r3, #4]
 80031ae:	43db      	mvns	r3, r3
 80031b0:	001a      	movs	r2, r3
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	4013      	ands	r3, r2
 80031b6:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus->OTYPER = temp;
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	697a      	ldr	r2, [r7, #20]
 80031be:	605a      	str	r2, [r3, #4]
		//Set main bus pullup/down resistors to none
		temp = thisInternalBus->bus->PUPDR;
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_BUSMASK32;
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	43da      	mvns	r2, r3
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	4013      	ands	r3, r2
 80031d2:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus->PUPDR = temp;
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	60da      	str	r2, [r3, #12]

		//Set Clock line, output speed to very high
		temp = thisInternalBus->bus_clk->OSPEEDR;
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	695b      	ldr	r3, [r3, #20]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 80031e4:	69bb      	ldr	r3, [r7, #24]
 80031e6:	69db      	ldr	r3, [r3, #28]
 80031e8:	43da      	mvns	r2, r3
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	4013      	ands	r3, r2
 80031ee:	617b      	str	r3, [r7, #20]
		temp |= thisInternalBus->BUS_CLKOSPEEDR;
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_clk->OSPEEDR = temp;
 80031fa:	69bb      	ldr	r3, [r7, #24]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	609a      	str	r2, [r3, #8]
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_clk->OTYPER;
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->bus_clk_mask;
 800320a:	69bb      	ldr	r3, [r7, #24]
 800320c:	8b1b      	ldrh	r3, [r3, #24]
 800320e:	43db      	mvns	r3, r3
 8003210:	001a      	movs	r2, r3
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	4013      	ands	r3, r2
 8003216:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_clk->OTYPER = temp;
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	695b      	ldr	r3, [r3, #20]
 800321c:	697a      	ldr	r2, [r7, #20]
 800321e:	605a      	str	r2, [r3, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_clk->PUPDR;
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	695b      	ldr	r3, [r3, #20]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_CLKMASK32;
 8003228:	69bb      	ldr	r3, [r7, #24]
 800322a:	69db      	ldr	r3, [r3, #28]
 800322c:	43da      	mvns	r2, r3
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	4013      	ands	r3, r2
 8003232:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_clk->PUPDR = temp;
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	60da      	str	r2, [r3, #12]

		//Set Ack line, output speed to very high
		temp = thisInternalBus->bus_ack->OSPEEDR;
 800323c:	69bb      	ldr	r3, [r7, #24]
 800323e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	43da      	mvns	r2, r3
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	4013      	ands	r3, r2
 800324e:	617b      	str	r3, [r7, #20]
		temp |= thisInternalBus->BUS_ACKOSPEEDR;
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	4313      	orrs	r3, r2
 8003258:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_ack->OSPEEDR = temp;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	609a      	str	r2, [r3, #8]
		//Set C bus output type to output push-pull
		temp = thisInternalBus->bus_ack->OTYPER;
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->bus_ack_mask;
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800326e:	43db      	mvns	r3, r3
 8003270:	001a      	movs	r2, r3
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	4013      	ands	r3, r2
 8003276:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_ack->OTYPER = temp;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800327c:	697a      	ldr	r2, [r7, #20]
 800327e:	605a      	str	r2, [r3, #4]
		//Set C bus pullup/down resistors to none
		temp = thisInternalBus->bus_ack->PUPDR;
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	617b      	str	r3, [r7, #20]
		temp &= ~thisInternalBus->BUS_ACKMASK32;
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328c:	43da      	mvns	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	4013      	ands	r3, r2
 8003292:	617b      	str	r3, [r7, #20]
		thisInternalBus->bus_ack->PUPDR = temp;
 8003294:	69bb      	ldr	r3, [r7, #24]
 8003296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003298:	697a      	ldr	r2, [r7, #20]
 800329a:	60da      	str	r2, [r3, #12]

		//by default we do not have to take the bus before any persmission from the master micro
		internal_bus_release(thisInternalBus);
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	0018      	movs	r0, r3
 80032a0:	f000 f805 	bl	80032ae <internal_bus_release>
	}
	else
	{
		//TODO  erro handler
	}
	return thisInternalBus;
 80032a4:	69bb      	ldr	r3, [r7, #24]
}
 80032a6:	0018      	movs	r0, r3
 80032a8:	46bd      	mov	sp, r7
 80032aa:	b008      	add	sp, #32
 80032ac:	bdb0      	pop	{r4, r5, r7, pc}

080032ae <internal_bus_release>:

	thisInternalBus->bus_ack->BSRR = (uint32_t) thisInternalBus->bus_ack_mask;
}

inline void internal_bus_release(InternalBus_t *thisInternalBus)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	60fb      	str	r3, [r7, #12]
	//Set all bus pins to low and send complete
	thisInternalBus->bus->BRR = thisInternalBus->bus_mask;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	889a      	ldrh	r2, [r3, #4]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
	thisInternalBus->bus_ack->BRR = thisInternalBus->bus_ack_mask;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032cc:	629a      	str	r2, [r3, #40]	; 0x28

	//Set Bus pins to input
	temp = thisInternalBus->bus->MODER;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_BUSMASK32;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	43da      	mvns	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	4013      	ands	r3, r2
 80032e0:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus->MODER = temp;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68fa      	ldr	r2, [r7, #12]
 80032e8:	601a      	str	r2, [r3, #0]

	//Set clock pin to input
	temp = thisInternalBus->bus_clk->MODER;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_CLKMASK32;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	69db      	ldr	r3, [r3, #28]
 80032f6:	43da      	mvns	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4013      	ands	r3, r2
 80032fc:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus_clk->MODER = temp;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	601a      	str	r2, [r3, #0]

	//Set ack pins to input
	temp = thisInternalBus->bus_ack->MODER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	60fb      	str	r3, [r7, #12]
	temp &= ~thisInternalBus->BUS_ACKMASK32;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003312:	43da      	mvns	r2, r3
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	60fb      	str	r3, [r7, #12]
	thisInternalBus->bus_ack->MODER = temp;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	601a      	str	r2, [r3, #0]
}
 8003322:	46c0      	nop			; (mov r8, r8)
 8003324:	46bd      	mov	sp, r7
 8003326:	b004      	add	sp, #16
 8003328:	bd80      	pop	{r7, pc}

0800332a <global_timer_create>:
#include <stdlib.h>
extern TIM_HandleTypeDef htim21;


GlobalTimer_t * global_timer_create(TIM_HandleTypeDef *timer_id)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b084      	sub	sp, #16
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
	//Start global timer and initialize struct
	GlobalTimer_t *thisGlobalTimer = malloc(sizeof(GlobalTimer_t));
 8003332:	2008      	movs	r0, #8
 8003334:	f001 f8f0 	bl	8004518 <malloc>
 8003338:	0003      	movs	r3, r0
 800333a:	60fb      	str	r3, [r7, #12]
	thisGlobalTimer->h_timer = timer_id;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start_IT(thisGlobalTimer->h_timer);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f7ff fae2 	bl	8002910 <HAL_TIM_Base_Start_IT>
	thisGlobalTimer->overflow_counter = 0;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	2200      	movs	r2, #0
 8003350:	701a      	strb	r2, [r3, #0]
	return thisGlobalTimer;
 8003352:	68fb      	ldr	r3, [r7, #12]
}
 8003354:	0018      	movs	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	b004      	add	sp, #16
 800335a:	bd80      	pop	{r7, pc}

0800335c <get_global_timer>:


uint64_t get_global_timer(GlobalTimer_t *thisGlobalTimer)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
	uint8_t overflow_count_begin;
	uint64_t tot_value;
	do
	{
		overflow_count_begin = thisGlobalTimer->overflow_counter;
 8003364:	2017      	movs	r0, #23
 8003366:	183b      	adds	r3, r7, r0
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	7812      	ldrb	r2, [r2, #0]
 800336c:	701a      	strb	r2, [r3, #0]
		tot_value = thisGlobalTimer->h_timer->Instance->CNT + thisGlobalTimer->h_timer->Instance->ARR * (thisGlobalTimer->overflow_counter);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	7809      	ldrb	r1, [r1, #0]
 8003382:	434b      	muls	r3, r1
 8003384:	18d3      	adds	r3, r2, r3
 8003386:	60bb      	str	r3, [r7, #8]
 8003388:	2300      	movs	r3, #0
 800338a:	60fb      	str	r3, [r7, #12]

	} while (overflow_count_begin != thisGlobalTimer->overflow_counter);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	183a      	adds	r2, r7, r0
 8003392:	7812      	ldrb	r2, [r2, #0]
 8003394:	429a      	cmp	r2, r3
 8003396:	d1e5      	bne.n	8003364 <get_global_timer+0x8>

	return tot_value;	//TODO there is a lot of potential timestamp synchronization issues here, need to be addressed
 8003398:	68ba      	ldr	r2, [r7, #8]
 800339a:	68fb      	ldr	r3, [r7, #12]
}
 800339c:	0010      	movs	r0, r2
 800339e:	0019      	movs	r1, r3
 80033a0:	46bd      	mov	sp, r7
 80033a2:	b006      	add	sp, #24
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <magnetometer_create>:
//!since different sensors may have different type and number of variables
//!1 - sensor type  depend to the sensor type
//!2 - data tranmitter handler in this implimentation we just limited that to SPI in future if we add I2C or analog sensor ADC line can passs as a parameter
//!--------------------------create a new magnotmemeter of any type lower layer support and make a interface and initilize that-----------------------------------
Magnetometer_t * magnetometer_create(uint8_t type,SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 80033a6:	b590      	push	{r4, r7, lr}
 80033a8:	b089      	sub	sp, #36	; 0x24
 80033aa:	af02      	add	r7, sp, #8
 80033ac:	60b9      	str	r1, [r7, #8]
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	0019      	movs	r1, r3
 80033b2:	240f      	movs	r4, #15
 80033b4:	193b      	adds	r3, r7, r4
 80033b6:	1c02      	adds	r2, r0, #0
 80033b8:	701a      	strb	r2, [r3, #0]
 80033ba:	230c      	movs	r3, #12
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	1c0a      	adds	r2, r1, #0
 80033c0:	801a      	strh	r2, [r3, #0]
	Magnetometer_t *  thisMagnetometer = malloc(sizeof(Magnetometer_t));
 80033c2:	2019      	movs	r0, #25
 80033c4:	f001 f8a8 	bl	8004518 <malloc>
 80033c8:	0003      	movs	r3, r0
 80033ca:	617b      	str	r3, [r7, #20]
	if(thisMagnetometer != NULL)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d100      	bne.n	80033d4 <magnetometer_create+0x2e>
 80033d2:	e143      	b.n	800365c <magnetometer_create+0x2b6>
	{
		thisMagnetometer->whichMagnetometer = type;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	193a      	adds	r2, r7, r4
 80033d8:	7812      	ldrb	r2, [r2, #0]
 80033da:	701a      	strb	r2, [r3, #0]
		switch (thisMagnetometer->whichMagnetometer)
 80033dc:	697b      	ldr	r3, [r7, #20]
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b0a      	cmp	r3, #10
 80033e2:	d003      	beq.n	80033ec <magnetometer_create+0x46>
 80033e4:	2b14      	cmp	r3, #20
 80033e6:	d100      	bne.n	80033ea <magnetometer_create+0x44>
 80033e8:	e092      	b.n	8003510 <magnetometer_create+0x16a>
 80033ea:	e13c      	b.n	8003666 <magnetometer_create+0x2c0>
		{
		case MAGNETOMETER_TYPE_LIS3MDL:
			{
				thisMagnetometer->magnetometer = (LIS3MDL_t*)LIS3MDL_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 80033ec:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80033ee:	230c      	movs	r3, #12
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	68b8      	ldr	r0, [r7, #8]
 80033f8:	232c      	movs	r3, #44	; 0x2c
 80033fa:	18fb      	adds	r3, r7, r3
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	0023      	movs	r3, r4
 8003402:	f000 fa9f 	bl	8003944 <LIS3MDL_create>
 8003406:	0002      	movs	r2, r0
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	3301      	adds	r3, #1
 800340c:	21ff      	movs	r1, #255	; 0xff
 800340e:	4011      	ands	r1, r2
 8003410:	000c      	movs	r4, r1
 8003412:	7819      	ldrb	r1, [r3, #0]
 8003414:	2000      	movs	r0, #0
 8003416:	4001      	ands	r1, r0
 8003418:	1c08      	adds	r0, r1, #0
 800341a:	1c21      	adds	r1, r4, #0
 800341c:	4301      	orrs	r1, r0
 800341e:	7019      	strb	r1, [r3, #0]
 8003420:	0a11      	lsrs	r1, r2, #8
 8003422:	20ff      	movs	r0, #255	; 0xff
 8003424:	4001      	ands	r1, r0
 8003426:	000c      	movs	r4, r1
 8003428:	7859      	ldrb	r1, [r3, #1]
 800342a:	2000      	movs	r0, #0
 800342c:	4001      	ands	r1, r0
 800342e:	1c08      	adds	r0, r1, #0
 8003430:	1c21      	adds	r1, r4, #0
 8003432:	4301      	orrs	r1, r0
 8003434:	7059      	strb	r1, [r3, #1]
 8003436:	0c11      	lsrs	r1, r2, #16
 8003438:	20ff      	movs	r0, #255	; 0xff
 800343a:	4001      	ands	r1, r0
 800343c:	000c      	movs	r4, r1
 800343e:	7899      	ldrb	r1, [r3, #2]
 8003440:	2000      	movs	r0, #0
 8003442:	4001      	ands	r1, r0
 8003444:	1c08      	adds	r0, r1, #0
 8003446:	1c21      	adds	r1, r4, #0
 8003448:	4301      	orrs	r1, r0
 800344a:	7099      	strb	r1, [r3, #2]
 800344c:	0e10      	lsrs	r0, r2, #24
 800344e:	78da      	ldrb	r2, [r3, #3]
 8003450:	2100      	movs	r1, #0
 8003452:	400a      	ands	r2, r1
 8003454:	1c11      	adds	r1, r2, #0
 8003456:	1c02      	adds	r2, r0, #0
 8003458:	430a      	orrs	r2, r1
 800345a:	70da      	strb	r2, [r3, #3]
				if(thisMagnetometer->magnetometer != NULL)
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	785a      	ldrb	r2, [r3, #1]
 8003460:	7899      	ldrb	r1, [r3, #2]
 8003462:	0209      	lsls	r1, r1, #8
 8003464:	430a      	orrs	r2, r1
 8003466:	78d9      	ldrb	r1, [r3, #3]
 8003468:	0409      	lsls	r1, r1, #16
 800346a:	430a      	orrs	r2, r1
 800346c:	791b      	ldrb	r3, [r3, #4]
 800346e:	061b      	lsls	r3, r3, #24
 8003470:	4313      	orrs	r3, r2
 8003472:	d100      	bne.n	8003476 <magnetometer_create+0xd0>
 8003474:	e0f4      	b.n	8003660 <magnetometer_create+0x2ba>
				{
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	7d1a      	ldrb	r2, [r3, #20]
 800347a:	2100      	movs	r1, #0
 800347c:	400a      	ands	r2, r1
 800347e:	1c11      	adds	r1, r2, #0
 8003480:	2264      	movs	r2, #100	; 0x64
 8003482:	430a      	orrs	r2, r1
 8003484:	751a      	strb	r2, [r3, #20]
 8003486:	7d5a      	ldrb	r2, [r3, #21]
 8003488:	2100      	movs	r1, #0
 800348a:	400a      	ands	r2, r1
 800348c:	755a      	strb	r2, [r3, #21]
					thisMagnetometer->time_stamp = 0;
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	330b      	adds	r3, #11
 8003492:	781a      	ldrb	r2, [r3, #0]
 8003494:	2100      	movs	r1, #0
 8003496:	400a      	ands	r2, r1
 8003498:	701a      	strb	r2, [r3, #0]
 800349a:	785a      	ldrb	r2, [r3, #1]
 800349c:	2100      	movs	r1, #0
 800349e:	400a      	ands	r2, r1
 80034a0:	705a      	strb	r2, [r3, #1]
 80034a2:	789a      	ldrb	r2, [r3, #2]
 80034a4:	2100      	movs	r1, #0
 80034a6:	400a      	ands	r2, r1
 80034a8:	709a      	strb	r2, [r3, #2]
 80034aa:	78da      	ldrb	r2, [r3, #3]
 80034ac:	2100      	movs	r1, #0
 80034ae:	400a      	ands	r2, r1
 80034b0:	70da      	strb	r2, [r3, #3]
 80034b2:	791a      	ldrb	r2, [r3, #4]
 80034b4:	2100      	movs	r1, #0
 80034b6:	400a      	ands	r2, r1
 80034b8:	711a      	strb	r2, [r3, #4]
 80034ba:	795a      	ldrb	r2, [r3, #5]
 80034bc:	2100      	movs	r1, #0
 80034be:	400a      	ands	r2, r1
 80034c0:	715a      	strb	r2, [r3, #5]
 80034c2:	799a      	ldrb	r2, [r3, #6]
 80034c4:	2100      	movs	r1, #0
 80034c6:	400a      	ands	r2, r1
 80034c8:	719a      	strb	r2, [r3, #6]
 80034ca:	79da      	ldrb	r2, [r3, #7]
 80034cc:	2100      	movs	r1, #0
 80034ce:	400a      	ands	r2, r1
 80034d0:	71da      	strb	r2, [r3, #7]
					thisMagnetometer->Readings[X_AX] = 0;
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	3305      	adds	r3, #5
 80034d6:	781a      	ldrb	r2, [r3, #0]
 80034d8:	2100      	movs	r1, #0
 80034da:	400a      	ands	r2, r1
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	785a      	ldrb	r2, [r3, #1]
 80034e0:	2100      	movs	r1, #0
 80034e2:	400a      	ands	r2, r1
 80034e4:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Y_AX] = 0;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	3307      	adds	r3, #7
 80034ea:	781a      	ldrb	r2, [r3, #0]
 80034ec:	2100      	movs	r1, #0
 80034ee:	400a      	ands	r2, r1
 80034f0:	701a      	strb	r2, [r3, #0]
 80034f2:	785a      	ldrb	r2, [r3, #1]
 80034f4:	2100      	movs	r1, #0
 80034f6:	400a      	ands	r2, r1
 80034f8:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Z_AX] = 0;
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	3309      	adds	r3, #9
 80034fe:	781a      	ldrb	r2, [r3, #0]
 8003500:	2100      	movs	r1, #0
 8003502:	400a      	ands	r2, r1
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	785a      	ldrb	r2, [r3, #1]
 8003508:	2100      	movs	r1, #0
 800350a:	400a      	ands	r2, r1
 800350c:	705a      	strb	r2, [r3, #1]
				}
			}
		break;
 800350e:	e0a7      	b.n	8003660 <magnetometer_create+0x2ba>
		//------------------------------
		case MAGNETOMETER_TYPE_MMC5983:
			{
				thisMagnetometer->magnetometer = (MMC5983_t*)MMC5983_create(spi_line,CS_Bus,CS_Pin,INT_Bus,INT_Pin);
 8003510:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8003512:	230c      	movs	r3, #12
 8003514:	18fb      	adds	r3, r7, r3
 8003516:	881a      	ldrh	r2, [r3, #0]
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68b8      	ldr	r0, [r7, #8]
 800351c:	232c      	movs	r3, #44	; 0x2c
 800351e:	18fb      	adds	r3, r7, r3
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	9300      	str	r3, [sp, #0]
 8003524:	0023      	movs	r3, r4
 8003526:	f000 faec 	bl	8003b02 <MMC5983_create>
 800352a:	0002      	movs	r2, r0
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	3301      	adds	r3, #1
 8003530:	21ff      	movs	r1, #255	; 0xff
 8003532:	4011      	ands	r1, r2
 8003534:	000c      	movs	r4, r1
 8003536:	7819      	ldrb	r1, [r3, #0]
 8003538:	2000      	movs	r0, #0
 800353a:	4001      	ands	r1, r0
 800353c:	1c08      	adds	r0, r1, #0
 800353e:	1c21      	adds	r1, r4, #0
 8003540:	4301      	orrs	r1, r0
 8003542:	7019      	strb	r1, [r3, #0]
 8003544:	0a11      	lsrs	r1, r2, #8
 8003546:	20ff      	movs	r0, #255	; 0xff
 8003548:	4001      	ands	r1, r0
 800354a:	000c      	movs	r4, r1
 800354c:	7859      	ldrb	r1, [r3, #1]
 800354e:	2000      	movs	r0, #0
 8003550:	4001      	ands	r1, r0
 8003552:	1c08      	adds	r0, r1, #0
 8003554:	1c21      	adds	r1, r4, #0
 8003556:	4301      	orrs	r1, r0
 8003558:	7059      	strb	r1, [r3, #1]
 800355a:	0c11      	lsrs	r1, r2, #16
 800355c:	20ff      	movs	r0, #255	; 0xff
 800355e:	4001      	ands	r1, r0
 8003560:	000c      	movs	r4, r1
 8003562:	7899      	ldrb	r1, [r3, #2]
 8003564:	2000      	movs	r0, #0
 8003566:	4001      	ands	r1, r0
 8003568:	1c08      	adds	r0, r1, #0
 800356a:	1c21      	adds	r1, r4, #0
 800356c:	4301      	orrs	r1, r0
 800356e:	7099      	strb	r1, [r3, #2]
 8003570:	0e10      	lsrs	r0, r2, #24
 8003572:	78da      	ldrb	r2, [r3, #3]
 8003574:	2100      	movs	r1, #0
 8003576:	400a      	ands	r2, r1
 8003578:	1c11      	adds	r1, r2, #0
 800357a:	1c02      	adds	r2, r0, #0
 800357c:	430a      	orrs	r2, r1
 800357e:	70da      	strb	r2, [r3, #3]
				if(thisMagnetometer->magnetometer != NULL)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	785a      	ldrb	r2, [r3, #1]
 8003584:	7899      	ldrb	r1, [r3, #2]
 8003586:	0209      	lsls	r1, r1, #8
 8003588:	430a      	orrs	r2, r1
 800358a:	78d9      	ldrb	r1, [r3, #3]
 800358c:	0409      	lsls	r1, r1, #16
 800358e:	430a      	orrs	r2, r1
 8003590:	791b      	ldrb	r3, [r3, #4]
 8003592:	061b      	lsls	r3, r3, #24
 8003594:	4313      	orrs	r3, r2
 8003596:	d065      	beq.n	8003664 <magnetometer_create+0x2be>
				{
					thisMagnetometer->sampleRate = MAGNETOMETER_DEFAULT_SAMPLE_RATE;
 8003598:	697b      	ldr	r3, [r7, #20]
 800359a:	7d1a      	ldrb	r2, [r3, #20]
 800359c:	2100      	movs	r1, #0
 800359e:	400a      	ands	r2, r1
 80035a0:	1c11      	adds	r1, r2, #0
 80035a2:	2264      	movs	r2, #100	; 0x64
 80035a4:	430a      	orrs	r2, r1
 80035a6:	751a      	strb	r2, [r3, #20]
 80035a8:	7d5a      	ldrb	r2, [r3, #21]
 80035aa:	2100      	movs	r1, #0
 80035ac:	400a      	ands	r2, r1
 80035ae:	755a      	strb	r2, [r3, #21]
					thisMagnetometer->time_stamp = 0;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	330b      	adds	r3, #11
 80035b4:	781a      	ldrb	r2, [r3, #0]
 80035b6:	2100      	movs	r1, #0
 80035b8:	400a      	ands	r2, r1
 80035ba:	701a      	strb	r2, [r3, #0]
 80035bc:	785a      	ldrb	r2, [r3, #1]
 80035be:	2100      	movs	r1, #0
 80035c0:	400a      	ands	r2, r1
 80035c2:	705a      	strb	r2, [r3, #1]
 80035c4:	789a      	ldrb	r2, [r3, #2]
 80035c6:	2100      	movs	r1, #0
 80035c8:	400a      	ands	r2, r1
 80035ca:	709a      	strb	r2, [r3, #2]
 80035cc:	78da      	ldrb	r2, [r3, #3]
 80035ce:	2100      	movs	r1, #0
 80035d0:	400a      	ands	r2, r1
 80035d2:	70da      	strb	r2, [r3, #3]
 80035d4:	791a      	ldrb	r2, [r3, #4]
 80035d6:	2100      	movs	r1, #0
 80035d8:	400a      	ands	r2, r1
 80035da:	711a      	strb	r2, [r3, #4]
 80035dc:	795a      	ldrb	r2, [r3, #5]
 80035de:	2100      	movs	r1, #0
 80035e0:	400a      	ands	r2, r1
 80035e2:	715a      	strb	r2, [r3, #5]
 80035e4:	799a      	ldrb	r2, [r3, #6]
 80035e6:	2100      	movs	r1, #0
 80035e8:	400a      	ands	r2, r1
 80035ea:	719a      	strb	r2, [r3, #6]
 80035ec:	79da      	ldrb	r2, [r3, #7]
 80035ee:	2100      	movs	r1, #0
 80035f0:	400a      	ands	r2, r1
 80035f2:	71da      	strb	r2, [r3, #7]
					thisMagnetometer->Readings[X_AX] = 0;
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	3305      	adds	r3, #5
 80035f8:	781a      	ldrb	r2, [r3, #0]
 80035fa:	2100      	movs	r1, #0
 80035fc:	400a      	ands	r2, r1
 80035fe:	701a      	strb	r2, [r3, #0]
 8003600:	785a      	ldrb	r2, [r3, #1]
 8003602:	2100      	movs	r1, #0
 8003604:	400a      	ands	r2, r1
 8003606:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Y_AX] = 0;
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3307      	adds	r3, #7
 800360c:	781a      	ldrb	r2, [r3, #0]
 800360e:	2100      	movs	r1, #0
 8003610:	400a      	ands	r2, r1
 8003612:	701a      	strb	r2, [r3, #0]
 8003614:	785a      	ldrb	r2, [r3, #1]
 8003616:	2100      	movs	r1, #0
 8003618:	400a      	ands	r2, r1
 800361a:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->Readings[Z_AX] = 0;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	3309      	adds	r3, #9
 8003620:	781a      	ldrb	r2, [r3, #0]
 8003622:	2100      	movs	r1, #0
 8003624:	400a      	ands	r2, r1
 8003626:	701a      	strb	r2, [r3, #0]
 8003628:	785a      	ldrb	r2, [r3, #1]
 800362a:	2100      	movs	r1, #0
 800362c:	400a      	ands	r2, r1
 800362e:	705a      	strb	r2, [r3, #1]
					thisMagnetometer->sensor_status = ( MMC5983_get_status(thisMagnetometer->magnetometer) ? MAGNETOMETER_OK : MAGNETOMETER_FAULTY);
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	785a      	ldrb	r2, [r3, #1]
 8003634:	7899      	ldrb	r1, [r3, #2]
 8003636:	0209      	lsls	r1, r1, #8
 8003638:	430a      	orrs	r2, r1
 800363a:	78d9      	ldrb	r1, [r3, #3]
 800363c:	0409      	lsls	r1, r1, #16
 800363e:	430a      	orrs	r2, r1
 8003640:	791b      	ldrb	r3, [r3, #4]
 8003642:	061b      	lsls	r3, r3, #24
 8003644:	4313      	orrs	r3, r2
 8003646:	0018      	movs	r0, r3
 8003648:	f000 fb89 	bl	8003d5e <MMC5983_get_status>
 800364c:	1e03      	subs	r3, r0, #0
 800364e:	d001      	beq.n	8003654 <magnetometer_create+0x2ae>
 8003650:	2251      	movs	r2, #81	; 0x51
 8003652:	e000      	b.n	8003656 <magnetometer_create+0x2b0>
 8003654:	2250      	movs	r2, #80	; 0x50
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	761a      	strb	r2, [r3, #24]
				}
			}
		break;
 800365a:	e003      	b.n	8003664 <magnetometer_create+0x2be>
		}
	}
 800365c:	46c0      	nop			; (mov r8, r8)
 800365e:	e002      	b.n	8003666 <magnetometer_create+0x2c0>
		break;
 8003660:	46c0      	nop			; (mov r8, r8)
 8003662:	e000      	b.n	8003666 <magnetometer_create+0x2c0>
		break;
 8003664:	46c0      	nop			; (mov r8, r8)
	return(thisMagnetometer);
 8003666:	697b      	ldr	r3, [r7, #20]
}
 8003668:	0018      	movs	r0, r3
 800366a:	46bd      	mov	sp, r7
 800366c:	b007      	add	sp, #28
 800366e:	bd90      	pop	{r4, r7, pc}

08003670 <magnetometer_read>:
	free(thisMagnetometer);
}
//----------------regardless of magnetometer type this methode is our interface between higher layer and driver layer---------------------------------------
//--------------- by calling this methode we will have fresh data provided by low level layer driver ready to use --------------------------
uint8_t magnetometer_read(Magnetometer_t *thisMagnetometer)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b085      	sub	sp, #20
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
	uint8_t res=0;
 8003678:	230f      	movs	r3, #15
 800367a:	18fb      	adds	r3, r7, r3
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
	switch (thisMagnetometer->whichMagnetometer)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	2b0a      	cmp	r3, #10
 8003686:	d002      	beq.n	800368e <magnetometer_read+0x1e>
 8003688:	2b14      	cmp	r3, #20
 800368a:	d017      	beq.n	80036bc <magnetometer_read+0x4c>
 800368c:	e02d      	b.n	80036ea <magnetometer_read+0x7a>
	{
	case MAGNETOMETER_TYPE_LIS3MDL:
		res = LIS3MDL_read_XYZ((LIS3MDL_t*)thisMagnetometer->magnetometer,thisMagnetometer->Readings);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	785a      	ldrb	r2, [r3, #1]
 8003692:	7899      	ldrb	r1, [r3, #2]
 8003694:	0209      	lsls	r1, r1, #8
 8003696:	430a      	orrs	r2, r1
 8003698:	78d9      	ldrb	r1, [r3, #3]
 800369a:	0409      	lsls	r1, r1, #16
 800369c:	430a      	orrs	r2, r1
 800369e:	791b      	ldrb	r3, [r3, #4]
 80036a0:	061b      	lsls	r3, r3, #24
 80036a2:	4313      	orrs	r3, r2
 80036a4:	001a      	movs	r2, r3
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	3305      	adds	r3, #5
 80036aa:	210f      	movs	r1, #15
 80036ac:	187c      	adds	r4, r7, r1
 80036ae:	0019      	movs	r1, r3
 80036b0:	0010      	movs	r0, r2
 80036b2:	f000 fa1c 	bl	8003aee <LIS3MDL_read_XYZ>
 80036b6:	0003      	movs	r3, r0
 80036b8:	7023      	strb	r3, [r4, #0]
		break;
 80036ba:	e016      	b.n	80036ea <magnetometer_read+0x7a>
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		res = MMC5983_read_XYZ((MMC5983_t*)thisMagnetometer->magnetometer, (uint8_t*)thisMagnetometer->Readings);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	785a      	ldrb	r2, [r3, #1]
 80036c0:	7899      	ldrb	r1, [r3, #2]
 80036c2:	0209      	lsls	r1, r1, #8
 80036c4:	430a      	orrs	r2, r1
 80036c6:	78d9      	ldrb	r1, [r3, #3]
 80036c8:	0409      	lsls	r1, r1, #16
 80036ca:	430a      	orrs	r2, r1
 80036cc:	791b      	ldrb	r3, [r3, #4]
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	4313      	orrs	r3, r2
 80036d2:	001a      	movs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	3305      	adds	r3, #5
 80036d8:	210f      	movs	r1, #15
 80036da:	187c      	adds	r4, r7, r1
 80036dc:	0019      	movs	r1, r3
 80036de:	0010      	movs	r0, r2
 80036e0:	f000 faed 	bl	8003cbe <MMC5983_read_XYZ>
 80036e4:	0003      	movs	r3, r0
 80036e6:	7023      	strb	r3, [r4, #0]
		break;
 80036e8:	46c0      	nop			; (mov r8, r8)
	}
	return res;
 80036ea:	230f      	movs	r3, #15
 80036ec:	18fb      	adds	r3, r7, r3
 80036ee:	781b      	ldrb	r3, [r3, #0]
}
 80036f0:	0018      	movs	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b005      	add	sp, #20
 80036f6:	bd90      	pop	{r4, r7, pc}

080036f8 <magnetometer_direct_register_write>:
//---------------------------------------------------------------------------
uint8_t magnetometer_direct_register_write(Magnetometer_t *thisMagnetometer, uint8_t sensor_reg_add, uint8_t sensor_reg_val)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b084      	sub	sp, #16
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	0008      	movs	r0, r1
 8003702:	0011      	movs	r1, r2
 8003704:	1cfb      	adds	r3, r7, #3
 8003706:	1c02      	adds	r2, r0, #0
 8003708:	701a      	strb	r2, [r3, #0]
 800370a:	1cbb      	adds	r3, r7, #2
 800370c:	1c0a      	adds	r2, r1, #0
 800370e:	701a      	strb	r2, [r3, #0]
	uint8_t res=0;
 8003710:	230f      	movs	r3, #15
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
	switch (thisMagnetometer->whichMagnetometer)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2b0a      	cmp	r3, #10
 800371e:	d002      	beq.n	8003726 <magnetometer_direct_register_write+0x2e>
 8003720:	2b14      	cmp	r3, #20
 8003722:	d014      	beq.n	800374e <magnetometer_direct_register_write+0x56>
 8003724:	e027      	b.n	8003776 <magnetometer_direct_register_write+0x7e>
	{
	case MAGNETOMETER_TYPE_LIS3MDL:
		LIS3MDL_register_write((LIS3MDL_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	785a      	ldrb	r2, [r3, #1]
 800372a:	7899      	ldrb	r1, [r3, #2]
 800372c:	0209      	lsls	r1, r1, #8
 800372e:	430a      	orrs	r2, r1
 8003730:	78d9      	ldrb	r1, [r3, #3]
 8003732:	0409      	lsls	r1, r1, #16
 8003734:	430a      	orrs	r2, r1
 8003736:	791b      	ldrb	r3, [r3, #4]
 8003738:	061b      	lsls	r3, r3, #24
 800373a:	4313      	orrs	r3, r2
 800373c:	0018      	movs	r0, r3
 800373e:	1cbb      	adds	r3, r7, #2
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	1cfb      	adds	r3, r7, #3
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	0019      	movs	r1, r3
 8003748:	f000 f9a1 	bl	8003a8e <LIS3MDL_register_write>
		break;
 800374c:	e013      	b.n	8003776 <magnetometer_direct_register_write+0x7e>
	//------------------------------
	case MAGNETOMETER_TYPE_MMC5983:
		MMC5983_register_write((MMC5983_t*)thisMagnetometer->magnetometer, sensor_reg_add, sensor_reg_val);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	785a      	ldrb	r2, [r3, #1]
 8003752:	7899      	ldrb	r1, [r3, #2]
 8003754:	0209      	lsls	r1, r1, #8
 8003756:	430a      	orrs	r2, r1
 8003758:	78d9      	ldrb	r1, [r3, #3]
 800375a:	0409      	lsls	r1, r1, #16
 800375c:	430a      	orrs	r2, r1
 800375e:	791b      	ldrb	r3, [r3, #4]
 8003760:	061b      	lsls	r3, r3, #24
 8003762:	4313      	orrs	r3, r2
 8003764:	0018      	movs	r0, r3
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	781a      	ldrb	r2, [r3, #0]
 800376a:	1cfb      	adds	r3, r7, #3
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	0019      	movs	r1, r3
 8003770:	f000 fa75 	bl	8003c5e <MMC5983_register_write>
		break;
 8003774:	46c0      	nop			; (mov r8, r8)
	}
	return res;
 8003776:	230f      	movs	r3, #15
 8003778:	18fb      	adds	r3, r7, r3
 800377a:	781b      	ldrb	r3, [r3, #0]
}
 800377c:	0018      	movs	r0, r3
 800377e:	46bd      	mov	sp, r7
 8003780:	b004      	add	sp, #16
 8003782:	bd80      	pop	{r7, pc}

08003784 <I2C_interface_create>:
#include "i2c_network_interface.h"


I2C_t * I2C_interface_create(I2C_HandleTypeDef *I2C_handle,uint8_t channel_address)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
 800378c:	000a      	movs	r2, r1
 800378e:	1cfb      	adds	r3, r7, #3
 8003790:	701a      	strb	r2, [r3, #0]
	I2C_t * thisI2C = (I2C_t *) malloc(sizeof(I2C_t));
 8003792:	200c      	movs	r0, #12
 8003794:	f000 fec0 	bl	8004518 <malloc>
 8003798:	0003      	movs	r3, r0
 800379a:	60fb      	str	r3, [r7, #12]
	if(thisI2C != NULL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d031      	beq.n	8003806 <I2C_interface_create+0x82>
	{
		thisI2C->I2C_line = I2C_handle;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	687a      	ldr	r2, [r7, #4]
 80037a6:	609a      	str	r2, [r3, #8]
		thisI2C->buffer_index=0;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	2200      	movs	r2, #0
 80037ac:	701a      	strb	r2, [r3, #0]
		thisI2C->new_command_is_ready_flag = 0;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	2200      	movs	r2, #0
 80037b2:	705a      	strb	r2, [r3, #1]

		// Disable Own Address1 before setting the new address configuration
		//TODO it is much safer to use HAL compatible address change instead of manual mode
		//is ther any reason for using manual mode?
		thisI2C->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	689a      	ldr	r2, [r3, #8]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4913      	ldr	r1, [pc, #76]	; (8003810 <I2C_interface_create+0x8c>)
 80037c4:	400a      	ands	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( channel_address << 1) );
 80037c8:	1cfb      	adds	r3, r7, #3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	0019      	movs	r1, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2280      	movs	r2, #128	; 0x80
 80037d8:	0212      	lsls	r2, r2, #8
 80037da:	430a      	orrs	r2, r1
 80037dc:	609a      	str	r2, [r3, #8]
		thisI2C->I2C_line->Instance->CR2 &= ~I2C_CR2_NACK;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	685a      	ldr	r2, [r3, #4]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4908      	ldr	r1, [pc, #32]	; (8003810 <I2C_interface_create+0x8c>)
 80037ee:	400a      	ands	r2, r1
 80037f0:	605a      	str	r2, [r3, #4]
		__HAL_I2C_ENABLE_IT(thisI2C->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	212c      	movs	r1, #44	; 0x2c
 8003802:	430a      	orrs	r2, r1
 8003804:	601a      	str	r2, [r3, #0]
	}
	else
	{
		//TODO  erro handler
	}
	return thisI2C;
 8003806:	68fb      	ldr	r3, [r7, #12]
}
 8003808:	0018      	movs	r0, r3
 800380a:	46bd      	mov	sp, r7
 800380c:	b004      	add	sp, #16
 800380e:	bd80      	pop	{r7, pc}
 8003810:	ffff7fff 	.word	0xffff7fff

08003814 <I2C2_IRQHandler>:
extern TIM_HandleTypeDef htim21;
extern System my_sys;

//------------------------i2c int------------------
void I2C2_IRQHandler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_RXI) != RESET))
 8003818:	4b3d      	ldr	r3, [pc, #244]	; (8003910 <I2C2_IRQHandler+0xfc>)
 800381a:	229c      	movs	r2, #156	; 0x9c
 800381c:	589b      	ldr	r3, [r3, r2]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	699b      	ldr	r3, [r3, #24]
 8003824:	2204      	movs	r2, #4
 8003826:	4013      	ands	r3, r2
 8003828:	2b04      	cmp	r3, #4
 800382a:	d136      	bne.n	800389a <I2C2_IRQHandler+0x86>
 800382c:	4b38      	ldr	r3, [pc, #224]	; (8003910 <I2C2_IRQHandler+0xfc>)
 800382e:	229c      	movs	r2, #156	; 0x9c
 8003830:	589b      	ldr	r3, [r3, r2]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2204      	movs	r2, #4
 800383a:	4013      	ands	r3, r2
 800383c:	2b04      	cmp	r3, #4
 800383e:	d12c      	bne.n	800389a <I2C2_IRQHandler+0x86>
	{
		if(my_sys.i2c_line->buffer_index < I2C_MAX_RECEIVE_LENGTH)
 8003840:	4b33      	ldr	r3, [pc, #204]	; (8003910 <I2C2_IRQHandler+0xfc>)
 8003842:	229c      	movs	r2, #156	; 0x9c
 8003844:	589b      	ldr	r3, [r3, r2]
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	2b04      	cmp	r3, #4
 800384c:	d81e      	bhi.n	800388c <I2C2_IRQHandler+0x78>
		{
			my_sys.i2c_line->receiveBuffer[my_sys.i2c_line->buffer_index] = (uint8_t)my_sys.i2c_line->I2C_line->Instance->RXDR;
 800384e:	4b30      	ldr	r3, [pc, #192]	; (8003910 <I2C2_IRQHandler+0xfc>)
 8003850:	229c      	movs	r2, #156	; 0x9c
 8003852:	589b      	ldr	r3, [r3, r2]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800385a:	4b2d      	ldr	r3, [pc, #180]	; (8003910 <I2C2_IRQHandler+0xfc>)
 800385c:	229c      	movs	r2, #156	; 0x9c
 800385e:	589b      	ldr	r3, [r3, r2]
 8003860:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <I2C2_IRQHandler+0xfc>)
 8003862:	219c      	movs	r1, #156	; 0x9c
 8003864:	5852      	ldr	r2, [r2, r1]
 8003866:	7812      	ldrb	r2, [r2, #0]
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	0011      	movs	r1, r2
 800386c:	b2c2      	uxtb	r2, r0
 800386e:	185b      	adds	r3, r3, r1
 8003870:	709a      	strb	r2, [r3, #2]
			my_sys.i2c_line->buffer_index++;
 8003872:	4b27      	ldr	r3, [pc, #156]	; (8003910 <I2C2_IRQHandler+0xfc>)
 8003874:	229c      	movs	r2, #156	; 0x9c
 8003876:	589b      	ldr	r3, [r3, r2]
 8003878:	781a      	ldrb	r2, [r3, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	3201      	adds	r2, #1
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	701a      	strb	r2, [r3, #0]
			my_sys.i2c_line->new_command_is_ready_flag = 1;
 8003882:	4b23      	ldr	r3, [pc, #140]	; (8003910 <I2C2_IRQHandler+0xfc>)
 8003884:	229c      	movs	r2, #156	; 0x9c
 8003886:	589b      	ldr	r3, [r3, r2]
 8003888:	2201      	movs	r2, #1
 800388a:	705a      	strb	r2, [r3, #1]
				//ok now we have 3 byts for our long command and it is ready for process
				if(my_sys.i2c_line->buffer_index == 3)
					my_sys.i2c_line->new_command_is_ready_flag = 1;
			}*/
		}
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_RXNE);
 800388c:	4b20      	ldr	r3, [pc, #128]	; (8003910 <I2C2_IRQHandler+0xfc>)
 800388e:	229c      	movs	r2, #156	; 0x9c
 8003890:	589b      	ldr	r3, [r3, r2]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	2204      	movs	r2, #4
 8003898:	61da      	str	r2, [r3, #28]
	}
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_ADDRI) != RESET))
 800389a:	4b1d      	ldr	r3, [pc, #116]	; (8003910 <I2C2_IRQHandler+0xfc>)
 800389c:	229c      	movs	r2, #156	; 0x9c
 800389e:	589b      	ldr	r3, [r3, r2]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	2208      	movs	r2, #8
 80038a8:	4013      	ands	r3, r2
 80038aa:	2b08      	cmp	r3, #8
 80038ac:	d110      	bne.n	80038d0 <I2C2_IRQHandler+0xbc>
 80038ae:	4b18      	ldr	r3, [pc, #96]	; (8003910 <I2C2_IRQHandler+0xfc>)
 80038b0:	229c      	movs	r2, #156	; 0x9c
 80038b2:	589b      	ldr	r3, [r3, r2]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2208      	movs	r2, #8
 80038bc:	4013      	ands	r3, r2
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d106      	bne.n	80038d0 <I2C2_IRQHandler+0xbc>
	{
		// Clear ADDR Flag and turn off line hold
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_ADDR);
 80038c2:	4b13      	ldr	r3, [pc, #76]	; (8003910 <I2C2_IRQHandler+0xfc>)
 80038c4:	229c      	movs	r2, #156	; 0x9c
 80038c6:	589b      	ldr	r3, [r3, r2]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2208      	movs	r2, #8
 80038ce:	61da      	str	r2, [r3, #28]
	}
	if ((I2C_CHECK_FLAG(my_sys.i2c_line->I2C_line->Instance->ISR, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(my_sys.i2c_line->I2C_line->Instance->CR1, I2C_IT_STOPI) != RESET))
 80038d0:	4b0f      	ldr	r3, [pc, #60]	; (8003910 <I2C2_IRQHandler+0xfc>)
 80038d2:	229c      	movs	r2, #156	; 0x9c
 80038d4:	589b      	ldr	r3, [r3, r2]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	699b      	ldr	r3, [r3, #24]
 80038dc:	2220      	movs	r2, #32
 80038de:	4013      	ands	r3, r2
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d111      	bne.n	8003908 <I2C2_IRQHandler+0xf4>
 80038e4:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <I2C2_IRQHandler+0xfc>)
 80038e6:	229c      	movs	r2, #156	; 0x9c
 80038e8:	589b      	ldr	r3, [r3, r2]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2220      	movs	r2, #32
 80038f2:	4013      	ands	r3, r2
 80038f4:	2b20      	cmp	r3, #32
 80038f6:	d107      	bne.n	8003908 <I2C2_IRQHandler+0xf4>
	{
		// Clear STOP Flag
		__HAL_I2C_CLEAR_FLAG(my_sys.i2c_line->I2C_line, I2C_FLAG_STOPF);
 80038f8:	4b05      	ldr	r3, [pc, #20]	; (8003910 <I2C2_IRQHandler+0xfc>)
 80038fa:	229c      	movs	r2, #156	; 0x9c
 80038fc:	589b      	ldr	r3, [r3, r2]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2220      	movs	r2, #32
 8003904:	61da      	str	r2, [r3, #28]
	}
	return;
 8003906:	46c0      	nop			; (mov r8, r8)
 8003908:	46c0      	nop			; (mov r8, r8)
}
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	46c0      	nop			; (mov r8, r8)
 8003910:	200000e4 	.word	0x200000e4

08003914 <HAL_TIM_PeriodElapsedCallback>:
//---------------------------  tim21 int----------------
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b082      	sub	sp, #8
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
	if (htim == &htim21)
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	4b07      	ldr	r3, [pc, #28]	; (800393c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003920:	429a      	cmp	r2, r3
 8003922:	d106      	bne.n	8003932 <HAL_TIM_PeriodElapsedCallback+0x1e>
	{
		my_sys.ph_global_timer->overflow_counter++;
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8003926:	228c      	movs	r2, #140	; 0x8c
 8003928:	589b      	ldr	r3, [r3, r2]
 800392a:	781a      	ldrb	r2, [r3, #0]
 800392c:	3201      	adds	r2, #1
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	701a      	strb	r2, [r3, #0]
	}
}
 8003932:	46c0      	nop			; (mov r8, r8)
 8003934:	46bd      	mov	sp, r7
 8003936:	b002      	add	sp, #8
 8003938:	bd80      	pop	{r7, pc}
 800393a:	46c0      	nop			; (mov r8, r8)
 800393c:	20000228 	.word	0x20000228
 8003940:	200000e4 	.word	0x200000e4

08003944 <LIS3MDL_create>:
#include "lis3mdl_driver.h"

//TODO we need to test the whole library
LIS3MDL_t * LIS3MDL_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *DRDY_Bus,uint16_t DRDY_Pin)
{
 8003944:	b5b0      	push	{r4, r5, r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	1dbb      	adds	r3, r7, #6
 8003952:	801a      	strh	r2, [r3, #0]
	LIS3MDL_t * thisLIS3MDL = (LIS3MDL_t *)malloc(sizeof(LIS3MDL_t));
 8003954:	2018      	movs	r0, #24
 8003956:	f000 fddf 	bl	8004518 <malloc>
 800395a:	0003      	movs	r3, r0
 800395c:	617b      	str	r3, [r7, #20]
	thisLIS3MDL->CS_GPIO_Bus = CS_Bus;
 800395e:	697b      	ldr	r3, [r7, #20]
 8003960:	68ba      	ldr	r2, [r7, #8]
 8003962:	609a      	str	r2, [r3, #8]
	thisLIS3MDL->CS_GPIO_Pin = CS_Pin;
 8003964:	697b      	ldr	r3, [r7, #20]
 8003966:	1dba      	adds	r2, r7, #6
 8003968:	8812      	ldrh	r2, [r2, #0]
 800396a:	819a      	strh	r2, [r3, #12]
	thisLIS3MDL->DRDY_GPIO_Bus = DRDY_Bus;
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	611a      	str	r2, [r3, #16]
	thisLIS3MDL->DRDY_GPIO_Pin = DRDY_Pin;
 8003972:	697a      	ldr	r2, [r7, #20]
 8003974:	2328      	movs	r3, #40	; 0x28
 8003976:	18fb      	adds	r3, r7, r3
 8003978:	881b      	ldrh	r3, [r3, #0]
 800397a:	8293      	strh	r3, [r2, #20]
	thisLIS3MDL->spi_channel = spi_line;
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6898      	ldr	r0, [r3, #8]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	899b      	ldrh	r3, [r3, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	0019      	movs	r1, r3
 800398e:	f7fd fbef 	bl	8001170 <HAL_GPIO_WritePin>
	if(thisLIS3MDL != NULL)
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d03a      	beq.n	8003a0e <LIS3MDL_create+0xca>
	{
		//Set all of the configuration registers every time on bootup
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG2,0b00001100);  //32/64: Gauss Scale Selection   8: Reboot Memory Content   4: Configuration Registers and User Register Reset
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	220c      	movs	r2, #12
 800399c:	2121      	movs	r1, #33	; 0x21
 800399e:	0018      	movs	r0, r3
 80039a0:	f000 f875 	bl	8003a8e <LIS3MDL_register_write>
		HAL_Delay(1);
 80039a4:	2001      	movs	r0, #1
 80039a6:	f7fd f95d 	bl	8000c64 <HAL_Delay>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG1,0b00011110);  //128: Temp Sensor Enable   32/64: X-Y-axis Performance Selection   4/8/16: Output Data Rate Selection   2: Data Rate Overdrive
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	221e      	movs	r2, #30
 80039ae:	2120      	movs	r1, #32
 80039b0:	0018      	movs	r0, r3
 80039b2:	f000 f86c 	bl	8003a8e <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG2,0b01100000);  //32/64: Gauss Scale Selection   8: Reboot Memory Content   4: Configuration Registers and User Register Reset
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2260      	movs	r2, #96	; 0x60
 80039ba:	2121      	movs	r1, #33	; 0x21
 80039bc:	0018      	movs	r0, r3
 80039be:	f000 f866 	bl	8003a8e <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG3,0b00000000);  //32: Low Power Mode   4: 3-4 Wire SPI   1/2: Operating Mode Selection
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	2200      	movs	r2, #0
 80039c6:	2122      	movs	r1, #34	; 0x22
 80039c8:	0018      	movs	r0, r3
 80039ca:	f000 f860 	bl	8003a8e <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG4,0b00001100);  //2: Big-Little Endian Data Selection   4/8: Z-axis Performance Selection
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	220c      	movs	r2, #12
 80039d2:	2123      	movs	r1, #35	; 0x23
 80039d4:	0018      	movs	r0, r3
 80039d6:	f000 f85a 	bl	8003a8e <LIS3MDL_register_write>
		LIS3MDL_register_write(thisLIS3MDL, LIS3MDL_CTRL_REG5,0b00000000);  //128: Fast Read   64: Block Data Update
 80039da:	697b      	ldr	r3, [r7, #20]
 80039dc:	2200      	movs	r2, #0
 80039de:	2124      	movs	r1, #36	; 0x24
 80039e0:	0018      	movs	r0, r3
 80039e2:	f000 f854 	bl	8003a8e <LIS3MDL_register_write>
		//Check whether you are communicating with the ST sensor
		uint8_t SPITestWHOAMI = LIS3MDL_register_read(thisLIS3MDL, (uint8_t)LIS3MDL_WHO_AM_I);
 80039e6:	2513      	movs	r5, #19
 80039e8:	197c      	adds	r4, r7, r5
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	210f      	movs	r1, #15
 80039ee:	0018      	movs	r0, r3
 80039f0:	f000 f812 	bl	8003a18 <LIS3MDL_register_read>
 80039f4:	0003      	movs	r3, r0
 80039f6:	7023      	strb	r3, [r4, #0]
		if (SPITestWHOAMI==LIS3MDL_WHO_ID_RESPONSE)
 80039f8:	197b      	adds	r3, r7, r5
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b3d      	cmp	r3, #61	; 0x3d
 80039fe:	d103      	bne.n	8003a08 <LIS3MDL_create+0xc4>
		{
			//TODO Implement Sensor found subroutine
			thisLIS3MDL->sensor_status = LIS3MDL_SENSOR_FOUND;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	2220      	movs	r2, #32
 8003a04:	701a      	strb	r2, [r3, #0]
 8003a06:	e002      	b.n	8003a0e <LIS3MDL_create+0xca>
		}
		else
		{
			thisLIS3MDL->sensor_status = LIS3MDL_SENSOR_NOT_FOUND;
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	2230      	movs	r2, #48	; 0x30
 8003a0c:	701a      	strb	r2, [r3, #0]
		}
	}
	return(thisLIS3MDL);
 8003a0e:	697b      	ldr	r3, [r7, #20]
}
 8003a10:	0018      	movs	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	b006      	add	sp, #24
 8003a16:	bdb0      	pop	{r4, r5, r7, pc}

08003a18 <LIS3MDL_register_read>:

uint8_t LIS3MDL_register_read(LIS3MDL_t *thisLIS3MDL, uint8_t thisRegister)
{
 8003a18:	b5b0      	push	{r4, r5, r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af02      	add	r7, sp, #8
 8003a1e:	6078      	str	r0, [r7, #4]
 8003a20:	000a      	movs	r2, r1
 8003a22:	1cfb      	adds	r3, r7, #3
 8003a24:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	uint8_t out[2];
	uint8_t in[2] = {0 , 0};
 8003a26:	2408      	movs	r4, #8
 8003a28:	193b      	adds	r3, r7, r4
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	801a      	strh	r2, [r3, #0]
	out[0] = 128 | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8003a2e:	1cfb      	adds	r3, r7, #3
 8003a30:	781b      	ldrb	r3, [r3, #0]
 8003a32:	2280      	movs	r2, #128	; 0x80
 8003a34:	4252      	negs	r2, r2
 8003a36:	4313      	orrs	r3, r2
 8003a38:	b2da      	uxtb	r2, r3
 8003a3a:	250c      	movs	r5, #12
 8003a3c:	197b      	adds	r3, r7, r5
 8003a3e:	701a      	strb	r2, [r3, #0]
	out[1]= 0;   //transfer dummy byte to get response
 8003a40:	197b      	adds	r3, r7, r5
 8003a42:	2200      	movs	r2, #0
 8003a44:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6898      	ldr	r0, [r3, #8]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	899b      	ldrh	r3, [r3, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	0019      	movs	r1, r3
 8003a52:	f7fd fb8d 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisLIS3MDL->spi_channel , out, in, 2, 10);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6858      	ldr	r0, [r3, #4]
 8003a5a:	193a      	adds	r2, r7, r4
 8003a5c:	1979      	adds	r1, r7, r5
 8003a5e:	230a      	movs	r3, #10
 8003a60:	9300      	str	r3, [sp, #0]
 8003a62:	2302      	movs	r3, #2
 8003a64:	f7fe fc84 	bl	8002370 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6898      	ldr	r0, [r3, #8]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	899b      	ldrh	r3, [r3, #12]
 8003a70:	2201      	movs	r2, #1
 8003a72:	0019      	movs	r1, r3
 8003a74:	f7fd fb7c 	bl	8001170 <HAL_GPIO_WritePin>
	result = in[1];
 8003a78:	210f      	movs	r1, #15
 8003a7a:	187b      	adds	r3, r7, r1
 8003a7c:	193a      	adds	r2, r7, r4
 8003a7e:	7852      	ldrb	r2, [r2, #1]
 8003a80:	701a      	strb	r2, [r3, #0]
	return result;
 8003a82:	187b      	adds	r3, r7, r1
 8003a84:	781b      	ldrb	r3, [r3, #0]
}
 8003a86:	0018      	movs	r0, r3
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	b004      	add	sp, #16
 8003a8c:	bdb0      	pop	{r4, r5, r7, pc}

08003a8e <LIS3MDL_register_write>:

void LIS3MDL_register_write(LIS3MDL_t *thisLIS3MDL, uint8_t thisRegister, uint8_t val)
{
 8003a8e:	b590      	push	{r4, r7, lr}
 8003a90:	b085      	sub	sp, #20
 8003a92:	af00      	add	r7, sp, #0
 8003a94:	6078      	str	r0, [r7, #4]
 8003a96:	0008      	movs	r0, r1
 8003a98:	0011      	movs	r1, r2
 8003a9a:	1cfb      	adds	r3, r7, #3
 8003a9c:	1c02      	adds	r2, r0, #0
 8003a9e:	701a      	strb	r2, [r3, #0]
 8003aa0:	1cbb      	adds	r3, r7, #2
 8003aa2:	1c0a      	adds	r2, r1, #0
 8003aa4:	701a      	strb	r2, [r3, #0]
	uint8_t out[2];
	out[0] = thisRegister;
 8003aa6:	240c      	movs	r4, #12
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	1cfa      	adds	r2, r7, #3
 8003aac:	7812      	ldrb	r2, [r2, #0]
 8003aae:	701a      	strb	r2, [r3, #0]
	out[1] = val;
 8003ab0:	193b      	adds	r3, r7, r4
 8003ab2:	1cba      	adds	r2, r7, #2
 8003ab4:	7812      	ldrb	r2, [r2, #0]
 8003ab6:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6898      	ldr	r0, [r3, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	899b      	ldrh	r3, [r3, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	0019      	movs	r1, r3
 8003ac4:	f7fd fb54 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisLIS3MDL->spi_channel, out, 2, 10);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6858      	ldr	r0, [r3, #4]
 8003acc:	1939      	adds	r1, r7, r4
 8003ace:	230a      	movs	r3, #10
 8003ad0:	2202      	movs	r2, #2
 8003ad2:	f7fe faf7 	bl	80020c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisLIS3MDL->CS_GPIO_Bus, thisLIS3MDL->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6898      	ldr	r0, [r3, #8]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	899b      	ldrh	r3, [r3, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	0019      	movs	r1, r3
 8003ae2:	f7fd fb45 	bl	8001170 <HAL_GPIO_WritePin>
}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b005      	add	sp, #20
 8003aec:	bd90      	pop	{r4, r7, pc}

08003aee <LIS3MDL_read_XYZ>:
{
	free(thisLIS3MDL);//we may need to turn off or reset chip before freeing memory each chip must have its own destroyer
}
//-----------------------------------------------------
uint8_t LIS3MDL_read_XYZ(LIS3MDL_t *thisLIS3MDL,uint16_t *data)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b082      	sub	sp, #8
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
 8003af6:	6039      	str	r1, [r7, #0]
		if (thisLIS3MDL->magneticFront == LIS3MDL_MAXREADINGS)
		{
			thisLIS3MDL->magneticFront = 0;
		}
	}*/
}
 8003af8:	46c0      	nop			; (mov r8, r8)
 8003afa:	0018      	movs	r0, r3
 8003afc:	46bd      	mov	sp, r7
 8003afe:	b002      	add	sp, #8
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <MMC5983_create>:
#include "mmc5983_driver.h"
#include <stdlib.h>

MMC5983_t * MMC5983_create(SPI_HandleTypeDef *spi_line,GPIO_TypeDef *CS_Bus,uint16_t CS_Pin,GPIO_TypeDef *INT_Bus,uint16_t INT_Pin)
{
 8003b02:	b5b0      	push	{r4, r5, r7, lr}
 8003b04:	b086      	sub	sp, #24
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	60f8      	str	r0, [r7, #12]
 8003b0a:	60b9      	str	r1, [r7, #8]
 8003b0c:	603b      	str	r3, [r7, #0]
 8003b0e:	1dbb      	adds	r3, r7, #6
 8003b10:	801a      	strh	r2, [r3, #0]
	//TODO Do we want to use a series of #defines with | in between to describe configuration registers to make this function more human readable?

	MMC5983_t * thisMMC5983 = (MMC5983_t *) malloc(sizeof(MMC5983_t));
 8003b12:	2018      	movs	r0, #24
 8003b14:	f000 fd00 	bl	8004518 <malloc>
 8003b18:	0003      	movs	r3, r0
 8003b1a:	617b      	str	r3, [r7, #20]
	thisMMC5983->CS_GPIO_Bus = CS_Bus;
 8003b1c:	697b      	ldr	r3, [r7, #20]
 8003b1e:	68ba      	ldr	r2, [r7, #8]
 8003b20:	611a      	str	r2, [r3, #16]
	thisMMC5983->CS_GPIO_Pin = CS_Pin;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	1dba      	adds	r2, r7, #6
 8003b26:	8812      	ldrh	r2, [r2, #0]
 8003b28:	829a      	strh	r2, [r3, #20]
	thisMMC5983->INT_GPIO_Bus = INT_Bus;
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	683a      	ldr	r2, [r7, #0]
 8003b2e:	609a      	str	r2, [r3, #8]
	thisMMC5983->INT_GPIO_Pin = INT_Pin;
 8003b30:	697a      	ldr	r2, [r7, #20]
 8003b32:	2328      	movs	r3, #40	; 0x28
 8003b34:	18fb      	adds	r3, r7, r3
 8003b36:	881b      	ldrh	r3, [r3, #0]
 8003b38:	8193      	strh	r3, [r2, #12]
	thisMMC5983->spi_channel = spi_line;
 8003b3a:	697b      	ldr	r3, [r7, #20]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	605a      	str	r2, [r3, #4]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET);   //Set CS pin on sensor A to high to ensure no SPI communication enabled initially
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	6918      	ldr	r0, [r3, #16]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	8a9b      	ldrh	r3, [r3, #20]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	0019      	movs	r1, r3
 8003b4c:	f7fd fb10 	bl	8001170 <HAL_GPIO_WritePin>
	if(thisMMC5983 != NULL)
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d03d      	beq.n	8003bd2 <MMC5983_create+0xd0>
	{
		//Set all of the configuration registers every time on bootup
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL1, MMC5983_CTRL1_SW_RST); //128: Reset chip, operation takes 10 msec
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	210a      	movs	r1, #10
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f000 f87e 	bl	8003c5e <MMC5983_register_write>
		HAL_Delay(20);
 8003b62:	2014      	movs	r0, #20
 8003b64:	f7fd f87e 	bl	8000c64 <HAL_Delay>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_Set);  //8: Set  magnetic sensor
 8003b68:	697b      	ldr	r3, [r7, #20]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	2109      	movs	r1, #9
 8003b6e:	0018      	movs	r0, r3
 8003b70:	f000 f875 	bl	8003c5e <MMC5983_register_write>
		HAL_Delay(5);
 8003b74:	2005      	movs	r0, #5
 8003b76:	f7fd f875 	bl	8000c64 <HAL_Delay>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL3, 0);  //64: SPI 3-wire mode   4/2: Saturation checks.
 8003b7a:	697b      	ldr	r3, [r7, #20]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	210c      	movs	r1, #12
 8003b80:	0018      	movs	r0, r3
 8003b82:	f000 f86c 	bl	8003c5e <MMC5983_register_write>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_Auto_SR_en);  //7:Reserved    6:OTP    5:Auto_SR  4:Reset    3:Set   2:INT_meas_done_en   1:TM_T   0:TM_M
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	2220      	movs	r2, #32
 8003b8a:	2109      	movs	r1, #9
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f000 f866 	bl	8003c5e <MMC5983_register_write>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL1, 0);  //7:SW_	RST    6:Reserved    5:Reserved  4:YZ-inhibit    3:YZ-inhibit   2:X-inhibit   1:BW1   0:BW0 {100 200 400 800}Hz
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	2200      	movs	r2, #0
 8003b96:	210a      	movs	r1, #10
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f000 f860 	bl	8003c5e <MMC5983_register_write>
		MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL2, 0);  //7:En_prd_set     4-6:Prd_set    3:Cmm_en     0-2: CM_Freq {off 1 10 20 50 100 200 1000}Hz
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	210b      	movs	r1, #11
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f000 f85a 	bl	8003c5e <MMC5983_register_write>
		//Check whether you are communicating with the MEMSIC sensor
		uint8_t SPITestWHOAMI = MMC5983_register_read(thisMMC5983, MMC5983_WHOAMI);
 8003baa:	2513      	movs	r5, #19
 8003bac:	197c      	adds	r4, r7, r5
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	212f      	movs	r1, #47	; 0x2f
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f000 f818 	bl	8003be8 <MMC5983_register_read>
 8003bb8:	0003      	movs	r3, r0
 8003bba:	7023      	strb	r3, [r4, #0]
		if (SPITestWHOAMI==MMC5983_WHO_ID_RESPONSE)
 8003bbc:	197b      	adds	r3, r7, r5
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	2b30      	cmp	r3, #48	; 0x30
 8003bc2:	d103      	bne.n	8003bcc <MMC5983_create+0xca>
		{
			//TODO Implement Sensor found subroutine
			thisMMC5983->sensor_status = MMC5983_SENSOR_FOUND;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	e002      	b.n	8003bd2 <MMC5983_create+0xd0>
		}
		else
		{
			thisMMC5983->sensor_status = MMC5983_SENSOR_NOT_FOUND;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	2230      	movs	r2, #48	; 0x30
 8003bd0:	701a      	strb	r2, [r3, #0]
		}
	}
	MMC5983_register_write(thisMMC5983, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	2109      	movs	r1, #9
 8003bd8:	0018      	movs	r0, r3
 8003bda:	f000 f840 	bl	8003c5e <MMC5983_register_write>
	return(thisMMC5983);
 8003bde:	697b      	ldr	r3, [r7, #20]
}
 8003be0:	0018      	movs	r0, r3
 8003be2:	46bd      	mov	sp, r7
 8003be4:	b006      	add	sp, #24
 8003be6:	bdb0      	pop	{r4, r5, r7, pc}

08003be8 <MMC5983_register_read>:

uint8_t MMC5983_register_read(MMC5983_t *thisMMC5983, uint8_t thisRegister)
{
 8003be8:	b5b0      	push	{r4, r5, r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	6078      	str	r0, [r7, #4]
 8003bf0:	000a      	movs	r2, r1
 8003bf2:	1cfb      	adds	r3, r7, #3
 8003bf4:	701a      	strb	r2, [r3, #0]
	uint8_t result;
	uint8_t out[2];
	uint8_t in[2] = {0 , 0};
 8003bf6:	2408      	movs	r4, #8
 8003bf8:	193b      	adds	r3, r7, r4
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	801a      	strh	r2, [r3, #0]
	out[0] = MMC5983_READ | thisRegister;   //adding 128 to writing 1 in MSB bit 7
 8003bfe:	1cfb      	adds	r3, r7, #3
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2280      	movs	r2, #128	; 0x80
 8003c04:	4252      	negs	r2, r2
 8003c06:	4313      	orrs	r3, r2
 8003c08:	b2da      	uxtb	r2, r3
 8003c0a:	250c      	movs	r5, #12
 8003c0c:	197b      	adds	r3, r7, r5
 8003c0e:	701a      	strb	r2, [r3, #0]
	out[1]= 0;   //transfer dummy byte to get response
 8003c10:	197b      	adds	r3, r7, r5
 8003c12:	2200      	movs	r2, #0
 8003c14:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6918      	ldr	r0, [r3, #16]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8a9b      	ldrh	r3, [r3, #20]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	0019      	movs	r1, r3
 8003c22:	f7fd faa5 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(thisMMC5983->spi_channel , out, in, 2, 10);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6858      	ldr	r0, [r3, #4]
 8003c2a:	193a      	adds	r2, r7, r4
 8003c2c:	1979      	adds	r1, r7, r5
 8003c2e:	230a      	movs	r3, #10
 8003c30:	9300      	str	r3, [sp, #0]
 8003c32:	2302      	movs	r3, #2
 8003c34:	f7fe fb9c 	bl	8002370 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6918      	ldr	r0, [r3, #16]
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8a9b      	ldrh	r3, [r3, #20]
 8003c40:	2201      	movs	r2, #1
 8003c42:	0019      	movs	r1, r3
 8003c44:	f7fd fa94 	bl	8001170 <HAL_GPIO_WritePin>
	result = in[1];
 8003c48:	210f      	movs	r1, #15
 8003c4a:	187b      	adds	r3, r7, r1
 8003c4c:	193a      	adds	r2, r7, r4
 8003c4e:	7852      	ldrb	r2, [r2, #1]
 8003c50:	701a      	strb	r2, [r3, #0]
	return result;
 8003c52:	187b      	adds	r3, r7, r1
 8003c54:	781b      	ldrb	r3, [r3, #0]
}
 8003c56:	0018      	movs	r0, r3
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	b004      	add	sp, #16
 8003c5c:	bdb0      	pop	{r4, r5, r7, pc}

08003c5e <MMC5983_register_write>:

void MMC5983_register_write(MMC5983_t *thisMMC5983, uint8_t thisRegister, uint8_t val)
{
 8003c5e:	b590      	push	{r4, r7, lr}
 8003c60:	b085      	sub	sp, #20
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	0008      	movs	r0, r1
 8003c68:	0011      	movs	r1, r2
 8003c6a:	1cfb      	adds	r3, r7, #3
 8003c6c:	1c02      	adds	r2, r0, #0
 8003c6e:	701a      	strb	r2, [r3, #0]
 8003c70:	1cbb      	adds	r3, r7, #2
 8003c72:	1c0a      	adds	r2, r1, #0
 8003c74:	701a      	strb	r2, [r3, #0]
	uint8_t out[2];
	out[0] = thisRegister;
 8003c76:	240c      	movs	r4, #12
 8003c78:	193b      	adds	r3, r7, r4
 8003c7a:	1cfa      	adds	r2, r7, #3
 8003c7c:	7812      	ldrb	r2, [r2, #0]
 8003c7e:	701a      	strb	r2, [r3, #0]
	out[1] = val;
 8003c80:	193b      	adds	r3, r7, r4
 8003c82:	1cba      	adds	r2, r7, #2
 8003c84:	7812      	ldrb	r2, [r2, #0]
 8003c86:	705a      	strb	r2, [r3, #1]
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_RESET); //! Set CS pin low to begin SPI read on target device
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6918      	ldr	r0, [r3, #16]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	8a9b      	ldrh	r3, [r3, #20]
 8003c90:	2200      	movs	r2, #0
 8003c92:	0019      	movs	r1, r3
 8003c94:	f7fd fa6c 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(thisMMC5983->spi_channel, out, 2, 10);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6858      	ldr	r0, [r3, #4]
 8003c9c:	1939      	adds	r1, r7, r4
 8003c9e:	230a      	movs	r3, #10
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	f7fe fa0f 	bl	80020c4 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(thisMMC5983->CS_GPIO_Bus, thisMMC5983->CS_GPIO_Pin, GPIO_PIN_SET); //! Set CS pin high to signal SPI read as done
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6918      	ldr	r0, [r3, #16]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	8a9b      	ldrh	r3, [r3, #20]
 8003cae:	2201      	movs	r2, #1
 8003cb0:	0019      	movs	r1, r3
 8003cb2:	f7fd fa5d 	bl	8001170 <HAL_GPIO_WritePin>
}
 8003cb6:	46c0      	nop			; (mov r8, r8)
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	b005      	add	sp, #20
 8003cbc:	bd90      	pop	{r4, r7, pc}

08003cbe <MMC5983_read_XYZ>:
//-----------  we really do not need to send the second parameter since by having the address of the magnetometer object ----------
//------- we can calculate the offset of x y z data place holder there is risk on that approach if someone in future ------------
//--- add more eleman at the bigining of the structure or change the data type we need to consider those changes ---------
//----and after c++ 11 compiler can not guarantee the address of the first member of the struct is equal to the struct address -------------
uint8_t MMC5983_read_XYZ(MMC5983_t *thisMMC5983,uint8_t * data)
{
 8003cbe:	b5b0      	push	{r4, r5, r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	6078      	str	r0, [r7, #4]
 8003cc6:	6039      	str	r1, [r7, #0]
	//TODO  need a better implimentation
	uint8_t sensor_status;
	sensor_status = MMC5983_register_read(thisMMC5983, MMC5983_STATUS);
 8003cc8:	250f      	movs	r5, #15
 8003cca:	197c      	adds	r4, r7, r5
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2108      	movs	r1, #8
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff ff89 	bl	8003be8 <MMC5983_register_read>
 8003cd6:	0003      	movs	r3, r0
 8003cd8:	7023      	strb	r3, [r4, #0]
	if(sensor_status & MMC5983_STATUS_Meas_M_Done )
 8003cda:	197b      	adds	r3, r7, r5
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2201      	movs	r2, #1
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d037      	beq.n	8003d54 <MMC5983_read_XYZ+0x96>
	{
		data[0] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT1);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	0018      	movs	r0, r3
 8003cea:	f7ff ff7d 	bl	8003be8 <MMC5983_register_read>
 8003cee:	0003      	movs	r3, r0
 8003cf0:	001a      	movs	r2, r3
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	701a      	strb	r2, [r3, #0]
		data[1] =MMC5983_register_read(thisMMC5983, MMC5983_XOUT0);
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	1c5c      	adds	r4, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2100      	movs	r1, #0
 8003cfe:	0018      	movs	r0, r3
 8003d00:	f7ff ff72 	bl	8003be8 <MMC5983_register_read>
 8003d04:	0003      	movs	r3, r0
 8003d06:	7023      	strb	r3, [r4, #0]
		data[2] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT1);
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	1c9c      	adds	r4, r3, #2
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2103      	movs	r1, #3
 8003d10:	0018      	movs	r0, r3
 8003d12:	f7ff ff69 	bl	8003be8 <MMC5983_register_read>
 8003d16:	0003      	movs	r3, r0
 8003d18:	7023      	strb	r3, [r4, #0]
		data[3] =MMC5983_register_read(thisMMC5983, MMC5983_YOUT0);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	1cdc      	adds	r4, r3, #3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2102      	movs	r1, #2
 8003d22:	0018      	movs	r0, r3
 8003d24:	f7ff ff60 	bl	8003be8 <MMC5983_register_read>
 8003d28:	0003      	movs	r3, r0
 8003d2a:	7023      	strb	r3, [r4, #0]
		data[4] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT1);
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	1d1c      	adds	r4, r3, #4
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2105      	movs	r1, #5
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7ff ff57 	bl	8003be8 <MMC5983_register_read>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	7023      	strb	r3, [r4, #0]
		data[5] =MMC5983_register_read(thisMMC5983, MMC5983_ZOUT0);
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	1d5c      	adds	r4, r3, #5
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2104      	movs	r1, #4
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff ff4e 	bl	8003be8 <MMC5983_register_read>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	7023      	strb	r3, [r4, #0]
		return 1;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <MMC5983_read_XYZ+0x98>
	}
	return 0;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b004      	add	sp, #16
 8003d5c:	bdb0      	pop	{r4, r5, r7, pc}

08003d5e <MMC5983_get_status>:
//---------------------------
uint8_t MMC5983_get_status(MMC5983_t *thisMMC5983)
{
 8003d5e:	b580      	push	{r7, lr}
 8003d60:	b082      	sub	sp, #8
 8003d62:	af00      	add	r7, sp, #0
 8003d64:	6078      	str	r0, [r7, #4]
	if(thisMMC5983->sensor_status == MMC5983_SENSOR_FOUND)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	2b20      	cmp	r3, #32
 8003d6c:	d101      	bne.n	8003d72 <MMC5983_get_status+0x14>
	{
		return 1;
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <MMC5983_get_status+0x16>
	}
	else
	{
		return 0;
 8003d72:	2300      	movs	r3, #0
	}
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b002      	add	sp, #8
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <module_system_init>:
#include "system.h"

//----------------------------------
void module_system_init(System *thisSystem, SPI_HandleTypeDef * h_SPI, I2C_HandleTypeDef * h_I2C, TIM_HandleTypeDef * h_global_timer)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b086      	sub	sp, #24
 8003d80:	af02      	add	r7, sp, #8
 8003d82:	60f8      	str	r0, [r7, #12]
 8003d84:	60b9      	str	r1, [r7, #8]
 8003d86:	607a      	str	r2, [r7, #4]
 8003d88:	603b      	str	r3, [r7, #0]
	thisSystem->data_bus = internal_bus_create(GPIOB,  BUS0_Pin | BUS1_Pin | BUS2_Pin | BUS3_Pin | BUS4_Pin | BUS5_Pin | BUS6_Pin | BUS7_Pin,
 8003d8a:	23a0      	movs	r3, #160	; 0xa0
 8003d8c:	05da      	lsls	r2, r3, #23
 8003d8e:	4836      	ldr	r0, [pc, #216]	; (8003e68 <module_system_init+0xec>)
 8003d90:	2380      	movs	r3, #128	; 0x80
 8003d92:	01db      	lsls	r3, r3, #7
 8003d94:	9301      	str	r3, [sp, #4]
 8003d96:	23a0      	movs	r3, #160	; 0xa0
 8003d98:	05db      	lsls	r3, r3, #23
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2301      	movs	r3, #1
 8003d9e:	21ff      	movs	r1, #255	; 0xff
 8003da0:	f7ff f91a 	bl	8002fd8 <internal_bus_create>
 8003da4:	0002      	movs	r2, r0
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	21a0      	movs	r1, #160	; 0xa0
 8003daa:	505a      	str	r2, [r3, r1]
											BUS_CLK_GPIO_Port, BUS_CLK_Pin,
											BUS_C1_GPIO_Port, BUS_C1_Pin);

	thisSystem->ph_global_timer = global_timer_create(h_global_timer);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff fabb 	bl	800332a <global_timer_create>
 8003db4:	0002      	movs	r2, r0
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	218c      	movs	r1, #140	; 0x8c
 8003dba:	505a      	str	r2, [r3, r1]

	HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 8003dbc:	23a0      	movs	r3, #160	; 0xa0
 8003dbe:	05db      	lsls	r3, r3, #23
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	2140      	movs	r1, #64	; 0x40
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f7fd f9d3 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 8003dca:	23a0      	movs	r3, #160	; 0xa0
 8003dcc:	05db      	lsls	r3, r3, #23
 8003dce:	2201      	movs	r2, #1
 8003dd0:	2180      	movs	r1, #128	; 0x80
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fd f9cc 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 8003dd8:	2380      	movs	r3, #128	; 0x80
 8003dda:	0059      	lsls	r1, r3, #1
 8003ddc:	23a0      	movs	r3, #160	; 0xa0
 8003dde:	05db      	lsls	r3, r3, #23
 8003de0:	2201      	movs	r2, #1
 8003de2:	0018      	movs	r0, r3
 8003de4:	f7fd f9c4 	bl	8001170 <HAL_GPIO_WritePin>

	thisSystem->i2c_line = I2C_interface_create(h_I2C,100);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2164      	movs	r1, #100	; 0x64
 8003dec:	0018      	movs	r0, r3
 8003dee:	f7ff fcc9 	bl	8003784 <I2C_interface_create>
 8003df2:	0002      	movs	r2, r0
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	219c      	movs	r1, #156	; 0x9c
 8003df8:	505a      	str	r2, [r3, r1]

	// init sensors
	thisSystem->sensors[0] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_A_CS_GPIO_Port , SPI_A_CS_Pin , mag_int_a_GPIO_Port , mag_int_a_Pin);
 8003dfa:	23a0      	movs	r3, #160	; 0xa0
 8003dfc:	05da      	lsls	r2, r3, #23
 8003dfe:	68b9      	ldr	r1, [r7, #8]
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	9301      	str	r3, [sp, #4]
 8003e06:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <module_system_init+0xec>)
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	2340      	movs	r3, #64	; 0x40
 8003e0c:	2014      	movs	r0, #20
 8003e0e:	f7ff faca 	bl	80033a6 <magnetometer_create>
 8003e12:	0002      	movs	r2, r0
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2190      	movs	r1, #144	; 0x90
 8003e18:	505a      	str	r2, [r3, r1]
	thisSystem->sensors[1] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_B_CS_GPIO_Port , SPI_B_CS_Pin , mag_int_b_GPIO_Port , mag_int_b_Pin);
 8003e1a:	23a0      	movs	r3, #160	; 0xa0
 8003e1c:	05da      	lsls	r2, r3, #23
 8003e1e:	68b9      	ldr	r1, [r7, #8]
 8003e20:	2308      	movs	r3, #8
 8003e22:	9301      	str	r3, [sp, #4]
 8003e24:	23a0      	movs	r3, #160	; 0xa0
 8003e26:	05db      	lsls	r3, r3, #23
 8003e28:	9300      	str	r3, [sp, #0]
 8003e2a:	2380      	movs	r3, #128	; 0x80
 8003e2c:	2014      	movs	r0, #20
 8003e2e:	f7ff faba 	bl	80033a6 <magnetometer_create>
 8003e32:	0002      	movs	r2, r0
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2194      	movs	r1, #148	; 0x94
 8003e38:	505a      	str	r2, [r3, r1]
	thisSystem->sensors[2] = magnetometer_create(MAGNETOMETER_TYPE_MMC5983,h_SPI , SPI_C_CS_GPIO_Port , SPI_C_CS_Pin , mag_int_c_GPIO_Port , mag_int_c_Pin);
 8003e3a:	2380      	movs	r3, #128	; 0x80
 8003e3c:	0058      	lsls	r0, r3, #1
 8003e3e:	23a0      	movs	r3, #160	; 0xa0
 8003e40:	05da      	lsls	r2, r3, #23
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	2310      	movs	r3, #16
 8003e46:	9301      	str	r3, [sp, #4]
 8003e48:	23a0      	movs	r3, #160	; 0xa0
 8003e4a:	05db      	lsls	r3, r3, #23
 8003e4c:	9300      	str	r3, [sp, #0]
 8003e4e:	0003      	movs	r3, r0
 8003e50:	2014      	movs	r0, #20
 8003e52:	f7ff faa8 	bl	80033a6 <magnetometer_create>
 8003e56:	0002      	movs	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2198      	movs	r1, #152	; 0x98
 8003e5c:	505a      	str	r2, [r3, r1]

	return;
 8003e5e:	46c0      	nop			; (mov r8, r8)
}
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b004      	add	sp, #16
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	50000400 	.word	0x50000400

08003e6c <state_machine>:

void state_machine(System *thisSystem)
{
 8003e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e6e:	b085      	sub	sp, #20
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
	uint8_t b_read_permit =0;
 8003e74:	230f      	movs	r3, #15
 8003e76:	18fb      	adds	r3, r7, r3
 8003e78:	2200      	movs	r2, #0
 8003e7a:	701a      	strb	r2, [r3, #0]
	uint8_t byte_shifter = 0;
 8003e7c:	230e      	movs	r3, #14
 8003e7e:	18fb      	adds	r3, r7, r3
 8003e80:	2200      	movs	r2, #0
 8003e82:	701a      	strb	r2, [r3, #0]
	uint8_t this_byte = 0;
 8003e84:	230c      	movs	r3, #12
 8003e86:	18fb      	adds	r3, r7, r3
 8003e88:	2200      	movs	r2, #0
 8003e8a:	701a      	strb	r2, [r3, #0]
	while(1)
	{
		if(b_read_permit)
 8003e8c:	230f      	movs	r3, #15
 8003e8e:	18fb      	adds	r3, r7, r3
 8003e90:	781b      	ldrb	r3, [r3, #0]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d100      	bne.n	8003e98 <state_machine+0x2c>
 8003e96:	e139      	b.n	800410c <state_machine+0x2a0>
		{
			for (uint8_t sensor_num = 0; sensor_num < MODULE_SYSTEM_NUM_SENSORS; sensor_num++)
 8003e98:	230d      	movs	r3, #13
 8003e9a:	18fb      	adds	r3, r7, r3
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	701a      	strb	r2, [r3, #0]
 8003ea0:	e12a      	b.n	80040f8 <state_machine+0x28c>
			{
				if( (thisSystem->sensors[sensor_num]->sensor_status == MAGNETOMETER_OK) & thisSystem->sensors[sensor_num]->b_new_data_needed)
 8003ea2:	200d      	movs	r0, #13
 8003ea4:	183b      	adds	r3, r7, r0
 8003ea6:	781a      	ldrb	r2, [r3, #0]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3224      	adds	r2, #36	; 0x24
 8003eac:	0092      	lsls	r2, r2, #2
 8003eae:	58d3      	ldr	r3, [r2, r3]
 8003eb0:	7e1b      	ldrb	r3, [r3, #24]
 8003eb2:	3b51      	subs	r3, #81	; 0x51
 8003eb4:	425a      	negs	r2, r3
 8003eb6:	4153      	adcs	r3, r2
 8003eb8:	b2db      	uxtb	r3, r3
 8003eba:	0019      	movs	r1, r3
 8003ebc:	183b      	adds	r3, r7, r0
 8003ebe:	781a      	ldrb	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	3224      	adds	r2, #36	; 0x24
 8003ec4:	0092      	lsls	r2, r2, #2
 8003ec6:	58d3      	ldr	r3, [r2, r3]
 8003ec8:	7cdb      	ldrb	r3, [r3, #19]
 8003eca:	400b      	ands	r3, r1
 8003ecc:	d100      	bne.n	8003ed0 <state_machine+0x64>
 8003ece:	e10d      	b.n	80040ec <state_machine+0x280>
				{
					if(magnetometer_read(thisSystem->sensors[sensor_num]))
 8003ed0:	183b      	adds	r3, r7, r0
 8003ed2:	781a      	ldrb	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3224      	adds	r2, #36	; 0x24
 8003ed8:	0092      	lsls	r2, r2, #2
 8003eda:	58d3      	ldr	r3, [r2, r3]
 8003edc:	0018      	movs	r0, r3
 8003ede:	f7ff fbc7 	bl	8003670 <magnetometer_read>
 8003ee2:	1e03      	subs	r3, r0, #0
 8003ee4:	d100      	bne.n	8003ee8 <state_machine+0x7c>
 8003ee6:	e101      	b.n	80040ec <state_machine+0x280>
					{
						byte_shifter = 0;
 8003ee8:	230e      	movs	r3, #14
 8003eea:	18fb      	adds	r3, r7, r3
 8003eec:	2200      	movs	r2, #0
 8003eee:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 5)
 8003ef0:	e03a      	b.n	8003f68 <state_machine+0xfc>
						{
							//output_data[byte_shifter + sensor_num * 11] = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
							this_byte = *(((uint8_t*)&thisSystem->sensors[sensor_num]->time_stamp) + byte_shifter);
 8003ef2:	260d      	movs	r6, #13
 8003ef4:	19bb      	adds	r3, r7, r6
 8003ef6:	781a      	ldrb	r2, [r3, #0]
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	3224      	adds	r2, #36	; 0x24
 8003efc:	0092      	lsls	r2, r2, #2
 8003efe:	58d3      	ldr	r3, [r2, r3]
 8003f00:	330b      	adds	r3, #11
 8003f02:	001a      	movs	r2, r3
 8003f04:	210e      	movs	r1, #14
 8003f06:	187b      	adds	r3, r7, r1
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	18d2      	adds	r2, r2, r3
 8003f0c:	200c      	movs	r0, #12
 8003f0e:	183b      	adds	r3, r7, r0
 8003f10:	7812      	ldrb	r2, [r2, #0]
 8003f12:	701a      	strb	r2, [r3, #0]
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	22a0      	movs	r2, #160	; 0xa0
 8003f18:	589b      	ldr	r3, [r3, r2]
 8003f1a:	889b      	ldrh	r3, [r3, #4]
 8003f1c:	001a      	movs	r2, r3
 8003f1e:	183b      	adds	r3, r7, r0
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	4013      	ands	r3, r2
 8003f24:	001c      	movs	r4, r3
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	22a0      	movs	r2, #160	; 0xa0
 8003f2a:	589b      	ldr	r3, [r3, r2]
 8003f2c:	889b      	ldrh	r3, [r3, #4]
 8003f2e:	001a      	movs	r2, r3
 8003f30:	183b      	adds	r3, r7, r0
 8003f32:	781b      	ldrb	r3, [r3, #0]
 8003f34:	43db      	mvns	r3, r3
 8003f36:	4013      	ands	r3, r2
 8003f38:	041b      	lsls	r3, r3, #16
 8003f3a:	0018      	movs	r0, r3
 8003f3c:	000d      	movs	r5, r1
 8003f3e:	187b      	adds	r3, r7, r1
 8003f40:	7819      	ldrb	r1, [r3, #0]
 8003f42:	19bb      	adds	r3, r7, r6
 8003f44:	781a      	ldrb	r2, [r3, #0]
 8003f46:	0013      	movs	r3, r2
 8003f48:	009b      	lsls	r3, r3, #2
 8003f4a:	189b      	adds	r3, r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	189b      	adds	r3, r3, r2
 8003f50:	18ca      	adds	r2, r1, r3
 8003f52:	0021      	movs	r1, r4
 8003f54:	4301      	orrs	r1, r0
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	3202      	adds	r2, #2
 8003f5a:	0092      	lsls	r2, r2, #2
 8003f5c:	50d1      	str	r1, [r2, r3]
							byte_shifter++;
 8003f5e:	197b      	adds	r3, r7, r5
 8003f60:	781a      	ldrb	r2, [r3, #0]
 8003f62:	197b      	adds	r3, r7, r5
 8003f64:	3201      	adds	r2, #1
 8003f66:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 5)
 8003f68:	230e      	movs	r3, #14
 8003f6a:	18fb      	adds	r3, r7, r3
 8003f6c:	781b      	ldrb	r3, [r3, #0]
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d9bf      	bls.n	8003ef2 <state_machine+0x86>
						}

						while (byte_shifter < 11)
 8003f72:	e03a      	b.n	8003fea <state_machine+0x17e>
						{
							//output_data[byte_shifter + sensor_num * 11] = *(((uint8_t*)thisSystem->sensors[sensor_num]->Readings) + (byte_shifter - 5));
							this_byte = *(((uint8_t*)thisSystem->sensors[sensor_num]->Readings) + (byte_shifter - 5));
 8003f74:	260d      	movs	r6, #13
 8003f76:	19bb      	adds	r3, r7, r6
 8003f78:	781a      	ldrb	r2, [r3, #0]
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	3224      	adds	r2, #36	; 0x24
 8003f7e:	0092      	lsls	r2, r2, #2
 8003f80:	58d3      	ldr	r3, [r2, r3]
 8003f82:	1d5a      	adds	r2, r3, #5
 8003f84:	210e      	movs	r1, #14
 8003f86:	187b      	adds	r3, r7, r1
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b05      	subs	r3, #5
 8003f8c:	18d2      	adds	r2, r2, r3
 8003f8e:	200c      	movs	r0, #12
 8003f90:	183b      	adds	r3, r7, r0
 8003f92:	7812      	ldrb	r2, [r2, #0]
 8003f94:	701a      	strb	r2, [r3, #0]
							thisSystem->bus_output_buffer[byte_shifter + sensor_num * 11] = (uint32_t)(thisSystem->data_bus->bus_mask & this_byte)  | ((thisSystem->data_bus->bus_mask & ~this_byte)  << 16);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	22a0      	movs	r2, #160	; 0xa0
 8003f9a:	589b      	ldr	r3, [r3, r2]
 8003f9c:	889b      	ldrh	r3, [r3, #4]
 8003f9e:	001a      	movs	r2, r3
 8003fa0:	183b      	adds	r3, r7, r0
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	4013      	ands	r3, r2
 8003fa6:	001c      	movs	r4, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	22a0      	movs	r2, #160	; 0xa0
 8003fac:	589b      	ldr	r3, [r3, r2]
 8003fae:	889b      	ldrh	r3, [r3, #4]
 8003fb0:	001a      	movs	r2, r3
 8003fb2:	183b      	adds	r3, r7, r0
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	43db      	mvns	r3, r3
 8003fb8:	4013      	ands	r3, r2
 8003fba:	041b      	lsls	r3, r3, #16
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	000d      	movs	r5, r1
 8003fc0:	187b      	adds	r3, r7, r1
 8003fc2:	7819      	ldrb	r1, [r3, #0]
 8003fc4:	19bb      	adds	r3, r7, r6
 8003fc6:	781a      	ldrb	r2, [r3, #0]
 8003fc8:	0013      	movs	r3, r2
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	189b      	adds	r3, r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	189b      	adds	r3, r3, r2
 8003fd2:	18ca      	adds	r2, r1, r3
 8003fd4:	0021      	movs	r1, r4
 8003fd6:	4301      	orrs	r1, r0
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	3202      	adds	r2, #2
 8003fdc:	0092      	lsls	r2, r2, #2
 8003fde:	50d1      	str	r1, [r2, r3]
							byte_shifter++;
 8003fe0:	197b      	adds	r3, r7, r5
 8003fe2:	781a      	ldrb	r2, [r3, #0]
 8003fe4:	197b      	adds	r3, r7, r5
 8003fe6:	3201      	adds	r2, #1
 8003fe8:	701a      	strb	r2, [r3, #0]
						while (byte_shifter < 11)
 8003fea:	230e      	movs	r3, #14
 8003fec:	18fb      	adds	r3, r7, r3
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b0a      	cmp	r3, #10
 8003ff2:	d9bf      	bls.n	8003f74 <state_machine+0x108>
						}

						//Declare that new data is no longer needed
						thisSystem->sensors[sensor_num]->b_new_data_needed = 0;
 8003ff4:	240d      	movs	r4, #13
 8003ff6:	193b      	adds	r3, r7, r4
 8003ff8:	781a      	ldrb	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	3224      	adds	r2, #36	; 0x24
 8003ffe:	0092      	lsls	r2, r2, #2
 8004000:	58d3      	ldr	r3, [r2, r3]
 8004002:	2200      	movs	r2, #0
 8004004:	74da      	strb	r2, [r3, #19]
						//Begin a new data conversion immediately
						//TODO we should not directly touch anything in low layer lib evrythingh must go through magnetometer.c  otherwise there we can not have a sensor agnostic architect
						MMC5983_register_write((MMC5983_t*)thisSystem->sensors[sensor_num]->magnetometer, MMC5983_INTERNALCONTROL0, MMC5983_CTRL0_TM_M);
 8004006:	193b      	adds	r3, r7, r4
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	3224      	adds	r2, #36	; 0x24
 800400e:	0092      	lsls	r2, r2, #2
 8004010:	58d3      	ldr	r3, [r2, r3]
 8004012:	785a      	ldrb	r2, [r3, #1]
 8004014:	7899      	ldrb	r1, [r3, #2]
 8004016:	0209      	lsls	r1, r1, #8
 8004018:	430a      	orrs	r2, r1
 800401a:	78d9      	ldrb	r1, [r3, #3]
 800401c:	0409      	lsls	r1, r1, #16
 800401e:	430a      	orrs	r2, r1
 8004020:	791b      	ldrb	r3, [r3, #4]
 8004022:	061b      	lsls	r3, r3, #24
 8004024:	4313      	orrs	r3, r2
 8004026:	2201      	movs	r2, #1
 8004028:	2109      	movs	r1, #9
 800402a:	0018      	movs	r0, r3
 800402c:	f7ff fe17 	bl	8003c5e <MMC5983_register_write>
						//Timestamp the new data conversion you ordered
						thisSystem->sensors[sensor_num]->time_stamp = get_global_timer(thisSystem->ph_global_timer);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	228c      	movs	r2, #140	; 0x8c
 8004034:	5899      	ldr	r1, [r3, r2]
 8004036:	193b      	adds	r3, r7, r4
 8004038:	781a      	ldrb	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3224      	adds	r2, #36	; 0x24
 800403e:	0092      	lsls	r2, r2, #2
 8004040:	58d4      	ldr	r4, [r2, r3]
 8004042:	0008      	movs	r0, r1
 8004044:	f7ff f98a 	bl	800335c <get_global_timer>
 8004048:	0023      	movs	r3, r4
 800404a:	330b      	adds	r3, #11
 800404c:	22ff      	movs	r2, #255	; 0xff
 800404e:	4002      	ands	r2, r0
 8004050:	0015      	movs	r5, r2
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	2400      	movs	r4, #0
 8004056:	4022      	ands	r2, r4
 8004058:	1c14      	adds	r4, r2, #0
 800405a:	1c2a      	adds	r2, r5, #0
 800405c:	4322      	orrs	r2, r4
 800405e:	701a      	strb	r2, [r3, #0]
 8004060:	0a02      	lsrs	r2, r0, #8
 8004062:	24ff      	movs	r4, #255	; 0xff
 8004064:	4022      	ands	r2, r4
 8004066:	0015      	movs	r5, r2
 8004068:	785a      	ldrb	r2, [r3, #1]
 800406a:	2400      	movs	r4, #0
 800406c:	4022      	ands	r2, r4
 800406e:	1c14      	adds	r4, r2, #0
 8004070:	1c2a      	adds	r2, r5, #0
 8004072:	4322      	orrs	r2, r4
 8004074:	705a      	strb	r2, [r3, #1]
 8004076:	0c02      	lsrs	r2, r0, #16
 8004078:	24ff      	movs	r4, #255	; 0xff
 800407a:	4022      	ands	r2, r4
 800407c:	0015      	movs	r5, r2
 800407e:	789a      	ldrb	r2, [r3, #2]
 8004080:	2400      	movs	r4, #0
 8004082:	4022      	ands	r2, r4
 8004084:	1c14      	adds	r4, r2, #0
 8004086:	1c2a      	adds	r2, r5, #0
 8004088:	4322      	orrs	r2, r4
 800408a:	709a      	strb	r2, [r3, #2]
 800408c:	0e05      	lsrs	r5, r0, #24
 800408e:	78da      	ldrb	r2, [r3, #3]
 8004090:	2400      	movs	r4, #0
 8004092:	4022      	ands	r2, r4
 8004094:	1c14      	adds	r4, r2, #0
 8004096:	1c2a      	adds	r2, r5, #0
 8004098:	4322      	orrs	r2, r4
 800409a:	70da      	strb	r2, [r3, #3]
 800409c:	22ff      	movs	r2, #255	; 0xff
 800409e:	400a      	ands	r2, r1
 80040a0:	0015      	movs	r5, r2
 80040a2:	791a      	ldrb	r2, [r3, #4]
 80040a4:	2400      	movs	r4, #0
 80040a6:	4022      	ands	r2, r4
 80040a8:	1c14      	adds	r4, r2, #0
 80040aa:	1c2a      	adds	r2, r5, #0
 80040ac:	4322      	orrs	r2, r4
 80040ae:	711a      	strb	r2, [r3, #4]
 80040b0:	0a0a      	lsrs	r2, r1, #8
 80040b2:	24ff      	movs	r4, #255	; 0xff
 80040b4:	4022      	ands	r2, r4
 80040b6:	0015      	movs	r5, r2
 80040b8:	795a      	ldrb	r2, [r3, #5]
 80040ba:	2400      	movs	r4, #0
 80040bc:	4022      	ands	r2, r4
 80040be:	1c14      	adds	r4, r2, #0
 80040c0:	1c2a      	adds	r2, r5, #0
 80040c2:	4322      	orrs	r2, r4
 80040c4:	715a      	strb	r2, [r3, #5]
 80040c6:	0c0a      	lsrs	r2, r1, #16
 80040c8:	24ff      	movs	r4, #255	; 0xff
 80040ca:	4022      	ands	r2, r4
 80040cc:	0015      	movs	r5, r2
 80040ce:	799a      	ldrb	r2, [r3, #6]
 80040d0:	2400      	movs	r4, #0
 80040d2:	4022      	ands	r2, r4
 80040d4:	1c14      	adds	r4, r2, #0
 80040d6:	1c2a      	adds	r2, r5, #0
 80040d8:	4322      	orrs	r2, r4
 80040da:	719a      	strb	r2, [r3, #6]
 80040dc:	0e08      	lsrs	r0, r1, #24
 80040de:	79da      	ldrb	r2, [r3, #7]
 80040e0:	2100      	movs	r1, #0
 80040e2:	400a      	ands	r2, r1
 80040e4:	1c11      	adds	r1, r2, #0
 80040e6:	1c02      	adds	r2, r0, #0
 80040e8:	430a      	orrs	r2, r1
 80040ea:	71da      	strb	r2, [r3, #7]
			for (uint8_t sensor_num = 0; sensor_num < MODULE_SYSTEM_NUM_SENSORS; sensor_num++)
 80040ec:	210d      	movs	r1, #13
 80040ee:	187b      	adds	r3, r7, r1
 80040f0:	781a      	ldrb	r2, [r3, #0]
 80040f2:	187b      	adds	r3, r7, r1
 80040f4:	3201      	adds	r2, #1
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	230d      	movs	r3, #13
 80040fa:	18fb      	adds	r3, r7, r3
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d800      	bhi.n	8004104 <state_machine+0x298>
 8004102:	e6ce      	b.n	8003ea2 <state_machine+0x36>
						//thisSystem->sensors[sensor_num]->time_stamp++;

					} //Check if the magnetometer has new data ready
				} //Check if magnetometer is functional and if new data is needed
			} //Sensor loop
			b_read_permit =0;
 8004104:	230f      	movs	r3, #15
 8004106:	18fb      	adds	r3, r7, r3
 8004108:	2200      	movs	r2, #0
 800410a:	701a      	strb	r2, [r3, #0]
		}
		//------------------------------------------
		if(thisSystem->i2c_line->new_command_is_ready_flag)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	229c      	movs	r2, #156	; 0x9c
 8004110:	589b      	ldr	r3, [r3, r2]
 8004112:	785b      	ldrb	r3, [r3, #1]
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d100      	bne.n	800411c <state_machine+0x2b0>
 800411a:	e6b7      	b.n	8003e8c <state_machine+0x20>
		{
			switch(thisSystem->i2c_line->receiveBuffer[0])
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	229c      	movs	r2, #156	; 0x9c
 8004120:	589b      	ldr	r3, [r3, r2]
 8004122:	789b      	ldrb	r3, [r3, #2]
 8004124:	b2db      	uxtb	r3, r3
 8004126:	3b0a      	subs	r3, #10
 8004128:	2b5e      	cmp	r3, #94	; 0x5e
 800412a:	d900      	bls.n	800412e <state_machine+0x2c2>
 800412c:	e171      	b.n	8004412 <state_machine+0x5a6>
 800412e:	009a      	lsls	r2, r3, #2
 8004130:	4be1      	ldr	r3, [pc, #900]	; (80044b8 <state_machine+0x64c>)
 8004132:	18d3      	adds	r3, r2, r3
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	469f      	mov	pc, r3
			{
				//-------------------------------
				case I2C_PACKET_SEND_DATA_FRAME:
				{
					thisSystem->sensors[0]->b_new_data_needed = 1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2290      	movs	r2, #144	; 0x90
 800413c:	589b      	ldr	r3, [r3, r2]
 800413e:	2201      	movs	r2, #1
 8004140:	74da      	strb	r2, [r3, #19]
					thisSystem->sensors[1]->b_new_data_needed = 1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2294      	movs	r2, #148	; 0x94
 8004146:	589b      	ldr	r3, [r3, r2]
 8004148:	2201      	movs	r2, #1
 800414a:	74da      	strb	r2, [r3, #19]
					thisSystem->sensors[2]->b_new_data_needed = 1;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2298      	movs	r2, #152	; 0x98
 8004150:	589b      	ldr	r3, [r3, r2]
 8004152:	2201      	movs	r2, #1
 8004154:	74da      	strb	r2, [r3, #19]
					break;
 8004156:	e15c      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BOOT0_LOW:
				{
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_RESET);
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	021b      	lsls	r3, r3, #8
 800415c:	48d7      	ldr	r0, [pc, #860]	; (80044bc <state_machine+0x650>)
 800415e:	2200      	movs	r2, #0
 8004160:	0019      	movs	r1, r3
 8004162:	f7fd f805 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 8004166:	e154      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BOOT0_HIGH:
				{
					  HAL_GPIO_WritePin(CHN_OUT_BT0_GPIO_Port, CHN_OUT_BT0_Pin, GPIO_PIN_SET);
 8004168:	2380      	movs	r3, #128	; 0x80
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	48d3      	ldr	r0, [pc, #844]	; (80044bc <state_machine+0x650>)
 800416e:	2201      	movs	r2, #1
 8004170:	0019      	movs	r1, r3
 8004172:	f7fc fffd 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 8004176:	e14c      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_RESET_LOW:
				{
					  HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_RESET);
 8004178:	2380      	movs	r3, #128	; 0x80
 800417a:	01db      	lsls	r3, r3, #7
 800417c:	48cf      	ldr	r0, [pc, #828]	; (80044bc <state_machine+0x650>)
 800417e:	2200      	movs	r2, #0
 8004180:	0019      	movs	r1, r3
 8004182:	f7fc fff5 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 8004186:	e144      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_RESET_HIGH:
				{
					 HAL_GPIO_WritePin(CHN_OUT_RST_GPIO_Port, CHN_OUT_RST_Pin, GPIO_PIN_SET);
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	01db      	lsls	r3, r3, #7
 800418c:	48cb      	ldr	r0, [pc, #812]	; (80044bc <state_machine+0x650>)
 800418e:	2201      	movs	r2, #1
 8004190:	0019      	movs	r1, r3
 8004192:	f7fc ffed 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 8004196:	e13c      	b.n	8004412 <state_machine+0x5a6>
				}
				//---------this is a code for testing LED and making fun demo we can not have them in production release version
				//---------since it may make serious conflicts and issue with magnetometer reader and scheduler ----------------
				case I2C_PACKET_SET_RED_ON:
				{
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 8004198:	2380      	movs	r3, #128	; 0x80
 800419a:	0059      	lsls	r1, r3, #1
 800419c:	23a0      	movs	r3, #160	; 0xa0
 800419e:	05db      	lsls	r3, r3, #23
 80041a0:	2200      	movs	r2, #0
 80041a2:	0018      	movs	r0, r3
 80041a4:	f7fc ffe4 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80041a8:	e133      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_RED_OFF:
				{
					  HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 80041aa:	2380      	movs	r3, #128	; 0x80
 80041ac:	0059      	lsls	r1, r3, #1
 80041ae:	23a0      	movs	r3, #160	; 0xa0
 80041b0:	05db      	lsls	r3, r3, #23
 80041b2:	2201      	movs	r2, #1
 80041b4:	0018      	movs	r0, r3
 80041b6:	f7fc ffdb 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80041ba:	e12a      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_GREEN_ON:
				{
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 80041bc:	23a0      	movs	r3, #160	; 0xa0
 80041be:	05db      	lsls	r3, r3, #23
 80041c0:	2200      	movs	r2, #0
 80041c2:	2140      	movs	r1, #64	; 0x40
 80041c4:	0018      	movs	r0, r3
 80041c6:	f7fc ffd3 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80041ca:	e122      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_GREEN_OFF:
				{
					  HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 80041cc:	23a0      	movs	r3, #160	; 0xa0
 80041ce:	05db      	lsls	r3, r3, #23
 80041d0:	2201      	movs	r2, #1
 80041d2:	2140      	movs	r1, #64	; 0x40
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7fc ffcb 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80041da:	e11a      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_ON:
				{
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 80041dc:	23a0      	movs	r3, #160	; 0xa0
 80041de:	05db      	lsls	r3, r3, #23
 80041e0:	2200      	movs	r2, #0
 80041e2:	2180      	movs	r1, #128	; 0x80
 80041e4:	0018      	movs	r0, r3
 80041e6:	f7fc ffc3 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80041ea:	e112      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_PACKET_SET_BLUE_OFF:
				{
					  HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 80041ec:	23a0      	movs	r3, #160	; 0xa0
 80041ee:	05db      	lsls	r3, r3, #23
 80041f0:	2201      	movs	r2, #1
 80041f2:	2180      	movs	r1, #128	; 0x80
 80041f4:	0018      	movs	r0, r3
 80041f6:	f7fc ffbb 	bl	8001170 <HAL_GPIO_WritePin>
					break;
 80041fa:	e10a      	b.n	8004412 <state_machine+0x5a6>
				}
				case I2C_PACKET_RESET_GLOBAL_TIMER:
				{
					thisSystem->ph_global_timer->h_timer->Instance->CNT = 0;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	228c      	movs	r2, #140	; 0x8c
 8004200:	589b      	ldr	r3, [r3, r2]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2200      	movs	r2, #0
 8004208:	625a      	str	r2, [r3, #36]	; 0x24
					thisSystem->ph_global_timer->overflow_counter = 0;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	228c      	movs	r2, #140	; 0x8c
 800420e:	589b      	ldr	r3, [r3, r2]
 8004210:	2200      	movs	r2, #0
 8004212:	701a      	strb	r2, [r3, #0]
					break;
 8004214:	e0fd      	b.n	8004412 <state_machine+0x5a6>
				}

				//----------test cases---------------------
				case I2C_PACKET_SENSOR_TEST_ROUTINE:
				{
					if(thisSystem->sensors[0]->sensor_status == MAGNETOMETER_FAULTY )
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2290      	movs	r2, #144	; 0x90
 800421a:	589b      	ldr	r3, [r3, r2]
 800421c:	7e1b      	ldrb	r3, [r3, #24]
 800421e:	2b50      	cmp	r3, #80	; 0x50
 8004220:	d113      	bne.n	800424a <state_machine+0x3de>
					{
						HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_RESET);
 8004222:	23a0      	movs	r3, #160	; 0xa0
 8004224:	05db      	lsls	r3, r3, #23
 8004226:	2200      	movs	r2, #0
 8004228:	2140      	movs	r1, #64	; 0x40
 800422a:	0018      	movs	r0, r3
 800422c:	f7fc ffa0 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8004230:	20c8      	movs	r0, #200	; 0xc8
 8004232:	f7fc fd17 	bl	8000c64 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_A_CS_GPIO_Port, SPI_A_CS_Pin, GPIO_PIN_SET);
 8004236:	23a0      	movs	r3, #160	; 0xa0
 8004238:	05db      	lsls	r3, r3, #23
 800423a:	2201      	movs	r2, #1
 800423c:	2140      	movs	r1, #64	; 0x40
 800423e:	0018      	movs	r0, r3
 8004240:	f7fc ff96 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8004244:	20fa      	movs	r0, #250	; 0xfa
 8004246:	f7fc fd0d 	bl	8000c64 <HAL_Delay>
					}
					if(thisSystem->sensors[1]->sensor_status == MAGNETOMETER_FAULTY )
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2294      	movs	r2, #148	; 0x94
 800424e:	589b      	ldr	r3, [r3, r2]
 8004250:	7e1b      	ldrb	r3, [r3, #24]
 8004252:	2b50      	cmp	r3, #80	; 0x50
 8004254:	d113      	bne.n	800427e <state_machine+0x412>
					{
						HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_RESET);
 8004256:	23a0      	movs	r3, #160	; 0xa0
 8004258:	05db      	lsls	r3, r3, #23
 800425a:	2200      	movs	r2, #0
 800425c:	2180      	movs	r1, #128	; 0x80
 800425e:	0018      	movs	r0, r3
 8004260:	f7fc ff86 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 8004264:	20c8      	movs	r0, #200	; 0xc8
 8004266:	f7fc fcfd 	bl	8000c64 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_B_CS_GPIO_Port, SPI_B_CS_Pin, GPIO_PIN_SET);
 800426a:	23a0      	movs	r3, #160	; 0xa0
 800426c:	05db      	lsls	r3, r3, #23
 800426e:	2201      	movs	r2, #1
 8004270:	2180      	movs	r1, #128	; 0x80
 8004272:	0018      	movs	r0, r3
 8004274:	f7fc ff7c 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 8004278:	20fa      	movs	r0, #250	; 0xfa
 800427a:	f7fc fcf3 	bl	8000c64 <HAL_Delay>
					}
					if(thisSystem->sensors[2]->sensor_status == MAGNETOMETER_FAULTY )
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2298      	movs	r2, #152	; 0x98
 8004282:	589b      	ldr	r3, [r3, r2]
 8004284:	7e1b      	ldrb	r3, [r3, #24]
 8004286:	2b50      	cmp	r3, #80	; 0x50
 8004288:	d115      	bne.n	80042b6 <state_machine+0x44a>
					{
						HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_RESET);
 800428a:	2380      	movs	r3, #128	; 0x80
 800428c:	0059      	lsls	r1, r3, #1
 800428e:	23a0      	movs	r3, #160	; 0xa0
 8004290:	05db      	lsls	r3, r3, #23
 8004292:	2200      	movs	r2, #0
 8004294:	0018      	movs	r0, r3
 8004296:	f7fc ff6b 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(200);
 800429a:	20c8      	movs	r0, #200	; 0xc8
 800429c:	f7fc fce2 	bl	8000c64 <HAL_Delay>
						HAL_GPIO_WritePin(SPI_C_CS_GPIO_Port, SPI_C_CS_Pin, GPIO_PIN_SET);
 80042a0:	2380      	movs	r3, #128	; 0x80
 80042a2:	0059      	lsls	r1, r3, #1
 80042a4:	23a0      	movs	r3, #160	; 0xa0
 80042a6:	05db      	lsls	r3, r3, #23
 80042a8:	2201      	movs	r2, #1
 80042aa:	0018      	movs	r0, r3
 80042ac:	f7fc ff60 	bl	8001170 <HAL_GPIO_WritePin>
						HAL_Delay(250);
 80042b0:	20fa      	movs	r0, #250	; 0xfa
 80042b2:	f7fc fcd7 	bl	8000c64 <HAL_Delay>
					}
					//after this point we can not use HAL Delay function we disable that because systick interrupt make unpredictable timing for time sensitive procedures
					HAL_SuspendTick();
 80042b6:	f7fc fcf9 	bl	8000cac <HAL_SuspendTick>
					break;
 80042ba:	e0aa      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------------------
				case I2C_PACKET_BEGIN_MAG_CONVERSION:
				{
					b_read_permit =1;
 80042bc:	230f      	movs	r3, #15
 80042be:	18fb      	adds	r3, r7, r3
 80042c0:	2201      	movs	r2, #1
 80042c2:	701a      	strb	r2, [r3, #0]
					break;
 80042c4:	e0a5      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSOR1_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2290      	movs	r2, #144	; 0x90
 80042ca:	589b      	ldr	r3, [r3, r2]
 80042cc:	785a      	ldrb	r2, [r3, #1]
 80042ce:	7899      	ldrb	r1, [r3, #2]
 80042d0:	0209      	lsls	r1, r1, #8
 80042d2:	430a      	orrs	r2, r1
 80042d4:	78d9      	ldrb	r1, [r3, #3]
 80042d6:	0409      	lsls	r1, r1, #16
 80042d8:	430a      	orrs	r2, r1
 80042da:	791b      	ldrb	r3, [r3, #4]
 80042dc:	061b      	lsls	r3, r3, #24
 80042de:	4313      	orrs	r3, r2
 80042e0:	0018      	movs	r0, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	229c      	movs	r2, #156	; 0x9c
 80042e6:	589b      	ldr	r3, [r3, r2]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	b2d9      	uxtb	r1, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	229c      	movs	r2, #156	; 0x9c
 80042f0:	589b      	ldr	r3, [r3, r2]
 80042f2:	791b      	ldrb	r3, [r3, #4]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	001a      	movs	r2, r3
 80042f8:	f7ff f9fe 	bl	80036f8 <magnetometer_direct_register_write>
					break;
 80042fc:	e089      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSOR2_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2294      	movs	r2, #148	; 0x94
 8004302:	589b      	ldr	r3, [r3, r2]
 8004304:	785a      	ldrb	r2, [r3, #1]
 8004306:	7899      	ldrb	r1, [r3, #2]
 8004308:	0209      	lsls	r1, r1, #8
 800430a:	430a      	orrs	r2, r1
 800430c:	78d9      	ldrb	r1, [r3, #3]
 800430e:	0409      	lsls	r1, r1, #16
 8004310:	430a      	orrs	r2, r1
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	061b      	lsls	r3, r3, #24
 8004316:	4313      	orrs	r3, r2
 8004318:	0018      	movs	r0, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	229c      	movs	r2, #156	; 0x9c
 800431e:	589b      	ldr	r3, [r3, r2]
 8004320:	78db      	ldrb	r3, [r3, #3]
 8004322:	b2d9      	uxtb	r1, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	229c      	movs	r2, #156	; 0x9c
 8004328:	589b      	ldr	r3, [r3, r2]
 800432a:	791b      	ldrb	r3, [r3, #4]
 800432c:	b2db      	uxtb	r3, r3
 800432e:	001a      	movs	r2, r3
 8004330:	f7ff f9e2 	bl	80036f8 <magnetometer_direct_register_write>
					break;
 8004334:	e06d      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSOR3_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2298      	movs	r2, #152	; 0x98
 800433a:	589b      	ldr	r3, [r3, r2]
 800433c:	785a      	ldrb	r2, [r3, #1]
 800433e:	7899      	ldrb	r1, [r3, #2]
 8004340:	0209      	lsls	r1, r1, #8
 8004342:	430a      	orrs	r2, r1
 8004344:	78d9      	ldrb	r1, [r3, #3]
 8004346:	0409      	lsls	r1, r1, #16
 8004348:	430a      	orrs	r2, r1
 800434a:	791b      	ldrb	r3, [r3, #4]
 800434c:	061b      	lsls	r3, r3, #24
 800434e:	4313      	orrs	r3, r2
 8004350:	0018      	movs	r0, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	229c      	movs	r2, #156	; 0x9c
 8004356:	589b      	ldr	r3, [r3, r2]
 8004358:	78db      	ldrb	r3, [r3, #3]
 800435a:	b2d9      	uxtb	r1, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	229c      	movs	r2, #156	; 0x9c
 8004360:	589b      	ldr	r3, [r3, r2]
 8004362:	791b      	ldrb	r3, [r3, #4]
 8004364:	b2db      	uxtb	r3, r3
 8004366:	001a      	movs	r2, r3
 8004368:	f7ff f9c6 	bl	80036f8 <magnetometer_direct_register_write>
					break;
 800436c:	e051      	b.n	8004412 <state_machine+0x5a6>
				}
				//-------------------------------
				case I2C_SET_SENSORS_REGISTER:
				{
					magnetometer_direct_register_write(thisSystem->sensors[0]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2290      	movs	r2, #144	; 0x90
 8004372:	589b      	ldr	r3, [r3, r2]
 8004374:	785a      	ldrb	r2, [r3, #1]
 8004376:	7899      	ldrb	r1, [r3, #2]
 8004378:	0209      	lsls	r1, r1, #8
 800437a:	430a      	orrs	r2, r1
 800437c:	78d9      	ldrb	r1, [r3, #3]
 800437e:	0409      	lsls	r1, r1, #16
 8004380:	430a      	orrs	r2, r1
 8004382:	791b      	ldrb	r3, [r3, #4]
 8004384:	061b      	lsls	r3, r3, #24
 8004386:	4313      	orrs	r3, r2
 8004388:	0018      	movs	r0, r3
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	229c      	movs	r2, #156	; 0x9c
 800438e:	589b      	ldr	r3, [r3, r2]
 8004390:	78db      	ldrb	r3, [r3, #3]
 8004392:	b2d9      	uxtb	r1, r3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	229c      	movs	r2, #156	; 0x9c
 8004398:	589b      	ldr	r3, [r3, r2]
 800439a:	791b      	ldrb	r3, [r3, #4]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	001a      	movs	r2, r3
 80043a0:	f7ff f9aa 	bl	80036f8 <magnetometer_direct_register_write>
					magnetometer_direct_register_write(thisSystem->sensors[1]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2294      	movs	r2, #148	; 0x94
 80043a8:	589b      	ldr	r3, [r3, r2]
 80043aa:	785a      	ldrb	r2, [r3, #1]
 80043ac:	7899      	ldrb	r1, [r3, #2]
 80043ae:	0209      	lsls	r1, r1, #8
 80043b0:	430a      	orrs	r2, r1
 80043b2:	78d9      	ldrb	r1, [r3, #3]
 80043b4:	0409      	lsls	r1, r1, #16
 80043b6:	430a      	orrs	r2, r1
 80043b8:	791b      	ldrb	r3, [r3, #4]
 80043ba:	061b      	lsls	r3, r3, #24
 80043bc:	4313      	orrs	r3, r2
 80043be:	0018      	movs	r0, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	229c      	movs	r2, #156	; 0x9c
 80043c4:	589b      	ldr	r3, [r3, r2]
 80043c6:	78db      	ldrb	r3, [r3, #3]
 80043c8:	b2d9      	uxtb	r1, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	229c      	movs	r2, #156	; 0x9c
 80043ce:	589b      	ldr	r3, [r3, r2]
 80043d0:	791b      	ldrb	r3, [r3, #4]
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	001a      	movs	r2, r3
 80043d6:	f7ff f98f 	bl	80036f8 <magnetometer_direct_register_write>
					magnetometer_direct_register_write(thisSystem->sensors[2]->magnetometer,(uint8_t)thisSystem->i2c_line->receiveBuffer[1],(uint8_t)thisSystem->i2c_line->receiveBuffer[2]);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2298      	movs	r2, #152	; 0x98
 80043de:	589b      	ldr	r3, [r3, r2]
 80043e0:	785a      	ldrb	r2, [r3, #1]
 80043e2:	7899      	ldrb	r1, [r3, #2]
 80043e4:	0209      	lsls	r1, r1, #8
 80043e6:	430a      	orrs	r2, r1
 80043e8:	78d9      	ldrb	r1, [r3, #3]
 80043ea:	0409      	lsls	r1, r1, #16
 80043ec:	430a      	orrs	r2, r1
 80043ee:	791b      	ldrb	r3, [r3, #4]
 80043f0:	061b      	lsls	r3, r3, #24
 80043f2:	4313      	orrs	r3, r2
 80043f4:	0018      	movs	r0, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	229c      	movs	r2, #156	; 0x9c
 80043fa:	589b      	ldr	r3, [r3, r2]
 80043fc:	78db      	ldrb	r3, [r3, #3]
 80043fe:	b2d9      	uxtb	r1, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	229c      	movs	r2, #156	; 0x9c
 8004404:	589b      	ldr	r3, [r3, r2]
 8004406:	791b      	ldrb	r3, [r3, #4]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	001a      	movs	r2, r3
 800440c:	f7ff f974 	bl	80036f8 <magnetometer_direct_register_write>
					break;
 8004410:	46c0      	nop			; (mov r8, r8)
				}
			}
			//-------- if we get any data higher than 0x80 in the first byte it mean it is a new address
			if ( thisSystem->i2c_line->receiveBuffer[0] > I2C_PACKET_SET_NEW_ADDRESS )
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	229c      	movs	r2, #156	; 0x9c
 8004416:	589b      	ldr	r3, [r3, r2]
 8004418:	789b      	ldrb	r3, [r3, #2]
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b80      	cmp	r3, #128	; 0x80
 800441e:	d940      	bls.n	80044a2 <state_machine+0x636>
			{
				__HAL_I2C_DISABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	229c      	movs	r2, #156	; 0x9c
 8004424:	589b      	ldr	r3, [r3, r2]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681a      	ldr	r2, [r3, #0]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	219c      	movs	r1, #156	; 0x9c
 8004430:	585b      	ldr	r3, [r3, r1]
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	438a      	bics	r2, r1
 800443a:	601a      	str	r2, [r3, #0]
				uint8_t i2c_new_address =  (uint8_t)thisSystem->i2c_line->receiveBuffer[0] & 0x7f;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	229c      	movs	r2, #156	; 0x9c
 8004440:	589b      	ldr	r3, [r3, r2]
 8004442:	789b      	ldrb	r3, [r3, #2]
 8004444:	b2da      	uxtb	r2, r3
 8004446:	200b      	movs	r0, #11
 8004448:	183b      	adds	r3, r7, r0
 800444a:	217f      	movs	r1, #127	; 0x7f
 800444c:	400a      	ands	r2, r1
 800444e:	701a      	strb	r2, [r3, #0]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	229c      	movs	r2, #156	; 0x9c
 8004454:	589b      	ldr	r3, [r3, r2]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	689a      	ldr	r2, [r3, #8]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	219c      	movs	r1, #156	; 0x9c
 8004460:	585b      	ldr	r3, [r3, r1]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4916      	ldr	r1, [pc, #88]	; (80044c0 <state_machine+0x654>)
 8004468:	400a      	ands	r2, r1
 800446a:	609a      	str	r2, [r3, #8]
				thisSystem->i2c_line->I2C_line->Instance->OAR1 = (I2C_OAR1_OA1EN | ( i2c_new_address << 1) );
 800446c:	183b      	adds	r3, r7, r0
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	0019      	movs	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	229c      	movs	r2, #156	; 0x9c
 8004478:	589b      	ldr	r3, [r3, r2]
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2280      	movs	r2, #128	; 0x80
 8004480:	0212      	lsls	r2, r2, #8
 8004482:	430a      	orrs	r2, r1
 8004484:	609a      	str	r2, [r3, #8]
				__HAL_I2C_ENABLE_IT(thisSystem->i2c_line->I2C_line, I2C_IT_RXI | I2C_IT_STOPI | I2C_IT_ADDRI);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	229c      	movs	r2, #156	; 0x9c
 800448a:	589b      	ldr	r3, [r3, r2]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	219c      	movs	r1, #156	; 0x9c
 8004496:	585b      	ldr	r3, [r3, r1]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	212c      	movs	r1, #44	; 0x2c
 800449e:	430a      	orrs	r2, r1
 80044a0:	601a      	str	r2, [r3, #0]
			}
			thisSystem->i2c_line->buffer_index =0;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	229c      	movs	r2, #156	; 0x9c
 80044a6:	589b      	ldr	r3, [r3, r2]
 80044a8:	2200      	movs	r2, #0
 80044aa:	701a      	strb	r2, [r3, #0]
			thisSystem->i2c_line->new_command_is_ready_flag = 0;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	229c      	movs	r2, #156	; 0x9c
 80044b0:	589b      	ldr	r3, [r3, r2]
 80044b2:	2200      	movs	r2, #0
 80044b4:	705a      	strb	r2, [r3, #1]
		if(b_read_permit)
 80044b6:	e4e9      	b.n	8003e8c <state_machine+0x20>
 80044b8:	08004674 	.word	0x08004674
 80044bc:	50000800 	.word	0x50000800
 80044c0:	ffff7fff 	.word	0xffff7fff

080044c4 <__errno>:
 80044c4:	4b01      	ldr	r3, [pc, #4]	; (80044cc <__errno+0x8>)
 80044c6:	6818      	ldr	r0, [r3, #0]
 80044c8:	4770      	bx	lr
 80044ca:	46c0      	nop			; (mov r8, r8)
 80044cc:	2000000c 	.word	0x2000000c

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	2600      	movs	r6, #0
 80044d4:	4d0c      	ldr	r5, [pc, #48]	; (8004508 <__libc_init_array+0x38>)
 80044d6:	4c0d      	ldr	r4, [pc, #52]	; (800450c <__libc_init_array+0x3c>)
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	42a6      	cmp	r6, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	2600      	movs	r6, #0
 80044e2:	f000 f8ad 	bl	8004640 <_init>
 80044e6:	4d0a      	ldr	r5, [pc, #40]	; (8004510 <__libc_init_array+0x40>)
 80044e8:	4c0a      	ldr	r4, [pc, #40]	; (8004514 <__libc_init_array+0x44>)
 80044ea:	1b64      	subs	r4, r4, r5
 80044ec:	10a4      	asrs	r4, r4, #2
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	00b3      	lsls	r3, r6, #2
 80044f6:	58eb      	ldr	r3, [r5, r3]
 80044f8:	4798      	blx	r3
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	00b3      	lsls	r3, r6, #2
 8004500:	58eb      	ldr	r3, [r5, r3]
 8004502:	4798      	blx	r3
 8004504:	3601      	adds	r6, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	080047f8 	.word	0x080047f8
 800450c:	080047f8 	.word	0x080047f8
 8004510:	080047f8 	.word	0x080047f8
 8004514:	080047fc 	.word	0x080047fc

08004518 <malloc>:
 8004518:	b510      	push	{r4, lr}
 800451a:	4b03      	ldr	r3, [pc, #12]	; (8004528 <malloc+0x10>)
 800451c:	0001      	movs	r1, r0
 800451e:	6818      	ldr	r0, [r3, #0]
 8004520:	f000 f80c 	bl	800453c <_malloc_r>
 8004524:	bd10      	pop	{r4, pc}
 8004526:	46c0      	nop			; (mov r8, r8)
 8004528:	2000000c 	.word	0x2000000c

0800452c <memset>:
 800452c:	0003      	movs	r3, r0
 800452e:	1882      	adds	r2, r0, r2
 8004530:	4293      	cmp	r3, r2
 8004532:	d100      	bne.n	8004536 <memset+0xa>
 8004534:	4770      	bx	lr
 8004536:	7019      	strb	r1, [r3, #0]
 8004538:	3301      	adds	r3, #1
 800453a:	e7f9      	b.n	8004530 <memset+0x4>

0800453c <_malloc_r>:
 800453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800453e:	2303      	movs	r3, #3
 8004540:	1ccd      	adds	r5, r1, #3
 8004542:	439d      	bics	r5, r3
 8004544:	3508      	adds	r5, #8
 8004546:	0006      	movs	r6, r0
 8004548:	2d0c      	cmp	r5, #12
 800454a:	d21f      	bcs.n	800458c <_malloc_r+0x50>
 800454c:	250c      	movs	r5, #12
 800454e:	42a9      	cmp	r1, r5
 8004550:	d81e      	bhi.n	8004590 <_malloc_r+0x54>
 8004552:	0030      	movs	r0, r6
 8004554:	f000 f862 	bl	800461c <__malloc_lock>
 8004558:	4925      	ldr	r1, [pc, #148]	; (80045f0 <_malloc_r+0xb4>)
 800455a:	680a      	ldr	r2, [r1, #0]
 800455c:	0014      	movs	r4, r2
 800455e:	2c00      	cmp	r4, #0
 8004560:	d11a      	bne.n	8004598 <_malloc_r+0x5c>
 8004562:	4f24      	ldr	r7, [pc, #144]	; (80045f4 <_malloc_r+0xb8>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <_malloc_r+0x38>
 800456a:	0021      	movs	r1, r4
 800456c:	0030      	movs	r0, r6
 800456e:	f000 f843 	bl	80045f8 <_sbrk_r>
 8004572:	6038      	str	r0, [r7, #0]
 8004574:	0029      	movs	r1, r5
 8004576:	0030      	movs	r0, r6
 8004578:	f000 f83e 	bl	80045f8 <_sbrk_r>
 800457c:	1c43      	adds	r3, r0, #1
 800457e:	d12b      	bne.n	80045d8 <_malloc_r+0x9c>
 8004580:	230c      	movs	r3, #12
 8004582:	0030      	movs	r0, r6
 8004584:	6033      	str	r3, [r6, #0]
 8004586:	f000 f851 	bl	800462c <__malloc_unlock>
 800458a:	e003      	b.n	8004594 <_malloc_r+0x58>
 800458c:	2d00      	cmp	r5, #0
 800458e:	dade      	bge.n	800454e <_malloc_r+0x12>
 8004590:	230c      	movs	r3, #12
 8004592:	6033      	str	r3, [r6, #0]
 8004594:	2000      	movs	r0, #0
 8004596:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	1b5b      	subs	r3, r3, r5
 800459c:	d419      	bmi.n	80045d2 <_malloc_r+0x96>
 800459e:	2b0b      	cmp	r3, #11
 80045a0:	d903      	bls.n	80045aa <_malloc_r+0x6e>
 80045a2:	6023      	str	r3, [r4, #0]
 80045a4:	18e4      	adds	r4, r4, r3
 80045a6:	6025      	str	r5, [r4, #0]
 80045a8:	e003      	b.n	80045b2 <_malloc_r+0x76>
 80045aa:	6863      	ldr	r3, [r4, #4]
 80045ac:	42a2      	cmp	r2, r4
 80045ae:	d10e      	bne.n	80045ce <_malloc_r+0x92>
 80045b0:	600b      	str	r3, [r1, #0]
 80045b2:	0030      	movs	r0, r6
 80045b4:	f000 f83a 	bl	800462c <__malloc_unlock>
 80045b8:	0020      	movs	r0, r4
 80045ba:	2207      	movs	r2, #7
 80045bc:	300b      	adds	r0, #11
 80045be:	1d23      	adds	r3, r4, #4
 80045c0:	4390      	bics	r0, r2
 80045c2:	1ac2      	subs	r2, r0, r3
 80045c4:	4298      	cmp	r0, r3
 80045c6:	d0e6      	beq.n	8004596 <_malloc_r+0x5a>
 80045c8:	1a1b      	subs	r3, r3, r0
 80045ca:	50a3      	str	r3, [r4, r2]
 80045cc:	e7e3      	b.n	8004596 <_malloc_r+0x5a>
 80045ce:	6053      	str	r3, [r2, #4]
 80045d0:	e7ef      	b.n	80045b2 <_malloc_r+0x76>
 80045d2:	0022      	movs	r2, r4
 80045d4:	6864      	ldr	r4, [r4, #4]
 80045d6:	e7c2      	b.n	800455e <_malloc_r+0x22>
 80045d8:	2303      	movs	r3, #3
 80045da:	1cc4      	adds	r4, r0, #3
 80045dc:	439c      	bics	r4, r3
 80045de:	42a0      	cmp	r0, r4
 80045e0:	d0e1      	beq.n	80045a6 <_malloc_r+0x6a>
 80045e2:	1a21      	subs	r1, r4, r0
 80045e4:	0030      	movs	r0, r6
 80045e6:	f000 f807 	bl	80045f8 <_sbrk_r>
 80045ea:	1c43      	adds	r3, r0, #1
 80045ec:	d1db      	bne.n	80045a6 <_malloc_r+0x6a>
 80045ee:	e7c7      	b.n	8004580 <_malloc_r+0x44>
 80045f0:	20000090 	.word	0x20000090
 80045f4:	20000094 	.word	0x20000094

080045f8 <_sbrk_r>:
 80045f8:	2300      	movs	r3, #0
 80045fa:	b570      	push	{r4, r5, r6, lr}
 80045fc:	4d06      	ldr	r5, [pc, #24]	; (8004618 <_sbrk_r+0x20>)
 80045fe:	0004      	movs	r4, r0
 8004600:	0008      	movs	r0, r1
 8004602:	602b      	str	r3, [r5, #0]
 8004604:	f7fc f9b0 	bl	8000968 <_sbrk>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d103      	bne.n	8004614 <_sbrk_r+0x1c>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	2b00      	cmp	r3, #0
 8004610:	d000      	beq.n	8004614 <_sbrk_r+0x1c>
 8004612:	6023      	str	r3, [r4, #0]
 8004614:	bd70      	pop	{r4, r5, r6, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	2000026c 	.word	0x2000026c

0800461c <__malloc_lock>:
 800461c:	b510      	push	{r4, lr}
 800461e:	4802      	ldr	r0, [pc, #8]	; (8004628 <__malloc_lock+0xc>)
 8004620:	f000 f80c 	bl	800463c <__retarget_lock_acquire_recursive>
 8004624:	bd10      	pop	{r4, pc}
 8004626:	46c0      	nop			; (mov r8, r8)
 8004628:	20000274 	.word	0x20000274

0800462c <__malloc_unlock>:
 800462c:	b510      	push	{r4, lr}
 800462e:	4802      	ldr	r0, [pc, #8]	; (8004638 <__malloc_unlock+0xc>)
 8004630:	f000 f805 	bl	800463e <__retarget_lock_release_recursive>
 8004634:	bd10      	pop	{r4, pc}
 8004636:	46c0      	nop			; (mov r8, r8)
 8004638:	20000274 	.word	0x20000274

0800463c <__retarget_lock_acquire_recursive>:
 800463c:	4770      	bx	lr

0800463e <__retarget_lock_release_recursive>:
 800463e:	4770      	bx	lr

08004640 <_init>:
 8004640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004646:	bc08      	pop	{r3}
 8004648:	469e      	mov	lr, r3
 800464a:	4770      	bx	lr

0800464c <_fini>:
 800464c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004652:	bc08      	pop	{r3}
 8004654:	469e      	mov	lr, r3
 8004656:	4770      	bx	lr
